[
    {
        "question": "You want to sell a kind of item in order to maximize your profit. Market research tells you that if you set the price at $1.50, you will be able to sell 5000 items, and for every 10 cents you lower the price below $1.50 you will be able to sell another 1000 items. You can only reduce the price by a multiple of 10 cents. Suppose that your fixed costs ( \u201cstart-up costs\u201d ) total $2000, and the per item cost of production ( \u201cmarginal cost\u201d ) is $0.50. Find the price to set per item and the number of items sold in order to maximize profit, and also determine the maximum profit you can get.",
        "scenario": "## Define Variables:\nYou want to sell a kind of item in order to maximize your profit. Market research tells you that if you set the price at $1.50, you will be able to sell 5000 items, and for every 10 cents you lower the price below $1.50 you will be able to sell another 1000 items. You can only reduce the price by a multiple of 10 cents.\n// variables: {\"number of times the price is reduced by 10 cents\": \"x\"}, where x >= 0 and x is an integer\n\n## Define Objective Function:\nSuppose that your fixed costs ( \u201cstart-up costs\u201d ) total $2000, and the per item cost of production ( \u201cmarginal cost\u201d ) is $0.50. Find the price to set per item and the number of items sold in order to maximize profit, and also determine the maximum profit you can get.\n// The revenue is the product of the price per item and the number of items sold. The number of items sold is 5000 + 1000x\n// So, the revenue is (1.50 - 0.10x)(5000 + 1000x)\n// The cost is the sum of the fixed costs and the product of the marginal cost and the number of items sold. The fixed costs are $2000, and the marginal cost per item is $0.50. So, the cost is 2000 + 0.50(5000 + 1000x)\n// Therefore, the profit is the revenue minus the cost, which is (1.50 - 0.10x)(5000 + 1000x) - 2000 - 0.50(5000 + 1000x)\n// The objective function is: Maximize (1.50 - 0.10x)(5000 + 1000x) - 2000 - 0.50(5000 + 1000x)",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"INTEGER\", name=\"x\", lb=0)  # number of times the price is reduced by 10 cents\n\n# Define objective function\nprofit = model.addVar('profit')\nmodel.setObjective(profit, \"maximize\")\nmodel.addCons(profit == (1.50 - 0.10*x)*(5000 + 1000*x) - 2000 - 0.50*(5000 + 1000*x))\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The number of times the price is reduced by 10 cents:\", model.getVal(x))\n    print(\"The maximum profit you can get: \", model.getVal(profit))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The maximum profit you can get": "3600.0"
        },
        "type": "linear-notable",
        "index": 0,
        "length": 591,
        "var_num": 1
    },
    {
        "scenario": "## Define Variables:\nA logistics company is managing the distribution of three types of goods: GoodsX, GoodsY, and GoodsZ. The company needs to determine the number of trucks allocated to each type of goods and the number of trips per truck for each type of goods will make in the upcoming month. For ease of management, the number of trips per truck is the same for all trucks of the same type of goods. Additionally, the company wants to invest in fuel-efficient upgrades of trucks for each type of goods, which will reduce fuel costs per trip.\n// variables: {\"number of trucks for GoodsX\": \"TrucksX\", \"number of trucks for GoodsY\": \"TrucksY\", \"number of trucks for GoodsZ\": \"TrucksZ\", \"number of trips per truck for GoodsX\": \"TripsX\", \"number of trips per truck for GoodsY\": \"TripsY\", \"number of trips per truck for GoodsZ\": \"TripsZ\", \"investment in fuel efficiency for GoodX\": \"FuelEfficiencyX\", \"investment in fuel efficiency for GoodY\": \"FuelEfficiencyY\", \"investment in fuel efficiency for GoodZ\": \"FuelEfficiencyZ\"}, where TrucksX, TrucksY, TrucksZ, TripsX, TripsY, TripsZ, FuelEfficiencyX, FuelEfficiencyY, FuelEfficiencyZ >= 0 & TrucksX, TrucksY, TrucksZ, TripsX, TripsY, TripsZ are integers, and FuelEfficiencyX, FuelEfficiencyY, FuelEfficiencyZ are continuous.\n\n## Define Objective Function:\nThe fuel cost per trip for each type of goods decreases by $10 for every $10,000 invested in fuel efficiency upgrades for that type of goods. The initial fuel cost per trip for GoodsX is $200, for GoodsY is $250, and for GoodsZ is $300. The revenue generated per trip is $500 for GoodsX, $600 for GoodsY, and $700 for GoodsZ. The company aims to maximize the total profit from all goods.\n// Total profit for GoodsX: ProfitX = (500 - 200 + 0.001 * FuelEfficiencyX) * TrucksX * TripsX\n// Total profit for GoodsY: ProfitY = (600 - 250 + 0.001 * FuelEfficiencyY) * TrucksY * TripsY\n// Total profit for GoodsZ: ProfitZ = (700 - 300 + 0.001 * FuelEfficiencyZ) * TrucksZ * TripsZ\n// So, the objective function is: Maximize (ProfitX + ProfitY + ProfitZ)\n\n## Generate Constraint-1:\nThe company has a total of 50 trucks available for the month.\n// TrucksX + TrucksY + TrucksZ <= 50\n\n## Generate Constraint-2:\nThe total investment in fuel efficiency upgrades cannot exceed $60,000.\n// FuelEfficiencyX + FuelEfficiencyY + FuelEfficiencyZ <= 60000\n\n## Generate Constraint-3:\nDue to operational constraints, each truck can make no more than 20 trips in the month.\n// TripsX <= 20; TripsY <= 20; TripsZ <= 20\n\n## Generate Constraint-4:\nThe company must ensure that at least 10 trucks are allocated to GoodsX and 15 trucks to GoodsY.\n// TrucksX >= 10; TrucksY >= 15",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nTrucksX = model.addVar(vtype=\"INTEGER\", name=\"TrucksX\") # number of trucks for GoodsX\nmodel.addCons(TrucksX >= 0)\nTrucksY = model.addVar(vtype=\"INTEGER\", name=\"TrucksY\") # number of trucks for GoodsY\nmodel.addCons(TrucksY >= 0)\nTrucksZ = model.addVar(vtype=\"INTEGER\", name=\"TrucksZ\") # number of trucks for GoodsZ\nmodel.addCons(TrucksZ >= 0)\nTripsX = model.addVar(vtype=\"INTEGER\", name=\"TripsX\") # number of trips per truck for GoodsX\nmodel.addCons(TripsX >= 0)\nTripsY = model.addVar(vtype=\"INTEGER\", name=\"TripsY\") # number of trips per truck for GoodsY\nmodel.addCons(TripsY >= 0)\nTripsZ = model.addVar(vtype=\"INTEGER\", name=\"TripsZ\") # number of trips per truck for GoodsZ\nmodel.addCons(TripsZ >= 0)\nFuelEfficiencyX = model.addVar(vtype=\"CONTINUOUS\", name=\"FuelEfficiencyX\") # investment in fuel efficiency for GoodsX\nmodel.addCons(FuelEfficiencyX >= 0)\nFuelEfficiencyY = model.addVar(vtype=\"CONTINUOUS\", name=\"FuelEfficiencyY\") # investment in fuel efficiency for GoodsY\nmodel.addCons(FuelEfficiencyY >= 0)\nFuelEfficiencyZ = model.addVar(vtype=\"CONTINUOUS\", name=\"FuelEfficiencyZ\") # investment in fuel efficiency for GoodsZ\nmodel.addCons(FuelEfficiencyZ >= 0)\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == (500 - 200 + 0.001 * FuelEfficiencyX) * TrucksX * TripsX + (600 - 250 + 0.001 * FuelEfficiencyY) * TrucksY * TripsY + (700 - 300 + 0.001 * FuelEfficiencyZ) * TrucksZ * TripsZ)\n\n# Add constraints\nmodel.addCons(TrucksX + TrucksY + TrucksZ <= 50)\nmodel.addCons(FuelEfficiencyX + FuelEfficiencyY + FuelEfficiencyZ <= 60000)\nmodel.addCons(TripsX <= 20)\nmodel.addCons(TripsY <= 20)\nmodel.addCons(TripsZ <= 20)\nmodel.addCons(TrucksX >= 10)\nmodel.addCons(TrucksY >= 15)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Trucks for GoodsX: \", model.getVal(TrucksX))\n    print(\"Number of Trucks for GoodsY: \", model.getVal(TrucksY))\n    print(\"Number of Trucks for GoodsZ: \", model.getVal(TrucksZ))\n    print(\"Number of Trips per Truck for GoodsX: \", model.getVal(TripsX))\n    print(\"Number of Trips per Truck for GoodsY: \", model.getVal(TripsY))\n    print(\"Number of Trips per Truck for GoodsZ: \", model.getVal(TripsZ))\n    print(\"Investment in Fuel Efficiency for GoodsX: \", model.getVal(FuelEfficiencyX))\n    print(\"Investment in Fuel Efficiency for GoodsY: \", model.getVal(FuelEfficiencyY))\n    print(\"Investment in Fuel Efficiency for GoodsZ: \", model.getVal(FuelEfficiencyZ))\n    print(\"Total Profit: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Trucks for GoodsX": "10.0",
            "Number of Trucks for GoodsY": "15.0",
            "Number of Trucks for GoodsZ": "25.0",
            "Number of Trips per Truck for GoodsX": "20.0",
            "Number of Trips per Truck for GoodsY": "20.0",
            "Number of Trips per Truck for GoodsZ": "20.0",
            "Investment in Fuel Efficiency for GoodsX": "0.0",
            "Investment in Fuel Efficiency for GoodsY": "0.0",
            "Investment in Fuel Efficiency for GoodsZ": "60000.0",
            "Total Profit": "395000.0"
        },
        "question": "A logistics company is managing the distribution of three types of goods: GoodsX, GoodsY, and GoodsZ. The company needs to determine the number of trucks allocated to each type of goods and the number of trips per truck for each type of goods will make in the upcoming month. For ease of management, the number of trips per truck is the same for all trucks of the same type of goods. Additionally, the company wants to invest in fuel-efficient upgrades of trucks for each type of goods, which will reduce fuel costs per trip. The company has a total of 50 trucks available for the month. The total investment in fuel efficiency upgrades cannot exceed $60,000. Due to operational constraints, each truck can make no more than 20 trips in the month. The company must ensure that at least 10 trucks are allocated to GoodsX and 15 trucks to GoodsY. The fuel cost per trip for each type of goods decreases by $10 for every $10,000 invested in fuel efficiency upgrades for that type of goods. The initial fuel cost per trip for GoodsX is $200, for GoodsY is $250, and for GoodsZ is $300. The revenue generated per trip is $500 for GoodsX, $600 for GoodsY, and $700 for GoodsZ. The company aims to maximize the total profit from all goods.",
        "type": "nonlinear-notable",
        "index": 1,
        "length": 1232,
        "var_num": 9
    },
    {
        "question": "There are two ways to extract a metal from mined ores. The first way is to use process J and the second is process P. Process J can extract 5 units of metal using 8 units of water and produces 3 units of pollution. Process P can extract 9 units of metal using 6 units of water and produces 5 units of pollution. There can be at most 1500 units of water 1350 units of pollution. How many of each type of processes should be performed to maximize the amount of metal extracted?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_process_j = LpVariable(\"NumProcessJ\", lowBound=0, cat='Integer') # number of process J\nnum_process_p = LpVariable(\"NumProcessP\", lowBound=0, cat='Integer') # number of process P\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MetalExtraction\", LpMaximize)\n\n# Define the objective function\nobjective = 5 * num_process_j + 9 * num_process_p\nproblem += objective # maximize the total metal extracted\n\n# Define the constraints\nproblem += 8 * num_process_j + 6 * num_process_p <= 1500 # the total water usage must be at most 1500 units\nproblem += 3 * num_process_j + 5 * num_process_p <= 1350 # the total pollution produced must be at most 1350 units\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of Process J:\", num_process_j.value())\nprint(\"The number of Process P:\", num_process_p.value())\nprint(\"The total metal extracted:\", objective.value())",
        "results": {
            "The number of Process J": "0.0",
            "The number of Process P": "250.0",
            "The total metal extracted": "2250.0"
        },
        "formulation": "maximize 5x+9y\nSubject to: \n8x+6y <= 1500\n3x+5y <= 1350 (end)",
        "type": "linear-notable",
        "index": 2,
        "length": 475,
        "var_num": 2
    },
    {
        "question": "A rectangular garden is to be constructed using a rock wall as one side of the garden and wire fencing for the other three sides. Given 100ft of wire fencing, determine the dimensions that would create a garden of maximum area. What is the maximum area?",
        "scenario": "## Define Variables:\nYou need to construct a rectangular garden.\n// variables: {\"length of the garden\": \"L\", \"width of the garden\": \"W\"}, where L, W >= 0\n\n## Define Objective Function:\nYou want to maximize the area of the garden.\n// The area of the garden is given by the product of the length and the width. Therefore, the objective function is: Maximize L * W\n\n## Generate Constraint-1:\nYou want to enclose a garden with three sides of fencing and the house as the fourth side. You have 100 feet of fencing material.\n// L + 2W <= 100",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nL = model.addVar(vtype=\"CONTINUOUS\", name=\"L\") # length of the garden\nW = model.addVar(vtype=\"CONTINUOUS\", name=\"W\") # width of the garden\n\n# Define objective function\nobj = model.addVar(vtype=\"CONTINUOUS\", name=\"obj\")\nmodel.addCons(obj == L * W)\nmodel.setObjective(obj, \"maximize\")\n\n# Add constraints\nmodel.addCons(L + 2*W <= 100)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The length of the garden:\", model.getVal(L))\n    print(\"The width of the garden:\", model.getVal(W))\n    print(\"The maximum area of the garden: \", model.getVal(L * W))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The length of the garden": "50.000",
            "The width of the garden": "25.000",
            "The maximum area of the garden": "1250.00"
        },
        "type": "nonlinear-notable",
        "index": 3,
        "length": 253,
        "var_num": 2
    },
    {
        "question": "There are six cities (cities 1-6) in Kilroy County. The county must determine where to build fire stations. The county wants to build the minimum number of fire stations needed to ensure that at least one fire station is within 15 minutes (driving time) of each city. The times (in minutes) required to drive between the cities in Kilroy County are shown in Table 6: \nTime Required to Travel between Cities in Kilroy County, \nFrom City 1 to ctiy 1-6 are 0 10 20 30 30 20; \nFrom City 2 to ctiy 1-6 are 10 0 25 35 20 10;  \nFrom City 3 to ctiy 1-6 are 20 25 0 15 30 20; \nFrom City 4 to ctiy 1-6 are 30 35 15 0 15 25; \nFrom City 5 to ctiy 1-6 are 30 20 30 15 0 14; \nFrom City 5 to ctiy 1-6 are 20 10 20 25 14 0. \nFormulate an linear problem that will tell Kilroy how many fire stations should be built and where they should be located.",
        "formulation": "# Define Variables:\nWe need to determine whether a fire station should be built in each city. Let's denote the decision variables as follows:\n```Variables\nx_i = 0 or 1, i = 1, 2, 3, 4, 5, 6 // Binary variable ,Represents whether a fire station should be built in City i\n```\nwhere i represents the city number. For example, x1 represents whether a fire station should be built in City 1. If x1=1, it means a fire station should be built in City 1. If x1=0, it means no fire station should be built in City 1.\n\n# Objective Function:\nWe want to minimize the number of fire stations built while ensuring that each city has at least one fire station within a 15-minute driving distance. Therefore, the objective function is:\n```Objective Function\nMinimize: x1 + x2 + x3 + x4 + x5 + x6\n```\n\n# Constraints:\nNext, we need to formulate the constraints that ensure each city is within 15 minutes of at least one fire station. This can be done by looking at each city individually and considering the travel times to all other cities. \nFor example, for city 1, the time required to travel to ctiy 1-6 are 0 10 20 30 30 20. So, only city 2 is within 15 minutes of city 1. Therefore, we need to ensure that either city 1 or city 2 has a fire station. This can be expressed as:\nx1 + x2 >= 1\nSimilarly, for city 2, the time required to travel to ctiy 1-6 are 10 0 25 35 20 10. So, only city 1 and city 6 are within 15 minutes of city 2. Therefore, we need to ensure that either city 1, city 2, or city 6 has a fire station. This can be expressed as:\nx1 + x2 + x6 >= 1\nSimilarly, for city 3, the time required to travel to ctiy 1-6 are 20 25 0 15 30 20. So, only city 4 is within 15 minutes of city 3. Therefore, we need to ensure that either city 3 or city 4 has a fire station. This can be expressed as:\nx3 + x4 >= 1\nSimilarly, for city 4, the time required to travel to ctiy 1-6 are 30 35 15 0 15 25. So, only city 3, city 4, and city 5 are within 15 minutes of city 4. Therefore, we need to ensure that either city 3, city 4, or city 5 has a fire station. This can be expressed as:\nx3 + x4 + x5 >= 1\nSimilarly, for city 5, the time required to travel to ctiy 1-6 are 30 20 30 15 0 14. So, only city 4, city 5, and city 6 are within 15 minutes of city 5. Therefore, we need to ensure that either city 4, city 5, or city 6 has a fire station. This can be expressed as:\nx4 + x5 + x6 >= 1\nSimilarly, for city 6, the time required to travel to ctiy 1-6 are 20 10 20 25 14 0. So, only city 2, city 5, and city 6 are within 15 minutes of city 6. Therefore, we need to ensure that either city 2, city 5, or city 6 has a fire station. This can be expressed as:\nx2 + x5 + x6 >= 1\nPutting it all together, we get the following linear programming problem:\n```Constraints\nx1 + x2 >= 1\nx1 + x2 + x6 >= 1\nx3 + x4 >= 1\nx3 + x4 + x5 >= 1\nx4 + x5 + x6 >= 1\nx2 + x5 + x6 >= 1\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx1 = LpVariable(\"x1\", cat='Binary')\nx2 = LpVariable(\"x2\", cat='Binary')\nx3 = LpVariable(\"x3\", cat='Binary')\nx4 = LpVariable(\"x4\", cat='Binary')\nx5 = LpVariable(\"x5\", cat='Binary')\nx6 = LpVariable(\"x6\", cat='Binary')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FireStationLocation\", LpMinimize)\n\n# Define the objective function\nproblem += x1 + x2 + x3 + x4 + x5 + x6\n\n# Define the constraints\nproblem += x1 + x2 >= 1\nproblem += x1 + x2 + x6 >= 1\nproblem += x3 + x4 >= 1\nproblem += x3 + x4 + x5 >= 1\nproblem += x4 + x5 + x6 >= 1\nproblem += x2 + x5 + x6 >= 1\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The optimal number of fire stations to be built is:\", value(problem.objective))\nprint(\"Locations for fire stations:\")\nprint(\"City 1:\", x1.value())\nprint(\"City 2:\", x2.value())\nprint(\"City 3:\", x3.value())\nprint(\"City 4:\", x4.value())\nprint(\"City 5:\", x5.value())\nprint(\"City 6:\", x6.value())\n",
        "results": {
            "The optimal number of fire stations to be built is": "2.0",
            "Whether a fire stations should be built in City 1": "0.0",
            "Whether a fire stations should be built in City 2": "1.0",
            "Whether a fire stations should be built in City 3": "0.0",
            "Whether a fire stations should be built in City 4": "1.0",
            "Whether a fire stations should be built in City 5": "0.0",
            "Whether a fire stations should be built in City 6": "0.0"
        },
        "type": "linear-table",
        "index": 4,
        "length": 831,
        "var_num": 7
    },
    {
        "question": "A milk tea shop has 50000 ml of milk to make two milk teas: black milk tea and green milk tea. A bottle of black milk tea contains 300 ml of milk while a bottle of green milk tea has 200 ml of milk. The shop knows that they need to make at least three times the number of bottles of black milk tea than green milk tea. They also know that they need to make at least 10 bottles of green milk tea. Each bottle of black milk tea is sold for a profit of $2.5 and each bottle of green milk tea is sold for a profit of $7. How many of each type of milk tea needs to be made in order to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of bottles of black milk tea\", \"name\": \"x\"}, {\"description\": \"number of bottles of green milk tea\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit from selling milk tea\", \"function\": \"2.5x + 7y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"milk usage constraint\", \"function\": \"300x + 200y <= 50000\"}, {\"description\": \"black milk tea bottles must be at least three times the green milk tea bottles\", \"function\": \"x >= 3y\"}, {\"description\": \"at least 10 bottles of green milk tea must be made\", \"function\": \"y >= 10\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_black_milk_tea = LpVariable(\"NumBlackMilkTea\", lowBound=0, cat='Integer') # number of bottles of black milk tea\nnum_green_milk_tea = LpVariable(\"NumGreenMilkTea\", lowBound=10, cat='Integer') # number of bottles of green milk tea\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MilkTeaProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 2.5 * num_black_milk_tea + 7 * num_green_milk_tea\nproblem += objective # maximize the total profit from selling milk tea\n\n# Define the constraints\nproblem += 300 * num_black_milk_tea + 200 * num_green_milk_tea <= 50000 # milk usage constraint\nproblem += num_black_milk_tea >= 3 * num_green_milk_tea # black milk tea bottles must be at least three times the green milk tea bottles\nproblem += num_green_milk_tea >= 10 # at least 10 bottles of green milk tea must be made\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of bottles of black milk tea:\", num_black_milk_tea.value())\nprint(\"The number of bottles of green milk tea:\", num_green_milk_tea.value())\nprint(\"Total profit:\", objective.value())\n",
        "results": {
            "The number of bottles of black milk tea": "136.0",
            "The number of bottles of green milk tea": "45.0",
            "Total profit": "655.0"
        },
        "type": "linear-notable",
        "index": 5,
        "length": 596,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA logistics company is managing the distribution of three types of goods: GoodsX, GoodsY, and GoodsZ. The company needs to decide how many trucks to allocate for each type of good to optimize delivery efficiency and minimize costs. Additionally, the company can invest in route optimization software to reduce travel time and fuel consumption, which affects the cost and efficiency of each delivery.\n// variables: {\"number of trucks for GoodsX\": \"TrucksX\", \"number of trucks for GoodsY\": \"TrucksY\", \"number of trucks for GoodsZ\": \"TrucksZ\", \"investment in route optimization for GoodsX\": \"OptimizationX\", \"investment in route optimization for GoodsY\": \"OptimizationY\", \"investment in route optimization for GoodsZ\": \"OptimizationZ\"}, where TrucksX, TrucksY, TrucksZ >= 0 & TrucksX, TrucksY, TrucksZ are integers, and OptimizationX, OptimizationY, OptimizationZ are continuous.\n\n## Define Objective Function:\nThe reduction in delivery costs is linearly proportional to the amount of investment in route optimization software for each type of good.\nThe initial cost per truck for GoodsX is $1,000, but with optimization, the cost decreases by $10 for every $100 invested in optimization. \nThe initial cost per truck for GoodsY is $1,200, and with optimization, the cost decreases by $12 for every $100 invested in optimization. \nThe initial cost per truck for GoodsZ is $1,500, and with optimization, the cost decreases by $15 for every $100 invested in optimization. \nThe company aims to minimize the total delivery cost for all goods.\n// Total cost for GoodsX: CostX = (1000 - 0.1 * OptimizationX) * TrucksX\n// Total cost for GoodsY: CostY = (1200 - 0.12 * OptimizationY) * TrucksY\n// Total cost for GoodsZ: CostZ = (1500 - 0.15 * OptimizationZ) * TrucksZ\n// So, the objective function is: Minimize (CostX + CostY + CostZ)\n\n## Generate Constraint-1:\nThe company has a total of 50 trucks available for allocation.\n// TrucksX + TrucksY + TrucksZ <= 50\n\n## Generate Constraint-2:\nThe budget for route optimization software is $10,000.\n// OptimizationX + OptimizationY + OptimizationZ <= 10000\n\n## Generate Constraint-3:\nDue to contractual obligations, the company must allocate at least 10 trucks for GoodsX and 15 trucks for GoodsY.\n// TrucksX >= 10; TrucksY >= 15\n\n## Generate Constraint-4:\nThe company wants to ensure that the total investment in optimization does not exceed the total cost savings from using the software.\n// 0.1 * OptimizationX * TrucksX + 0.12 * OptimizationY * TrucksY + 0.15 * OptimizationZ * TrucksZ <= OptimizationX + OptimizationY + OptimizationZ",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nTrucksX = model.addVar(vtype=\"INTEGER\", name=\"TrucksX\") # number of trucks for GoodsX\nmodel.addCons(TrucksX >= 0)\nTrucksY = model.addVar(vtype=\"INTEGER\", name=\"TrucksY\") # number of trucks for GoodsY\nmodel.addCons(TrucksY >= 0)\nTrucksZ = model.addVar(vtype=\"INTEGER\", name=\"TrucksZ\") # number of trucks for GoodsZ\nmodel.addCons(TrucksZ >= 0)\nOptimizationX = model.addVar(name=\"OptimizationX\") # investment in route optimization for GoodsX\nmodel.addCons(OptimizationX >= 0)\nOptimizationY = model.addVar(name=\"OptimizationY\") # investment in route optimization for GoodsY\nmodel.addCons(OptimizationY >= 0)\nOptimizationZ = model.addVar(name=\"OptimizationZ\") # investment in route optimization for GoodsZ\nmodel.addCons(OptimizationZ >= 0)\n\n# Define objective function\nCostX = (1000 - 0.1 * OptimizationX) * TrucksX\nCostY = (1200 - 0.12 * OptimizationY) * TrucksY\nCostZ = (1500 - 0.15 * OptimizationZ) * TrucksZ\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nmodel.addCons(obj == CostX + CostY + CostZ)\n\n# Add constraints\nmodel.addCons(TrucksX + TrucksY + TrucksZ <= 50)\nmodel.addCons(OptimizationX + OptimizationY + OptimizationZ <= 10000)\nmodel.addCons(TrucksX >= 10)\nmodel.addCons(TrucksY >= 15)\nmodel.addCons(0.1 * OptimizationX * TrucksX + 0.12 * OptimizationY * TrucksY + 0.15 * OptimizationZ * TrucksZ <= OptimizationX + OptimizationY + OptimizationZ)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Trucks for GoodsX: \", model.getVal(TrucksX))\n    print(\"Number of Trucks for GoodsY: \", model.getVal(TrucksY))\n    print(\"Number of Trucks for GoodsZ: \", model.getVal(TrucksZ))\n    print(\"Investment in Optimization for GoodsX: \", model.getVal(OptimizationX))\n    print(\"Investment in Optimization for GoodsY: \", model.getVal(OptimizationY))\n    print(\"Investment in Optimization for GoodsZ: \", model.getVal(OptimizationZ))\n    print(\"Total Cost: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Trucks for GoodsX": "10.0",
            "Number of Trucks for GoodsY": "15.0",
            "Number of Trucks for GoodsZ": "0.0",
            "Investment in Optimization for GoodsX": "10000.0",
            "Investment in Optimization for GoodsY": "0.0",
            "Investment in Optimization for GoodsZ": "0.0",
            "Total Cost": "18000.0"
        },
        "question": "A logistics company is managing the distribution of three types of goods: GoodsX, GoodsY, and GoodsZ. The company needs to decide how many trucks to allocate for each type of good and how much to invest in route optimization software to optimize delivery efficiency and minimize costs. The relationship between investment in optimization and cost reduction for each type of good is given in the following Table.\n\n| Goods | Initial Cost per Truck | Cost Reduction per $100 Investment |\n|-------|------------------------|-----------------------------------|\n| GoodsX | $1,000                 | $10                               |\n| GoodsY | $1,200                 | $12                               |\n| GoodsZ | $1,500                 | $15                               |\n\nThe company has a total of 50 trucks available for allocation. The budget for route optimization software is $10,000. Due to contractual obligations, the company must allocate at least 10 trucks for GoodsX and 15 trucks for GoodsY. The company wants to ensure that the total investment in optimization does not exceed the total cost savings from using the software. The company aims to minimize the total delivery cost for all goods.\n",
        "type": "nonlinear-table",
        "index": 6,
        "length": 1206,
        "var_num": 6
    },
    {
        "question": "Jacob has $3000 to invest. He has decided to invest in his favorite clothing company and his favorite tech company. He has decided that the money invested in his favorite clothing company must be at least four times as much as the amount invested in his favorite tech company. He has also limited himself to invest at most $500 in his favorite tech company. If the money invested in his favorite clothing company earns 7% and the money invested in his favorite tech company earns 10%, how much should he invest in each to maximize his profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nclothing_investment = LpVariable(\"ClothingInvestment\", lowBound=0) # money invested in clothing company\ntech_investment = LpVariable(\"TechInvestment\", lowBound=0) # money invested in tech company\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"InvestmentPlan\", LpMaximize)\n\n# Define the objective function\nobjective = 0.07 * clothing_investment + 0.10 * tech_investment\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += clothing_investment + tech_investment <= 3000 # total investment should be less or equal to $3000\nproblem += clothing_investment >= 4 * tech_investment # money invested in clothing must be at least four times the money invested in tech\nproblem += tech_investment <= 500 # maximum $500 investment in tech\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Money invested in clothing company:\", clothing_investment.value())\nprint(\"Money invested in tech company:\", tech_investment.value())\nprint(\"Total profit:\", objective.value())",
        "results": {
            "Money invested in clothing company": "2500.0",
            "Money invested in tech company": "500.0",
            "Total profit": "225.0000"
        },
        "formulation": "maximize 7%x+10%y\nSubject to: \nx+y <= 3000\nx >= 4y\ny <= 500 (end)",
        "type": "linear-notable",
        "index": 7,
        "length": 542,
        "var_num": 2
    },
    {
        "question": "Of all rectangles of area 100, which has the smallest perimeter?",
        "scenario": "## Define Variables:\nYou need to find a rectangle.\n// variables: {\"length of the rectangle\": \"L\", \"width of the rectangle\": \"W\"}, where L, W >= 0\n\n## Define Objective Function:\nPlease provide the dimensions of the rectangle that minimizes the perimeter.\n// The perimeter of the rectangle is given by 2L + 2W. Therefore, the objective function is: Minimize 2L + 2W\n\n## Generate Constraint-1:\nThe area of the rectangle is 100.\n// L * W = 100",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nL = model.addVar(vtype=\"CONTINUOUS\", name=\"L\") # length of the rectangle\nW = model.addVar(vtype=\"CONTINUOUS\", name=\"W\") # width of the rectangle\n\n# Define objective function\nmodel.setObjective(2*L + 2*W, \"minimize\")\n\n# Add constraints\nmodel.addCons(L * W == 100)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The length of the rectangle:\", model.getVal(L))\n    print(\"The width of the rectangle:\", model.getVal(W))\n    print(\"The perimeter of the rectangle: \", 2*model.getVal(L) + 2*model.getVal(W))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The length of the rectangle": "10.00",
            "The width of the rectangle": "10.0",
            "The perimeter of the rectangle": "40.00"
        },
        "type": "nonlinear-notable",
        "index": 8,
        "length": 64,
        "var_num": 2
    },
    {
        "question": "A golf course is hosting an event and can transport guests using either golf carts or pull carts. A golf cart can take 4 guests while a pull cart can take 1 guest. Since golf carts take up a lot of space, at most 60% of carts can be golf carts. If the golf course needs to transport at least 80 guests, how many of each cart should be used to minimize the total number of carts needed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_golf_carts = LpVariable(\"NumGolfCarts\", lowBound=0, cat='Integer')  # number of golf carts\nnum_pull_carts = LpVariable(\"NumPullCarts\", lowBound=0, cat='Integer')  # number of pull carts\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimizeCarts\", LpMinimize)\n\n# Define the objective function\nobjective = num_golf_carts + num_pull_carts\nproblem += objective  # minimize the total number of carts\n\n# Define the constraints\nproblem += 4 * num_golf_carts + num_pull_carts >= 80  # at least 80 guests must be transported\nproblem += num_golf_carts <= 0.6 * (num_golf_carts + num_pull_carts)  # at most 60% of carts can be golf carts\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of golf carts to use:\", num_golf_carts.value())\nprint(\"The number of pull carts to use:\", num_pull_carts.value())\nprint(\"The total number of carts used:\", objective.value())",
        "results": {
            "The number of golf carts to use": "17.0",
            "The number of pull carts to use": "12.0",
            "The total number of carts used": "29.0"
        },
        "formulation": "minimize x+y\nSubject to: \nx <= 60(x+y)\n4x+1y >= 80 (end)",
        "type": "linear-notable",
        "index": 9,
        "length": 385,
        "var_num": 2
    },
    {
        "question": "To graduate from Basketweavers University with a major in operations research, a student must complete at least two math courses, at least two OR courses, and at least two computer courses. Some courses can be used to fulfill more than one requirement: Calculus can fulfill the math requirement; operations research, math and OR requirements; data structures, computer and math requirements; business statistics, math and OR requirements; computer simulation, OR and computer requirements; introduction to computer programming, computer requirement; and forecasting, OR and math requirements. Some courses are prerequisites for others: Calculus is a prerequisite for business statistics; introduction to computer programming is a prerequisite for computer simulation and for data structures; and business statistics is a prerequisite for forecasting. Minimizes the number of courses needed to satisfy the major requirements.",
        "formulation": "# Define Variables:\nTo formulate the LP, we need to define binary variables to represent whether each course is selected or not. Let's denote the variable for course i as xi.\n```Variables\nx1 // Calculus\nx2 // Operations Research\nx3 // Data Structures\nx4 // Business Statistics\nx5 // Computer Simulation\nx6 // Introduction to Computer Programming\nx7 // Forecasting\nx1, x2, x3, x4, x5, x6, x7 = 0 or 1 // Binary variables\n```\n\n# Objective Function:\nWe want to minimize the number of courses needed to satisfy the major requirements. Since each selected course contributes 1 to the total number of courses needed, the objective function is simply the sum of all the selected courses.\n```Objective Function\nMinimize: x1 + x2 + x3 + x4 + x5 + x6 + x7\n```\n\n# Constraints:\nWe have several constraints to ensure that the minimum requirements for each category are met and that the prerequisites are satisfied.\n```Constraints\nx1 + x2 + x3 + x4 + x7 >= 2 // Minimum number of math courses\nx2 + x4 + x5 + x7 >= 2 // Minimum number of OR courses\nx3 + x5 + x6 >= 2 // Minimum number of computer courses\nx1 >= x4 // Calculus is a prerequisite for business statistics\nx6 >= x5 // Introduction to computer programming is a prerequisite for computer simulation\nx6 >= x3 // Introduction to computer programming is a prerequisite for data structures\nx4 >= x7 // Business statistics is a prerequisite for forecasting\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx1 = LpVariable(\"Calculus\", cat='Binary')\nx2 = LpVariable(\"Operations_Research\", cat='Binary')\nx3 = LpVariable(\"Data_Structures\", cat='Binary')\nx4 = LpVariable(\"Business_Statistics\", cat='Binary')\nx5 = LpVariable(\"Computer_Simulation\", cat='Binary')\nx6 = LpVariable(\"Intro_to_Computer_Programming\", cat='Binary')\nx7 = LpVariable(\"Forecasting\", cat='Binary')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"Course_Selection\", LpMinimize)\n\n# Define the objective function\nproblem += x1 + x2 + x3 + x4 + x5 + x6 + x7\n\n# Define the constraints\nproblem += x1 + x2 + x3 + x4 + x7 >= 2 # Minimum number of math courses\nproblem += x2 + x4 + x5 + x7 >= 2 # Minimum number of OR courses\nproblem += x3 + x5 + x6 >= 2 # Minimum number of computer courses\nproblem += x1 >= x4 # Calculus is a prerequisite for business statistics\nproblem += x6 >= x5 # Introduction to computer programming is a prerequisite for computer simulation\nproblem += x6 >= x3 # Introduction to computer programming is a prerequisite for data structures\nproblem += x4 >= x7 # Business statistics is a prerequisite for forecasting\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The selected courses are:\")\nprint(\"Calculus:\", x1.value())\nprint(\"Operations Research:\", x2.value())\nprint(\"Data Structures:\", x3.value())\nprint(\"Business Statistics:\", x4.value())\nprint(\"Computer Simulation:\", x5.value())\nprint(\"Introduction to Computer Programming:\", x6.value())\nprint(\"Forecasting:\", x7.value())\nprint(\"The minimum number of courses needed:\", value(problem.objective))\n",
        "results": {
            "Calculus": "0.0",
            "Operations Research": "1.0",
            "Data Structures": "1.0",
            "Business Statistics": "0.0",
            "Computer Simulation": "1.0",
            "Introduction to Computer Programming": "1.0",
            "Forecasting": "0.0",
            "The minimum number of courses needed": "4.0"
        },
        "type": "linear-notable",
        "index": 10,
        "length": 924,
        "var_num": 8
    },
    {
        "question": "A man on a strict diet only drinks meal replacement drinks from two brands, alpha and omega. The alpha brand drink contains 30 grams of protein, 20 grams of sugar, and 350 calories per bottle. The omega brand drink contains 20 grams of protein, 15 grams of sugar, and 300 calories per bottle. The man wants to get at least 100 grams of protein and 2000 calories. In addition, because the omega brand drink contains tiny amounts of caffeine, at most 35% of the drink should be omega brand. How many bottles of each should he drink to minimize his sugar intake?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nalpha_bottles = LpVariable(\"AlphaBottles\", lowBound=0, cat='Integer') # number of alpha brand bottles\nomega_bottles = LpVariable(\"OmegaBottles\", lowBound=0, cat='Integer') # number of omega brand bottles\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DietOptimization\", LpMinimize)\n\n# Define the objective function\nobjective = 20 * alpha_bottles + 15 * omega_bottles\nproblem += objective # minimize the total sugar intake\n\n# Define the constraints\nproblem += 30 * alpha_bottles + 20 * omega_bottles >= 100 # at least 100 grams of protein\nproblem += 350 * alpha_bottles + 300 * omega_bottles >= 2000 # at least 2000 calories\nproblem += omega_bottles <= (alpha_bottles + omega_bottles) * 0.35 # at most 35% omega\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of alpha brand bottles:\", alpha_bottles.value())\nprint(\"The number of omega brand bottles:\", omega_bottles.value())\nprint(\"The total sugar intake:\", objective.value())",
        "results": {
            "The number of alpha brand bottles": "4.0",
            "The number of omega brand bottles": "2.0",
            "The total sugar intake": "110.0"
        },
        "formulation": "minimize 20x+15y\nSubject to: \n30x+20y >= 100\n350x+300y >= 2000\ny <= 0.35(x+y) (end)",
        "type": "linear-notable",
        "index": 11,
        "length": 559,
        "var_num": 2
    },
    {
        "question": "A fashion company sells regular handbags and premium handbags made of higher quality material. They can sell regular handbags at a profit of $30 each and premium handbags at a profit of $180 each. The total monthly cost of manufacturing is $200 per regular handbag and $447 per premium handbag. The company has a total budget of $250000 and can sell at most 475 handbags of either type per month. How many of each handbag should they sell to maximize its monthly profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_regular_handbags = LpVariable(\"NumRegularHandbags\", lowBound=0, cat='Integer') # number of regular handbags\nnum_premium_handbags = LpVariable(\"NumPremiumHandbags\", lowBound=0, cat='Integer') # number of premium handbags\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FashionCompanyProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 30 * num_regular_handbags + 180 * num_premium_handbags\nproblem += objective # maximize the monthly profit\n\n# Define the constraints\nproblem += 200 * num_regular_handbags + 447 * num_premium_handbags <= 250000 # the cost of manufacturing must be within the budget\nproblem += num_regular_handbags + num_premium_handbags <= 475 # the company can sell at most 475 handbags of either type per month\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of regular handbags:\", num_regular_handbags.value())\nprint(\"The number of premium handbags:\", num_premium_handbags.value())\nprint(\"The monthly profit:\", objective.value())",
        "results": {
            "The number of regular handbags": "0.0",
            "The number of premium handbags": "475.0",
            "The monthly profit": "85500.0"
        },
        "formulation": "maximize 30x+180y\nSubject to: \n447y+200x <= 250000\nx+y <= 475 (end)",
        "type": "linear-notable",
        "index": 12,
        "length": 470,
        "var_num": 2
    },
    {
        "question": "A man is trapped in a swamp at the location: (3/4,0). The swamp is a curve that y >= x^2, and x >= 0. The rescue team must stay as close to him as possible so that they can pass a rope to him. Find the BEST LOCATION of the rope required to rescue him.",
        "scenario": "## Define Variables:\nA man is trapped in a swamp at the location: (3/4,0). The rescue team must stay as close to him as possible so that they can pass a rope to him.\n// variables: {\"x-coordinate of the rescue team\": \"x\", \"y-coordinate of the rescue team\": \"y\"}, where x, y are real numbers\n\n## Define Objective Function:\nFind the BEST LOCATION of the length of the rope required to rescue him.\n// The length of the rope required to rescue him is the Euclidean distance between the rescue team and him, which is sqrt((x - 3/4)^2 + y^2).\n// So, the objective function is: Minimize sqrt((x - 3/4)^2 + y^2)\n\n## Generate Constraint-1:\nNote that the rescue team cannot enter the swamp, so the range of its motion is constrained by a curve y >= x^2, and x >= 0.\n// y >= x^2, x >= 0",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"CONTINUOUS\", name=\"x\") # x-coordinate of the rescue team\ny = model.addVar(vtype=\"CONTINUOUS\", name=\"y\") # y-coordinate of the rescue team\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nmodel.addCons(obj == ((x - 3/4)**2 + y**2)**0.5)\n\n# Add constraints\nmodel.addCons(y >= x**2)\nmodel.addCons(x >= 0)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The x cordinate of the best location:\", model.getVal(x))\n    print(\"The y cordinate of the best location:\", model.getVal(y))\n    print(\"The length of the rope required to rescue him: \", model.getVal(obj))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The x cordinate of the best location": "0.4998083998257366",
            "The y cordinate of the best location": "0.24980810512807078",
            "The length of the rope required to rescue him": "0.35355235026576626"
        },
        "type": "nonlinear-notable",
        "index": 13,
        "length": 251,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA bakery produces five types of cakes: C1, C2, C3, C4, and C5. They need to determine the quantities of each cake to produce.\n// variables: {\"quantity of C1\": \"C1\", \"quantity of C2\": \"C2\", \"quantity of C3\": \"C3\", \"quantity of C4\": \"C4\", \"quantity of C5\": \"C5\"}, where C1, C2, C3, C4, C5 >= 0 and C1, C2, C3, C4, C5 are integers.\n\n## Define Objective Function:\nFor C1, the revenue per unit is $30, the production time per unit is 1 hour, and the ingredient cost per unit is $10. \nFor C2, the revenue per unit is $40, the production time per unit is 2 hours, and the ingredient cost per unit is $15. \nFor C3, the revenue per unit is $50, the production time per unit is 3 hours, and the ingredient cost per unit is $20.\nFor C4, the revenue per unit is $60, the production time per unit is 4 hours, and the ingredient cost per unit is $25.\nFor C5, the revenue per unit is $70, the production time per unit is 5 hours, and the ingredient cost per unit is $30.\nThe bakery has a limited production line and can only produce one cake at a time. The bakery wants to maximize the profit efficiency (profit per hour of production time).\n// Profit_C1 = 30 * C1 - 10 * C1\n// Profit_C2 = 40 * C2 - 15 * C2\n// Profit_C3 = 50 * C3 - 20 * C3\n// Profit_C4 = 60 * C4 - 25 * C4\n// Profit_C5 = 70 * C5 - 30 * C5\n// So, the objective function is: Maximize (Profit_C1 + Profit_C2 + Profit_C3 + Profit_C4 + Profit_C5) / (1 * C1 + 2 * C2 + 3 * C3 + 4 * C4 + 5 * C5)\n\n## Generate Constraint-1:\nThe bakery has a limited production time of 80 hours.\n// 1 * C1 + 2 * C2 + 3 * C3 + 4 * C4 + 5 * C5 <= 80\n\n## Generate Constraint-2:\nThe bakery has a budget of $3000 for ingredient costs.\n// 10 * C1 + 15 * C2 + 20 * C3 + 25 * C4 + 30 * C5 <= 3000\n\n## Generate Constraint-3:\nThe bakery has a production capacity of 200 units in terms of the number of units it can produce. Due to market demand, the bakery must produce at least 40 units in total.\n// C1 + C2 + C3 + C4 + C5 <= 200\n// C1 + C2 + C3 + C4 + C5 >= 40",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nC1 = model.addVar(vtype=\"INTEGER\", name=\"C1\") # quantity of C1\nmodel.addCons(C1 >= 0)\nC2 = model.addVar(vtype=\"INTEGER\", name=\"C2\") # quantity of C2\nmodel.addCons(C2 >= 0)\nC3 = model.addVar(vtype=\"INTEGER\", name=\"C3\") # quantity of C3\nmodel.addCons(C3 >= 0)\nC4 = model.addVar(vtype=\"INTEGER\", name=\"C4\") # quantity of C4\nmodel.addCons(C4 >= 0)\nC5 = model.addVar(vtype=\"INTEGER\", name=\"C5\") # quantity of C5\nmodel.addCons(C5 >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == (30 * C1 - 10 * C1 + 40 * C2 - 15 * C2 + 50 * C3 - 20 * C3 + 60 * C4 - 25 * C4 + 70 * C5 - 30 * C5) / (1 * C1 + 2 * C2 + 3 * C3 + 4 * C4 + 5 * C5))\n\n# Add constraints\nmodel.addCons(1 * C1 + 2 * C2 + 3 * C3 + 4 * C4 + 5 * C5 <= 80)\nmodel.addCons(10 * C1 + 15 * C2 + 20 * C3 + 25 * C4 + 30 * C5 <= 3000)\nmodel.addCons(C1 + C2 + C3 + C4 + C5 <= 200)\nmodel.addCons(C1 + C2 + C3 + C4 + C5 >= 40)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Quantity of C1: \", model.getVal(C1))\n    print(\"Quantity of C2: \", model.getVal(C2))\n    print(\"Quantity of C3: \", model.getVal(C3))\n    print(\"Quantity of C4: \", model.getVal(C4))\n    print(\"Quantity of C5: \", model.getVal(C5))\n    print(\"Profit Efficiency: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Quantity of C1": "40.0",
            "Quantity of C2": "0.0",
            "Quantity of C3": "0.0",
            "Quantity of C4": "0.0",
            "Quantity of C5": "0.0",
            "Profit Efficiency": "20.000000000"
        },
        "question": "A bakery produces five types of cakes: C1, C2, C3, C4, and C5. They need to determine the quantities of each cake to produce. For C2, the revenue per unit is $40, the production time per unit is 2 hours, and the ingredient cost per unit is $15. For C3, the revenue per unit is $50, the production time per unit is 3 hours, and the ingredient cost per unit is $20. For C4, the revenue per unit is $60, the production time per unit is 4 hours, and the ingredient cost per unit is $25. For C5, the revenue per unit is $70, the production time per unit is 5 hours, and the ingredient cost per unit is $30. The bakery has a limited production line and can only produce one cake at a time. The bakery wants to maximize the profit efficiency (profit per hour of production time). The bakery has a limited production time of 80 hours. The bakery has a budget of $3000 for ingredient costs. The bakery has a production capacity of 200 units in terms of the number of units it can produce. Due to market demand, the bakery must produce at least 40 units in total. For C1, the revenue per unit is $30, the production time per unit is 1 hour, and the ingredient cost per unit is $10.",
        "type": "nonlinear-notable",
        "index": 14,
        "length": 1171,
        "var_num": 5
    },
    {
        "question": "A smoothie shop has a promotion for their two smoothies; an acai berry smoothie and a banana chocolate smoothie. It takes 7 units of acai berries and 3 units of water to make the acai berry smoothie. It takes 6 units of banana chocolate and 4 units of water to make the banana chocolate smoothie. Banana chocolate smoothies are more popular and thus the number of banana chocolate smoothies made must be more than the number of acai berry smoothies made. However, the acai berry smoothies have a loyal customer base, and at least 35% of the smoothies made must be acai berry smoothies. If the smoothie shop has 3500 units of acai berries and 3200 units of banana chocolate, to reduce the total amount of water, how many of each smoothie type should be made?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_acai_smoothies = LpVariable(\"NumAcaiSmoothies\", lowBound=0, cat='Integer') # number of acai berry smoothies\nnum_banana_smoothies = LpVariable(\"NumBananaSmoothies\", lowBound=0, cat='Integer') # number of banana chocolate smoothies\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SmoothieWaterOptimization\", LpMinimize)\n\n# Define the objective function\nobjective = 3 * num_acai_smoothies + 4 * num_banana_smoothies\nproblem += objective # minimize the total amount of water used\n\n# Define the constraints\nproblem += 7 * num_acai_smoothies <= 3500 # acai berry constraint\nproblem += 6 * num_banana_smoothies <= 3200 # banana chocolate constraint\nproblem += num_banana_smoothies >= num_acai_smoothies + 1 # banana chocolate smoothies must be more than acai berry smoothies\nproblem += num_acai_smoothies >= 0.35 * (num_acai_smoothies + num_banana_smoothies) # at least 35% must be acai berry smoothies\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of acai berry smoothies:\", num_acai_smoothies.value())\nprint(\"The number of banana chocolate smoothies:\", num_banana_smoothies.value())\nprint(\"The total amount of water used:\", objective.value())",
        "results": {
            "The number of acai berry smoothies": "2.0",
            "The number of banana chocolate smoothies": "3.0",
            "The total amount of water used": "18.0"
        },
        "formulation": "minimize 3x+4y\nSubject to: \ny <= x\nx >= 0.35(x+y)\n7x <= 3500\n6y <= 3200 (end)",
        "type": "linear-notable",
        "index": 15,
        "length": 757,
        "var_num": 2
    },
    {
        "question": "A chicken farmer has sold his chicken and they need to be transported either by bus or by car. A bus can take 100 chicken and takes 2 hours per trip. A car can take 40 chicken and takes 1.5 hours per trip. There can be at most 10 bus trips and at least 60% of the trips must be by car. If the farmer needs to transport 1200 chicken, how many trips of each should be done to minimize the total time needed to transport the chicken?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_bus_trips = LpVariable(\"NumBusTrips\", lowBound=0, cat='Integer') # number of bus trips\nnum_car_trips = LpVariable(\"NumCarTrips\", lowBound=0, cat='Integer') # number of car trips\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ChickenTransport\", LpMinimize)\n\n# Define the objective function\nobjective = 2 * num_bus_trips + 1.5 * num_car_trips\nproblem += objective # minimize the total time taken to transport the chicken\n\n# Define the constraints\nproblem += 100 * num_bus_trips + 40 * num_car_trips == 1200 # total chicken transported should be 1200\nproblem += num_bus_trips <= 10 # at most 10 bus trips\nproblem += num_car_trips >= (60 / 100) * (num_bus_trips + num_car_trips) # at least 60% of the trips should be by car\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of bus trips:\", num_bus_trips.value())\nprint(\"The number of car trips:\", num_car_trips.value())\nprint(\"The total time taken to transport the chicken:\", objective.value())",
        "results": {
            "The number of bus trips": "6.0",
            "The number of car trips": "15.0",
            "The total time taken to transport the chicken": "34.5"
        },
        "formulation": "minimize 2x+1.5y\nSubject to: \nx <= 10\ny >= 0.6(x+y)\n100x+40y >= 1200 (end)",
        "type": "linear-notable",
        "index": 16,
        "length": 430,
        "var_num": 2
    },
    {
        "question": "A telecommunications company installs internet service and TV service in buildings. Each internet service takes 60 minutes of wiring time and 10 minutes of box installation time. Each TV service takes 50 minutes of wiring time and 20 minutes of box installation time. The company has available 7000 minutes of wiring time and 4000 minutes of box installation time. If the profit per internet service installation is $100 and the profit per TV service installation is $120, how many of each should be installed to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of internet services installed\", \"name\": \"x\"}, {\"description\": \"number of TV services installed\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit from installations\", \"function\": \"100x + 120y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"wiring time constraint\", \"function\": \"60x + 50y <= 7000\"}, {\"description\": \"box installation time constraint\", \"function\": \"10x + 20y <= 4000\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_internet_services = LpVariable(\"NumInternetServices\", lowBound=0, cat='Integer') # number of internet services installed\nnum_tv_services = LpVariable(\"NumTVServices\", lowBound=0, cat='Integer') # number of TV services installed\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"TelecomCompanyProfit\", LpMaximize)\n\n# Define the objective function\nprofit = 100 * num_internet_services + 120 * num_tv_services\nproblem += profit # maximize the total profit\n\n# Define the constraints\nproblem += 60 * num_internet_services + 50 * num_tv_services <= 7000 # wiring time constraint\nproblem += 10 * num_internet_services + 20 * num_tv_services <= 4000 # box installation time constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of internet services installed:\", num_internet_services.value())\nprint(\"The number of TV services installed:\", num_tv_services.value())\nprint(\"The total profit:\", profit.value())\n",
        "results": {
            "The number of internet services installed": "0.0",
            "The number of TV services installed": "140.0",
            "The total profit": "16800.0"
        },
        "type": "linear-notable",
        "index": 17,
        "length": 529,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA manufacturing company produces three types of electronic devices: smartphones, tablets, and laptops. The company has four different production lines, each with varying efficiency and capacity.\n// variables: {\\\"workers on production line 1\\\": \\\"P1\\\", \\\"workers on production line 2\\\": \\\"P2\\\", \\\"workers on production line 3\\\": \\\"P3\\\", \\\"workers on production line 4\\\": \\\"P4\\\"}, where P1, P2, P3, P4 >= 0 & P1, P2, P3, P4 are integers\n\n## Define Objective Function:\nEach production line has different productivity rates for each device. \nOn production line 1, each worker produces 10 smartphones, 5 tablets, and 3 laptops per hour. \nOn production line 2, each worker produces 8 smartphones, 6 tablets, and 4 laptops per hour. \nOn production line 3, each worker produces 6 smartphones, 7 tablets, and 5 laptops per hour. \nOn production line 4, each worker produces 5 smartphones, 8 tablets, and 6 laptops per hour.\nThe company needs to produce at least 1000 smartphones, 800 tablets, and 600 laptops daily. The production lines can only be operated or shut down at the same time. Determine the minimum number of hours needed to meet the daily demand.\n// The production time for smartphones: T1 = 1000 / (10 * P1 + 8 * P2 + 6 * P3 + 5 * P4)\n// The production time for tablets: T2 = 800 / (5 * P1 + 6 * P2 + 7 * P3 + 8 * P4)\n// The production time for laptops: T3 = 600 / (3 * P1 + 4 * P2 + 5 * P3 + 6 * P4)\n// So, the objective function is: Minimize max(T1, T2, T3)\n\n## Generate Constraint-1:\nThere are a total of 50 workers available.\n// P1 + P2 + P3 + P4 <= 50\n\n## Generate Constraint-2:\nEach production line can be staffed by up to 20 workers at a time.\n// P1 <= 20; P2 <= 20; P3 <= 20; P4 <= 20\n\n## Generate Constraint-3:\nThe company wants to ensure that at least one production line is fully staffed (20 workers) if it is operational.\n// (P1 == 20) + (P2 == 20) + (P3 == 20) + (P4 == 20) >= 1",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nP1 = model.addVar(vtype=\"INTEGER\", name=\"P1\") # workers on production line 1\nmodel.addCons(P1 >= 0)\nP2 = model.addVar(vtype=\"INTEGER\", name=\"P2\") # workers on production line 2\nmodel.addCons(P2 >= 0)\nP3 = model.addVar(vtype=\"INTEGER\", name=\"P3\") # workers on production line 3\nmodel.addCons(P3 >= 0)\nP4 = model.addVar(vtype=\"INTEGER\", name=\"P4\") # workers on production line 4\nmodel.addCons(P4 >= 0)\n\n# Define objective function\n# Since the objective function is not linear, we use a big-M method to linearize it\nMaxTime = model.addVar(name=\"MaxTime\") # maximum of T1, T2, T3\nmodel.setObjective(MaxTime, \"minimize\")\nmodel.addCons(MaxTime >= 1000 / (10 * P1 + 8 * P2 + 6 * P3 + 5 * P4))\nmodel.addCons(MaxTime >= 800 / (5 * P1 + 6 * P2 + 7 * P3 + 8 * P4))\nmodel.addCons(MaxTime >= 600 / (3 * P1 + 4 * P2 + 5 * P3 + 6 * P4))\n\n# Add constraints\nmodel.addCons(P1 + P2 + P3 + P4 <= 50)\nmodel.addCons(P1 <= 20)\nmodel.addCons(P2 <= 20)\nmodel.addCons(P3 <= 20)\nmodel.addCons(P4 <= 20)\n\n# Additional constraints for fully staffing a line if operational\n#\u3000The company wants to ensure that at least one production line is fully staffed (20 workers) if it is operational.\nif_P1 = model.addVar(vtype=\"B\", name=\"if_P1\")\nif_P2 = model.addVar(vtype=\"B\", name=\"if_P2\")\nif_P3 = model.addVar(vtype=\"B\", name=\"if_P3\")\nif_P4 = model.addVar(vtype=\"B\", name=\"if_P4\")\nmodel.addCons(P1 * if_P1 == 20 * if_P1)\nmodel.addCons(P2 * if_P2 == 20 * if_P2)\nmodel.addCons(P3 * if_P3 == 20 * if_P3)\nmodel.addCons(P4 * if_P4 == 20 * if_P4)\nmodel.addCons(if_P1 + if_P2 + if_P3 + if_P4 >= 1)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Workers on Production Line 1: \", model.getVal(P1))\n    print(\"Workers on Production Line 2: \", model.getVal(P2))\n    print(\"Workers on Production Line 3: \", model.getVal(P3))\n    print(\"Workers on Production Line 4: \", model.getVal(P4))\n    print(\"Minimum Production Time: \", model.getVal(MaxTime))\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Workers on Production Line 1": "20.0",
            "Workers on Production Line 2": "6.0",
            "Workers on Production Line 3": "4.0",
            "Workers on Production Line 4": "20.0",
            "Minimum Production Time": "2.688172043010753"
        },
        "question": "A manufacturing company produces three types of electronic devices: smartphones, tablets, and laptops. The company has four different production lines, each with varying efficiency and capacity. On production line 1, each worker produces 10 smartphones, 5 tablets, and 3 laptops per hour. On production line 2, each worker produces 8 smartphones, 6 tablets, and 4 laptops per hour. On production line 3, each worker produces 6 smartphones, 7 tablets, and 5 laptops per hour. On production line 4, each worker produces 5 smartphones, 8 tablets, and 6 laptops per hour. The company needs to produce at least 1000 smartphones, 800 tablets, and 600 laptops daily. The production lines can only be operated or shut down at the same time. Determine the minimum number of hours needed to meet the daily demand. There are a total of 50 workers available. Each production line can be staffed by up to 20 workers at a time. The company wants to ensure that at least one production line is fully staffed (20 workers) if it is operational. Each production line has different productivity rates for each device.",
        "type": "nonlinear-notable",
        "index": 18,
        "length": 1098,
        "var_num": 4
    },
    {
        "question": "Find the dimensions of the rectangle of largest area having fixed perimeter 100.",
        "scenario": "## Define Variables:\nYou need to construct a rectangle.\n// variables: {\"length of the rectangle\": \"L\", \"width of the rectangle\": \"W\"}, where L, W >= 0\n\n## Define Objective Function:\nWhat are the dimensions of the rectangle to maximize the area?\n// The area of the rectangle is given by the product of the length and the width.\n// Therefore, the objective function is: Maximize L * W\n\n## Generate Constraint-1:\nThe perimeter of the rectangle must be 100 square units.\n// The perimeter of the rectangle is given by 2L + 2W, and it is given that the perimeter is at most 100. Therefore, the constraint is 2L + 2W = 100",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nL = model.addVar(vtype=\"CONTINUOUS\", name=\"L\") # length of the rectangle\nW = model.addVar(vtype=\"CONTINUOUS\", name=\"W\") # width of the rectangle\n\n# Define objective function\nobj = model.addVar(vtype=\"C\", name=\"obj\")\nmodel.addCons(obj == L * W)\nmodel.setObjective(obj, \"maximize\")\n\n# Add constraints\nmodel.addCons(2 * L + 2 * W == 100)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The length of the rectangle:\", model.getVal(L))\n    print(\"The width of the rectangle:\", model.getVal(W))\n    print(\"The maximum area of the rectangle: \", model.getVal(L * W))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The length of the rectangle": "25.000",
            "The width of the rectangle": "25.000",
            "The maximum area of the rectangle": "625.000"
        },
        "type": "nonlinear-notable",
        "index": 19,
        "length": 80,
        "var_num": 2
    },
    {
        "question": "There are six cities (cities 1-6) in Kilroy County. The county must determine where to build fire stations. The county wants to build the minimum number of fire stations needed to ensure that at least one fire station is within 15 minutes (driving time) of each city. The times (in minutes) required to drive between the cities in Kilroy County are shown in Table 6: \nTime Required to Travel between Cities in Kilroy County, \nFrom City 1 to ctiy 1-6 are 0 10 20 30 30 20; \nFrom City 2 to ctiy 1-6 are 10 0 25 35 20 10;  \nFrom City 3 to ctiy 1-6 are 20 25 0 15 30 20; \nFrom City 4 to ctiy 1-6 are 30 35 15 0 15 25; \nFrom City 5 to ctiy 1-6 are 30 20 30 15 0 14; \nFrom City 5 to ctiy 1-6 are 20 10 20 25 14 0. \nTell Kilroy how many fire stations should be built and where they should be located.",
        "formulation": "# Define Variables:\nWe need to determine whether a fire station should be built in each city. Let's denote the decision variables as follows:\n```Variables\nx_i = 0 or 1, i = 1, 2, 3, 4, 5, 6 // Binary variable ,Represents whether a fire station should be built in City i\n```\nwhere i represents the city number. For example, x1 represents whether a fire station should be built in City 1. If x1=1, it means a fire station should be built in City 1. If x1=0, it means no fire station should be built in City 1.\n\n# Objective Function:\nWe want to minimize the number of fire stations built while ensuring that each city has at least one fire station within a 15-minute driving distance. Therefore, the objective function is:\n```Objective Function\nMinimize: x1 + x2 + x3 + x4 + x5 + x6\n```\n\n# Constraints:\nNext, we need to formulate the constraints that ensure each city is within 15 minutes of at least one fire station. This can be done by looking at each city individually and considering the travel times to all other cities. \nFor example, for city 1, the time required to travel to ctiy 1-6 are 0 10 20 30 30 20. So, only city 2 is within 15 minutes of city 1. Therefore, we need to ensure that either city 1 or city 2 has a fire station. This can be expressed as:\nx1 + x2 >= 1\nSimilarly, for city 2, the time required to travel to ctiy 1-6 are 10 0 25 35 20 10. So, only city 1 and city 6 are within 15 minutes of city 2. Therefore, we need to ensure that either city 1, city 2, or city 6 has a fire station. This can be expressed as:\nx1 + x2 + x6 >= 1\nSimilarly, for city 3, the time required to travel to ctiy 1-6 are 20 25 0 15 30 20. So, only city 4 is within 15 minutes of city 3. Therefore, we need to ensure that either city 3 or city 4 has a fire station. This can be expressed as:\nx3 + x4 >= 1\nSimilarly, for city 4, the time required to travel to ctiy 1-6 are 30 35 15 0 15 25. So, only city 3, city 4, and city 5 are within 15 minutes of city 4. Therefore, we need to ensure that either city 3, city 4, or city 5 has a fire station. This can be expressed as:\nx3 + x4 + x5 >= 1\nSimilarly, for city 5, the time required to travel to ctiy 1-6 are 30 20 30 15 0 14. So, only city 4, city 5, and city 6 are within 15 minutes of city 5. Therefore, we need to ensure that either city 4, city 5, or city 6 has a fire station. This can be expressed as:\nx4 + x5 + x6 >= 1\nSimilarly, for city 6, the time required to travel to ctiy 1-6 are 20 10 20 25 14 0. So, only city 2, city 5, and city 6 are within 15 minutes of city 6. Therefore, we need to ensure that either city 2, city 5, or city 6 has a fire station. This can be expressed as:\nx2 + x5 + x6 >= 1\nPutting it all together, we get the following linear programming problem:\n```Constraints\nx1 + x2 >= 1\nx1 + x2 + x6 >= 1\nx3 + x4 >= 1\nx3 + x4 + x5 >= 1\nx4 + x5 + x6 >= 1\nx2 + x5 + x6 >= 1\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx1 = LpVariable(\"x1\", cat='Binary')\nx2 = LpVariable(\"x2\", cat='Binary')\nx3 = LpVariable(\"x3\", cat='Binary')\nx4 = LpVariable(\"x4\", cat='Binary')\nx5 = LpVariable(\"x5\", cat='Binary')\nx6 = LpVariable(\"x6\", cat='Binary')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FireStationLocation\", LpMinimize)\n\n# Define the objective function\nproblem += x1 + x2 + x3 + x4 + x5 + x6\n\n# Define the constraints\nproblem += x1 + x2 >= 1\nproblem += x1 + x2 + x6 >= 1\nproblem += x3 + x4 >= 1\nproblem += x3 + x4 + x5 >= 1\nproblem += x4 + x5 + x6 >= 1\nproblem += x2 + x5 + x6 >= 1\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The optimal number of fire stations to be built is:\", value(problem.objective))\nprint(\"Locations for fire stations:\")\nprint(\"City 1:\", x1.value())\nprint(\"City 2:\", x2.value())\nprint(\"City 3:\", x3.value())\nprint(\"City 4:\", x4.value())\nprint(\"City 5:\", x5.value())\nprint(\"City 6:\", x6.value())\n",
        "results": {
            "The optimal number of fire stations to be built is": "2.0",
            "Whether a fire stations should be built in City 1": "0.0",
            "Whether a fire stations should be built in City 2": "1.0",
            "Whether a fire stations should be built in City 3": "0.0",
            "Whether a fire stations should be built in City 4": "1.0",
            "Whether a fire stations should be built in City 5": "0.0",
            "Whether a fire stations should be built in City 6": "0.0"
        },
        "type": "linear-table",
        "index": 20,
        "length": 793,
        "var_num": 7
    },
    {
        "question": "On their farm, the Friendly family grows apples that they harvest each fall and make into three products: apple butter, applesauce, and apple jelly. They sell these products at local grocery stores, craft fairs, and at their own Friendly Farm Pumpkin Festival. They have a total of 500 cooking hours available, 240 hours of labor available during the fall, and about 6,500 apples for production. The following Table provides details on the cooking time, labor time, and number of apples required for a 10-gallon batch of each product, as well as the sales revenue generated by each batch. The Friendlys want to know how many batches of each product to produce in order to maximize their revenues.\n\nTable (Resource requirements and sales revenue for a 10-gallon batch of each product):\n| Product       | Cooking Time (hrs) | Labor Time (hrs) | Apples Required | Sales Revenue ($) |\n| ------------- | ------------------ | ---------------- | --------------- | ----------------- |\n| Apple Butter  | 3.5                | 1.2              | 40              | 190               |\n| Applesauce    | 5.2                | 0.8              | 55              | 170               |\n| Apple Jelly   | 2.8                | 1.5              | 20              | 155               |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for Apple Butter, Apple Sauce, and Apple Jelly that adhere to the constraints given. Let's denote the number of batches of Apple Butter as AB, the number of batches of Apple Sauce as AS, and the number of batches of Apple Jelly as AJ.\n```Variables\nAB //number of batches of Apple Butter to produce \nAS //number of batches of Apple Sauce to produce\nAJ //number of batches of Apple Jelly to produce\nAB, AS, AJ >= 0 and they are integers\n```\n\n# Objective Function:\nWe want to maximize the total revenue generated from selling the three products. The revenue from Apple Butter is $190 per batch, the revenue from Apple Sauce is $170 per batch, and the revenue from Apple Jelly is $155 per batch. Therefore, the objective function (total revenue) is given by 190AB + 170AS + 155AJ.\n```Objective Function\nMaximize: 190AB + 170AS + 155AJ\n```\n\n# Constraints:\nThe Friendly family has limited resources, so we need to consider the constraints given.\n```Constraints\n3.5AB + 5.2AS + 2.8AJ <= 500 //cooking time constraint\n1.2AB + 0.8AS + 1.5AJ <= 240 //labor time constraint\n40AB + 55AS + 20AJ <= 6500 //apples constraint\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nAB = LpVariable(\"AppleButterBatches\", lowBound=0, cat='Integer')\nAS = LpVariable(\"AppleSauceBatches\", lowBound=0, cat='Integer')\nAJ = LpVariable(\"AppleJellyBatches\", lowBound=0, cat='Integer')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeRevenue\", LpMaximize)\n\n# Define the objective function\nproblem += 190 * AB + 170 * AS + 155 * AJ\n\n# Define the constraints\nproblem += 3.5 * AB + 5.2 * AS + 2.8 * AJ <= 500\nproblem += 1.2 * AB + 0.8 * AS + 1.5 * AJ <= 240\nproblem += 40 * AB + 55 * AS + 20 * AJ <= 6500\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Number of Apple Butter batches to produce:\", AB.value())\nprint(\"Number of Apple Sauce batches to produce:\", AS.value())\nprint(\"Number of Apple Jelly batches to produce:\", AJ.value())\nprint(\"Total Revenue:\", value(problem.objective))\n",
        "results": {
            "Number of Apple Butter batches to produce": "42.0",
            "Number of Apple Sauce batches to produce": "0.0",
            "Number of Apple Jelly batches to produce": "126.0",
            "Total Revenue": "27510.0"
        },
        "type": "linear-table",
        "index": 21,
        "length": 1264,
        "var_num": 3
    },
    {
        "question": "A wine company sells two products. Its regular wine and a premium aged wine. The company makes x1 bottles of the regular wine per day and x2 bottled of the premium wine per day (x1 and x2 are unknown values greater than or equal to 0). The profit per bottle of regular wine is $20 ad the profit per bottle of the premium wine is $50. Current demand for the wine is at most 80 bottles of the regular wine per day and at most 50 bottles of the premium wine per day. The company only has enough supply to make 120 bottles of either type each day. How many bottles of each wine, regular and premium, should the company make to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of bottles of regular wine made per day\", \"name\": \"x1\"}, {\"description\": \"number of bottles of premium wine made per day\", \"name\": \"x2\"}], \"objective\": [{\"description\": \"total profit per day\", \"function\": \"20x1 + 50x2\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"maximum demand for regular wine per day\", \"function\": \"x1 <= 80\"}, {\"description\": \"maximum demand for premium wine per day\", \"function\": \"x2 <= 50\"}, {\"description\": \"total production constraint per day\", \"function\": \"x1 + x2 <= 120\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x1, x2 >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx1 = LpVariable(\"BottlesOfRegularWine\", lowBound=0, cat='Continuous') # number of bottles of regular wine made per day\nx2 = LpVariable(\"BottlesOfPremiumWine\", lowBound=0, cat='Continuous') # number of bottles of premium wine made per day\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"WineCompanyProfitMaximization\", LpMaximize)\n\n# Define the objective function\nproblem += 20 * x1 + 50 * x2 # maximize total profit per day\n\n# Define the constraints\nproblem += x1 <= 80 # maximum demand for regular wine per day\nproblem += x2 <= 50 # maximum demand for premium wine per day\nproblem += x1 + x2 <= 120 # total production constraint per day\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Number of bottles of regular wine to make per day:\", x1.value())\nprint(\"Number of bottles of premium wine to make per day:\", x2.value())\nprint(\"Maximum profit per day:\", value(problem.objective))\n",
        "results": {
            "Number of bottles of regular wine to make per day": "70.0",
            "Number of bottles of premium wine to make per day": "50.0",
            "Maximum profit per day": "3900.0"
        },
        "type": "linear-notable",
        "index": 22,
        "length": 639,
        "var_num": 2
    },
    {
        "question": "To protect soil from erosion, some farmers plant winter cover crops such as winter wheat and rye. In addition to conserving soil, cover crops often increase crop yields in the row crops that follow in spring and summer. Suppose that a farmer has 800 acres of land and plans to plant winter wheat and rye. The input cost for 1 acre for each crop is given in the table below along with the cost for machinery and labor. The profit for 1 acre of each crop is also provided. The farmer has budgeted a maximum of $90,000 for input costs and a maximum of $36,000 for labor and machinery. Determine the number of acres of each crop that the farmer should plant to maximize profit. (Assume that all crops will be sold.). What is the maximum profit? If the profit per acre for wheat were $40 and the profit per acre for rye were $45, how many acres of each crop should be planted to maximize profit?\n\nTable (Input Cost, Labor/Machinery Cost, and Profit per Acre for Wheat and Rye):\n| Crop  | Input Cost per Acre | Labor/Machinery Cost per Acre | Profit per Acre (Original) | Profit per Acre (Adjusted) |\n|-------|---------------------|-------------------------------|----------------------------|----------------------------|\n| Wheat | $90                 | $50                           | $42                         | $40                         |\n| Rye   | $120                | $40                           | $35                         | $45                         |",
        "formulation": "# Variables:\nTo determine the optimal number of acres of winter wheat and rye to plant, let's denote the number of acres of winter wheat as W and the number of acres of rye as R.\n```Variables\nW //number of acres of winter wheat planted\nR //number of acres of rye planted\nW, R >= 0 //non-negative variables\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function (profit) is given by the sum of the profit from winter wheat and rye, which is 42W + 35R.\n```Objective Function\nMaximize: 42W + 35R\n```\n\n# Constraints:\n```Constraints\nW + R <= 800 //land conservation constraint\n90W + 120R <= 90000 //input cost constraint\n50W + 40R <= 36000 //labor and machinery cost constraint\n```\n\nTo find the optimal solution, we need to solve this linear programming problem.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nW = LpVariable(\"WheatAcres\", lowBound=0, cat='Continuous') # number of acres of winter wheat planted\nR = LpVariable(\"RyeAcres\", lowBound=0, cat='Continuous') # number of acres of rye planted\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nproblem += 42 * W + 35 * R # maximize the total profit\n\n# Define the constraints\nproblem += W + R <= 800 # land conservation constraint\nproblem += 90 * W + 120 * R <= 90000 # input cost constraint\nproblem += 50 * W + 40 * R <= 36000 # labor and machinery cost constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of acres of winter wheat to plant:\", W.value())\nprint(\"The number of acres of rye to plant:\", R.value())\nprint(\"The maximum profit:\", value(problem.objective))\n\n# Change the profit per acre for wheat to $40 and for rye to $45 and resolve\nproblem += 40 * W + 45 * R # new objective function with updated profits\n\n# Solve the problem again\nstatus = problem.solve()\n\n# Output the new answer\nprint(\"New optimal number of acres of winter wheat to plant:\", W.value())\nprint(\"New optimal number of acres of rye to plant:\", R.value())\nprint(\"New maximum profit:\", value(problem.objective))\n",
        "results": {
            "The number of acres of winter wheat to plant": "400.0",
            "The number of acres of rye to plant": "400.0",
            "The maximum profit": "30800.0",
            "New optimal number of acres of winter wheat to plant": "200.0",
            "New optimal number of acres of rye to plant": "600.0",
            "New maximum profit": "35000.0"
        },
        "type": "linear-table",
        "index": 23,
        "length": 1464,
        "var_num": 5
    },
    {
        "question": "A piece of cardboard is 1 meter by 1/2 meter. A square is to be cut from each corner and the sides folded up to make an open-top box. What are the dimensions of the box with maximum possible volume?",
        "scenario": "## Define Variables:\nYou need to construct an open-top box from a piece of cardboard. \n// variables: {\"height of the box\": \"h\", \"length of the bottom of the box\": \"L\", \"width of the bottom of the box\": \"W\"}, where h, L, W >= 0\n\n## Define Objective Function:\nFind the dimensions of the box with the maximum possible volume.\n// The volume of the box is given by the formula V = L * W * h. Therefore, the objective function is: Maximize V = L * W * h\n\n## Generate Constraint-1:\nIt should be done by removing a square from each corner of the cardboard and folding up the flaps on each side. The cardboard is 1 meter by 1/2 meter.\n// The height of the box h is the side length of the squares removed from the corners. So, the length of the bottom of the box is 1 - 2h, and the width of the bottom of the box is 1/2 - 2h.\n// Therefore, the constraints are: 1 - 2h >= 0, 1/2 - 2h >= 0, L = 1 - 2h, W = 1/2 - 2h",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the box\nL = model.addVar(vtype=\"CONTINUOUS\", name=\"L\") # length of the bottom of the box\nW = model.addVar(vtype=\"CONTINUOUS\", name=\"W\") # width of the bottom of the box\n\n# Define objective function\nV = model.addVar('V')\nmodel.setObjective(V, \"maximize\")\nmodel.addCons(V == L * W * h)\n\n# Add constraints\nmodel.addCons(1 - 2*h >= 0)\nmodel.addCons(1/2 - 2*h >= 0)\nmodel.addCons(L == 1 - 2*h)\nmodel.addCons(W == 1/2 - 2*h)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The height of the box:\", model.getVal(h))\n    print(\"The length of the bottom of the box:\", model.getVal(L))\n    print(\"The width of the bottom of the box:\", model.getVal(W))\n    print(\"The maximum volume of the box: \", model.getVal(V))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The height of the box": "0.10597616580787961",
            "The length of the bottom of the box": "0.7880476683842408",
            "The width of the bottom of the box": "0.2880476683842408",
            "The maximum volume of the box": "0.02405645428965656"
        },
        "type": "nonlinear-notable",
        "index": 24,
        "length": 198,
        "var_num": 3
    },
    {
        "scenario": "## Define Variables:\nA city is planning to install three types of renewable energy sources: solar panels, wind turbines, and hydroelectric plants. The city needs to decide how many units of each type of energy source to install. Additionally, the city must determine the optimal placement of these units to maximize energy output while minimizing environmental impact.\n// variables: {\"number of solar panels\": \"SolarPanels\", \"number of wind turbines\": \"WindTurbines\", \"number of hydroelectric plants\": \"HydroPlants\", \"environmental impact factor for solar panels\": \"SolarImpact\", \"environmental impact factor for wind turbines\": \"WindImpact\", \"environmental impact factor for hydroelectric plants\": \"HydroImpact\"}, where SolarPanels, WindTurbines, HydroPlants, SolarImpact, WindImpact, HydroImpact >= 0 and SolarPanels, WindTurbines, HydroPlants are integers.\n\n## Define Objective Function:\nThe energy output from each solar panel is 500 kWh, from each wind turbine is 1000 kWh, and from each hydroelectric plant is 2000 kWh. The environmental impact of each solar panel is 2 units, of each wind turbine is 3 units, and of each hydroelectric plant is 5 units. The city aims to maximize the Energy-Impact Ratio, which is defined as the total energy output divided by the total environmental impact.\n// EnergyOutput = 500 * SolarPanels + 1000 * WindTurbines + 2000 * HydroPlants\n// EnvironmentalImpact = 2 * SolarPanels + 3 * WindTurbines + 5 * HydroPlants\n// So, the objective function is: Maximize (EnergyOutput / EnvironmentalImpact)\n\n## Generate Constraint-1:\nThe city has a budget of $1,000,000 for the installation of renewable energy sources.\n// 1000 * SolarPanels + 2000 * WindTurbines + 5000 * HydroPlants <= 1000000\n\n## Generate Constraint-2:\nThe city has a total area of 5000 square meters available for installation.\n// SolarPanels + 2 * WindTurbines + 3 * HydroPlants <= 5000\n\n## Generate Constraint-3:\nThe city wants to ensure that at least 50% of the total energy output comes from solar panels.\n// 500 * SolarPanels >= 0.5 * (500 * SolarPanels + 1000 * WindTurbines + 2000 * HydroPlants)\n\n## Generate Constraint-4:\nThe city wants to install at least 1 unit of each type of energy source.\n// SolarPanels >= 1; WindTurbines >= 1; HydroPlants >= 1",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nSolarPanels = model.addVar(vtype=\"INTEGER\", name=\"SolarPanels\") # number of solar panels\nmodel.addCons(SolarPanels >= 0)\nWindTurbines = model.addVar(vtype=\"INTEGER\", name=\"WindTurbines\") # number of wind turbines\nmodel.addCons(WindTurbines >= 0)\nHydroPlants = model.addVar(vtype=\"INTEGER\", name=\"HydroPlants\") # number of hydroelectric plants\nmodel.addCons(HydroPlants >= 0)\nSolarImpact = model.addVar(vtype=\"CONTINUOUS\", name=\"SolarImpact\") # environmental impact factor for solar panels\nmodel.addCons(SolarImpact >= 0)\nWindImpact = model.addVar(vtype=\"CONTINUOUS\", name=\"WindImpact\") # environmental impact factor for wind turbines\nmodel.addCons(WindImpact >= 0)\nHydroImpact = model.addVar(vtype=\"CONTINUOUS\", name=\"HydroImpact\") # environmental impact factor for hydroelectric plants\nmodel.addCons(HydroImpact >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == (500 * SolarPanels + 1000 * WindTurbines + 2000 * HydroPlants) / (2 * SolarPanels + 3 * WindTurbines + 5 * HydroPlants))\n\n# Add constraints\nmodel.addCons(1000 * SolarPanels + 2000 * WindTurbines + 5000 * HydroPlants <= 1000000)\nmodel.addCons(SolarPanels + 2 * WindTurbines + 3 * HydroPlants <= 5000)\nmodel.addCons(500 * SolarPanels >= 0.5 * (500 * SolarPanels + 1000 * WindTurbines + 2000 * HydroPlants))\nmodel.addCons(SolarPanels >= 1)\nmodel.addCons(WindTurbines >= 1)\nmodel.addCons(HydroPlants >= 1)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Energy-Impact Ratio: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Energy-Impact Ratio": "307.5852470424496"
        },
        "question": "A city is planning to install three types of renewable energy sources: solar panels, wind turbines, and hydroelectric plants. The city needs to decide how many units of each type of energy source to install. Additionally, the city must determine the optimal placement of these units to maximize energy output while minimizing environmental impact. The city has a budget of $1,000,000 for the installation of renewable energy sources. The city has a total area of 5000 square meters available for installation. The city wants to ensure that at least 50% of the total energy output comes from solar panels. The city wants to install at least 1 unit of each type of energy source. The energy output from each solar panel is 500 kWh, from each wind turbine is 1000 kWh, and from each hydroelectric plant is 2000 kWh. The environmental impact of each solar panel is 2 units, of each wind turbine is 3 units, and of each hydroelectric plant is 5 units. The city aims to maximize the Energy-Impact Ratio, which is defined as the total energy output divided by the total environmental impact.",
        "type": "nonlinear-notable",
        "index": 25,
        "length": 1084,
        "var_num": 6
    },
    {
        "question": "You are designing a rectangular poster by cutting from a rectangular piece of paper. The poster must have an area of 100 square inches. The top and bottom margins are 2 inches, and the side margins are 1 inch. What dimensions of the poster should you use to minimize the area of paper used?",
        "scenario": "## Define Variables:\nYou are designing a rectangular poster by cutting from a rectangular piece of paper.\n// variables: {\"width of the poster\": \"w\", \"height of the poster\": \"h\"}, where w, h >= 0\n\n## Define Objective Function:\nThe top and bottom margins are 2 inches, and the side margins are 1 inch. What dimensions of the poster should you use to minimize the area of paper used?\n// The width of the used paper is w + 2*1, and the height of the used paper is h + 2*2.\n// Therefore, the objective function is: Minimize (w + 2) * (h + 4)\n\n## Generate Constraint-1:\nThe poster must have an area of 100 square inches.\n// The area of the poster is given by the product of the width and the height, and it is given that the area is 100. Therefore, the constraint is w * h = 100",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nw = model.addVar(vtype=\"CONTINUOUS\", name=\"w\") # width of the poster\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the poster\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nmodel.addCons(obj == (w + 2) * (h + 4))\n\n# Add constraints\nmodel.addCons(w * h == 100)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The width of the poster:\", model.getVal(w))\n    print(\"The height of the poster:\", model.getVal(h))\n    print(\"The area of paper used: \", model.getVal(obj))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The width of the poster": "7.071067811865474",
            "The height of the poster": "14.142135623730955",
            "The area of paper used": "164.5685424949238"
        },
        "type": "nonlinear-notable",
        "index": 26,
        "length": 290,
        "var_num": 2
    },
    {
        "question": "Ayse produces a plant growth compound by mixing two types of fertilizer: C and Y. This growth compound must contain at least 5 units of nitrous oxide and 8 units of vitamin mix. Fertilizer C and Y cost $2 and $3 per kg respectively. Fertilizer C contains 1.5 units of nitrous oxide per kg and 3 units of vitamin mix per kg. Fertilizer Y contains 5 units of nitrous oxide per kg and 1 unit of vitamin mix per kg. Determine the minimum cost of Ayse's compound.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\namount_of_C = LpVariable(\"AmountOfC\", lowBound=0, cat='Continuous') # amount of fertilizer C in kgs\namount_of_Y = LpVariable(\"AmountOfY\", lowBound=0, cat='Continuous') # amount of fertilizer Y in kgs\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CompoundCostMinimization\", LpMinimize)\n\n# Define the objective function\nobjective = 2 * amount_of_C + 3 * amount_of_Y\nproblem += objective # minimize the total cost of the compound\n\n# Define the constraints\nproblem += 1.5 * amount_of_C + 5 * amount_of_Y >= 5 # at least 5 units of nitrous oxide\nproblem += 3 * amount_of_C + 1 * amount_of_Y >= 8 # at least 8 units of vitamin mix\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The amount of fertilizer C in kgs:\", amount_of_C.value())\nprint(\"The amount of fertilizer Y in kgs:\", amount_of_Y.value())\nprint(\"The minimum cost of the compound:\", objective.value())",
        "results": {
            "The amount of fertilizer C in kgs": "2.5925926",
            "The amount of fertilizer Y in kgs": "0.22222222",
            "The minimum cost of the compound": "5.85185186"
        },
        "formulation": "minimize 2x+3y\nSubject to: \n1.5x+5y >= 5\n3x+1y >= 8 (end)",
        "type": "linear-notable",
        "index": 27,
        "length": 458,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA logistics company operates a fleet of trucks and needs to plan the distribution of goods to five different regions: A, B, C, D, and E. The company must decide how many trucks to allocate to each region, considering the capacity and cost of each truck. Additionally, the company is considering leasing extra trucks from a third-party provider.\n// variables: {\"number of company trucks for region A\": \"TruckA\", \"number of company trucks for region B\": \"TruckB\", \"number of company trucks for region C\": \"TruckC\", \"number of company trucks for region D\": \"TruckD\", \"number of company trucks for region E\": \"TruckE\", \"number of leased trucks for region A\": \"LeasedTruckA\", \"number of leased trucks for region B\": \"LeasedTruckB\", \"number of leased trucks for region C\": \"LeasedTruckC\", \"number of leased trucks for region D\": \"LeasedTruckD\", \"number of leased trucks for region E\": \"LeasedTruckE\"}, where TruckA, TruckB, TruckC, TruckD, TruckE, LeasedTruckA, LeasedTruckB, LeasedTruckC, LeasedTruckD, LeasedTruckE >= 0 & all are integers\n\n## Define Objective Function:\nFor region A, the cost per company truck is $500, the cost per leased truck is $700, and the revenue per truck is $1200.\nFor region B, the cost per company truck is $600, the cost per leased truck is $800, and the revenue per truck is $1300.\nFor region C, the cost per company truck is $700, the cost per leased truck is $900, and the revenue per truck is $1400.\nFor region D, the cost per company truck is $800, the cost per leased truck is $1000, and the revenue per truck is $1500.\nFor region E, the cost per company truck is $900, the cost per leased truck is $1100, and the revenue per truck is $1600.\nThe company aims to maximize the average net profit per truck (considering both company and leased trucks).\n// Net profit for region A: Profit_A = (1200 - 500) * TruckA + (1200 - 700) * LeasedTruckA\n// Net profit for region B: Profit_B = (1300 - 600) * TruckB + (1300 - 800) * LeasedTruckB\n// Net profit for region C: Profit_C = (1400 - 700) * TruckC + (1400 - 900) * LeasedTruckC\n// Net profit for region D: Profit_D = (1500 - 800) * TruckD + (1500 - 1000) * LeasedTruckD\n// Net profit for region E: Profit_E = (1600 - 900) * TruckE + (1600 - 1100) * LeasedTruckE\n// So, the objective function is: Maximize ((Profit_A + Profit_B + Profit_C + Profit_D + Profit_E) / (TruckA + TruckB + TruckC + TruckD + TruckE + LeasedTruckA + LeasedTruckB + LeasedTruckC + LeasedTruckD + LeasedTruckE))\n\n## Generate Constraint-1:\nThe company has a total of 40 trucks available, including both company-owned and leased trucks.\n// TruckA + TruckB + TruckC + TruckD + TruckE + LeasedTruckA + LeasedTruckB + LeasedTruckC + LeasedTruckD + LeasedTruckE <= 40\n\n## Generate Constraint-2:\nThe company has a budget of $25,000 for leasing trucks.\n// 700 * LeasedTruckA + 800 * LeasedTruckB + 900 * LeasedTruckC + 1000 * LeasedTruckD + 1100 * LeasedTruckE <= 25,000\n\n## Generate Constraint-3:\nEach region must be served by at least 3 trucks.\n// TruckA + LeasedTruckA >= 3; TruckB + LeasedTruckB >= 3; TruckC + LeasedTruckC >= 3; TruckD + LeasedTruckD >= 3; TruckE + LeasedTruckE >= 3",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nTruckA = model.addVar(vtype=\"INTEGER\", name=\"TruckA\") # number of company trucks for region A\nmodel.addCons(TruckA >= 0)\nTruckB = model.addVar(vtype=\"INTEGER\", name=\"TruckB\") # number of company trucks for region B\nmodel.addCons(TruckB >= 0)\nTruckC = model.addVar(vtype=\"INTEGER\", name=\"TruckC\") # number of company trucks for region C\nmodel.addCons(TruckC >= 0)\nTruckD = model.addVar(vtype=\"INTEGER\", name=\"TruckD\") # number of company trucks for region D\nmodel.addCons(TruckD >= 0)\nTruckE = model.addVar(vtype=\"INTEGER\", name=\"TruckE\") # number of company trucks for region E\nmodel.addCons(TruckE >= 0)\nLeasedTruckA = model.addVar(vtype=\"INTEGER\", name=\"LeasedTruckA\") # number of leased trucks for region A\nmodel.addCons(LeasedTruckA >= 0)\nLeasedTruckB = model.addVar(vtype=\"INTEGER\", name=\"LeasedTruckB\") # number of leased trucks for region B\nmodel.addCons(LeasedTruckB >= 0)\nLeasedTruckC = model.addVar(vtype=\"INTEGER\", name=\"LeasedTruckC\") # number of leased trucks for region C\nmodel.addCons(LeasedTruckC >= 0)\nLeasedTruckD = model.addVar(vtype=\"INTEGER\", name=\"LeasedTruckD\") # number of leased trucks for region D\nmodel.addCons(LeasedTruckD >= 0)\nLeasedTruckE = model.addVar(vtype=\"INTEGER\", name=\"LeasedTruckE\") # number of leased trucks for region E\nmodel.addCons(LeasedTruckE >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj * (TruckA + TruckB + TruckC + TruckD + TruckE + LeasedTruckA + LeasedTruckB + LeasedTruckC + LeasedTruckD + LeasedTruckE) == ((1200 - 500) * TruckA + (1200 - 700) * LeasedTruckA + (1300 - 600) * TruckB + (1300 - 800) * LeasedTruckB + (1400 - 700) * TruckC + (1400 - 900) * LeasedTruckC + (1500 - 800) * TruckD + (1500 - 1000) * LeasedTruckD + (1600 - 900) * TruckE + (1600 - 1100) * LeasedTruckE))\n\n# Add constraints\nmodel.addCons(TruckA + TruckB + TruckC + TruckD + TruckE + LeasedTruckA + LeasedTruckB + LeasedTruckC + LeasedTruckD + LeasedTruckE <= 40)\nmodel.addCons(700 * LeasedTruckA + 800 * LeasedTruckB + 900 * LeasedTruckC + 1000 * LeasedTruckD + 1100 * LeasedTruckE <= 25000)\nmodel.addCons(TruckA + LeasedTruckA >= 3)\nmodel.addCons(TruckB + LeasedTruckB >= 3)\nmodel.addCons(TruckC + LeasedTruckC >= 3)\nmodel.addCons(TruckD + LeasedTruckD >= 3)\nmodel.addCons(TruckE + LeasedTruckE >= 3)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Average Net Profit per Truck: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Average Net Profit per Truck": "700.00000000"
        },
        "question": "A logistics company operates a fleet of trucks and needs to plan the distribution of goods to five different regions: A, B, C, D, and E. The company must decide how many trucks to allocate to each region, considering the capacity and cost of each truck. Additionally, the company is considering leasing extra trucks from a third-party provider. The cost, cost per leased truck, and revenue per truck for each region are given in the following Table.\n\n| Region | Cost per Company Truck | Cost per Leased Truck | Revenue per Truck |\n|--------|------------------------|----------------------|-------------------|\n| A      | $500                   | $700                 | $1200             |\n| B      | $600                   | $800                 | $1300             |\n| C      | $700                   | $900                 | $1400             |\n| D      | $800                   | $1000                | $1500             |\n| E      | $900                   | $1100                | $1600             |\n\nThe company has a total of 40 trucks available, including both company-owned and leased trucks. The company has a budget of $25,000 for leasing trucks. Each region must be served by at least 3 trucks. The company aims to maximize the average net profit per truck (considering both company and leased trucks).\n",
        "type": "nonlinear-table",
        "index": 28,
        "length": 1314,
        "var_num": 10
    },
    {
        "question": "A high rise building is buying two types of furnaces, a new model and an old model. A new model furnace can heat 10 apartments and consumes 200 kWh per day. An old model can heat 15 apartments and consumes 250 kWh per day. Since the old model is harder to find, at most 35% of the furnaces can be the old model and at least 5 new model furnaces should be used. If the high rise needs to heat at least 200 apartments and has 3500 kWh of electricity available, how many of each furnace should be purchase to minimize the total number of furnaces?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_new_model = LpVariable(\"NumNewModel\", lowBound=0, cat='Integer') # number of new model furnaces\nnum_old_model = LpVariable(\"NumOldModel\", lowBound=0, cat='Integer') # number of old model furnaces\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"HighRiseFurnaces\", LpMinimize)\n\n# Define the objective function\nobjective = num_new_model + num_old_model\nproblem += objective # minimize the total number of furnaces\n\n# Define the constraints\nproblem += 10 * num_new_model + 15 * num_old_model >= 200 # must heat at least 200 apartments\nproblem += 200 * num_new_model + 250 * num_old_model <= 3500 # electricity consumption must not exceed 3500 kWh\nproblem += num_old_model <= (num_new_model + num_old_model) * .35 # old model furnaces cannot exceed 35% of the total\nproblem += num_new_model >= 5 # at least five new model furnaces should be used\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of new model furnaces:\", num_new_model.value())\nprint(\"The number of old model furnaces:\", num_old_model.value())\nprint(\"The total number of furnaces:\", objective.value())",
        "results": {
            "The number of new model furnaces": "5",
            "The number of old model furnaces": "10",
            "The total number of furnaces": "15"
        },
        "formulation": "minimize x+y\nSubject to: \ny <= 0.35(x+y)\nx >= 5\n10x+15y >= 200\n200x+250y <= 3500 (end)",
        "type": "linear-notable",
        "index": 29,
        "length": 544,
        "var_num": 2
    },
    {
        "question": "A meal service company delivers meals to customers either on electric bikes or scooters. A bike can hold 8 meals and requires 3 units of charge. A scooter can hold 5 meals and requires 2 units of charge. Since the city is more friendly towards scooters, at most 30% of the electric vehicles can be bikes and at least 20 scooters must be used. If the company only has 200 units of charge available, how many of each vehicle should be used to maximize the number of meals that can be delivered?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_bikes = LpVariable(\"NumBikes\", lowBound=0, cat='Integer') # number of bikes\nnum_scooters = LpVariable(\"NumScooters\", lowBound=0, cat='Integer') # number of scooters\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MealDelivery\", LpMaximize)\n\n# Define the objective function\nobjective = 8 * num_bikes + 5 * num_scooters\nproblem += objective # maximize the total number of meals delivered\n\n# Define the constraints\nproblem += 3 * num_bikes + 2 * num_scooters <= 200 # the total units of charge available is 200\nproblem += num_bikes - 0.3 * (num_bikes + num_scooters) <= 0 # at most 30% of the vehicles can be bikes\nproblem += num_scooters >= 20 # at least 20 scooters must be used\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of bikes:\", num_bikes.value())\nprint(\"The number of scooters:\", num_scooters.value())\nprint(\"The number of meals delivered:\", objective.value())",
        "results": {
            "The number of bikes": "26.0",
            "The number of scooters": "61.0",
            "The number of meals delivered": "513.0"
        },
        "formulation": "maximize 8x+5y\nSubject to: \nx <= 0.3(x+y)\ny >= 20\n3x+2y <= 200 (end)",
        "type": "linear-notable",
        "index": 30,
        "length": 492,
        "var_num": 2
    },
    {
        "question": "A framing company frames printed art and paintings. Each printed art takes 10 minutes for printing and 5 minutes for framing. Each painting takes 0 minutes for printing and 15 minutes for framing. The company has available 150 minutes for printing and 400 minutes for framing. If the profit per printed art sold is $5 and the profit per painting sold is $8, how many of each should they produce to maximize profits?",
        "formulation": "{\"variable\": [{\"description\": \"number of printed arts\", \"name\": \"x\"}, {\"description\": \"number of paintings\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit\", \"function\": \"5x + 8y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"printing time constraint\", \"function\": \"10x <= 150\"}, {\"description\": \"framing time constraint\", \"function\": \"5x + 15y <= 400\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_printed_arts = LpVariable(\"NumPrintedArts\", lowBound=0, cat='Integer') # number of printed arts\nnum_paintings = LpVariable(\"NumPaintings\", lowBound=0, cat='Integer') # number of paintings\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ArtFramingCompany\", LpMaximize)\n\n# Define the objective function\nobjective = 5 * num_printed_arts + 8 * num_paintings\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 10 * num_printed_arts <= 150 # printing time constraint\nproblem += 5 * num_printed_arts + 15 * num_paintings <= 400 # framing time constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of printed arts:\", num_printed_arts.value())\nprint(\"The number of paintings:\", num_paintings.value())\nprint(\"Total profit:\", objective.value())\n",
        "results": {
            "The number of printed arts": "14.0",
            "The number of paintings": "22.0",
            "Total profit": "246.0"
        },
        "type": "linear-notable",
        "index": 31,
        "length": 415,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA city is planning to install three types of renewable energy sources: solar panels, wind turbines, and hydroelectric plants. The city needs to decide how many units of each type of energy source to install. Additionally, the city must determine the optimal placement of these units to maximize energy output while minimizing environmental impact.\n// variables: {\"number of solar panels\": \"SolarPanels\", \"number of wind turbines\": \"WindTurbines\", \"number of hydroelectric plants\": \"HydroPlants\", \"environmental impact factor for solar panels\": \"SolarImpact\", \"environmental impact factor for wind turbines\": \"WindImpact\", \"environmental impact factor for hydroelectric plants\": \"HydroImpact\"}, where SolarPanels, WindTurbines, HydroPlants, SolarImpact, WindImpact, HydroImpact >= 0 and SolarPanels, WindTurbines, HydroPlants are integers.\n\n## Define Objective Function:\nThe energy output from each solar panel is 500 kWh, from each wind turbine is 1000 kWh, and from each hydroelectric plant is 2000 kWh. The environmental impact of each solar panel is 2 units, of each wind turbine is 3 units, and of each hydroelectric plant is 5 units. The city aims to maximize the Energy-Impact Ratio, which is defined as the total energy output divided by the total environmental impact.\n// EnergyOutput = 500 * SolarPanels + 1000 * WindTurbines + 2000 * HydroPlants\n// EnvironmentalImpact = 2 * SolarPanels + 3 * WindTurbines + 5 * HydroPlants\n// So, the objective function is: Maximize (EnergyOutput / EnvironmentalImpact)\n\n## Generate Constraint-1:\nThe city has a budget of $1,000,000 for the installation of renewable energy sources.\n// 1000 * SolarPanels + 2000 * WindTurbines + 5000 * HydroPlants <= 1000000\n\n## Generate Constraint-2:\nThe city has a total area of 5000 square meters available for installation.\n// SolarPanels + 2 * WindTurbines + 3 * HydroPlants <= 5000\n\n## Generate Constraint-3:\nThe city wants to ensure that at least 50% of the total energy output comes from solar panels.\n// 500 * SolarPanels >= 0.5 * (500 * SolarPanels + 1000 * WindTurbines + 2000 * HydroPlants)\n\n## Generate Constraint-4:\nThe city wants to install at least 1 unit of each type of energy source.\n// SolarPanels >= 1; WindTurbines >= 1; HydroPlants >= 1",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nSolarPanels = model.addVar(vtype=\"INTEGER\", name=\"SolarPanels\") # number of solar panels\nmodel.addCons(SolarPanels >= 0)\nWindTurbines = model.addVar(vtype=\"INTEGER\", name=\"WindTurbines\") # number of wind turbines\nmodel.addCons(WindTurbines >= 0)\nHydroPlants = model.addVar(vtype=\"INTEGER\", name=\"HydroPlants\") # number of hydroelectric plants\nmodel.addCons(HydroPlants >= 0)\nSolarImpact = model.addVar(vtype=\"CONTINUOUS\", name=\"SolarImpact\") # environmental impact factor for solar panels\nmodel.addCons(SolarImpact >= 0)\nWindImpact = model.addVar(vtype=\"CONTINUOUS\", name=\"WindImpact\") # environmental impact factor for wind turbines\nmodel.addCons(WindImpact >= 0)\nHydroImpact = model.addVar(vtype=\"CONTINUOUS\", name=\"HydroImpact\") # environmental impact factor for hydroelectric plants\nmodel.addCons(HydroImpact >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == (500 * SolarPanels + 1000 * WindTurbines + 2000 * HydroPlants) / (2 * SolarPanels + 3 * WindTurbines + 5 * HydroPlants))\n\n# Add constraints\nmodel.addCons(1000 * SolarPanels + 2000 * WindTurbines + 5000 * HydroPlants <= 1000000)\nmodel.addCons(SolarPanels + 2 * WindTurbines + 3 * HydroPlants <= 5000)\nmodel.addCons(500 * SolarPanels >= 0.5 * (500 * SolarPanels + 1000 * WindTurbines + 2000 * HydroPlants))\nmodel.addCons(SolarPanels >= 1)\nmodel.addCons(WindTurbines >= 1)\nmodel.addCons(HydroPlants >= 1)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Energy-Impact Ratio: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Energy-Impact Ratio": "307.5852470424496"
        },
        "question": "A city is planning to install three types of renewable energy sources: solar panels, wind turbines, and hydroelectric plants. The city needs to decide how many units of each type of energy source to install and determine the optimal placement to maximize energy output while minimizing environmental impact. The energy output and environmental impact of each type of energy source are given in the following Table.\n\n| Energy Source | Energy Output per Unit | Environmental Impact per Unit |\n|---------------|------------------------|-------------------------------|\n| Solar Panels  | 500 kWh                | 2 units                       |\n| Wind Turbines | 1000 kWh               | 3 units                       |\n| Hydroelectric Plants | 2000 kWh          | 5 units                       |\n\nThe city has a budget of $1,000,000 for the installation of renewable energy sources. The city has a total area of 5000 square meters available for installation. The city wants to ensure that at least 50% of the total energy output comes from solar panels. The city also wants to install at least 1 unit of each type of energy source. The city aims to maximize the Energy-Impact Ratio, which is defined as the total energy output divided by the total environmental impact.\n",
        "type": "nonlinear-table",
        "index": 32,
        "length": 1266,
        "var_num": 6
    },
    {
        "question": "Chip Green is the head groundskeeper at Birdie Valley Golf Club. For the mix of grass for the golf course, Chip has decided that the best fertilizer would be a 10-8-12 mixture. (Fertilizer is defined by three values: a, b and c where a is the percentage of nitrogen, b is the percentage of phosphorus, and c is the percentage of potash in the fertilizer. The remaining material is inert matter.) Chip can buy a 10-8-12 mix of fertilizer for $21.75 per 100 pounds, but there are other fertilizers on the market at a variety of prices. The chemical content of [nitrogen, phosphorus, potash] and prices are given below. Fertilizer 1: [10,8,12] for $21.75 per 100 pounds; Fertilizer 2: [8,11,15] for $23.75 per 100 pounds; Fertilizer 3: [12,7,12] for $22.00 per 100 pounds; Fertilizer 4: [10,10,10] for $19.50 per 100 pounds; Fertilizer 5: [15,10,6] for $18.50 per 100 pounds;. Chip would like to determine whether or not he could buy several fertilizers and mix them together to obtain a 10-8-12 mixture at a lower cost than $21.75 per 100 pounds. Recognizing that it might be impossible to obtain an exact 10-8-12 mix from the fertilizers, Chip is willing to accept chemical percentages of at least the target amounts, but no more than 0.5% above them (so the nitrogen level should be between 10% and 10.5%; the phosphorus level should be between 8% and 8.5%; the potash level should be between 12% and 12.5%). Please determine the proportion of each fertilizers in the compost.",
        "formulation": "# Variables:\nTo determine the optimal quantities of each fertilizer to buy, let's denote the number of bags of Fertilizer 1 as F1, the number of bags of Fertilizer 2 as F2, the number of bags of Fertilizer 3 as F3, the number of bags of Fertilizer 4 as F4, and the number of bags of Fertilizer 5 as F5.\n```Variables\nF1 // number of bags of Fertilizer 1\nF2 // number of bags of Fertilizer 2\nF3 // number of bags of Fertilizer 3\nF4 // number of bags of Fertilizer 4\nF5 // number of bags of Fertilizer 5\nF1, F2, F3, F4, F5 >= 0 and they are integers // non-negative and integer variables\n```\n\n# Objective Function:\nWe want to minimize the cost of the fertilizers per 100 pounds, so the objective function is the sum of the cost of each fertilizer multiplied by the respective quantity. The cost of Fertilizer 1 is $21.75 per 100 pounds * F1 bags, the cost of Fertilizer 2 is $23.75 per 100 pounds * F2 bags, the cost of Fertilizer 3 is $22.00 per 100 pounds * F3 bags, the cost of Fertilizer 4 is $19.50 per 100 pounds * F4 bags, and the cost of Fertilizer 5 is $18.50 per 100 pounds * F5 bags.\nSo the objective function is 21.75F1 + 23.75F2 + 22.00F3 + 19.50F4 + 18.50F5.\n```Objective Function\nMinimize: 21.75F1 + 23.75F2 + 22.00F3 + 19.50F4 + 18.50F5\n```\n\n# Constraints:\n- The maximum cost of the fertilizers per 100 pounds should be less than or equal to $21.75. This can be represented as 21.75F1 + 23.75F2 + 22.00F3 + 19.50F4 + 18.50F5 <= 21.75.\n- The minimum and maximum percentages of nitrogen, phosphorus, and potash should be within the specified ranges. The minimum percentage of nitrogen is 10%, so the sum of the nitrogen content of each fertilizer multiplied by their respective quantities should be greater than or equal to 10. Similarly, the maximum percentage of nitrogen is 10.5%, so the sum of the nitrogen content of each fertilizer multiplied by their respective quantities should be less than or equal to 10.5. The same logic applies to phosphorus and potash.\n- The sum of the quantities of each fertilizer should be equal to 1, as we want to obtain a mixture.\n```Constraints\n21.75F1 + 23.75F2 + 22.00F3 + 19.50F4 + 18.50F5 <= 21.75\n10F1 + 8F2 + 12F3 + 10F4 + 15F5 >= 10\n10F1 + 8F2 + 12F3 + 10F4 + 15F5 <= 10.5\n8F1 + 11F2 + 7F3 + 10F4 + 10F5 >= 8\n8F1 + 11F2 + 7F3 + 10F4 + 10F5 <= 8.5\n12F1 + 15F2 + 12F3 + 10F4 + 6F5 >= 12\n12F1 + 15F2 + 12F3 + 10F4 + 6F5 <= 12.5\nF1 + F2 + F3 + F4 + F5 = 1\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nF1 = LpVariable(\"F1\", lowBound=0, upBound=1, cat='Continuous') # The proportion of Fertilizer 1 in the compost\nF2 = LpVariable(\"F2\", lowBound=0, upBound=1, cat='Continuous') # The proportion of Fertilizer 2 in the compost\nF3 = LpVariable(\"F3\", lowBound=0, upBound=1, cat='Continuous') # The proportion of Fertilizer 3 in the compost\nF4 = LpVariable(\"F4\", lowBound=0, upBound=1, cat='Continuous') # The proportion of Fertilizer 4 in the compost\nF5 = LpVariable(\"F5\", lowBound=0, upBound=1, cat='Continuous') # The proportion of Fertilizer 5 in the compost\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FertilizerMix\", LpMinimize)\n\n# Define the objective function\nobjective = 21.75 * F1 + 23.75 * F2 + 22.00 * F3 + 19.50 * F4 + 18.50 * F5\nproblem += objective # minimize the total cost of fertilizers\n\n# Define the constraints\nproblem += 21.75 * F1 + 23.75 * F2 + 22.00 * F3 + 19.50 * F4 + 18.50 * F5 <= 21.75\nproblem += 10 * F1 + 8 * F2 + 12 * F3 + 10 * F4 + 15 * F5 >= 10\nproblem += 10 * F1 + 8 * F2 + 12 * F3 + 10 * F4 + 15 * F5 <= 10.5\nproblem += 8 * F1 + 11 * F2 + 7 * F3 + 10 * F4 + 10 * F5 >= 8\nproblem += 8 * F1 + 11 * F2 + 7 * F3 + 10 * F4 + 10 * F5 <= 8.5\nproblem += 12 * F1 + 15 * F2 + 12 * F3 + 10 * F4 + 6 * F5 >= 12\nproblem += 12 * F1 + 15 * F2 + 12 * F3 + 10 * F4 + 6 * F5 <= 12.5\nproblem += F1 + F2 + F3 + F4 + F5 == 1\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The quantity of Fertilizer 1:\", F1.value())\nprint(\"The quantity of Fertilizer 2:\", F2.value())\nprint(\"The quantity of Fertilizer 3:\", F3.value())\nprint(\"The quantity of Fertilizer 4:\", F4.value())\nprint(\"The quantity of Fertilizer 5:\", F5.value())\nprint(\"The minimum cost per 100 pounds:\", objective.value())\n",
        "results": {
            "The quantity of Fertilizer 1": "0.65",
            "The quantity of Fertilizer 2": "0.1",
            "The quantity of Fertilizer 3": "0.1",
            "The quantity of Fertilizer 4": "0.15",
            "The quantity of Fertilizer 5": "0.0"
        },
        "type": "linear-notable",
        "index": 33,
        "length": 1476,
        "var_num": 5
    },
    {
        "scenario": "## Define Variables:\nA manufacturing company produces three types of electronic components: A, B, and C. The company has four different production lines, each capable of producing these components with varying efficiencies.\n// variables: {\\\"workers on line 1\\\": \\\"W1\\\", \\\"workers on line 2\\\": \\\"W2\\\", \\\"workers on line 3\\\": \\\"W3\\\", \\\"workers on line 4\\\": \\\"W4\\\"}, where W1, W2, W3, W4 >= 0 & W1, W2, W3, W4 are integers\n\n## Define Objective Function:\nEach worker on line 1 can produce 10 units of component A, 5 units of component B, and 15 units of component C per hour. \nEach worker on line 2 can produce 8 units of component A, 10 units of component B, and 12 units of component C per hour. \nEach worker on line 3 can produce 12 units of component A, 6 units of component B, and 10 units of component C per hour. \nEach worker on line 4 can produce 15 units of component A, 8 units of component B, and 5 units of component C per hour.\nThe company needs to produce at least 1000 units of component A, 800 units of component B, and 1200 units of component C daily. The production lines can only be operated if at least 5 workers are assigned. Please determine the minimum production time to meet the daily demand.\n// The production time for component A: T_A = 1000 / (10 * W1 + 8 * W2 + 12 * W3 + 15 * W4)\n// The production time for component B: T_B = 800 / (5 * W1 + 10 * W2 + 6 * W3 + 8 * W4)\n// The production time for component C: T_C = 1200 / (15 * W1 + 12 * W2 + 10 * W3 + 5 * W4)\n// So, the objective function is: Minimize max(T_A, T_B, T_C)\n\n## Generate Constraint-1:\nThere are total 50 workers available.\n// W1 + W2 + W3 + W4 <= 50\n\n## Generate Constraint-2:\nEach production line can be utilized by up to 15 workers at a time.\n// W1 <= 15; W2 <= 15; W3 <= 15; W4 <= 15\n\n## Generate Constraint-3:\nEach production line must have at least 5 workers to operate.\n// W1 >= 5; W2 >= 5; W3 >= 5; W4 >= 5",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nW1 = model.addVar(vtype=\"INTEGER\", name=\"W1\") # workers on line 1\nmodel.addCons(W1 >= 0)\nW2 = model.addVar(vtype=\"INTEGER\", name=\"W2\") # workers on line 2\nmodel.addCons(W2 >= 0)\nW3 = model.addVar(vtype=\"INTEGER\", name=\"W3\") # workers on line 3\nmodel.addCons(W3 >= 0)\nW4 = model.addVar(vtype=\"INTEGER\", name=\"W4\") # workers on line 4\nmodel.addCons(W4 >= 0)\n\n# Define objective function\n# Since the objective function is not linear, we need to linearize it using a new variable and constraints\nT_A = model.addVar(vtype=\"CONTINUOUS\", name=\"T_A\")\nT_B = model.addVar(vtype=\"CONTINUOUS\", name=\"T_B\")\nT_C = model.addVar(vtype=\"CONTINUOUS\", name=\"T_C\")\nMaxTime = model.addVar(vtype=\"CONTINUOUS\", name=\"MaxTime\")\nmodel.setObjective(MaxTime, \"minimize\")\nmodel.addCons(T_A == 1000 / (10 * W1 + 8 * W2 + 12 * W3 + 15 * W4))\nmodel.addCons(T_B == 800 / (5 * W1 + 10 * W2 + 6 * W3 + 8 * W4))\nmodel.addCons(T_C == 1200 / (15 * W1 + 12 * W2 + 10 * W3 + 5 * W4))\nmodel.addCons(MaxTime >= T_A)\nmodel.addCons(MaxTime >= T_B)\nmodel.addCons(MaxTime >= T_C)\n\n# Add constraints\nmodel.addCons(W1 + W2 + W3 + W4 <= 50)\nmodel.addCons(W1 <= 15)\nmodel.addCons(W2 <= 15)\nmodel.addCons(W3 <= 15)\nmodel.addCons(W4 <= 15)\nmodel.addCons(W1 >= 5)\nmodel.addCons(W2 >= 5)\nmodel.addCons(W3 >= 5)\nmodel.addCons(W4 >= 5)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Minimum Production Time: \", model.getVal(MaxTime))\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Minimum Production Time": "2.1818181818181817"
        },
        "question": "A manufacturing company produces three types of electronic components: A, B, and C. The company has four different production lines, each capable of producing these components with varying efficiencies. Each worker on line 2 can produce 8 units of component A, 10 units of component B, and 12 units of component C per hour. Each worker on line 3 can produce 12 units of component A, 6 units of component B, and 10 units of component C per hour. Each worker on line 4 can produce 15 units of component A, 8 units of component B, and 5 units of component C per hour. The company needs to produce at least 1000 units of component A, 800 units of component B, and 1200 units of component C daily. The production lines can only be operated if at least 5 workers are assigned. Please determine the minimum production time to meet the daily demand. There are total 50 workers available. Each production line can be utilized by up to 15 workers at a time. Each production line must have at least 5 workers to operate. Each worker on line 1 can produce 10 units of component A, 5 units of component B, and 15 units of component C per hour.",
        "type": "nonlinear-notable",
        "index": 34,
        "length": 1130,
        "var_num": 7
    },
    {
        "question": "Calcium and Magnesium are found in two health supplements, health supplement A and health supplement B. One serving of health supplement A contains 30 grams of Calcium and 50 grams of Magnesium. One serving of health supplement B contains 60 grams of Calcium and 10 grams of Magnesium. The cost per health supplement for health supplement A is $14 and the cost per health supplement for health supplement B is $25. A patient must consume these two health supplements every day to get at least 400 grams of Calcium and 50 grams of Magnesium. Determine how much servings of each supplement the patient needs to minimize her daily cost.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nservings_A = LpVariable(\"ServingsA\", lowBound=0, cat='Integer') # servings of supplement A\nservings_B = LpVariable(\"ServingsB\", lowBound=0, cat='Integer') # servings of supplement B\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"HealthSupplementCost\", LpMinimize)\n\n# Define the objective function\nobjective = 14 * servings_A + 25 * servings_B\nproblem += objective # minimize the cost of the supplements\n\n# Define the constraints\nproblem += 30 * servings_A + 60 * servings_B >= 400 # the patient needs to consume at least 400 grams of Calcium\nproblem += 50 * servings_A + 10 * servings_B >= 50 # the patient needs to consume at least 50 grams of Magnesium\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of servings for health supplement A:\", servings_A.value())\nprint(\"The number of servings for health supplement B:\", servings_B.value())\nprint(\"The minimum daily cost:\", objective.value())",
        "results": {
            "The number of servings for health supplement A": "0.0",
            "The number of servings for health supplement B": "7",
            "The minimum daily cost": "175"
        },
        "formulation": "minimize 14x+25y\nSubject to: \n30x+60y >= 400\n50x+10y >= 50 (end)",
        "type": "linear-notable",
        "index": 35,
        "length": 633,
        "var_num": 2
    },
    {
        "question": "A hospital can transport their patients either using a type II ambulance or hospital van. The hospital needs to transport 320 patients every day. A type II ambulance is mounted on a truck-style chassis and can move 20 patients every shift and costs the hospital (including gas and salary) $820. A hospital van can move 15 patients and costs the hospital $550 every shift. The hospital can have at most 60% of shifts be hospital vans due to union limitations of the type II ambulance drivers. How many of shift using each type of vehicle should be scheduled to minimize the total cost to the hospital?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_ambulance_shifts = LpVariable(\"NumAmbulanceShifts\", lowBound=0, cat='Integer') # number of ambulance shifts\nnum_van_shifts = LpVariable(\"NumVanShifts\", lowBound=0, cat='Integer') # number of van shifts\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"HospitalTransport\", LpMinimize)\n\n# Define the objective function\nobjective = 820 * num_ambulance_shifts + 550 * num_van_shifts\nproblem += objective # minimize the total cost to the hospital\n\n# Define the constraints\nproblem += 20 * num_ambulance_shifts + 15 * num_van_shifts >= 320 # need to transport 320 patients every day\nproblem += num_van_shifts <= 0.6 * (num_ambulance_shifts + num_van_shifts) # at most 60% of shifts can be vans\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of ambulance shifts:\", num_ambulance_shifts.value())\nprint(\"The number of van shifts:\", num_van_shifts.value())\nprint(\"The total cost to the hospital:\", objective.value())",
        "results": {
            "The number of ambulance shifts": "10.0",
            "The number of van shifts": "8.0",
            "The total cost to the hospital": "12600.0"
        },
        "formulation": "minimize 820x+550y\nSubject to: \n20x+15y >= 320\ny <= 0.6(x+y) (end)",
        "type": "linear-notable",
        "index": 36,
        "length": 600,
        "var_num": 2
    },
    {
        "question": "A cosmetics company makes high-end skincare products whose main customers are wealthy women, both young girls and middle-aged women. In order to promote their product line, they decided to invest in short commercial spots on two types of programs: social media and television. While each social media commercial is seen by 5 million young girls and 1 million middle-aged women, each television commercial is seen by 3 million young girls and 7 million middle-aged women. A 1-minute social media ad costs $30,000, and a 1-minute television ad costs $50,000. The company would like the commercials to be seen by at least 20 million young girls and 30 million middle-aged women. Use linear programming to determine how the cosmetics company can meet its advertising requirements at minimum cost.",
        "formulation": "{\"variable\": [{\"description\": \"number of social media commercials\", \"name\": \"x\"}, {\"description\": \"number of television commercials\", \"name\": \"y\"}], \"objective\": [{\"description\": \"cost of commercials\", \"function\": \"30000x + 50000y\", \"sense\": \"Minimize\"}], \"constraint\": [{\"description\": \"viewership from young girls\", \"function\": \"5x + 3y >= 20\"}, {\"description\": \"viewership from middle-aged women\", \"function\": \"x + 7y >= 30\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"num_social_media_commercials\", lowBound=0, cat='Integer') # number of social media commercials\ny = LpVariable(\"num_television_commercials\", lowBound=0, cat='Integer') # number of television commercials\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"AdvertisingCostMinimization\", LpMinimize)\n\n# Define the objective function\nproblem += 30000 * x + 50000 * y # minimize the total cost of commercials\n\n# Define the constraints\nproblem += 5 * x + 3 * y >= 20 # viewership from young girls must be at least 20 million\nproblem += 1 * x + 7 * y >= 30 # viewership from middle-aged women must be at least 30 million\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of social media commercials:\", x.value())\nprint(\"The number of television commercials:\", y.value())\nprint(\"The minimum cost:\", value(problem.objective))\n",
        "results": {
            "The number of social media commercials": "2",
            "The number of television commercials": "4",
            "The minimum cost": "260000.0"
        },
        "type": "linear-notable",
        "index": 37,
        "length": 792,
        "var_num": 2
    },
    {
        "question": "Euing Gas produces two types of gasoline (gas 1 and gas 2) from two types of oil (oil 1 and oil 2). Each gallon of gas 1 must contain at least 50 percent oil 1, and each gallon of gas 2 must contain at least 60 percent oil 1. Each gallon of gas 1 can be sold for 12$, and each gallon of gas 2 can be sold for 14$. Currently, 500 gallons of oil 1 and 1,000 gallons of oil 2 are available. As many as 1,500 more gallons of oil 1 can be purchased at the following prices: first 500 gallons, 25$ per gallon; next 500 gallons, 20$ per gallon; next 500 gallons, 15$ per gallon. Maximize Euing's profits (revenues - purchasing costs).",
        "formulation": "# Variables:\nWe need to determine the optimal amounts of oil and gas to maximize profits. Let's denote the following variables:\n```Variables\nx1 // amount of oil 1 purchased\nx11 // amount of oil 1 used to produce gas 1\nx12 // amount of oil 1 used to produce gas 2\nx21 // amount of oil 2 used to produce gas 1\nx22 // amount of oil 2 used to produce gas 2\nx1, x11, x12, x21, x22 >= 0\n```\n\n# Objective Function:\nWe want to maximize profits, which is the difference between the total revenue and the purchasing costs. The total revenue is the sum of the revenue from gas 1 and gas 2, which is 12x11 + 14x12 + 12x21 + 14x22. \nThe purchasing costs depend on the amount of oil 1 purchased. \nIf x1 is less than or equal to 500, the purchasing cost is 25x1. \nIf x1 is between 500 and 1000, the purchasing cost is 20(x1-500) + 500 * 25 = 20x1 + 2500 \nIf x1 is between 1000 and 1500, the purchasing cost is 15(x1-1000) + 500 * 20 + 500 * 25 = 15x1 + 7500\nTherefore, the objective function is:\n```Objective Function\nMaximize: 12x11 + 14x12 + 12x21 + 14x22 - \\left\\{\n        25x1 (0 <= x1 <= 500), \\\n    20x1 + 2500 (500 <= x1 <= 1000), \\\n    15x1 + 7500 (1000 <= x1 <= 1500)  \n\right\n.}\n```\n\n# Constraints:\nEach gallon of gas 1 must contain at least 50% oil 1, so the constraint on oil 1 usage for gas 1 is 0.\nSo, x11 / (x11 + x21) >= 0.5, which is equivalent to 0.5x11 - 0.5x21 >= 0.\nEach gallon of gas 2 must contain at least 60% oil 1, so the constraint on oil 1 usage for gas 2 is 0.\nSo, x12 / (x12 + x22) >= 0.6, which is equivalent to 0.4x12 - 0.6x22 >= 0.\nThe amount of oil 1 used to produce gas 1 and gas 2 cannot exceed the amount of oil 1 purchased, so the constraint on oil 1 usage is x11 + x12 <= x1 + 500.\nThe amount of oil 2 used to produce gas 1 and gas 2 cannot exceed the amount of oil 2 available, so the constraint on oil 2 usage is x21 + x22 <= 1000.\nThe amount of oil 1 purchased cannot exceed 1500 gallons, so the upper bound constraint on oil 1 purchased is x1 <= 1500.\n```Constraints\n0.5x11 - 0.5x21 >= 0\n0.4x12 - 0.6x22 >= 0\nx11 + x12 <= x1 + 500\nx21 + x22 <= 1000\nx1 <= 1500\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx1 = LpVariable(\"x1\", lowBound=0, cat='Continuous') # amount of oil 1 purchased\nx11 = LpVariable(\"x11\", lowBound=0, cat='Continuous') # amount of oil 1 used to produce gas 1\nx12 = LpVariable(\"x12\", lowBound=0, cat='Continuous') # amount of oil 1 used to produce gas 2\nx21 = LpVariable(\"x21\", lowBound=0, cat='Continuous') # amount of oil 2 used to produce gas 1\nx22 = LpVariable(\"x22\", lowBound=0, cat='Continuous') # amount of oil 2 used to produce gas 2\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"EuingGasProfitMaximization\", LpMaximize)\n\n# Define the objective function\n# We need to handle the piecewise linear cost function for purchasing oil 1\ncosts = (25 * x1, 20 * x1 + 2500, 15 * x1 + 7500)\nbreakpoints = (0, 500, 1000)\npurchase_cost = lpSum([costs[i] if breakpoints[i] <= x1 <= breakpoints[i+1] else 0 for i in range(len(breakpoints)-1)])\nrevenue = 12 * x11 + 14 * x12 + 12 * x21 + 14 * x22\nproblem += revenue - purchase_cost\n\n# Define the constraints\nproblem += 0.5 * x11 - 0.5 * x21 >= 0 # at least 50% oil 1 in gas 1\nproblem += 0.4 * x12 - 0.6 * x22 >= 0 # at least 60% oil 1 in gas 2\nproblem += x11 + x12 <= x1 + 500 # oil 1 usage\nproblem += x21 + x22 <= 1000 # oil 2 usage\nproblem += x1 <= 1500 # oil 1 purchase limit\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The amount of oil 1 purchased:\", x1.value())\nprint(\"The amount of oil 1 used to produce gas 1:\", x11.value())\nprint(\"The amount of oil 1 used to produce gas 2:\", x12.value())\nprint(\"The amount of oil 2 used to produce gas 1:\", x21.value())\nprint(\"The amount of oil 2 used to produce gas 2:\", x22.value())\nprint(\"The maximum profit:\", problem.objective.value())\n",
        "results": {
            "The amount of oil 1 purchased": "0.0",
            "The amount of oil 1 used to produce gas 1": "500.0",
            "The amount of oil 1 used to produce gas 2": "-0.0",
            "The amount of oil 2 used to produce gas 1": "500.0",
            "The amount of oil 2 used to produce gas 2": "0.0",
            "The maximum profit": "9500.0"
        },
        "type": "linear-notable",
        "index": 38,
        "length": 627,
        "var_num": 5
    },
    {
        "question": "Kevin needs vitamins to supplement his diet. He needs to get at least 25 units of vitamin A and 40 units of vitamin B everyday. In order to do so, he can buy capsules named Special Formula and One Daily. Each capsule of Special Formula contains 4 units of vitamin A and 5 units of vitamin B. Each capsule of One Daily contains 3 units of vitamin A and 7 units of vitamin B. If the cost per Special Formula capsule is $0.50 and the cost per One Daily capsule is $0.20, how many of each should he buy to minimize his cost?",
        "formulation": "{\"variable\": [{\"description\": \"number of Special Formula capsules\", \"name\": \"x\"}, {\"description\": \"number of One Daily capsules\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total cost of capsules\", \"function\": \"0.50x + 0.20y\", \"sense\": \"Minimize\"}], \"constraint\": [{\"description\": \"vitamin A requirement\", \"function\": \"4x + 3y >= 25\"}, {\"description\": \"vitamin B requirement\", \"function\": \"5x + 7y >= 40\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_special_formula = LpVariable(\"NumSpecialFormula\", lowBound=0, cat='Integer') # number of Special Formula capsules\nnum_one_daily = LpVariable(\"NumOneDaily\", lowBound=0, cat='Integer') # number of One Daily capsules\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"VitaminSupplement\", LpMinimize)\n\n# Define the objective function\nobjective = 0.50 * num_special_formula + 0.20 * num_one_daily\nproblem += objective # minimize the cost of capsules\n\n# Define the constraints\nproblem += 4 * num_special_formula + 3 * num_one_daily >= 25 # vitamin A requirement\nproblem += 5 * num_special_formula + 7 * num_one_daily >= 40 # vitamin B requirement\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of Special Formula capsules:\", num_special_formula.value())\nprint(\"The number of One Daily capsules:\", num_one_daily.value())\nprint(\"The total cost:\", objective.value())\n",
        "results": {
            "The number of Special Formula capsules": "0.0",
            "The number of One Daily capsules": "9",
            "The total cost": "1.8"
        },
        "type": "linear-notable",
        "index": 39,
        "length": 520,
        "var_num": 2
    },
    {
        "question": "A four-product T-shirt/sweatshirt manufacturing company must complete production within 72 hours. The truck capacity is limited to 1,200 standard-sized boxes, with each standard box holding 12 T-shirts. A box for a dozen sweatshirts is three times the size of a standard box. With $25,000 available for a production run and 500 dozen blank T-shirts and sweatshirts in stock, determine how many dozens (boxes) of each type of shirt should be produced to maximize profit. Consider the following table for resource requirements for the product mix.\n\nTable (Resource requirements per dozen of each product type):\n| Product Type | Processing Time (hr/dozen) | Cost ($/dozen) | Profit ($/dozen) |\n| ------------ | -------------------------- | -------------- | ---------------- |\n| Sweatshirt - F | 0.10 | $36 | $90 |\n| Sweatshirt - B/F | 0.25 | $48 | $125 |\n| T-shirt - F | 0.08 | $25 | $45 |\n| T-shirt - B/F | 0.21 | $35 | $65 |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for each type of shirt. Let's denote the number of sweatshirts with front printing as SF, the number of sweatshirts with back and front printing as SBF, the number of T-shirts with front printing as TF, and the number of T-shirts with back and front printing as TBF.\n```Variables\nSF //number of sweatshirts with front printing to produce\nSBF //number of sweatshirts with back and front printing to produce\nTF //number of T-shirts with front printing to produce\nTBF //number of T-shirts with back and front printing to produce\nSF, SBF, TF, TBF >= 0 and they are integers //non-negative integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function is given by the sum of the profit from each type of shirt. The profit for each type of shirt is given as follows:\n- Sweatshirt with front printing: $90 per dozen * SF dozens\n- Sweatshirt with back and front printing: $125 per dozen * SBF dozens\n- T-shirt with front printing: $45 per dozen * TF dozens\n- T-shirt with back and front printing: $65 per dozen * TBF dozens\nTherefore, the objective function is 90SF + 125SBF + 45TF + 65TBF.\n```Objective Function\nMaximize: 90SF + 125SBF + 45TF + 65TBF\n```\n\n# Constraints:\n- Processing Time Constraint: The total processing time for each type of shirt should not exceed 72 hours. The processing time for each type of shirt is given as follows:\n  - Sweatshirt with front printing: 0.10 hours per dozen * SF dozens\n  - Sweatshirt with back and front printing: 0.25 hours per dozen * SBF dozens\n  - T-shirt with front printing: 0.08 hours per dozen * TF dozens\n  - T-shirt with back and front printing: 0.21 hours per dozen * TBF dozens\n  Therefore, the processing time constraint is 0.10SF + 0.25SBF + 0.08TF + 0.21TBF <= 72.\n- Truck Capacity Constraint: The total number of boxes of shirts should not exceed the truck capacity of 1,200 standard-sized boxes. Each standard-sized box holds 12 T-shirts, and each one-dozen sweatshirt box is three times the size of a standard box. Therefore, the truck capacity constraint is 3SF + 3SBF + TF + TBF <= 1,200.\n- Available Resources Constraint: The total cost of producing each type of shirt should not exceed the available budget of $25,000. The cost for each type of shirt is given as follows:\n  - Sweatshirt with front printing: $36 per dozen * SF dozens\n  - Sweatshirt with back and front printing: $48 per dozen * SBF dozens\n  - T-shirt with front printing: $25 per dozen * TF dozens\n  - T-shirt with back and front printing: $35 per dozen * TBF dozens\n  Therefore, the available resources constraint is 36SF + 48SBF + 25TF + 35TBF <= 25,000.\n- Blank Shirts Constraint: The total number of blank shirts (without any printing) should not exceed the available stock of 500 dozen shirts. Therefore, the blank shirts constraint is SF + SBF <= 500.\n- Total Number of Shirts Constraint: The total number of shirts produced should be equal to 500 dozen shirts. Therefore, the total number of shirts constraint is TF + TBF = 500.\n```Constraints\n0.10SF + 0.25SBF + 0.08TF + 0.21TBF <= 72 //Processing Time Constraint\n3SF + 3SBF + TF + TBF <= 1,200 //Truck Capacity Constraint\n36SF + 48SBF + 25TF + 35TBF <= 25,000 //Available Resources Constraint\nSF + SBF <= 500 //Blank Shirts Constraint\nTF + TBF = 500 //Total Number of Shirts Constraint\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nSF = LpVariable(\"Sweatshirts_Front\", lowBound=0, cat='Integer')\nSBF = LpVariable(\"Sweatshirts_Back_Front\", lowBound=0, cat='Integer')\nTF = LpVariable(\"Tshirts_Front\", lowBound=0, cat='Integer')\nTBF = LpVariable(\"Tshirts_Back_Front\", lowBound=0, cat='Integer')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nproblem += 90 * SF + 125 * SBF + 45 * TF + 65 * TBF\n\n# Define the constraints\nproblem += 0.10 * SF + 0.25 * SBF + 0.08 * TF + 0.21 * TBF <= 72\nproblem += 3 * SF + 3 * SBF + TF + TBF <= 1200\nproblem += 36 * SF + 48 * SBF + 25 * TF + 35 * TBF <= 25000\nproblem += SF + SBF <= 500\nproblem += TF + TBF == 500\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of sweatshirts with front printing to produce:\", SF.value())\nprint(\"The number of sweatshirts with back and front printing to produce:\", SBF.value())\nprint(\"The number of T-shirts with front printing to produce:\", TF.value())\nprint(\"The number of T-shirts with back and front printing to produce:\", TBF.value())\nprint(\"The maximum profit:\", value(problem.objective))\n",
        "results": {
            "The number of sweatshirts with front printing to produce": "175.0",
            "The number of sweatshirts with back and front printing to produce": "58.0",
            "The number of T-shirts with front printing to produce": "500.0",
            "The number of T-shirts with back and front printing to produce": "0.0",
            "The maximum profit": "45500.0"
        },
        "type": "linear-table",
        "index": 40,
        "length": 923,
        "var_num": 4
    },
    {
        "question": "A tea estate has available 500 acres of land and they need to pick the tea leaves either using a traditional machine or modern machine. For each acre of land, the traditional machine can pick 30 kg of tea leaves, creates 10 kg of waste, and requires 20 liters of fuel. For each acre of land, the modern machine can pick 40 kg of tea leaves, creates 15 kg of waste, and requires 15 liters of fuel. The estate has available 9000 liters of fuel can handle at most 6000 kg of waste. For how many acres should each machine be used to maximize the amount of tea leaves that can be picked?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\ntraditional_acres = LpVariable(\"TraditionalAcres\", lowBound=0) # acres used for traditional machine\nmodern_acres = LpVariable(\"ModernAcres\", lowBound=0) # acres used for modern machine\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"TeaEstate\", LpMaximize)\n\n# Define the objective function\nobjective = 30 * traditional_acres + 40 * modern_acres\nproblem += objective # maximize the amount of tea leaves that can be picked\n\n# Define the constraints\nproblem += traditional_acres + modern_acres <= 500 # the total acres cannot exceed 500\nproblem += 20 * traditional_acres + 15 * modern_acres <= 9000 # the fuel used must be at most 9000 liters\nproblem += 10 * traditional_acres + 15 * modern_acres <= 6000 # the waste created must be at most 6000 kg\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The acres for traditional machine:\", traditional_acres.value())\nprint(\"The acres for modern machine:\", modern_acres.value())\nprint(\"The amount of tea leaves picked:\", objective.value())",
        "results": {
            "The acres for traditional machine": "300.0",
            "The acres for modern machine": "200.0",
            "The amount of tea leaves picked": "17000.0"
        },
        "formulation": "maximize 30x+40y\nSubject to: \n20x+15y <= 9000\n10x+15y <= 6000 (end)",
        "type": "linear-notable",
        "index": 41,
        "length": 582,
        "var_num": 2
    },
    {
        "question": "A woodshop can purchase two types of saws, a miter saw and a circular saw. A miter saw can cut 50 planks of wood and produces 60 units of sawdust per day. A circular saw can cut 70 planks of wood and produces 100 units of sawdust per day. The woodshop must cut at least 1500 planks of wood per day. However, to avoid too much pollution in the woodshop they can produce at most 2000 units of sawdust per day. How many of each type of saw should be purchased to minimize the total number of saws needed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_miter_saws = LpVariable(\"NumMiterSaws\", lowBound=0, cat='Integer') # number of miter saws\nnum_circular_saws = LpVariable(\"NumCircularSaws\", lowBound=0, cat='Integer') # number of circular saws\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"WoodshopSaws\", LpMinimize)\n\n# Define the objective function\nobjective = num_miter_saws + num_circular_saws\nproblem += objective # minimize the total number of saws\n\n# Define the constraints\nproblem += 50 * num_miter_saws + 70 * num_circular_saws >= 1500 # at least 1500 planks of wood must be cut per day\nproblem += 60 * num_miter_saws + 100 * num_circular_saws <= 2000 # at most 2000 units of sawdust can be produced per day\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of miter saws:\", num_miter_saws.value())\nprint(\"The number of circular saws:\", num_circular_saws.value())",
        "results": {
            "The number of miter saws": "15.0",
            "The number of circular saws": "11.0"
        },
        "formulation": "minimize x+y\nSubject to: \n50x+70y >= 1500\n60x+100y <= 2000 (end)",
        "type": "linear-notable",
        "index": 42,
        "length": 501,
        "var_num": 1
    },
    {
        "question": "Many companies or institutions, especially those operating 24 h daily, usually divide the daily schedule into discrete (say, T) time windows. Examples include hospitals, restaurants, call centers, and police departments. The number of staff required typically varies among time windows. Staff members are scheduled to n different (work) shifts, each covering m(m < T) consecutive time windows. Staff members assigned to different shifts may be paid differently, depending on which shift they work. For example, those working overnight are usually paid at a higher rate. The scheduling problem is to determine the number of workers to be assigned to each shift so that the company meets the demand in each time window. Following is an example of a 24 h fast food restaurant. The daily operation is divided into eight consecutive time windows, each of 3 h duration. A shift covers three consecutive time windows (i.e., 9h), as shown in Table: \nTime Window, Shift 1 2 3 4, \nWorkers Required: \n6 a.m.-9 a.m. Shift 1 and 4, the Required 55; \n9 a.m.-12 noon Shift 1, the Required 46; \n12 noon-3 p.m. Shift 1 and 2, the Required 59; \n3 p.m.-6 p.m. Shift 2, the Required 23; \n6 p.m.-9 p.m. Shift 2 and 3, the Required 60; \n9 p.m.-12 a.m. Shift 3, the Required 38; \n12 a.m.-3 a.m. Shift 3 and 4, the Required 20; \n3 a.m.-6 a.m. Shift 4, the Required 30. \nThe wage rate per 9 h for shift 1, 2, 3, 4: $135, $140, $190, X $188.",
        "formulation": "# Define Variables:\nFirst, we need to determine the number of workers needed for each shift. Let's denote the number of workers needed for shift 1 as W1, for shift 2 as W2, and for shift 3 as W3.\n```Variables\nW1 //number of workers needed for shift 1\nW2 //number of workers needed for shift 2\nW3 //number of workers needed for shift 3\nW1, W2, W3 >= 0 and they are integers\n```\n\n# Objective Function:\nWe want to minimize the total wage cost, so the objective function is given by the sum of the wage cost for each shift. The wage cost for shift 1 is $135 per 9 hours * W1 workers. The wage cost for shift 2 is $140 per 9 hours * W2 workers. The wage cost for shift 3 is $190 per 9 hours * W3 workers.\nSo the objective function is 135W1 + 140W2 + 190W3.\n```Objective Function\nMinimize: 135W1 + 140W2 + 190W3\n```\n\n# Constraints:\nWe need to ensure that the demand for each time window is met. The demand constraint for each time window is given by the sum of the workers needed for the shifts that cover that time window.\n```Constraints\nW1 + W3 >= 55 //demand constraint for time window 1\nW1 >= 46 //demand constraint for time window 2\nW1 + W2 >= 59 //demand constraint for time window 3\nW2 >= 23 //demand constraint for time window 4\nW2 + W3 >= 60 //demand constraint for time window 5\nW3 >= 38 //demand constraint for time window 6\nW3 + W1 >= 20 //demand constraint for time window 7\nW1 >= 30 //demand constraint for time window 8\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nW1 = LpVariable(\"W1\", lowBound=0, cat='Integer') # number of workers needed for shift 1\nW2 = LpVariable(\"W2\", lowBound=0, cat='Integer') # number of workers needed for shift 2\nW3 = LpVariable(\"W3\", lowBound=0, cat='Integer') # number of workers needed for shift 3\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"StaffScheduling\", LpMinimize)\n\n# Define the objective function\nobjective = 135 * W1 + 140 * W2 + 190 * W3\nproblem += objective # minimize the total wage cost\n\n# Define the constraints\nproblem += W1 + W3 >= 55 # demand constraint for time window 1\nproblem += W1 >= 46 # demand constraint for time window 2\nproblem += W1 + W2 >= 59 # demand constraint for time window 3\nproblem += W2 >= 23 # demand constraint for time window 4\nproblem += W2 + W3 >= 60 # demand constraint for time window 5\nproblem += W3 >= 38 # demand constraint for time window 6\nproblem += W3 + W1 >= 20 # demand constraint for time window 7\nproblem += W1 >= 30 # demand constraint for time window 8\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of workers for shift 1:\", W1.value())\nprint(\"The number of workers for shift 2:\", W2.value())\nprint(\"The number of workers for shift 3:\", W3.value())\nprint(\"The total wage cost:\", objective.value())\n",
        "results": {
            "The number of workers for shift 1": "46.0",
            "The number of workers for shift 2": "23.0",
            "The number of workers for shift 3": "38.0",
            "The total wage cost": "16650.0"
        },
        "type": "linear-table",
        "index": 43,
        "length": 1415,
        "var_num": 3
    },
    {
        "question": "An investor has $70,000 to divide among several investment instruments. The returns for municipal bonds, CDs, t-bills, and growth stocks are given in the following Table. The investor must adhere to specific guidelines for the investment distribution: 1. No more than 20% in municipal bonds. 2. Investment in CDs should not exceed the other three alternatives. 3. At least 30% invested in t-bills and CDs. 4. More should be invested in CDs and t-bills than in municipal bonds and growth stocks by a ratio of 1.2 to 1. 5. All $70,000 should be invested. Maximize the profit.\n\nTable (Investment returns for each instrument):\n| Investment Instrument | Return Rate |\n| --------------------- | ----------- |\n| Municipal Bonds       | 8.5%        |\n| CDs                   | 5%          |\n| T-bills               | 6.5%        |\n| Growth Stocks         | 13%         |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal investment amounts for municipal bonds, CDs, treasury bills, and growth stocks. Let's denote the amount invested in municipal bonds as M, the amount invested in CDs as C, the amount invested in treasury bills as T, and the amount invested in growth stocks as G.\n```Variables\nM // amount invested in municipal bonds\nC // amount invested in CDs\nT // amount invested in treasury bills\nG // amount invested in growth stocks\nM, C, T, G >= 0\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function (profit) is given by the sum of the returns from each investment. The return from municipal bonds is 8.5% of the amount invested in municipal bonds, which is 0.085M. The return from CDs is 5% of the amount invested in CDs, which is 0.05C. The return from treasury bills is 6.5% of the amount invested in treasury bills, which is 0.065T. The return from growth stocks is 13% of the amount invested in growth stocks, which is 0.13G. Therefore, the objective function is 0.085M + 0.05C + 0.065T + 0.13G.\n```Objective Function\nMaximize: 0.085M + 0.05C + 0.065T + 0.13G\n```\n\n# Constraints:\n1. No more than 20% in municipal bonds: M <= 0.2 * (M + C + T + G)\n2. Investment in CDs should not exceed the other three alternatives: C <= M + T + G\n3. At least 30% invested in treasury bills and CDs: T + C >= 0.3 * (M + C + T + G)\n4. More should be invested in CDs and treasury bills than in municipal bonds and growth stocks by a ratio of 1.2 to 1: (C + T) / (M + G) >= 1.2, which is equivalent to C + T - 1.2M - 1.2G >= 0\n5. All $70,000 should be invested: M + C + T + G = 70000\nSubstituting the equation M + C + T + G = 70000 into the first four constraints, we get the following constraints:\n1. M <= 0.2 * 70000 = 14000\n2.  C <= M + T + G\n3. T + C >= 0.3 * 70000 = 21000\n4. C + T - 1.2M - 1.2G >= 0\nSo the constraints are as follows:\n```Constraints\nM <= 14000\nC <= M + T + G\nT + C >= 21000\nC + T - 1.2M - 1.2G >= 0\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nM = LpVariable(\"MunicipalBonds\", lowBound=0, cat='Continuous')\nC = LpVariable(\"CDs\", lowBound=0, cat='Continuous')\nT = LpVariable(\"TBills\", lowBound=0, cat='Continuous')\nG = LpVariable(\"GrowthStocks\", lowBound=0, cat='Continuous')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"InvestmentPortfolio\", LpMaximize)\n\n# Define the objective function\nobjective = 0.085 * M + 0.05 * C + 0.065 * T + 0.13 * G\nproblem += objective\n\n# Define the constraints\nproblem += M <= 14000\nproblem += C <= M + T + G\nproblem += T + C >= 21000\nproblem += C + T - 1.2 * M - 1.2 * G >= 0\nproblem += M + C + T + G == 70000\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Amount to invest in Municipal Bonds:\", M.value())\nprint(\"Amount to invest in CDs:\", C.value())\nprint(\"Amount to invest in T-Bills:\", T.value())\nprint(\"Amount to invest in Growth Stocks:\", G.value())\nprint(\"Total Profit:\", value(problem.objective))\n",
        "results": {
            "Amount to invest in Municipal Bonds": "0.0",
            "Amount to invest in CDs": "0.0",
            "Amount to invest in T-Bills": "38181.818",
            "Amount to invest in Growth Stocks": "31818.182",
            "Total Profit": "6618.1818299999995"
        },
        "type": "linear-table",
        "index": 44,
        "length": 862,
        "var_num": 4
    },
    {
        "question": "Platinum Database sells two types of subscription software packages: a personal license and a commercial license which will cost $550 and $2000 to generate respectively. The marketing department estimates that they can sell at most 300 licenses for both versions combined a month. The profit per personal license is $450 and the profit per commercial version is $1200. If the company does not want to spend more than $400000, how many of each software package should they produce to maximize the profits.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_personal_license = LpVariable(\"NumPersonalLicense\", lowBound=0, cat='Integer') # number of personal licenses\nnum_commercial_license = LpVariable(\"NumCommercialLicense\", lowBound=0, cat='Integer') # number of commercial licenses\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SoftwareProduction\", LpMaximize)\n\n# Define the objective function\nobjective = 450 * num_personal_license + 1200 * num_commercial_license\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 550 * num_personal_license + 2000 * num_commercial_license <= 400000 # the cost must be at most $400,000\nproblem += num_personal_license + num_commercial_license <= 300 # can't sell more than 300 licenses\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of personal licenses:\", num_personal_license.value())\nprint(\"The number of commercial licenses:\", num_commercial_license.value())\nprint(\"Total profit:\", objective.value())",
        "results": {
            "The number of personal licenses": "138.0",
            "The number of commercial licenses": "162.0",
            "Total profit": "256500.0"
        },
        "formulation": "maximize 450x+1200y\nSubject to: \n550x+2000y <= 400000\nx+y <= 300 (end)",
        "type": "linear-notable",
        "index": 45,
        "length": 504,
        "var_num": 2
    },
    {
        "question": "For a cylinder with surface area 50, including the top and the bottom, find the ratio of height to base radius that maximizes the volume.",
        "scenario": "## Define Variables:\nYou need to construct a cylinder.\n// variables: {\"radius of the cylinder\": \"r\", \"height of the cylinder\": \"h\"}, where r, h >= 0\n\n## Define Objective Function:\nFind the shape of the cylinder that maximizes the volume.\n// The volume of the cylinder is given by the formula V = \u03c0r^2h.\n// Therefore, the objective function is: Maximize V = \u03c0r^2h\n\n## Generate Constraint-1:\nThe surface area of the cylinder is at most 50 square units, including the top and the bottom.\n// The surface area of the cylinder is given by the formula 2\u03c0r^2 + 2\u03c0rh, and it is given that the surface area is at most 50. Therefore, the constraint is 2\u03c0r^2 + 2\u03c0rh <= 50",
        "code": "from pyscipopt import Model\nimport math\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nr = model.addVar(vtype=\"CONTINUOUS\", name=\"r\", lb=0, ub=100) # radius of the cylinder\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\", lb=0, ub=100) # height of the cylinder\n\n# Define objective function\nV = model.addVar('V', lb=0)\nmodel.setObjective(V, \"maximize\")\nmodel.addCons(V == math.pi * r**2 * h)\n\n# Add constraints\nmodel.addCons(2 * math.pi * r**2 + 2 * math.pi * r * h <= 50)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The radius of the best cylinder:\", model.getVal(r))\n    print(\"The height of the best cylinder:\", model.getVal(h))\n    print(\"The maximum volume of the cylinder: \", model.getVal(V))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The radius of the best cylinder": "1.6287969834860323",
            "The height of the best cylinder": "3.256862413133507",
            "The maximum volume of the cylinder": "27.14458472592633"
        },
        "type": "nonlinear-notable",
        "index": 46,
        "length": 137,
        "var_num": 2
    },
    {
        "question": "An open-top box is to be made from a rectangular piece of cardboard by removing a square from each corner of the box and folding up the flaps on each side. The cardboard is 24 inches by 36 inches. Determine the length of the side of the square that should be cut out to maximize the volume of the box.",
        "scenario": "## Define Variables:\nAn open-top box is to be made from a rectangular piece of cardboard by removing a square from each corner of the box and folding up the flaps on each side. The cardboard is 24 inches by 36 inches.\n// variables: {\"side length of the square to be cut out\": \"x\"}, where x >= 0\n// The side length of the square to be cut out should not exceed half of the shorter side of the cardboard, so x <= 12\n\n## Define Objective Function:\nDetermine the length of the side of the square that should be cut out to maximize the volume of the box.\n// We want to maximize the volume of the box, which is given by the product of its length, width, and height. After cutting out the squares, the length of the box is 36 - 2x, the width is 24 - 2x, and the height is x. Therefore, the volume V is (36 - 2x)(24 - 2x)x\n// So, the objective function is: Maximize V = (36 - 2x)(24 - 2x)x",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"CONTINUOUS\", name=\"x\") # side length of the square to be cut out\n\n# Define objective function\nV = model.addVar('V')\nmodel.setObjective(V, \"maximize\")\nmodel.addCons(V == (36 - 2*x)*(24 - 2*x)*x)\n\n# Add constraints\nmodel.addCons(x >= 0)\nmodel.addCons(x <= 12)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The side length of the square to be cut out:\", model.getVal(x))\n    print(\"The maximum volume of the box: \", model.getVal(V))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The side length of the square to be cut out": "4.708460647429426",
            "The maximum volume of the box": "1825.2965881577802"
        },
        "type": "nonlinear-notable",
        "index": 47,
        "length": 301,
        "var_num": 1
    },
    {
        "scenario": "## Define Variables:\nA company is planning to optimize its energy consumption by installing solar panels and wind turbines. The company has identified three types of solar panels (A, B, C) and two types of wind turbines (X, Y) for installation.\n// variables: {\"number of solar panels A\": \"SolarA\", \"number of solar panels B\": \"SolarB\", \"number of solar panels C\": \"SolarC\", \"number of wind turbines X\": \"WindX\", \"number of wind turbines Y\": \"WindY\"}, where SolarA, SolarB, SolarC, WindX, WindY >= 0 & SolarA, SolarB, SolarC, WindX, WindY are integers\n\n## Define Objective Function:\nThe cost of solar panel A is $500, B is $700, and C is $900. The cost of wind turbine X is $1000, and Y is $1200. The energy output of solar panel A is 100 kWh, B is 150 kWh, and C is 200 kWh. The energy output of wind turbine X is 300 kWh, and Y is 400 kWh. The company wants to minimize the cost per unit of energy produced.\n// total cost: Cost = 500 * SolarA + 700 * SolarB + 900 * SolarC + 1000 * WindX + 1200 * WindY\n// total energy output: Energy = 100 * SolarA + 150 * SolarB + 200 * SolarC + 300 * WindX + 400 * WindY\n// So, the objective function is: Minimize Cost / Energy\n\n## Generate Constraint-1:\nThe company has a budget of $50,000 for the installation.\n// 500 * SolarA + 700 * SolarB + 900 * SolarC + 1000 * WindX + 1200 * WindY <= 50000\n\n## Generate Constraint-2:\nThe company aims to produce at least 10,000 kWh of energy.\n// 100 * SolarA + 150 * SolarB + 200 * SolarC + 300 * WindX + 400 * WindY >= 10000\n\n## Generate Constraint-3:\nAt least 20% of the budget should be spent on solar panels.\n// 500 * SolarA + 700 * SolarB + 900 * SolarC >= 0.2 * 50000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nSolarA = model.addVar(vtype=\"INTEGER\", name=\"SolarA\") # number of solar panels A\nmodel.addCons(SolarA >= 0)\nSolarB = model.addVar(vtype=\"INTEGER\", name=\"SolarB\") # number of solar panels B\nmodel.addCons(SolarB >= 0)\nSolarC = model.addVar(vtype=\"INTEGER\", name=\"SolarC\") # number of solar panels C\nmodel.addCons(SolarC >= 0)\nWindX = model.addVar(vtype=\"INTEGER\", name=\"WindX\") # number of wind turbines X\nmodel.addCons(WindX >= 0)\nWindY = model.addVar(vtype=\"INTEGER\", name=\"WindY\") # number of wind turbines Y\nmodel.addCons(WindY >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nmodel.addCons(obj == (500 * SolarA + 700 * SolarB + 900 * SolarC + 1000 * WindX + 1200 * WindY) / (100 * SolarA + 150 * SolarB + 200 * SolarC + 300 * WindX + 400 * WindY))\n\n# Add constraints\nmodel.addCons(500 * SolarA + 700 * SolarB + 900 * SolarC + 1000 * WindX + 1200 * WindY <= 50000)\nmodel.addCons(100 * SolarA + 150 * SolarB + 200 * SolarC + 300 * WindX + 400 * WindY >= 10000)\nmodel.addCons(500 * SolarA + 700 * SolarB + 900 * SolarC >= 0.2 * 50000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Total Cost per Unit of Energy: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Total Cost per Unit of Energy": "3.22077922077922"
        },
        "question": "A company is planning to optimize its energy consumption by installing solar panels and wind turbines. The company has identified three types of solar panels (A, B, C) and two types of wind turbines (X, Y) for installation. The company has a budget of $50,000 for the installation. The company aims to produce at least 10,000 kWh of energy. At least 20% of the budget should be spent on solar panels. The cost of solar panel A is $500, B is $700, and C is $900. The cost of wind turbine X is $1000, and Y is $1200. The energy output of solar panel A is 100 kWh, B is 150 kWh, and C is 200 kWh. The energy output of wind turbine X is 300 kWh, and Y is 400 kWh. The company wants to minimize the cost per unit of energy produced.",
        "type": "nonlinear-notable",
        "index": 48,
        "length": 727,
        "var_num": 5
    },
    {
        "question": "A factory provides rides for its employees in either taxis or company cars. Each taxi ride can take 2 employees while each company car ride can take 3 employees. Since buying and maintaining cars is expensive, at most 60% of the rides can be company car rides. However, there has to be at least 30 company car rides. If the company needs to transport at least 500 employees, how many rides of each should be done to minimize the total number of taxi rides.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_taxi_rides = LpVariable(\"NumTaxiRides\", lowBound=0, cat='Integer') # number of taxi rides\nnum_car_rides = LpVariable(\"NumCarRides\", lowBound=30, cat='Integer') # number of company car rides\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FactoryTransport\", LpMinimize)\n\n# Define the objective function\nobjective = num_taxi_rides # minimize the total number of taxi rides\nproblem += objective \n\n# Define the constraints\nproblem += 2 * num_taxi_rides + 3 * num_car_rides >= 500 # the total employees to be transported\nproblem += num_car_rides <= 0.6 * (num_taxi_rides + num_car_rides) # company car rides should not exceed 60% of the total rides\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of taxi rides:\", num_taxi_rides.value())\nprint(\"The number of company car rides:\", num_car_rides.value())",
        "results": {
            "The number of taxi rides": "78.0",
            "The number of company car rides": "115.0"
        },
        "formulation": "minimize x\nSubject to: \ny <= 0.6(x+y)\ny >= 30\n2x+3y >= 500 (end)",
        "type": "linear-notable",
        "index": 49,
        "length": 456,
        "var_num": 1
    },
    {
        "question": "A florist transports his flowers to stores in small bouquets and large bouquets. A small bouquet has 5 flowers while a large bouquet has 10 flowers. The florist can transport at most 80 small bouquets and 50 large bouquets. In total, he can transport at most 70 bouquets and he must transport at least 20 large bouquets. Since small bouquets are more popular, he must transport at least twice as many small bouquets as large bouquets. How many of each bouquet should he transport to maximize the total number of flowers that reach the stores?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_small_bouquets = LpVariable(\"NumSmallBouquets\", lowBound=0, cat='Integer') # number of small bouquets\nnum_large_bouquets = LpVariable(\"NumLargeBouquets\", lowBound=20, upBound=50, cat='Integer') # number of large bouquets\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FloristTransport\", LpMaximize)\n\n# Define the objective function\nobjective = 5 * num_small_bouquets + 10 * num_large_bouquets\nproblem += objective # maximize the total number of flowers transported\n\n# Define the constraints\nproblem += num_small_bouquets + num_large_bouquets <= 70 # he can transport at most 70 bouquets\nproblem += num_small_bouquets >= 2 * num_large_bouquets # he must transport at least twice as many small bouquets as large bouquets\nproblem += num_small_bouquets <= 80 # he can transport at most 80 small bouquets\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of small bouquets:\", num_small_bouquets.value())\nprint(\"The number of large bouquets:\", num_large_bouquets.value())\nprint(\"The total number of flowers transported:\", objective.value())",
        "results": {
            "The number of small bouquets": "47.0",
            "The number of large bouquets": "23.0",
            "The total number of flowers transported": "465.0"
        },
        "formulation": "maximize 5x+10y\nSubject to: \nx <= 80\ny <= 50\nx+y <= 70\ny >= 20\nx >= 2y (end)",
        "type": "linear-notable",
        "index": 50,
        "length": 542,
        "var_num": 2
    },
    {
        "question": "A grocery store wants to liquidate its stock of 10 apples, 20 bananas, and 80 grapes. Given past experience, the store knows that they can propose a banana-haters package with 6 apples and 30 grapes and that this package will bring a profit of six euros. Similarly, they can prepare a combo package with 5 apples, 6 bananas, and 20 grapes, yielding a profit of seven euros. They know they can sell any quantity of these two packages within the availability of its stock. What quantity of each package, banana-haters packages and combo packages, should the store prepare to maximize net profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_banana_haters_packages = LpVariable(\"NumBananaHatersPackages\", lowBound=0, cat='Integer') # number of banana-haters packages\nnum_combo_packages = LpVariable(\"NumComboPackages\", lowBound=0, cat='Integer') # number of combo packages\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"GroceryStoreProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 6 * num_banana_haters_packages + 7 * num_combo_packages\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 6 * num_banana_haters_packages + 5 * num_combo_packages <= 10 # the number of apples must not exceed the stock\nproblem += 6 * num_combo_packages <= 20 # the number of bananas must not exceed the stock\nproblem += 30 * num_banana_haters_packages + 20 * num_combo_packages <= 80 # the number of grapes must not exceed the stock\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of banana-haters packages:\", num_banana_haters_packages.value())\nprint(\"The number of combo packages:\", num_combo_packages.value())\nprint(\"The maximum net profit:\", objective.value())",
        "results": {
            "The number of banana-haters packages": "0.0",
            "The number of combo packages": "2.0",
            "The maximum net profit": "14.0"
        },
        "formulation": "maximize sixx+seveny\nSubject to: \n6x+5y <= 10\n6y <= 20\n30x+20y <= 80 (end)",
        "type": "linear-notable",
        "index": 51,
        "length": 593,
        "var_num": 2
    },
    {
        "question": "Glueco produces three types of glue on two different production lines. Each line can be utilized by up to seven workers at a time. Workers are paid $500 per week on production line 1, and $900 per week on production line 2. A week of production costs $1,000 to set up production line 1 and $2,000 to set up production line 2. During a week on a production line, each worker produces the number of units of glue shown in Table: Glue Production Line 1, 2; the glue 1, 2, 3: (20, 30, 40), (50, 35, 45). Each week, at least 120 units of glue 1, at least 150 units of glue 2, and at least 200 units of glue 3 must be produced. Minimize the total cost of meeting weekly demands.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal number of workers working on each production line. Let's denote the number of workers working on production line 1 as x and the number of workers working on production line 2 as y.\n```Variables\nx // number of workers working on production line 1\ny // number of workers working on production line 2\nx, y >= 0 and they are integers // non-negativity integer variables\n```\n\n# Objective Function:\nWe want to minimize the total cost of meeting weekly demands. The total cost consists of the cost of workers' salaries and the setup cost for each production line. The cost of workers' salaries is $500 per week for production line 1 and $900 per week for production line 2. The setup cost for production line 1 is $1,000 and the setup cost for production line 2 is $2,000. Therefore, the objective function is given by the sum of these costs: 500x + 900y + 1000 + 2000.\n```Objective Function\nMinimize: 500x + 900y + 3000\n```\n\n# Constraints:\nWe have several constraints that need to be satisfied:\n- The minimum number of units of glue 1, glue 2, and glue 3 that must be produced each week: 20x + 50y >= 120, 30x + 35y >= 150, and 40x + 45y >= 200.\n- The number of workers working on each production line cannot exceed 7: x <= 7 and y <= 7.\n- Non-negativity constraint: x, y >= 0.\n```Constraints\n20x + 50y >= 120 // minimum number of glue 1\n30x + 35y >= 150 // minimum number of glue 2\n40x + 45y >= 200 // minimum number of glue 3\nx <= 7 // maximum number of workers on production line 1\ny <= 7 // maximum number of workers on production line 2\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"WorkersOnLine1\", lowBound=0, upBound=7, cat='Integer') # number of workers on production line 1\ny = LpVariable(\"WorkersOnLine2\", lowBound=0, upBound=7, cat='Integer') # number of workers on production line 2\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimizeProductionCost\", LpMinimize)\n\n# Define the objective function\nobjective = 500 * x + 900 * y + 3000\nproblem += objective # minimize the total cost\n\n# Define the constraints\nproblem += 20 * x + 50 * y >= 120 # minimum number of glue 1\nproblem += 30 * x + 35 * y >= 150 # minimum number of glue 2\nproblem += 40 * x + 45 * y >= 200 # minimum number of glue 3\nproblem += x <= 7 # maximum number of workers on production line 1\nproblem += y <= 7 # maximum number of workers on production line 2\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of workers on production line 1:\", x.value())\nprint(\"The number of workers on production line 2:\", y.value())\nprint(\"The total cost:\", objective.value())\n",
        "results": {
            "The number of workers on production line 1": "4.0",
            "The number of workers on production line 2": "1.0",
            "The total cost": "5900.0"
        },
        "type": "linear-table",
        "index": 52,
        "length": 672,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nGlueco has 3 different production lines for glue. He needs to determine the number of workers to assign to each production line.\n// variables: {\"number of workers on production line 1\": \"N1\", \"number of workers on production line 2\": \"N2\", \"number of workers on production line 3\": \"N3\"}, where N1, N2, N3 >= 0 & N1, N2, N3 are integers\n\n## Define Objective Function:\nGlueco produces 3 types of glue on the 3 production lines. \nOn production line 1, each worker produces 20 units of glue 1, 30 units of glue 2, and 40 units of glue 3 during a hour. \nOn production line 2, each worker produces 50 units of glue 1, 35 units of glue 2, and 45 units of glue 3 during a hour. \nOn production line 3, each worker produces 30 units of glue 1, 40 units of glue 2, and 50 units of glue 3 during a hour. \nNow, Glueco needs to produce at least 120 units of glue 1, at least 150 units of glue 2, and at least 200 units of glue 3. The three production lines can only be opened or closed at the same time. Please determine the minimum production time to meet the weekly demand.\n// The production time for glue 1: T1 = 120 / (20 * N1 + 50 * N2 + 30 * N3)\n// The production time for glue 2: T2 = 150 / (30 * N1 + 35 * N2 + 40 * N3)\n// The production time for glue 3: T3 = 200 / (40 * N1 + 45 * N2 + 50 * N3)\n// So, the objective function is: Minimize max(T1, T2, T3)\n\n## Generate Constraint-1:\nThere are total 45 workers available.\n// N1 + N2 + N3 <= 45\n\n## Generate Constraint-2:\nEach line can be utilized by up to 20 workers at a time.\n// N1 <= 20; N2 <= 20; N3 <= 20",
        "code": "\"\"\"## Define Variables:\nGlueco has 3 different production lines for glue. He needs to determine the number of workers to assign to each production line.\n// variables: {\"number of workers on production line 1\": \"N1\", \"number of workers on production line 2\": \"N2\", \"number of workers on production line 3\": \"N3\"}, where N1, N2, N3 >= 0 & N1, N2, N3 are integers\n\n## Define Objective Function:\nGlueco produces 3 types of glue on the 3 production lines. \nOn production line 1, each worker produces 20 units of glue 1, 30 units of glue 2, and 40 units of glue 3 during a hour. \nOn production line 2, each worker produces 50 units of glue 1, 35 units of glue 2, and 45 units of glue 3 during a hour. \nOn production line 3, each worker produces 30 units of glue 1, 40 units of glue 2, and 50 units of glue 3 during a hour. \nNow, Glueco needs to produce at least 120 units of glue 1, at least 150 units of glue 2, and at least 200 units of glue 3. The three production lines can only be opened or closed at the same time. Please determine the minimum production time to meet the weekly demand.\n// The production time for glue 1: T1 = 120 / (20 * N1 + 50 * N2 + 30 * N3)\n// The production time for glue 2: T2 = 150 / (30 * N1 + 35 * N2 + 40 * N3)\n// The production time for glue 3: T3 = 200 / (40 * N1 + 45 * N2 + 50 * N3)\n// So, the objective function is: Minimize max(T1, T2, T3)\n\n## Generate Constraint-1:\nThere are total 45 workers available.\n// N1 + N2 + N3 <= 45\n\n## Generate Constraint-2:\nEach line can be utilized by up to 20 workers at a time.\n// N1 <= 20; N2 <= 20; N3 <= 20\"\"\"\n\n\nfrom pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nN1 = model.addVar(vtype=\"INTEGER\", name=\"N1\") # number of workers on production line 1\nmodel.addCons(N1 >= 0)\nN2 = model.addVar(vtype=\"INTEGER\", name=\"N2\") # number of workers on production line 2\nmodel.addCons(N2 >= 0)\nN3 = model.addVar(vtype=\"INTEGER\", name=\"N3\") # number of workers on production line 3\nmodel.addCons(N3 >= 0)\n\n# Define objective function\n# Since the objective function is not linear, we need to introduce a new variable and constraints to linearize it\nT = model.addVar(name=\"T\")\nmodel.setObjective(T, \"minimize\")\nmodel.addCons(T >= 120 / (20 * N1 + 50 * N2 + 30 * N3))\nmodel.addCons(T >= 150 / (30 * N1 + 35 * N2 + 40 * N3))\nmodel.addCons(T >= 200 / (40 * N1 + 45 * N2 + 50 * N3))\n\n# Add constraints\nmodel.addCons(N1 + N2 + N3 <= 45)\nmodel.addCons(N1 <= 20)\nmodel.addCons(N2 <= 20)\nmodel.addCons(N3 <= 20)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Workers on Production Line 1: \", model.getVal(N1))\n    print(\"Number of Workers on Production Line 2: \", model.getVal(N2))\n    print(\"Number of Workers on Production Line 3: \", model.getVal(N3))\n    print(\"Minimum Time to Meet Weekly Demand: \", model.getVal(T))\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Workers on Production Line 1": "5.0",
            "Number of Workers on Production Line 2": "20.0",
            "Number of Workers on Production Line 3": "20.0",
            "Minimum Time to Meet Weekly Demand": "0.09523809523809523"
        },
        "question": "Glueco has 3 different production lines for glue. He needs to determine the number of workers to assign to each production line. On production line 1, each worker produces 20 units of glue 1, 30 units of glue 2, and 40 units of glue 3 during a hour. On production line 2, each worker produces 50 units of glue 1, 35 units of glue 2, and 45 units of glue 3 during a hour. On production line 3, each worker produces 30 units of glue 1, 40 units of glue 2, and 50 units of glue 3 during a hour. Now, Glueco needs to produce at least 120 units of glue 1, at least 150 units of glue 2, and at least 200 units of glue 3. The three production lines can only be opened or closed at the same time. Please determine the minimum production time to meet the weekly demand. There are total 45 workers available. Each line can be utilized by up to 20 workers at a time. Glueco produces 3 types of glue on the 3 production lines.",
        "type": "nonlinear-notable",
        "index": 53,
        "length": 914,
        "var_num": 3
    },
    {
        "question": "A pharmacy has 3000 mg of morphine to make painkillers and sleeping pills. Each painkiller pill requires 10 mg of morphine and 3 units of digestive medicine. Each sleeping pill requires 6 mg of morphine and 5 units of digestive medicine. The pharmacy needs to make at least 50 painkiller pills. Since sleeping pills are more popular, at least 70% of the pills should be sleeping pills. How many of each should the pharmacy make to minimize the total amount of digestive medicine needed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_painkillers = LpVariable(\"NumPainkillers\", lowBound=50, cat='Integer') # number of painkiller pills\nnum_sleeping_pills = LpVariable(\"NumSleepingPills\", lowBound=0, cat='Integer') # number of sleeping pills\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"PharmacyProduction\", LpMinimize)\n\n# Define the objective function\nobjective = 3 * num_painkillers + 5 * num_sleeping_pills\nproblem += objective # minimize the total amount of digestive medicine\n\n# Define the constraints\nproblem += 10 * num_painkillers + 6 * num_sleeping_pills <= 3000 # total morphine available\nproblem += num_sleeping_pills >= 0.7 * (num_painkillers + num_sleeping_pills) # at least 70% should be sleeping pills\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of painkiller pills:\", num_painkillers.value())\nprint(\"The number of sleeping pills:\", num_sleeping_pills.value())\nprint(\"The total amount of digestive medicine needed:\", objective.value())",
        "results": {
            "The number of painkiller pills": "50.0",
            "The number of sleeping pills": "117.0",
            "The total amount of digestive medicine needed": "735.0"
        },
        "formulation": "minimize 3x+5y\nSubject to: \nx >= 50\ny >= 0.7(x+y)\n10x+6y <= 3000 (end)",
        "type": "linear-notable",
        "index": 54,
        "length": 486,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA logistics company operates a fleet of trucks and needs to plan the distribution of goods to five different regions: A, B, C, D, and E. The company must decide how many trucks to allocate to each region, considering the capacity and cost of each truck. Additionally, the company is considering leasing extra trucks from a third-party provider.\n// variables: {\"number of company trucks for region A\": \"TruckA\", \"number of company trucks for region B\": \"TruckB\", \"number of company trucks for region C\": \"TruckC\", \"number of company trucks for region D\": \"TruckD\", \"number of company trucks for region E\": \"TruckE\", \"number of leased trucks for region A\": \"LeasedTruckA\", \"number of leased trucks for region B\": \"LeasedTruckB\", \"number of leased trucks for region C\": \"LeasedTruckC\", \"number of leased trucks for region D\": \"LeasedTruckD\", \"number of leased trucks for region E\": \"LeasedTruckE\"}, where TruckA, TruckB, TruckC, TruckD, TruckE, LeasedTruckA, LeasedTruckB, LeasedTruckC, LeasedTruckD, LeasedTruckE >= 0 & all are integers\n\n## Define Objective Function:\nFor region A, the cost per company truck is $500, the cost per leased truck is $700, and the revenue per truck is $1200.\nFor region B, the cost per company truck is $600, the cost per leased truck is $800, and the revenue per truck is $1300.\nFor region C, the cost per company truck is $700, the cost per leased truck is $900, and the revenue per truck is $1400.\nFor region D, the cost per company truck is $800, the cost per leased truck is $1000, and the revenue per truck is $1500.\nFor region E, the cost per company truck is $900, the cost per leased truck is $1100, and the revenue per truck is $1600.\nThe company aims to maximize the average net profit per truck (considering both company and leased trucks).\n// Net profit for region A: Profit_A = (1200 - 500) * TruckA + (1200 - 700) * LeasedTruckA\n// Net profit for region B: Profit_B = (1300 - 600) * TruckB + (1300 - 800) * LeasedTruckB\n// Net profit for region C: Profit_C = (1400 - 700) * TruckC + (1400 - 900) * LeasedTruckC\n// Net profit for region D: Profit_D = (1500 - 800) * TruckD + (1500 - 1000) * LeasedTruckD\n// Net profit for region E: Profit_E = (1600 - 900) * TruckE + (1600 - 1100) * LeasedTruckE\n// So, the objective function is: Maximize ((Profit_A + Profit_B + Profit_C + Profit_D + Profit_E) / (TruckA + TruckB + TruckC + TruckD + TruckE + LeasedTruckA + LeasedTruckB + LeasedTruckC + LeasedTruckD + LeasedTruckE))\n\n## Generate Constraint-1:\nThe company has a total of 40 trucks available, including both company-owned and leased trucks.\n// TruckA + TruckB + TruckC + TruckD + TruckE + LeasedTruckA + LeasedTruckB + LeasedTruckC + LeasedTruckD + LeasedTruckE <= 40\n\n## Generate Constraint-2:\nThe company has a budget of $25,000 for leasing trucks.\n// 700 * LeasedTruckA + 800 * LeasedTruckB + 900 * LeasedTruckC + 1000 * LeasedTruckD + 1100 * LeasedTruckE <= 25,000\n\n## Generate Constraint-3:\nEach region must be served by at least 3 trucks.\n// TruckA + LeasedTruckA >= 3; TruckB + LeasedTruckB >= 3; TruckC + LeasedTruckC >= 3; TruckD + LeasedTruckD >= 3; TruckE + LeasedTruckE >= 3",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nTruckA = model.addVar(vtype=\"INTEGER\", name=\"TruckA\") # number of company trucks for region A\nmodel.addCons(TruckA >= 0)\nTruckB = model.addVar(vtype=\"INTEGER\", name=\"TruckB\") # number of company trucks for region B\nmodel.addCons(TruckB >= 0)\nTruckC = model.addVar(vtype=\"INTEGER\", name=\"TruckC\") # number of company trucks for region C\nmodel.addCons(TruckC >= 0)\nTruckD = model.addVar(vtype=\"INTEGER\", name=\"TruckD\") # number of company trucks for region D\nmodel.addCons(TruckD >= 0)\nTruckE = model.addVar(vtype=\"INTEGER\", name=\"TruckE\") # number of company trucks for region E\nmodel.addCons(TruckE >= 0)\nLeasedTruckA = model.addVar(vtype=\"INTEGER\", name=\"LeasedTruckA\") # number of leased trucks for region A\nmodel.addCons(LeasedTruckA >= 0)\nLeasedTruckB = model.addVar(vtype=\"INTEGER\", name=\"LeasedTruckB\") # number of leased trucks for region B\nmodel.addCons(LeasedTruckB >= 0)\nLeasedTruckC = model.addVar(vtype=\"INTEGER\", name=\"LeasedTruckC\") # number of leased trucks for region C\nmodel.addCons(LeasedTruckC >= 0)\nLeasedTruckD = model.addVar(vtype=\"INTEGER\", name=\"LeasedTruckD\") # number of leased trucks for region D\nmodel.addCons(LeasedTruckD >= 0)\nLeasedTruckE = model.addVar(vtype=\"INTEGER\", name=\"LeasedTruckE\") # number of leased trucks for region E\nmodel.addCons(LeasedTruckE >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj * (TruckA + TruckB + TruckC + TruckD + TruckE + LeasedTruckA + LeasedTruckB + LeasedTruckC + LeasedTruckD + LeasedTruckE) == ((1200 - 500) * TruckA + (1200 - 700) * LeasedTruckA + (1300 - 600) * TruckB + (1300 - 800) * LeasedTruckB + (1400 - 700) * TruckC + (1400 - 900) * LeasedTruckC + (1500 - 800) * TruckD + (1500 - 1000) * LeasedTruckD + (1600 - 900) * TruckE + (1600 - 1100) * LeasedTruckE))\n\n# Add constraints\nmodel.addCons(TruckA + TruckB + TruckC + TruckD + TruckE + LeasedTruckA + LeasedTruckB + LeasedTruckC + LeasedTruckD + LeasedTruckE <= 40)\nmodel.addCons(700 * LeasedTruckA + 800 * LeasedTruckB + 900 * LeasedTruckC + 1000 * LeasedTruckD + 1100 * LeasedTruckE <= 25000)\nmodel.addCons(TruckA + LeasedTruckA >= 3)\nmodel.addCons(TruckB + LeasedTruckB >= 3)\nmodel.addCons(TruckC + LeasedTruckC >= 3)\nmodel.addCons(TruckD + LeasedTruckD >= 3)\nmodel.addCons(TruckE + LeasedTruckE >= 3)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Average Net Profit per Truck: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Average Net Profit per Truck": "700.00000000"
        },
        "question": "A logistics company operates a fleet of trucks and needs to plan the distribution of goods to five different regions: A, B, C, D, and E. The company must decide how many trucks to allocate to each region, considering the capacity and cost of each truck. Additionally, the company is considering leasing extra trucks from a third-party provider. For region B, the cost per company truck is $600, the cost per leased truck is $800, and the revenue per truck is $1300. For region C, the cost per company truck is $700, the cost per leased truck is $900, and the revenue per truck is $1400. For region D, the cost per company truck is $800, the cost per leased truck is $1000, and the revenue per truck is $1500. For region E, the cost per company truck is $900, the cost per leased truck is $1100, and the revenue per truck is $1600. The company aims to maximize the average net profit per truck (considering both company and leased trucks). The company has a total of 40 trucks available, including both company-owned and leased trucks. The company has a budget of $25,000 for leasing trucks. Each region must be served by at least 3 trucks. For region A, the cost per company truck is $500, the cost per leased truck is $700, and the revenue per truck is $1200.",
        "type": "nonlinear-notable",
        "index": 55,
        "length": 1260,
        "var_num": 10
    },
    {
        "question": "Deutchlander Machine Company (DMC) manufactures two types of printing presses: a four-color litho and a two-color litho. Demand for both products is high and exceeds DMC's production capacity. The production is constrained by the availability of steel rollers, gear cutting capacity, and roller polishing capacity. The following Table details the requirements for each type of press. DMC can acquire 100 steel rollers per week, has 160 hours available for gear cutting, and 40 hours for roller polishing each week. To maintain market presence without increasing prices, DMC aims to produce at least two units of each press weekly. The profit for each four-color press is DM24,000 and for each two-color press is DM10,000. Maximize DMC's profit.\n\nTable (Resource requirements for each type of printing press):\n| Printing Press Type | Steel Rollers Required | Gear Cutting Time (hours) | Polishing Time (hours) | Profit per Unit (DM) |\n| ------------------- | ---------------------- | ------------------------- | ---------------------- | -------------------- |\n| Four-color litho    | 16                     | 30                        | 8                      | 24,000               |\n| Two-color litho     | 8                      | 12                        | 3                      | 10,000               |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for the four-color litho and the two-color litho that adhere to the constraints given. Let's denote the number of four-color litho as F and the number of two-color litho as T.\n```Variables\nF //number of four-color litho to produce\nT //number of two-color litho to produce\nF, T >= 0 and they are integers //non-negative and integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit of the company. The profit of the company is the sum of the profit of the four-color litho and the profit of the two-color litho. The profit of the four-color litho is 24000 and the profit of the two-color litho is 10000. Therefore, the objective function is:\n```Objective Function\nMaximize: 24000F + 10000T\n```\n\n# Constraints:\n```Constraints\n16F + 8T <= 100 //DMC can buy 100 rollers per week\n30F + 12T <= 160 //DMC has 160 hours of gear cutting time available per week\n8F + 3T <= 40 //DMC has 40 hours of polishing time available per week\nF >= 2 //DMC wants to produce at least two units of the four-color litho each week\nT >= 2 //DMC wants to produce at least two units of the two-color litho each week\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nF = LpVariable(\"FourColorLitho\", lowBound=2, cat='Integer') # number of four-color litho to produce\nT = LpVariable(\"TwoColorLitho\", lowBound=2, cat='Integer') # number of two-color litho to produce\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DMC_Profit_Maximization\", LpMaximize)\n\n# Define the objective function\nobjective = 24000 * F + 10000 * T\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 16 * F + 8 * T <= 100 # DMC can buy 100 rollers per week\nproblem += 30 * F + 12 * T <= 160 # DMC has 160 hours of gear cutting time available per week\nproblem += 8 * F + 3 * T <= 40 # DMC has 40 hours of polishing time available per week\nproblem += F >= 2 # DMC wants to produce at least two units of the four-color litho each week\nproblem += T >= 2 # DMC wants to produce at least two units of the two-color litho each week\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of four-color litho to produce:\", F.value())\nprint(\"The number of two-color litho to produce:\", T.value())\nprint(\"The maximum profit:\", objective.value())\n",
        "results": {
            "The number of four-color litho to produce": "2.0",
            "The number of two-color litho to produce": "8.0",
            "The maximum profit": "128000.0"
        },
        "type": "linear-table",
        "index": 56,
        "length": 1308,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA farmer is planning to plant three types of crops: Wheat, Corn, and Soybeans. The farmer needs to decide how many acres to allocate to each crop, as well as how many hours of labor to invest in each crop per acre.\n// variables: {\"number of acres for Wheat\": \"WheatAcres\", \"number of acres for Corn\": \"CornAcres\", \"number of acres for Soybeans\": \"SoybeansAcres\", \"hours of labor per acre for Wheat\": \"WheatLaborPerAcre\", \"hours of labor per acre for Corn\": \"CornLaborPerAcre\", \"hours of labor per acre for Soybeans\": \"SoybeansLaborPerAcre\"}, where WheatAcres, CornAcres, SoybeansAcres, WheatLaborPerAcre, CornLaborPerAcre, SoybeansLaborPerAcre >= 0 and WheatAcres, CornAcres, SoybeansAcres are integers,  WheatLaborPerAcre, CornLaborPerAcre, SoybeansLaborPerAcre are continuous.\n\n## Define Objective Function:\nFor Wheat, the expected yield per acre is 500 kg, the price per kg is $0.20, and the labor cost per hour is $10.\nFor Corn, the expected yield per acre is 700 kg, the price per kg is $0.15, and the labor cost per hour is $12.\nFor Soybeans, the expected yield per acre is 400 kg, the price per kg is $0.25, and the labor cost per hour is $8.\nThe farmer wants to maximize the net profit per acre.\n// Profit_Wheat = WheatAcres * (0.20 * 500 - WheatLaborPerAcre * 10)\n// Profit_Corn = CornAcres * (0.15 * 700 - CornLaborPerAcre * 12)\n// Profit_Soybeans = SoybeansAcres * (0.25 * 400 - SoybeansLaborPerAcre * 8)\n// So, the objective function is: Maximize (Profit_Wheat + Profit_Corn + Profit_Soybeans)\n\n## Generate Constraint-1:\nThe farmer has a total of 100 acres available for planting.\n// WheatAcres + CornAcres + SoybeansAcres <= 100\n\n## Generate Constraint-2:\nThe farmer has a total of 500 hours of labor available.\n// WheatAcres * WheatLaborPerAcre + CornAcres * CornLaborPerAcre + SoybeansAcres * SoybeansLaborPerAcre <= 500\n\n## Generate Constraint-3:\nThe farmer wants to ensure at least 30 acres are dedicated to Wheat.\n// WheatAcres >= 30\n\n## Generate Constraint-4:\nThe hours of labor per acre for each crop should be at least 1.\n// WheatLaborPerAcre >= 1; CornLaborPerAcre >= 1; SoybeansLaborPerAcre >= 1",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nWheatAcres = model.addVar(vtype=\"INTEGER\", name=\"WheatAcres\") # number of acres for Wheat\nmodel.addCons(WheatAcres >= 0)\nCornAcres = model.addVar(vtype=\"INTEGER\", name=\"CornAcres\") # number of acres for Corn\nmodel.addCons(CornAcres >= 0)\nSoybeansAcres = model.addVar(vtype=\"INTEGER\", name=\"SoybeansAcres\") # number of acres for Soybeans\nmodel.addCons(SoybeansAcres >= 0)\nWheatLaborPerAcre = model.addVar(vtype=\"C\", name=\"WheatLaborPerAcre\") # hours of labor per acre for Wheat\nmodel.addCons(WheatLaborPerAcre >= 0)\nCornLaborPerAcre = model.addVar(vtype=\"C\", name=\"CornLaborPerAcre\") # hours of labor per acre for Corn\nmodel.addCons(CornLaborPerAcre >= 0)\nSoybeansLaborPerAcre = model.addVar(vtype=\"C\", name=\"SoybeansLaborPerAcre\") # hours of labor per acre for Soybeans\nmodel.addCons(SoybeansLaborPerAcre >= 0)\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == WheatAcres * (0.20 * 500 - WheatLaborPerAcre * 10) + CornAcres * (0.15 * 700 - CornLaborPerAcre * 12) + SoybeansAcres * (0.25 * 400 - SoybeansLaborPerAcre * 8))\n\n# Add constraints\nmodel.addCons(WheatAcres + CornAcres + SoybeansAcres <= 100)\nmodel.addCons(WheatAcres * WheatLaborPerAcre + CornAcres * CornLaborPerAcre + SoybeansAcres * SoybeansLaborPerAcre <= 500)\nmodel.addCons(WheatAcres >= 30)\nmodel.addCons(WheatLaborPerAcre >= 1)\nmodel.addCons(CornLaborPerAcre >= 1)\nmodel.addCons(SoybeansLaborPerAcre >= 1)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Wheat Acres: \", model.getVal(WheatAcres))\n    print(\"Number of Corn Acres: \", model.getVal(CornAcres))\n    print(\"Number of Soybeans Acres: \", model.getVal(SoybeansAcres))\n    print(\"Hours of Labor per Acre for Wheat: \", model.getVal(WheatLaborPerAcre))\n    print(\"Hours of Labor per Acre for Corn: \", model.getVal(CornLaborPerAcre))\n    print(\"Hours of Labor per Acre for Soybeans: \", model.getVal(SoybeansLaborPerAcre))\n    print(\"Total Profit: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Wheat Acres": "30.0",
            "Number of Corn Acres": "70.0",
            "Number of Soybeans Acres": "0.0",
            "Hours of Labor per Acre for Wheat": "1.0",
            "Hours of Labor per Acre for Corn": "1.0",
            "Hours of Labor per Acre for Soybeans": "1.0",
            "Total Profit": "9210.0"
        },
        "question": "A farmer is planning to plant three types of crops: Wheat, Corn, and Soybeans. The farmer needs to decide how many acres to allocate to each crop, as well as how many hours of labor to invest in each crop per acre. The expected yield per acre, price per kg, and labor cost per hour for each crop are given in the following Table.\n\n| Crop        | Expected Yield per Acre | Price per Kg | Labor Cost per Hour |\n|-------------|-------------------------|--------------|---------------------|\n| Wheat       | 500 kg                  | $0.20        | $10                 |\n| Corn        | 700 kg                  | $0.15        | $12                 |\n| Soybeans    | 400 kg                  | $0.25        | $8                  |\n\nThe farmer has a total of 100 acres available for planting. The farmer has a total of 500 hours of labor available. The farmer wants to ensure at least 30 acres are dedicated to Wheat. The hours of labor per acre for each crop should be at least 1. The farmer wants to maximize the net profit per acre.\n",
        "type": "nonlinear-table",
        "index": 57,
        "length": 1029,
        "var_num": 6
    },
    {
        "question": "Wilson Creek Farm has 200 acres of land available for planting. The owner is considering planting three crops: corn, soybeans, and wheat. The owner expects to have only 35,000 gallons of water available per week to use for the crops, and during the growing season he will only have 8000 person-hours of labor available. The expected profit per bushel of each crop is $1.00 for corn, $1.60 for soybeans, and $3.00 for wheat. The owner can use any mix of crops (i.e., he can plant the same crop on all 200 acres or he can plant all three crops in different proportions). Find the profit-maximizing planting strategy. The production yield, water requirements, and labor requirements for a salable crop are given in the following Table.\n\nTable (Crop data including bushels produced per acre, water required per acre per week, and person-hours of labor required per acre):\n| Crop      | Bushels/Acre Produced | Water Required (gal/acre/week) | Person-Hours Labor Required/Acre |\n| --------- | --------------------- | ------------------------------ | -------------------------------- |\n| Corn      | 300                   | 200                            | 35                               |\n| Soybeans  | 200                   | 150                            | 40                               |\n| Wheat     | 80                    | 125                            | 30                               |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal planting strategy for corn, soybeans, and wheat. Let's denote the number of acres planting corn as C, the number of acres planting soybeans as S, and the number of acres planting wheat as W.\n```Variables\nC // acres planting corn\nS // acres planting soybeans\nW // acres planting wheat\nC, S, W >= 0 // non-negative variables\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function (profit of planting strategy) is given by the sum of the profit from each crop. The profit from planting corn is $1.00 per bushel * 300 bushels/acre * C acres. The profit from planting soybeans is $1.60 per bushel * 200 bushels/acre * S acres. The profit from planting wheat is $3.00 per bushel * 80 bushels/acre * W acres. Therefore, the objective function is 1.00 * 300 * C + 1.60 * 200 * S + 3.00 * 80 * W = 300C + 320S + 240W.\n```Objective Function\nMaximize: 300C + 320S + 240W\n```\n\n# Constraints:\nWe have several constraints that need to be considered:\n1. Available acres: The total number of acres planting corn, soybeans, and wheat cannot exceed the available 200 acres.\n2. Available gallons of water: The total water required for planting corn, soybeans, and wheat cannot exceed the available 35,000 gallons per week. The water required for planting corn is 200 gallons/acre/week * C acres, the water required for planting soybeans is 150 gallons/acre/week * S acres, and the water required for planting wheat is 125 gallons/acre/week * W acres.\n3. Available person-hours of labor: The total labor required for planting corn, soybeans, and wheat cannot exceed the available 8,000 person-hours. The labor required for planting corn is 35 person-hours/acre * C acres, the labor required for planting soybeans is 40 person-hours/acre * S acres, and the labor required for planting wheat is 30 person-hours/acre * W acres.\n```Constraints\nC + S + W <= 200 // Available acres\n200C + 150S + 125W <= 35000 // Available gallons of water\n35C + 40S + 30W <= 8000 // Available person-hours of labor\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nC = LpVariable(\"Corn\", lowBound=0, cat='Continuous') # acres planting corn\nS = LpVariable(\"Soybeans\", lowBound=0, cat='Continuous') # acres planting soybeans\nW = LpVariable(\"Wheat\", lowBound=0, cat='Continuous') # acres planting wheat\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 300 * C + 320 * S + 240 * W\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += C + S + W <= 200 # Available acres\nproblem += 200 * C + 150 * S + 125 * W <= 35000 # Available gallons of water\nproblem += 35 * C + 40 * S + 30 * W <= 8000 # Available person-hours of labor\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Acres of Corn to plant:\", C.value())\nprint(\"Acres of Soybeans to plant:\", S.value())\nprint(\"Acres of Wheat to plant:\", W.value())\nprint(\"Maximum Profit:\", value(problem.objective))\n",
        "results": {
            "Acres of Corn to plant": "0",
            "Acres of Soybeans to plant": "200.0",
            "Acres of Wheat to plant": "0.0",
            "Maximum Profit": "64000.0"
        },
        "type": "linear-table",
        "index": 58,
        "length": 1397,
        "var_num": 3
    },
    {
        "question": "A biotechnology company has 35,000 units of antibiotics available which is important to the process of making a first-dose and second-dose of vaccines. The first-dose vaccine requires 30 units of antibiotics and 20 mg of gelatine whereas the second-dose vaccine requires 65 units of antibiotics and 60 mg of gelatine. Since the first-dose vaccine is required before the second-dose vaccine, there must be more first-dose than second-dose vaccines manufactured. However, at least 40 second-dose vaccines must be made. How many of each vaccine should be made to minimize the amount of gelatine used?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nfirst_dose_vaccines = LpVariable(\"FirstDoseVaccines\", lowBound=0, cat='Integer') # number of first-dose vaccines\nsecond_dose_vaccines = LpVariable(\"SecondDoseVaccines\", lowBound=40, cat='Integer') # number of second-dose vaccines\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BiotechnologyCompany\", LpMinimize)\n\n# Define the objective function\nobjective = 20 * first_dose_vaccines + 60 * second_dose_vaccines\nproblem += objective # minimize the total amount of gelatine used\n\n# Define the constraints\nproblem += 30 * first_dose_vaccines + 65 * second_dose_vaccines <= 35000 # the antibiotics limit\nproblem += first_dose_vaccines >= second_dose_vaccines # first-dose vaccines must be more than second-dose vaccines\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of first-dose vaccines:\", first_dose_vaccines.value())\nprint(\"The number of second-dose vaccines:\", second_dose_vaccines.value())\nprint(\"The amount of gelatine used:\", objective.value())",
        "results": {
            "The number of first-dose vaccines": "40.0",
            "The number of second-dose vaccines": "40.0",
            "The amount of gelatine used": "3200.0"
        },
        "formulation": "minimize 20x+60y\nSubject to: \n30x+65y <= 35000\nx >= y\ny >= 40 (end)",
        "type": "linear-notable",
        "index": 59,
        "length": 597,
        "var_num": 2
    },
    {
        "question": "My cousin sells two different coffee blends: the Drummondville blend and the Victoriaville blend. Each blend contains both arabica and robusta coffee beans. A bag of the Drummondville blend contains 600 grams of arabica beans and 400 grams of robusta beans, whereas a bag of the Victoriaville blend contains 375 grams of arabica beans and 625 grams of robusta beans. The profit from each bag of Drummondville sold is $5 and the profit from each bag of Victoriaville blend sold is $7. If his total production must not exceed his available stock of 24000 grams of arabica beans and 17000 grams of robusta beans, how many bags of each type of blend should be blended to maximize profits? Formulate and solve.",
        "formulation": "{\"variable\": [{\"description\": \"number of bags of the Drummondville blend\", \"name\": \"x\"}, {\"description\": \"number of bags of the Victoriaville blend\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit from selling coffee blends\", \"function\": \"5x + 7y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"arabica beans constraint\", \"function\": \"600x + 375y <= 24000\"}, {\"description\": \"robusta beans constraint\", \"function\": \"400x + 625y <= 17000\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"DrummondvilleBlend\", lowBound=0, cat='Integer') # number of bags of the Drummondville blend\ny = LpVariable(\"VictoriavilleBlend\", lowBound=0, cat='Integer') # number of bags of the Victoriaville blend\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeCoffeeProfit\", LpMaximize)\n\n# Define the objective function\nproblem += 5 * x + 7 * y # profit from selling coffee blends\n\n# Define the constraints\nproblem += 600 * x + 375 * y <= 24000 # arabica beans constraint\nproblem += 400 * x + 625 * y <= 17000 # robusta beans constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of bags of Drummondville blend to produce:\", x.value())\nprint(\"The number of bags of Victoriaville blend to produce:\", y.value())\nprint(\"The maximum profit:\", value(problem.objective))\n",
        "results": {
            "The number of bags of Drummondville blend to produce": "36.0",
            "The number of bags of Victoriaville blend to produce": "4.0",
            "The maximum profit": "208.0"
        },
        "type": "linear-notable",
        "index": 60,
        "length": 705,
        "var_num": 2
    },
    {
        "question": "Find two positive numbers. The sum of the two numbers should be 300. Maximize the product of the two numbers.",
        "scenario": "## Define Variables:\nFind two positive numbers.\n// variables: {\"first number\": \"x\", \"second number\": \"y\"}, where x, y >= 0\n\n## Define Objective Function:\nMaximize the product of the two numbers.\n// Maximize: x*y\n\n## Generate Constraint-1:\nThe sum of the two numbers should be 300.\n// x + y = 300",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"CONTINUOUS\", name=\"x\") # first number\ny = model.addVar(vtype=\"CONTINUOUS\", name=\"y\") # second number\n\n# Define objective function\nobj = model.addVar(vtype=\"CONTINUOUS\", name=\"obj\")\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == x*y)\n\n# Add constraints\nmodel.addCons(x + y == 300)\nmodel.addCons(x >= 0)\nmodel.addCons(y >= 0)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The first number:\", model.getVal(x))\n    print(\"The second number:\", model.getVal(y))\n    print(\"The product of the two numbers: \", model.getVal(x*y))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The first number": "150.0000",
            "The second number": "150.0000",
            "The product of the two numbers": "22500.0"
        },
        "type": "nonlinear-notable",
        "index": 61,
        "length": 109,
        "var_num": 2
    },
    {
        "question": "Mrs. Watson wants to invest in the real-estate market and has a total budget of at most $760000. She has two choices which include condos and detached houses. Each dollar invested in condos yields a $0.50 profit and each dollar invested in detached houses yields a $1 profit. A minimum of 20% of all money invested must be in condos, and at least $20000 must be in detached houses. Formulate an LP that can be used to maximize total profit earned from Mrs. Watson's investment.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\ninvestment_in_condos = LpVariable(\"InvestmentInCondos\", lowBound=0, cat='Continuous') # Investment in condos\ninvestment_in_detached_houses = LpVariable(\"InvestmentInDetachedHouses\", lowBound=0, cat='Continuous') # Investment in detached houses\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"RealEstateInvestment\", LpMaximize)\n\n# Define the objective function\nobjective = 0.5 * investment_in_condos + 1 * investment_in_detached_houses\nproblem += objective # maximize the total profit from the investment\n\n# Define the constraints\nproblem += investment_in_condos + investment_in_detached_houses <= 760000 # total budget is at most $760000\nproblem += investment_in_condos >= 0.2 * (investment_in_condos + investment_in_detached_houses) # at least 20% must be in condos\nproblem += investment_in_detached_houses >= 20000 # at least $20000 must be in detached houses\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The amount invested in condos:\", investment_in_condos.value())\nprint(\"The amount invested in detached houses:\", investment_in_detached_houses.value())\nprint(\"The total profit from the investment:\", objective.value())",
        "results": {
            "The amount invested in condos": "152000.0",
            "The amount invested in detached houses": "608000.0",
            "The total profit from the investment": "684000.0"
        },
        "formulation": "maximize 0.50x+1y\nSubject to: \nx+y <= 760000\ny >= 20000\nx >= 0.2(x+y) (end)",
        "type": "linear-notable",
        "index": 62,
        "length": 477,
        "var_num": 2
    },
    {
        "question": "A music company produces two types of digital keyboards, one is full-weighted and another is semi-weighted. Both keyboards are sold for $2800 and $2400 respectively. There are about 3500 oscillator chips available every day from which the full-weighted version requires 20 chips while the semi-weighted version requires 15 chips. The company has a total of 6 working hours a day. Both of these keyboards require a production time of 1.2 hours. What should be the manufacturing quantity for each of the keyboards to maximize the total revenue?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_full_weighted = LpVariable(\"NumFullWeighted\", lowBound=0, cat='Integer') # number of full-weighted keyboards\nnum_semi_weighted = LpVariable(\"NumSemiWeighted\", lowBound=0, cat='Integer') # number of semi-weighted keyboards\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MusicCompanyRevenue\", LpMaximize)\n\n# Define the objective function\nobjective = 2800 * num_full_weighted + 2400 * num_semi_weighted\nproblem += objective # maximize the total revenue\n\n# Define the constraints\nproblem += 20 * num_full_weighted + 15 * num_semi_weighted <= 3500 # the total number of chips used must not exceed the available quantity\nproblem += 1.2 * (num_full_weighted + num_semi_weighted) <= 6 # total production time must not exceed available working hours\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of full-weighted keyboards:\", num_full_weighted.value())\nprint(\"The number of semi-weighted keyboards:\", num_semi_weighted.value())\nprint(\"Total revenue:\", objective.value())",
        "results": {
            "The number of full-weighted keyboards": "5.0",
            "The number of semi-weighted keyboards": "0.0",
            "Total revenue": "14000.0"
        },
        "formulation": "maximize 2800x+2400y\nSubject to: \n20x+15y <= 3500\n1.2x+1.2y >= 6 (end)",
        "type": "linear-notable",
        "index": 63,
        "length": 542,
        "var_num": 2
    },
    {
        "question": "A handmade sports equipment manufacturing company makes basketballs and footballs. Basketballs require 5 units of materials and 1 hour to make whereas footballs require 3 units of materials and 2 hours to make. The manufacturing company has available 1500 units of materials and their workers working at max capacity can work for at most 750 hours. Since basketballs sell better, there must be at least three times as many basketballs as footballs but the manufacturing company would like at least 50 footballs. How many of each should the manufacturing company make to maximize the total number of sports equipment produced?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_basketballs = LpVariable(\"NumBasketballs\", lowBound=0, cat='Integer') # number of basketballs\nnum_footballs = LpVariable(\"NumFootballs\", lowBound=50, cat='Integer') # number of footballs\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SportsEquipmentManufacturing\", LpMaximize)\n\n# Define the objective function\nobjective = num_basketballs + num_footballs\nproblem += objective # maximize the total number of sports equipment produced\n\n# Define the constraints\nproblem += 5 * num_basketballs + 3 * num_footballs <= 1500 # total units of materials used must be at most 1500\nproblem += num_basketballs + 2 * num_footballs <= 750 # total hours worked must be at most 750\nproblem += num_basketballs >= 3 * num_footballs # basketballs produced should be at least three times the number of footballs produced\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of basketballs:\", num_basketballs.value())\nprint(\"The number of footballs:\", num_footballs.value())\nprint(\"The total number of sports equipment produced:\", objective.value())",
        "results": {
            "The number of basketballs": "250.0",
            "The number of footballs": "83.0",
            "The total number of sports equipment produced": "333.0"
        },
        "formulation": "maximize x+y\nSubject to: \n5x+3y <= 1500\n2y+1x <= 750\nx >= 3y\ny >= 50 (end)",
        "type": "linear-notable",
        "index": 64,
        "length": 625,
        "var_num": 2
    },
    {
        "question": "A shipping company need to transport packages by either truck or car. A truck can transport 50 packages per trip while a car can transport 30 packages per trip. In addition, a truck uses 20 liters of gas per trip while a car uses 15 liters of gas per trip. There can be at most 5 truck trips made and at least 30% of all the trips must be made by car. The company needs to transport at least 500 packages. How many of each transportation should they use to minimize the total amount of gas consumed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_truck_trips = LpVariable(\"NumTruckTrips\", lowBound=0, cat='Integer') # number of truck trips\nnum_car_trips = LpVariable(\"NumCarTrips\", lowBound=0, cat='Integer') # number of car trips\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ShippingPackages\", LpMinimize)\n\n# Define the objective function\nobjective = 20 * num_truck_trips + 15 * num_car_trips\nproblem += objective # minimize the total amount of gas consumed\n\n# Define the constraints\nproblem += num_truck_trips <= 5 # there can be at most 5 truck trips made\nproblem += num_car_trips >= 0.3 * (num_car_trips + num_truck_trips) # at least 30% of all the trips must be made by car\nproblem += 50 * num_truck_trips + 30 * num_car_trips >= 500 # needs to transport at least 500 packages\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of truck trips:\", num_truck_trips.value())\nprint(\"The number of car trips:\", num_car_trips.value())\nprint(\"Total amount of gas consumed:\", objective.value())",
        "results": {
            "The number of truck trips": "4.0",
            "The number of car trips": "10.0",
            "Total amount of gas consumed": "230.0"
        },
        "formulation": "minimize 20x+15y\nSubject to: \nx <= 5\ny >= 0.3(x+y)\n50x+30y >= 500 (end)",
        "type": "linear-notable",
        "index": 65,
        "length": 499,
        "var_num": 2
    },
    {
        "question": "A woman has $100000 to gamble on two sports bets: a basketball tournament, a horse race, and a soccer game. Based on simple analysis, the woman determines her chance of losing her money would be 50% for basketball tournament, 25% for horse race, and 10% for the soccer game. The payout for each dollar put on each bet will be $1.2 for basketball tournament, $0.5 for horse race, and $0.1 for the soccer game. Knowing herself, she limits her average chance of losing her money should be at most 30%. Could you help her determine how much to money to put on each sport bet to maximize her average payout?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nmoney_basketball = LpVariable(\"MoneyBasketball\", lowBound=0) # money to bet on basketball\nmoney_horse_race = LpVariable(\"MoneyHorseRace\", lowBound=0) # money to bet on horse race\nmoney_soccer_game = LpVariable(\"MoneySoccerGame\", lowBound=0) # money to bet on soccer game\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"GamblingOptimization\", LpMaximize)\n\n# Define the objective function\nobjective = 1.2 * money_basketball + 0.5 * money_horse_race + 0.1 * money_soccer_game\nproblem += objective # maximize the average payout\n\n# Define the constraints\nproblem += money_basketball + money_horse_race + money_soccer_game == 100000 # the total money bet is $100000\nproblem += 0.5 * money_basketball + 0.25 * money_horse_race + 0.1 * money_soccer_game <= 0.3 * (money_basketball + money_horse_race + money_soccer_game) # average chance of losing money should be at most 30%\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The money to put on the basketball tournament:\", money_basketball.value())\nprint(\"The money to put on the horse race:\", money_horse_race.value())\nprint(\"The money to put on the soccer game:\", money_soccer_game.value())\nprint(\"The expected average payout:\", objective.value())",
        "results": {
            "The money to put on the basketball tournament": "50000.0",
            "The money to put on the horse race": "0.0",
            "The money to put on the soccer game": "50000.0",
            "The expected average payout": "65000.0"
        },
        "formulation": "maximize 1.2x+0.5y+0.1z\nSubject to: \nx+y+z <= 100000\n0.5x+0.25y+0.1z <= 0.3 (end)",
        "type": "linear-notable",
        "index": 66,
        "length": 602,
        "var_num": 3
    },
    {
        "question": "An art store makes large and small art pieces. The store has available 100 units of paint, 50 units of glitter, and 70 units of glue. To make a large art piece requires 4 units of paint, 3 units of glitter, and 5 units of glue. To make a small art piece requires 2 units of paint, 1 unit of glitter, and 2 units of glue. The store must make at least 5 units of each large and small art pieces. If the profit per large art piece is $30 and the profit per small art piece is $15, how many of each should be made to maximize profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_large_pieces = LpVariable(\"NumLargePieces\", lowBound=5, cat='Integer') # number of large pieces\nnum_small_pieces = LpVariable(\"NumSmallPieces\", lowBound=5, cat='Integer') # number of small pieces\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ArtStoreProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 30 * num_large_pieces + 15 * num_small_pieces\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 4 * num_large_pieces + 2 * num_small_pieces <= 100 # constraint for paint units\nproblem += 3 * num_large_pieces + num_small_pieces <= 50 # constraint for glitter units\nproblem += 5 * num_large_pieces + 2 * num_small_pieces <= 70 # constraint for glue units\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of large art pieces:\", num_large_pieces.value())\nprint(\"The number of small art pieces:\", num_small_pieces.value())\nprint(\"The total profit:\", objective.value())",
        "results": {
            "The number of large art pieces": "5.0",
            "The number of small art pieces": "22.0",
            "The total profit": "480.0"
        },
        "formulation": "maximize 30x+15y\nSubject to: \n4x+2y <= 100\n3x+1y <= 50\n5x+2y <= 70\nx >= 5\nx >= 5 (end)",
        "type": "linear-notable",
        "index": 67,
        "length": 529,
        "var_num": 2
    },
    {
        "question": "A bike factory builds two types of bikes: road bikes and mountain bikes. One road bike requires 3 hours of tooling on the grinder and then 2 hours of tooling on the polisher. One mountain bike requires 5 hours of tooling on the grinder and then 2.5 hours of tooling on the polisher. The factory makes a profit of $70 per road bike and $100 per mountain bike. Each machine, the grinder and polisher, can only be used for a maximum of 12 hours per day. How many units of each, road bikes and mountain bikes, should the factory produce to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of road bikes produced\", \"name\": \"x\"}, {\"description\": \"number of mountain bikes produced\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit from bikes produced\", \"function\": \"70x + 100y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"grinder use constraint\", \"function\": \"3x + 5y <= 12\"}, {\"description\": \"polisher use constraint\", \"function\": \"2x + 2.5y <= 12\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_road_bikes = LpVariable(\"NumRoadBikes\", lowBound=0, cat='Integer') # number of road bikes produced\nnum_mountain_bikes = LpVariable(\"NumMountainBikes\", lowBound=0, cat='Integer') # number of mountain bikes produced\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BikeFactoryProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 70 * num_road_bikes + 100 * num_mountain_bikes\nproblem += objective # maximize the total profit from bikes produced\n\n# Define the constraints\nproblem += 3 * num_road_bikes + 5 * num_mountain_bikes <= 12 # grinder use constraint\nproblem += 2 * num_road_bikes + 2.5 * num_mountain_bikes <= 12 # polisher use constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of road bikes produced:\", num_road_bikes.value())\nprint(\"The number of mountain bikes produced:\", num_mountain_bikes.value())\nprint(\"The total profit:\", objective.value())\n",
        "results": {
            "The number of road bikes produced": "4.0",
            "The number of mountain bikes produced": "0.0",
            "The total profit": "280.0"
        },
        "type": "linear-notable",
        "index": 68,
        "length": 552,
        "var_num": 2
    },
    {
        "question": "A clinic administers two vaccines available for the public to take one at a time. One vaccine is taken as a pill and another is taken as a shot. The pill vaccine takes 10 minutes to administer while the shot takes 20 minutes to administer. Since the shot has been more thoroughly studied, the clinic must deliver at least 3 times as many shots as pill. In addition, the clinic must administer at least 30 pill vaccines. If the clinic only operates for 10000 minutes, maximize the number of patients that can be vaccinated.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_pill_vaccines = LpVariable(\"NumPillVaccines\", lowBound=30, cat='Integer') # number of pill vaccines\nnum_shot_vaccines = LpVariable(\"NumShotVaccines\", lowBound=0, cat='Integer') # number of shot vaccines\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ClinicVaccination\", LpMaximize)\n\n# Define the objective function\nobjective = num_pill_vaccines + num_shot_vaccines\nproblem += objective # maximize the total number of patients vaccinated\n\n# Define the constraints\nproblem += 10 * num_pill_vaccines + 20 * num_shot_vaccines <= 10000 # the clinic operates for at most 10000 minutes\nproblem += num_shot_vaccines >= 3 * num_pill_vaccines # must deliver at least three times as many shots as pills\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of pill vaccines:\", num_pill_vaccines.value())\nprint(\"The number of shot vaccines:\", num_shot_vaccines.value())\nprint(\"The total number of patients vaccinated:\", objective.value())",
        "results": {
            "The number of pill vaccines": "142.0",
            "The number of shot vaccines": "429.0",
            "The total number of patients vaccinated": "571.0"
        },
        "formulation": "maximize x+y\nSubject to: \ny >= 3x\nx >= 30\n10x+20y <= 10000 (end)",
        "type": "linear-notable",
        "index": 69,
        "length": 522,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA city is planning to install five different types of renewable energy sources: solar panels, wind turbines, hydroelectric plants, biomass generators, and geothermal systems. The city needs to decide how many units of each type of energy source to install.\n// variables: {\"number of solar panels\": \"SolarPanels\", \"number of wind turbines\": \"WindTurbines\", \"number of hydroelectric plants\": \"HydroPlants\", \"number of biomass generators\": \"BiomassGenerators\", \"number of geothermal systems\": \"GeothermalSystems\"}, where SolarPanels, WindTurbines, HydroPlants, BiomassGenerators, GeothermalSystems >= 0 & SolarPanels, WindTurbines, HydroPlants, BiomassGenerators, GeothermalSystems are integers\n\n## Define Objective Function:\nFor solar panels, the installation cost per unit is $5,000, the annual energy output is 10,000 kWh, and the maintenance cost per year per unit is $500.\nFor wind turbines, the installation cost per unit is $10,000, the annual energy output is 20,000 kWh, and the maintenance cost per year per unit is $1,000.\nFor hydroelectric plants, the installation cost per unit is $15,000, the annual energy output is 30,000 kWh, and the maintenance cost per year per unit is $1,500.\nFor biomass generators, the installation cost per unit is $7,000, the annual energy output is 15,000 kWh, and the maintenance cost per year per unit is $700.\nFor geothermal systems, the installation cost per unit is $20,000, the annual energy output is 40,000 kWh, and the maintenance cost per year per unit is $2,000.\nThe city wants to maximize the net energy output per dollar spent in the next decade.\n// Total energy output: EnergyOutput = (10,000 * SolarPanels + 20,000 * WindTurbines + 30,000 * HydroPlants + 15,000 * BiomassGenerators + 40,000 * GeothermalSystems) * 10\n// Installation cost: InstallCost = 5,000 * SolarPanels + 10,000 * WindTurbines + 15,000 * HydroPlants + 7,000 * BiomassGenerators + 20,000 * GeothermalSystems\n// Total maintenance cost: (MaintenanceCost = 500 * SolarPanels + 1,000 * WindTurbines + 1,500 * HydroPlants + 700 * BiomassGenerators + 2,000 * GeothermalSystems) * 10\n// So, the objective function is: Maximize EnergyOutput / (InstallCost + MaintenanceCost)\n\n## Generate Constraint-1:\nThe city has a budget of $500,000 for the installation of renewable energy sources.\n// 5,000 * SolarPanels + 10,000 * WindTurbines + 15,000 * HydroPlants + 7,000 * BiomassGenerators + 20,000 * GeothermalSystems <= 500,000\n\n## Generate Constraint-2:\nThe city wants to ensure that at least 20% of the budget is spent on solar panels.\n// 5,000 * SolarPanels >= 0.2 * 500,000\n\n## Generate Constraint-3:\nThe city has a maintenance budget of $50,000 per year.\n// 500 * SolarPanels + 1,000 * WindTurbines + 1,500 * HydroPlants + 700 * BiomassGenerators + 2,000 * GeothermalSystems <= 50,000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nSolarPanels = model.addVar(vtype=\"INTEGER\", name=\"SolarPanels\") # number of solar panels\nmodel.addCons(SolarPanels >= 0)\nWindTurbines = model.addVar(vtype=\"INTEGER\", name=\"WindTurbines\") # number of wind turbines\nmodel.addCons(WindTurbines >= 0)\nHydroPlants = model.addVar(vtype=\"INTEGER\", name=\"HydroPlants\") # number of hydroelectric plants\nmodel.addCons(HydroPlants >= 0)\nBiomassGenerators = model.addVar(vtype=\"INTEGER\", name=\"BiomassGenerators\") # number of biomass generators\nmodel.addCons(BiomassGenerators >= 0)\nGeothermalSystems = model.addVar(vtype=\"INTEGER\", name=\"GeothermalSystems\") # number of geothermal systems\nmodel.addCons(GeothermalSystems >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nEnergyOutput = (10000 * SolarPanels + 20000 * WindTurbines + 30000 * HydroPlants + 15000 * BiomassGenerators + 40000 * GeothermalSystems) * 10\nInstallCost = 5000 * SolarPanels + 10000 * WindTurbines + 15000 * HydroPlants + 7000 * BiomassGenerators + 20000 * GeothermalSystems\nMaintenanceCost = (500 * SolarPanels + 1000 * WindTurbines + 1500 * HydroPlants + 700 * BiomassGenerators + 2000 * GeothermalSystems) * 10\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj * (InstallCost + MaintenanceCost) == EnergyOutput )\n\n# Add constraints\nmodel.addCons(5000 * SolarPanels + 10000 * WindTurbines + 15000 * HydroPlants + 7000 * BiomassGenerators + 20000 * GeothermalSystems <= 500000)\nmodel.addCons(5000 * SolarPanels >= 0.2 * 500000)\nmodel.addCons(500 * SolarPanels + 1000 * WindTurbines + 1500 * HydroPlants + 700 * BiomassGenerators + 2000 * GeothermalSystems <= 50000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Maximized Energy Output per Dollar: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Maximized Energy Output per Dollar": "10.571142284569138"
        },
        "question": "A city is planning to install five different types of renewable energy sources: solar panels, wind turbines, hydroelectric plants, biomass generators, and geothermal systems. The city needs to decide how many units of each type of energy source to install. For wind turbines, the installation cost per unit is $10,000, the annual energy output is 20,000 kWh, and the maintenance cost per year per unit is $1,000. For hydroelectric plants, the installation cost per unit is $15,000, the annual energy output is 30,000 kWh, and the maintenance cost per year per unit is $1,500. For biomass generators, the installation cost per unit is $7,000, the annual energy output is 15,000 kWh, and the maintenance cost per year per unit is $700. For geothermal systems, the installation cost per unit is $20,000, the annual energy output is 40,000 kWh, and the maintenance cost per year per unit is $2,000. The city wants to maximize the net energy output per dollar spent in the next decade. The city has a budget of $500,000 for the installation of renewable energy sources. The city wants to ensure that at least 20% of the budget is spent on solar panels. The city has a maintenance budget of $50,000 per year. For solar panels, the installation cost per unit is $5,000, the annual energy output is 10,000 kWh, and the maintenance cost per year per unit is $500.",
        "type": "nonlinear-notable",
        "index": 70,
        "length": 1354,
        "var_num": 5
    },
    {
        "question": "A maple farm makes maple syrup and maple candy. They can make at most 10 kg of maple syrup and at most 12 kg of maple candy. In addition, they must supply at least 3 kg of maple syrup and 5 kg of maple candy per day. Both require time in a maple boiling station. Each kg of maple syrup and maple candy requires 2 hours at the boiling station. The boiling station is available for at most 20 hours per day. If the profit per kg of maple syrup is $20 and the profit per kg of maple candy is $15, how many kg of each should be made to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of kg of maple syrup made\", \"name\": \"x\"}, {\"description\": \"number of kg of maple candy made\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit from maple syrup and candy\", \"function\": \"20x + 15y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"maximum maple syrup production\", \"function\": \"x <= 10\"}, {\"description\": \"maximum maple candy production\", \"function\": \"y <= 12\"}, {\"description\": \"minimum maple syrup supply\", \"function\": \"x >= 3\"}, {\"description\": \"minimum maple candy supply\", \"function\": \"y >= 5\"}, {\"description\": \"maximum boiling station usage\", \"function\": \"2x + 2y <= 20\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"maple_syrup_kg\", lowBound=3, upBound=10, cat='Continuous') # number of kg of maple syrup made\ny = LpVariable(\"maple_candy_kg\", lowBound=5, upBound=12, cat='Continuous') # number of kg of maple candy made\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MapleFarmProduction\", LpMaximize)\n\n# Define the objective function\nobjective = 20 * x + 15 * y\nproblem += objective # maximize the total profit from maple syrup and candy\n\n# Define the constraints\nproblem += x <= 10 # maximum maple syrup production\nproblem += y <= 12 # maximum maple candy production\nproblem += x >= 3 # minimum maple syrup supply\nproblem += y >= 5 # minimum maple candy supply\nproblem += 2 * x + 2 * y <= 20 # maximum boiling station usage\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of kg of maple syrup made:\", x.value())\nprint(\"The number of kg of maple candy made:\", y.value())\nprint(\"The total profit:\", objective.value())\n",
        "results": {
            "The number of kg of maple syrup made": "5.0",
            "The number of kg of maple candy made": "5.0",
            "The total profit": "175.0"
        },
        "type": "linear-notable",
        "index": 71,
        "length": 548,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA tech company is planning to launch five new software products: AppX, AppY, AppZ, AppW, and AppV. They need to decide how many development teams to allocate to each product for the upcoming quarter.\n// variables: {\"number of development teams for AppX\": \"AppXTeams\", \"number of development teams for AppY\": \"AppYTeams\", \"number of development teams for AppZ\": \"AppZTeams\", \"number of development teams for AppW\": \"AppWTeams\", \"number of development teams for AppV\": \"AppVTeams\"}, where AppXTeams, AppYTeams, AppZTeams, AppWTeams, AppVTeams >= 0 & AppXTeams, AppYTeams, AppZTeams, AppWTeams, AppVTeams are integers\n\n## Define Objective Function:\nFor product APPX, the Estimated Revenue per Team is $100,000, the Development Cost per Team is $60,000, and the Marketing Cost per Team is $20,000. \nFor product APPY, the Estimated Revenue per Team is $150,000, the Development Cost per Team is $80,000, and the Marketing Cost per Team is $30,000. \nFor product APPZ, the Estimated Revenue per Team is $200,000, the Development Cost per Team is $100,000, and the Marketing Cost per Team is $40,000.\nFor product APPW, the Estimated Revenue per Team is $120,000, the Development Cost per Team is $70,000, and the Marketing Cost per Team is $25,000.\nFor product APPV, the Estimated Revenue per Team is $180,000, the Development Cost per Team is $90,000, and the Marketing Cost per Team is $35,000.\nThe company wants to maximize the average net profit per team.\n// Total net profit for APPX: Profit_APPX = (100,000 - 60,000 - 20,000) * AppXTeams\n// Total net profit for APPY: Profit_APPY = (150,000 - 80,000 - 30,000) * AppYTeams\n// Total net profit for APPZ: Profit_APPZ = (200,000 - 100,000 - 40,000) * AppZTeams\n// Total net profit for APPW: Profit_APPW = (120,000 - 70,000 - 25,000) * AppWTeams\n// Total net profit for APPV: Profit_APPV = (180,000 - 90,000 - 35,000) * AppVTeams\n// So, the objective function is: Maximize (Profit_APPX + Profit_APPY + Profit_APPZ + Profit_APPW + Profit_APPV) / (AppXTeams + AppYTeams + AppZTeams + AppWTeams + AppVTeams)\n\n## Generate Constraint-1:\nThe company has a total of 30 development teams available for the quarter.\n// AppXTeams + AppYTeams + AppZTeams + AppWTeams + AppVTeams <= 30\n\n## Generate Constraint-2:\nDue to market research, the company knows that AppX must have at least twice as many development teams as AppY.\n// AppXTeams >= 2 * AppYTeams\n\n## Generate Constraint-3:\nThe company has a budget of $2,500,000 for marketing costs for the quarter.\n// 20,000 * AppXTeams + 30,000 * AppYTeams + 40,000 * AppZTeams + 25,000 * AppWTeams + 35,000 * AppVTeams <= 2,500,000\n\n## Generate Constraint-4:\nThe company wants to ensure that each product has at least one team working on it.\n// AppXTeams >= 1; AppYTeams >= 1; AppZTeams >= 1; AppWTeams >= 1; AppVTeams >= 1",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nAppXTeams = model.addVar(vtype=\"INTEGER\", name=\"AppXTeams\") # number of development teams for AppX\nmodel.addCons(AppXTeams >= 0)\nAppYTeams = model.addVar(vtype=\"INTEGER\", name=\"AppYTeams\") # number of development teams for AppY\nmodel.addCons(AppYTeams >= 0)\nAppZTeams = model.addVar(vtype=\"INTEGER\", name=\"AppZTeams\") # number of development teams for AppZ\nmodel.addCons(AppZTeams >= 0)\nAppWTeams = model.addVar(vtype=\"INTEGER\", name=\"AppWTeams\") # number of development teams for AppW\nmodel.addCons(AppWTeams >= 0)\nAppVTeams = model.addVar(vtype=\"INTEGER\", name=\"AppVTeams\") # number of development teams for AppV\nmodel.addCons(AppVTeams >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj * (AppXTeams + AppYTeams + AppZTeams + AppWTeams + AppVTeams) == ((100000 - 60000 - 20000) * AppXTeams + (150000 - 80000 - 30000) * AppYTeams + (200000 - 100000 - 40000) * AppZTeams + (120000 - 70000 - 25000) * AppWTeams + (180000 - 90000 - 35000) * AppVTeams))\n\n# Add constraints\nmodel.addCons(AppXTeams + AppYTeams + AppZTeams + AppWTeams + AppVTeams <= 30)\nmodel.addCons(AppXTeams >= 2 * AppYTeams)\nmodel.addCons(20000 * AppXTeams + 30000 * AppYTeams + 40000 * AppZTeams + 25000 * AppWTeams + 35000 * AppVTeams <= 2500000)\nmodel.addCons(AppXTeams >= 1)\nmodel.addCons(AppYTeams >= 1)\nmodel.addCons(AppZTeams >= 1)\nmodel.addCons(AppWTeams >= 1)\nmodel.addCons(AppVTeams >= 1)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of AppX Teams: \", model.getVal(AppXTeams))\n    print(\"Number of AppY Teams: \", model.getVal(AppYTeams))\n    print(\"Number of AppZ Teams: \", model.getVal(AppZTeams))\n    print(\"Number of AppW Teams: \", model.getVal(AppWTeams))\n    print(\"Number of AppV Teams: \", model.getVal(AppVTeams))\n    print(\"Average Net Profit per Team: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of AppX Teams": "2.0",
            "Number of AppY Teams": "1.0",
            "Number of AppZ Teams": "25.0",
            "Number of AppW Teams": "1.0",
            "Number of AppV Teams": "1.0",
            "Average Net Profit per Team": "55333.33333333333"
        },
        "question": "A tech company is planning to launch five new software products: AppX, AppY, AppZ, AppW, and AppV. They need to decide how many development teams to allocate to each product for the upcoming quarter. For product APPY, the Estimated Revenue per Team is $150,000, the Development Cost per Team is $80,000, and the Marketing Cost per Team is $30,000. For product APPZ, the Estimated Revenue per Team is $200,000, the Development Cost per Team is $100,000, and the Marketing Cost per Team is $40,000. For product APPW, the Estimated Revenue per Team is $120,000, the Development Cost per Team is $70,000, and the Marketing Cost per Team is $25,000. For product APPV, the Estimated Revenue per Team is $180,000, the Development Cost per Team is $90,000, and the Marketing Cost per Team is $35,000. The company wants to maximize the average net profit per team. The company has a total of 30 development teams available for the quarter. Due to market research, the company knows that AppX must have at least twice as many development teams as AppY. The company has a budget of $2,500,000 for marketing costs for the quarter. The company wants to ensure that each product has at least one team working on it. For product APPX, the Estimated Revenue per Team is $100,000, the Development Cost per Team is $60,000, and the Marketing Cost per Team is $20,000.",
        "type": "nonlinear-notable",
        "index": 72,
        "length": 1349,
        "var_num": 5
    },
    {
        "question": "A vendor sells coffee and hot chocolate during ice hockey games. To stay in business, he must sell at least 40 coffees and 20 hot chocolates, but can not make more than 60 coffees or 35 hot chocolates. The vendor also can't make more than 75 items total. The profit on a coffee is $0.22, and the profit on a hot chocolate is $0.14. How many of each item should he sell to make the maximum profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of coffees sold\", \"name\": \"x\"}, {\"description\": \"number of hot chocolates sold\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit\", \"function\": \"0.22x + 0.14y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"minimum number of coffees sold\", \"function\": \"x >= 40\"}, {\"description\": \"minimum number of hot chocolates sold\", \"function\": \"y >= 20\"}, {\"description\": \"maximum number of coffees sold\", \"function\": \"x <= 60\"}, {\"description\": \"maximum number of hot chocolates sold\", \"function\": \"y <= 35\"}, {\"description\": \"total number of items sold\", \"function\": \"x + y <= 75\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_coffees = LpVariable(\"NumCoffees\", lowBound=40, upBound=60, cat='Integer') # number of coffees sold\nnum_hot_chocolates = LpVariable(\"NumHotChocolates\", lowBound=20, upBound=35, cat='Integer') # number of hot chocolates sold\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"VendorProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 0.22 * num_coffees + 0.14 * num_hot_chocolates\nproblem += objective # maximize the profit\n\n# Define the constraints\nproblem += num_coffees >= 40 # minimum number of coffees sold\nproblem += num_hot_chocolates >= 20 # minimum number of hot chocolates sold\nproblem += num_coffees <= 60 # maximum number of coffees sold\nproblem += num_hot_chocolates <= 35 # maximum number of hot chocolates sold\nproblem += num_coffees + num_hot_chocolates <= 75 # total number of items sold\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of coffees sold:\", num_coffees.value())\nprint(\"The number of hot chocolates sold:\", num_hot_chocolates.value())\nprint(\"The total profit:\", objective.value())\n",
        "results": {
            "The number of coffees sold": "55.0",
            "The number of hot chocolates sold": "20.0",
            "The total profit": "14.9"
        },
        "type": "linear-notable",
        "index": 73,
        "length": 396,
        "var_num": 2
    },
    {
        "question": "Deutchlander Machine Company (DMC) makes two types of printing presses: a four-color litho and a two-color litho. Demand for both products is booming and exceeds DMC's ability to satisfy it. Most raw materials are plentiful, but production is limited by three factors: a shortage of steel rollers, gear cutting capacity, and roller polishing capacity. Each four-color press requires 16 rollers, and each two-color press requires 8 rollers. The four-color presses require 30 hours of gear cutting and 8 hours of polishing time, and the two-color presses require 12 hours of gear cutting and 3 hours of polishing time. DMC is able to buy 100 rollers per week, and it has 160 hours of gear cutting time and 40 hours of polishing time available per week. To avoid harming long-term sales, DMC does not want to raise prices. At current prices DMC will earn a profit of DM24,000 on each four-color press made and DM10,000 on each two-color press made. So as not to abandon either product market, DMC also wants to produce at least two units of each press each week. Formulate DMC's problem as a linear program to maximize its profit.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for the four-color litho and the two-color litho that adhere to the constraints given. Let's denote the number of four-color litho as F and the number of two-color litho as T.\n```Variables\nF //number of four-color litho to produce\nT //number of two-color litho to produce\nF, T >= 0 and they are integers //non-negative and integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit of the company. The profit of the company is the sum of the profit of the four-color litho and the profit of the two-color litho. The profit of the four-color litho is 24000 and the profit of the two-color litho is 10000. Therefore, the objective function is:\n```Objective Function\nMaximize: 24000F + 10000T\n```\n\n# Constraints:\n```Constraints\n16F + 8T <= 100 //DMC can buy 100 rollers per week\n30F + 12T <= 160 //DMC has 160 hours of gear cutting time available per week\n8F + 3T <= 40 //DMC has 40 hours of polishing time available per week\nF >= 2 //DMC wants to produce at least two units of the four-color litho each week\nT >= 2 //DMC wants to produce at least two units of the two-color litho each week\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nF = LpVariable(\"FourColorLitho\", lowBound=2, cat='Integer') # number of four-color litho to produce\nT = LpVariable(\"TwoColorLitho\", lowBound=2, cat='Integer') # number of two-color litho to produce\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DMC_Profit_Maximization\", LpMaximize)\n\n# Define the objective function\nobjective = 24000 * F + 10000 * T\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 16 * F + 8 * T <= 100 # DMC can buy 100 rollers per week\nproblem += 30 * F + 12 * T <= 160 # DMC has 160 hours of gear cutting time available per week\nproblem += 8 * F + 3 * T <= 40 # DMC has 40 hours of polishing time available per week\nproblem += F >= 2 # DMC wants to produce at least two units of the four-color litho each week\nproblem += T >= 2 # DMC wants to produce at least two units of the two-color litho each week\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of four-color litho to produce:\", F.value())\nprint(\"The number of two-color litho to produce:\", T.value())\nprint(\"The maximum profit:\", objective.value())\n",
        "results": {
            "The number of four-color litho to produce": "2.0",
            "The number of two-color litho to produce": "8.0",
            "The maximum profit": "128000.0"
        },
        "type": "linear-notable",
        "index": 74,
        "length": 1127,
        "var_num": 2
    },
    {
        "question": "Gandhi Cloth Company is capable of manufacturing three types of clothing: shirts, shorts, and pants. The manufacture of each type of clothing requires that Gandhi have the appropriate type of machinery available. The machinery needed to manufacture each type of clothing must be rented at the following rates: shirt machinery, $200 per week; shorts machinery, $150 per week; pants machinery, $100 per week. The manufacture of each type of clothing also requires the amounts of cloth and labor as shown in the following Table 1. Each week, 150 hours of labor and 160 sq yd of cloth are available. The variable unit cost and selling price for each type of clothing are shown in Table 2. Formulate an LP whose solution will maximize Gandhi's weekly profits.\n\nTable 1 (The amount of labor hours and cloth required for each type of clothing):\n| Clothing Type | Labor Hours | Cloth (sq yd) |\n| ------------- | ----------- | ------------- |\n| Shirt         | 3           | 4             |\n| Shorts        | 2           | 3             |\n| Pants         | 6           | 4             |\n\nTable 2 (Revenue and Cost Information for each type of clothing):\n| Clothing Type | Sales Price | Variable Cost |\n| ------------- | ----------- | ------------- |\n| Shirt         | $12         | $6            |\n| Shorts        | $8          | $4            |\n| Pants         | $15         | $8            |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for shirts, shorts, and pants, as well as the number of machinery rented for each type. Let's denote the number of shirts produced each week as S, the number of shorts produced each week as SH, and the number of pants produced each week as P. Additionally, let's denote the number of shirt machineries rented as SM, the number of shorts machineries rented as SHM, and the number of pants machineries rented as PM.\n```Variables\nS // number of shirts produced each week\nSH // number of shorts produced each week\nP // number of pants produced each week\nS, SH, P >= 0 and they are integers // non-negative integer variables\nSM // whether the shirt machinery should be rented\nSHM // whether the shorts machinery should be rented\nPM // whether the pants machinery should be rented \nSM, SHM, PM = 0 or 1 // binary variables\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function (profit) is given by subtracting the total cost from the total revenue. \nThe total revenue is the sum of the revenue from shirts, shorts, and pants, which is 12S + 8SH + 15P.\nThe total cost is the sum of the cost of the machineries rented and the cost of the units produced. The cost of the shirt machinery is $200 per week * SM, the cost of the shorts machinery is $150 per week * SHM, and the cost of the pants machinery is $100 per week * PM. \nThe cost of the units produced is the sum of the cost of the shirts, shorts, and pants, which is 6S + 4SH + 8P.\nSo the total cost is 200SM + 150SHM + 100PM + 6S + 4SH + 8P.\nTherefore, the objective function is given by:\n12S + 8SH + 15P - 200SM - 150SHM - 100PM - 6S - 4SH - 8P = 6S + 4SH + 7P - 200SM - 150SHM - 100PM\n```Objective Function\nMaximize: 6S + 4SH + 7P - 200SM - 150SHM - 100PM\n```\n\n# Constraints:\nThe labor hours constraint states that the total labor hours used for shirts, shorts, and pants production should not exceed the available labor hours of 150 hours per week. This can be expressed as:\n3S + 2SH + 6P <= 150\n\nThe cloth constraint states that the total amount of cloth used for shirts, shorts, and pants production should not exceed the available cloth of 160 sq yd per week. This can be expressed as:\n4S + 3SH + 4P <= 160\n\n```Constraints\n3S + 2SH + 6P <= 150\n4S + 3SH + 4P <= 160\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nS = LpVariable(\"Shirts\", lowBound=0, cat='Integer')\nSH = LpVariable(\"Shorts\", lowBound=0, cat='Integer')\nP = LpVariable(\"Pants\", lowBound=0, cat='Integer')\nSM = LpVariable(\"ShirtMachinery\", cat='Binary')\nSHM = LpVariable(\"ShortsMachinery\", cat='Binary')\nPM = LpVariable(\"PantsMachinery\", cat='Binary')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"GandhiClothCompanyProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 6*S + 4*SH + 7*P - 200*SM - 150*SHM - 100*PM\nproblem += objective\n\n# Define the constraints\nproblem += 3*S + 2*SH + 6*P <= 150\nproblem += 4*S + 3*SH + 4*P <= 160\nproblem += S <= 1000*SM  # Ensures that if S > 0, then SM must be 1 (machinery rented)\nproblem += SH <= 1000*SHM  # Ensures that if SH > 0, then SHM must be 1 (machinery rented)\nproblem += P <= 1000*PM  # Ensures that if P > 0, then PM must be 1 (machinery rented)\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of shirts produced each week:\", S.value())\nprint(\"The number of shorts produced each week:\", SH.value())\nprint(\"The number of pants produced each week:\", P.value())\nprint(\"Shirt machinery rented:\", SM.value())\nprint(\"Shorts machinery rented:\", SHM.value())\nprint(\"Pants machinery rented:\", PM.value())\nprint(\"The maximum weekly profit:\", objective.value())\n",
        "results": {
            "The number of shirts produced each week": "0.0",
            "The number of shorts produced each week": "0.0",
            "The number of pants produced each week": "25.0",
            "Shirt machinery rented": "0.0",
            "Shorts machinery rented": "0.0",
            "Pants machinery rented": "1.0",
            "The maximum weekly profit": "75.0"
        },
        "type": "linear-table",
        "index": 75,
        "length": 1384,
        "var_num": 6
    },
    {
        "question": "An artisan makes two types of terracotta jars: a thin jar and a stubby jar. Each thin jar requires 50 minutes of shaping time and 90 minutes of baking time. Each stubby jar requires 30 minutes of shaping time and 150 minutes of baking time. Per week, there are 3000 minutes available for shaping and 4000 minutes available for baking. The profit per thin jar is $5 and the profit per stubby jar is $9. How many jars of each type should the artisan make to maximize profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_thin_jars = LpVariable(\"NumThinJars\", lowBound=0, cat='Integer') # number of thin jars\nnum_stubby_jars = LpVariable(\"NumStubbyJars\", lowBound=0, cat='Integer') # number of stubby jars\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"TerracottaJarsProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 5 * num_thin_jars + 9 * num_stubby_jars\nproblem += objective # maximize the profit\n\n# Define the constraints\nproblem += 50 * num_thin_jars + 30 * num_stubby_jars <= 3000 # shaping time constraint\nproblem += 90 * num_thin_jars + 150 * num_stubby_jars <= 4000 # baking time constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of thin jars:\", num_thin_jars.value())\nprint(\"The number of stubby jars:\", num_stubby_jars.value())\nprint(\"The profit:\", objective.value())",
        "results": {
            "The number of thin jars": "1.0",
            "The number of stubby jars": "26.0",
            "The profit": "239.0"
        },
        "formulation": "maximize 9y+5x\nSubject to: \n50x+30y <= 3000\n90x+150y <= 4000 (end)",
        "type": "linear-notable",
        "index": 76,
        "length": 472,
        "var_num": 2
    },
    {
        "question": "A company which manufactures canoes employs 120 employees, each working 30 hours per week. The workforce is distributed across three departments: carpenter, plastics, and completion. The company produces two types of canoes: simple and luxury, with net unit profits of $7 and $10, respectively. The time required to manufacture each type of canoe in the different departments is detailed in the following Table. Additionally, marketing calculations have determined that at least 1/3 and no more than 2/3 of the total number of canoes produced should be luxury models. How can the company maximize its overall net profit?\n\nTable (Hours required to manufacture each type of canoe in different departments):\n| Canoe Type | Carpenter Department | Plastics Department | Completion Department |\n|------------|----------------------|---------------------|-----------------------|\n| Simple     | 4.5                  | 2                   | 2                     |\n| Luxury     | 5                    | 1                   | 4                     |\n\nTable (Number of employees in each department):\n| Department         | Number of Employees |\n|--------------------|---------------------|\n| Carpenter          | 60                  |\n| Plastics           | 20                  |\n| Completion         | 40                  |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for simple canoes and luxury canoes that adhere to the constraints given. Let's denote the number of simple canoes as S and the number of luxury canoes as L.\n```Variables\nS //number of simple canoes to produce \nL //number of luxury canoes to produce\nS, L >= 0 and they are integers //non-negative integer variables\n```\n\n# Objective Function:\nWe want to maximize the overall net profit of the company. The net profit of a simple canoe is 7 and the net profit of a luxury canoe is 10. Therefore, the objective function is:\n```Objective\nMaximize 7S + 10L\n```\n\n# Constraints:\nThe constraints are the following:\n1. The total number of work hours in the carpenter department is 120/2*30 = 1800 hours.\n2. The total number of work hours in the plastics department is 20*30 = 600 hours.\n3. The total number of work hours in the completion department is (120-120/2-20)*30 = 1200 hours.\n4. The number of luxury canoes should be between 1/3 and 2/3 of the total number of canoes.\n```Constraints\n4.5S + 5L <= 1800\n2S + L <= 600\n2S + 4L <= 1200\n1/3*(S + L) <= L <= 2/3*(S + L)\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nS = LpVariable(\"SimpleCanoes\", lowBound=0, cat='Integer') # number of simple canoes\nL = LpVariable(\"LuxuryCanoes\", lowBound=0, cat='Integer') # number of luxury canoes\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CanoesProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 7 * S + 10 * L\nproblem += objective # maximize the overall net profit\n\n# Define the constraints\nproblem += 4.5 * S + 5 * L <= 1800 # carpenter department hours\nproblem += 2 * S + 1 * L <= 600 # plastics department hours\nproblem += 2 * S + 4 * L <= 1200 # completion department hours\nproblem += L >= 1/3 * (S + L) # at least 1/3 of the canoes should be luxury\nproblem += L <= 2/3 * (S + L) # at most 2/3 of the canoes should be luxury\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of simple canoes to produce:\", S.value())\nprint(\"The number of luxury canoes to produce:\", L.value())\nprint(\"The maximum overall net profit:\", objective.value())\n",
        "results": {
            "The number of simple canoes to produce": "150.0",
            "The number of luxury canoes to produce": "225.0",
            "The maximum overall net profit": "3300.0"
        },
        "type": "linear-table",
        "index": 77,
        "length": 1314,
        "var_num": 2
    },
    {
        "question": "A company is considering opening warehouses in four cities: New York, Los Angeles, Chicago, and Atlanta. Each warehouse can ship 100 units per week. The weekly fixed cost of keeping each warehouse open is $400 for New York, $500 for Los Angeles, $300 for Chicago, and $150 for Atlanta. Region 1 of the country requires 80 units per week, region 2 requires 70 units per week, and region 3 requires 40 units per week. The costs (including production and shipping costs) of sending one unit from a warehouse to a region are shown in the following Table. We want to meet weekly demands at minimum cost, subject to the preceding information and the following restrictions: 1. If the New York warehouse is opened, then the Los Angeles warehouse must be opened. 2. At most two warehouses can be opened. 3. Either the Atlanta or the Los Angeles warehouse must be opened. Minimize the weekly costs of meeting demand.\n\nTable (Costs of sending one unit from a warehouse to a region):\n| From / To ($) | Region 1 | Region 2 | Region 3 |\n| ------------- | -------- | -------- | -------- |\n| New York      | 20       | 40       | 50       |\n| Los Angeles   | 48       | 15       | 26       |\n| Chicago       | 26       | 35       | 18       |\n| Atlanta       | 24       | 50       | 35       |",
        "formulation": "# Define Variables:\nFirst, we need to determine which warehouses to open and how many units to supply from each warehouse to meet the weekly demands. Let's denote the decision variable for whether the warehouse in city I is selected for opening as yi, and the number of units supplied from region j as xij.\n```\nVariables:\nyi // whether the warehouse in city I is selected for opening the warehouse\nyi = 0 or 1 // binary variable\nxij // number of units supplied from region j\nxij >= 0 and is integer // non-negative integer variable\ni, j = 1, 2, 3, 4\n```\n\n# Objective Function:\nWe want to minimize the weekly costs of meeting demand, which includes the fixed costs of keeping each warehouse open and the costs of sending units from the warehouses to the regions. The fixed costs are $400 for New York, $500 for Los Angeles, $300 for Chicago, and $150 for Atlanta. The costs of sending one unit from a warehouse to a region are given in Table 3. \nSo the objective function is the sum of the fixed costs and the costs of sending units from the warehouses to the regions:\n```Objective Function\nMinimize: 400y1 + 500y2 + 300y3 + 150y4 + 20x11 + 40x12 + 50x13 + 48x21 + 15x22 + 26x23 + 26x31 + 35x32 + 18x33 + 24x41 + 50x42 + 35x43\n```\n\n# Constraints:\nWe need to consider the following restrictions:\n1. If the New York warehouse is opened, then the Los Angeles warehouse must be opened: y1 <= y2\n2. At most two warehouses can be opened: y1 + y2 + y3 + y4 <= 2\n3. Either the Atlanta or the Los Angeles warehouse must be opened: y2 + y4 >= 1\n4. Maximum shipping units per week of each warehouse: \n   - New York: x11 + x12 + x13 <= 100y1\n   - Los Angeles: x21 + x22 + x23 <= 100y2\n   - Chicago: x31 + x32 + x33 <= 100y3\n   - Atlanta: x41 + x42 + x43 <= 100y4\nTherefore, the Constraints are as follows:\n```Constraints\ny1 <= y2\ny1 + y2 + y3 + y4 <= 2\ny2 + y4 >= 1\nx11 + x12 + x13 <= 100y1\nx21 + x22 + x23 <= 100y2\nx31 + x32 + x33 <= 100y3\nx41 + x42 + x43 <= 100y4\ny1, y2, y3, y4 = 0 or 1\nxij >= 0\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\ny1 = LpVariable(\"NewYorkWarehouse\", 0, 1, LpBinary)\ny2 = LpVariable(\"LosAngelesWarehouse\", 0, 1, LpBinary)\ny3 = LpVariable(\"ChicagoWarehouse\", 0, 1, LpBinary)\ny4 = LpVariable(\"AtlantaWarehouse\", 0, 1, LpBinary)\nx11 = LpVariable(\"UnitsFromNewYorkToRegion1\", lowBound=0, cat='Integer')\nx12 = LpVariable(\"UnitsFromNewYorkToRegion2\", lowBound=0, cat='Integer')\nx13 = LpVariable(\"UnitsFromNewYorkToRegion3\", lowBound=0, cat='Integer')\nx21 = LpVariable(\"UnitsFromLosAngelesToRegion1\", lowBound=0, cat='Integer')\nx22 = LpVariable(\"UnitsFromLosAngelesToRegion2\", lowBound=0, cat='Integer')\nx23 = LpVariable(\"UnitsFromLosAngelesToRegion3\", lowBound=0, cat='Integer')\nx31 = LpVariable(\"UnitsFromChicagoToRegion1\", lowBound=0, cat='Integer')\nx32 = LpVariable(\"UnitsFromChicagoToRegion2\", lowBound=0, cat='Integer')\nx33 = LpVariable(\"UnitsFromChicagoToRegion3\", lowBound=0, cat='Integer')\nx41 = LpVariable(\"UnitsFromAtlantaToRegion1\", lowBound=0, cat='Integer')\nx42 = LpVariable(\"UnitsFromAtlantaToRegion2\", lowBound=0, cat='Integer')\nx43 = LpVariable(\"UnitsFromAtlantaToRegion3\", lowBound=0, cat='Integer')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"WarehouseLocation\", LpMinimize)\n\n# Define the objective function\nobjective = 400*y1 + 500*y2 + 300*y3 + 150*y4 + 20*x11 + 40*x12 + 50*x13 + 48*x21 + 15*x22 + 26*x23 + 26*x31 + 35*x32 + 18*x33 + 24*x41 + 50*x42 + 35*x43\nproblem += objective\n\n# Define the constraints\nproblem += y1 <= y2\nproblem += y1 + y2 + y3 + y4 <= 2\nproblem += y2 + y4 >= 1\nproblem += x11 + x12 + x13 <= 100*y1\nproblem += x21 + x22 + x23 <= 100*y2\nproblem += x31 + x32 + x33 <= 100*y3\nproblem += x41 + x42 + x43 <= 100*y4\nproblem += x11 + x21 + x31 + x41 == 80\nproblem += x12 + x22 + x32 + x42 == 70\nproblem += x13 + x23 + x33 + x43 == 40\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Status:\", LpStatus[status])\nprint(\"The weekly cost of meeting demand is: $\", value(problem.objective))\nprint(\"Open New York Warehouse:\", y1.value())\nprint(\"Open Los Angeles Warehouse:\", y2.value())\nprint(\"Open Chicago Warehouse:\", y3.value())\nprint(\"Open Atlanta Warehouse:\", y4.value())\nprint(\"Units from New York to Region 1:\", x11.value())\nprint(\"Units from New York to Region 2:\", x12.value())\nprint(\"Units from New York to Region 3:\", x13.value())\nprint(\"Units from Los Angeles to Region 1:\", x21.value())\nprint(\"Units from Los Angeles to Region 2:\", x22.value())\nprint(\"Units from Los Angeles to Region 3:\", x23.value())\nprint(\"Units from Chicago to Region 1:\", x31.value())\nprint(\"Units from Chicago to Region 2:\", x32.value())\nprint(\"Units from Chicago to Region 3:\", x33.value())\nprint(\"Units from Atlanta to Region 1:\", x41.value())\nprint(\"Units from Atlanta to Region 2:\", x42.value())\nprint(\"Units from Atlanta to Region 3:\", x43.value())\n",
        "results": {
            "The weekly cost of meeting demand is": "4750.0",
            "Open New York Warehouse": "0.0",
            "Open Los Angeles Warehouse": "1.0",
            "Open Chicago Warehouse": "0.0",
            "Open Atlanta Warehouse": "1.0",
            "Units from New York to Region 1": "0.0",
            "Units from New York to Region 2": "0.0",
            "Units from New York to Region 3": "0.0",
            "Units from Los Angeles to Region 1": "0.0",
            "Units from Los Angeles to Region 2": "70.0",
            "Units from Los Angeles to Region 3": "30.0",
            "Units from Chicago to Region 1": "0.0",
            "Units from Chicago to Region 2": "0.0",
            "Units from Chicago to Region 3": "0.0",
            "Units from Atlanta to Region 1": "80.0",
            "Units from Atlanta to Region 2": "0.0",
            "Units from Atlanta to Region 3": "10.0"
        },
        "type": "linear-table",
        "index": 78,
        "length": 1278,
        "var_num": 17
    },
    {
        "question": "The U.S. post office will accept a box for shipment only if the sum of the length and girth is at most 108 in. (Girth is the maximum distance around the package perpendicular to the length; for a rectangular box, the length is the largest of the three dimensions.) Find the dimensions of the largest acceptable box with square front and back.",
        "scenario": "## Define Variables:\nYou need to construct a box with square front and back to send it through the U.S. post office.\n// variables: {\"length of the box\": \"L\", \"square side of the box\": \"S\"}, where L, S >= 0\n\n## Define Objective Function:\nFind the dimensions of the box with largest volume.\n// The volume of the box is given by the formula V = S^2 * L. Therefore, the objective function is: Maximize V = S^2 * L\n\n## Generate Constraint-1:\nThe sum of the length and girth is at most 108 in. (Girth is the maximum distance around the package perpendicular to the length; for a rectangular box, the length is the largest of the three dimensions.)\n// The length of the box is L, and the girth is 2S + 2S = 4S. Therefore, the constraint is L + 4S <= 108",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nL = model.addVar(vtype=\"CONTINUOUS\", name=\"L\")  # length of the box\nS = model.addVar(vtype=\"CONTINUOUS\", name=\"S\")  # square side of the box\n\n# Define objective function\nV = model.addVar('V')\nmodel.setObjective(V, \"maximize\")\nmodel.addCons(V == S**2 * L)\n\n# Add constraints\nmodel.addCons(L + 4*S <= 108)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The length of the box: \", model.getVal(L))\n    print(\"The square side of the box: \", model.getVal(S))\n    print(\"The maximum volume of the box: \", model.getVal(V))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The length of the box": "36.0000",
            "The square side of the box": "18.000",
            "The maximum volume of the box": "11664.000"
        },
        "type": "nonlinear-notable",
        "index": 79,
        "length": 342,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA client asks his stockbroker to invest. The broker has identified five stocks (Oil, Auto, Pharmaceutical, Tech, and Green Energy) for investment.\n// variables: {\"number of shares in the oil stock\": \"Oil\", \"number of shares in the auto stock\": \"Auto\", \"number of shares in the pharmaceutical stock\": \"Pharmaceutical\", \"number of shares in the tech stock\": \"Tech\", \"number of shares in the green energy stock\": \"GreenEnergy\"}, where Oil, Auto, Pharmaceutical, Tech, GreenEnergy >= 0 & Oil, Auto, Pharmaceutical, Tech, GreenEnergy are integers\n\n## Define Objective Function:\nFor Oil, the estimated annual return is 10%, the risk is 5%, and the current price is $100. \nFor Auto, the estimated annual return is 15%, the risk is 8%, and the current price is $200. \nFor Pharmaceutical, the estimated annual return is 20%, the risk is 10%, and the current price is $150. \nFor Tech, the estimated annual return is 25%, the risk is 12%, and the current price is $250. \nFor Green Energy, the estimated annual return is 18%, the risk is 7%, and the current price is $180. \nThe client wants to maximize the Benefit-Risk ratio of the investment. (The Benefit-Risk ratio is defined as the sum of the estimated annual returns divided by the sum of the investment risks.)\n// sum of the estimated annual returns: Benefit = 10% * 100 * Oil + 15% * 200 * Auto + 20% * 150 * Pharmaceutical + 25% * 250 * Tech + 18% * 180 * GreenEnergy\n// sum of the investment risks: Risk = 5% * 100 * Oil + 8% * 200 * Auto + 10% * 150 * Pharmaceutical + 12% * 250 * Tech + 7% * 180 * GreenEnergy\n// So, the objective function is: Maximize Benefit / Risk\n\n## Generate Constraint-1:\nThe client has $100,000 to invest.\n// 100 * Oil + 200 * Auto + 150 * Pharmaceutical + 250 * Tech + 180 * GreenEnergy <= 100000\n\n## Generate Constraint-2:\nThe client wants to invest at least $60,000 in all stocks combined.\n// 100 * Oil + 200 * Auto + 150 * Pharmaceutical + 250 * Tech + 180 * GreenEnergy >= 60000\n\n## Generate Constraint-3:\nThe client wants to invest at least $9,000 in the oil stock.\n// 100 * Oil >= 9000\n\n## Generate Constraint-4:\nPut no more than 40 percent of the money into any one stock.\n// 100 * Oil <= 40000\n// 200 * Auto <= 40000\n// 150 * Pharmaceutical <= 40000\n// 250 * Tech <= 40000\n// 180 * GreenEnergy <= 40000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nOil = model.addVar(vtype=\"INTEGER\", name=\"Oil\", lb=0) # number of shares in the oil stock\nAuto = model.addVar(vtype=\"INTEGER\", name=\"Auto\", lb=0) # number of shares in the auto stock\nPharmaceutical = model.addVar(vtype=\"INTEGER\", name=\"Pharmaceutical\", lb=0) # number of shares in the pharmaceutical stock\nTech = model.addVar(vtype=\"INTEGER\", name=\"Tech\", lb=0) # number of shares in the tech stock\nGreenEnergy = model.addVar(vtype=\"INTEGER\", name=\"GreenEnergy\", lb=0) # number of shares in the green energy stock\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nBenefit = 100 * 0.10 * Oil + 200 * 0.15 * Auto + 150 * 0.20 * Pharmaceutical + 250 * 0.25 * Tech + 180 * 0.18 * GreenEnergy\nRisk = 100 * 0.05 * Oil + 200 * 0.08 * Auto + 150 * 0.10 * Pharmaceutical + 250 * 0.12 * Tech + 180 * 0.07 * GreenEnergy\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj * Risk == Benefit)\n\n# Add constraints\nmodel.addCons(100 * Oil + 200 * Auto + 150 * Pharmaceutical + 250 * Tech + 180 * GreenEnergy <= 100000)\nmodel.addCons(100 * Oil + 200 * Auto + 150 * Pharmaceutical + 250 * Tech + 180 * GreenEnergy >= 60000)\nmodel.addCons(100 * Oil >= 9000)\nmodel.addCons(100 * Oil <= 40000)\nmodel.addCons(200 * Auto <= 40000)\nmodel.addCons(150 * Pharmaceutical <= 40000)\nmodel.addCons(250 * Tech <= 40000)\nmodel.addCons(180 * GreenEnergy <= 40000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Oil Shares: \", model.getVal(Oil))\n    print(\"Number of Auto Shares: \", model.getVal(Auto))\n    print(\"Number of Pharmaceutical Shares: \", model.getVal(Pharmaceutical))\n    print(\"Number of Tech Shares: \", model.getVal(Tech))\n    print(\"Number of Green Energy Shares: \", model.getVal(GreenEnergy))\n    print(\"Benefit-Risk Ratio: \", model.getVal(obj))\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Oil Shares": "201.0",
            "Number of Auto Shares": "0.0",
            "Number of Pharmaceutical Shares": "0.0",
            "Number of Tech Shares": "0.0",
            "Number of Green Energy Shares": "222.0",
            "Benefit-Risk Ratio": "2.4203881963074005"
        },
        "question": "A client asks his stockbroker to invest in five stocks: Oil, Auto, Pharmaceutical, Tech, and Green Energy. The estimated annual return, risk, and current price for each stock are given in the following Table.\n\n| Stock          | Estimated Annual Return | Risk | Current Price |\n|----------------|-------------------------|------|---------------|\n| Oil            | 10%                     | 5%   | $100          |\n| Auto           | 15%                     | 8%   | $200          |\n| Pharmaceutical | 20%                     | 10%  | $150          |\n| Tech           | 25%                     | 12%  | $250          |\n| Green Energy   | 18%                     | 7%   | $180          |\n\nThe client has $100,000 to invest. The client wants to invest at least $60,000 in all stocks combined. The client wants to invest at least $9,000 in the oil stock. The client also wants to ensure that no more than 40 percent of the money is put into any one stock. The client aims to maximize the Benefit-Risk ratio of the investment (defined as the sum of the estimated annual returns divided by the sum of the investment risks).\n",
        "type": "nonlinear-table",
        "index": 80,
        "length": 1117,
        "var_num": 5
    },
    {
        "question": "A research group is making fabric and plastic using two methods, method A and method B. Method A produces 25 units of fabric and 14 units of plastic per hour. Method B produces 45 units of fabric and 25 units of plastic per hour. Method A requires 60 units of a special element while method B requires 65 units of the same special element. The research group has available 3500 units of the special element and must make at least 1400 units of fabric and 1000 units of plastic. How many of each method should be executed to minimize the total time needed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_method_A = LpVariable(\"NumMethodA\", lowBound=0, cat='Continuous') # number of hours using method A\nnum_method_B = LpVariable(\"NumMethodB\", lowBound=0, cat='Continuous') # number of hours using method B\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FabricPlasticProduction\", LpMinimize)\n\n# Define the objective function\nobjective = num_method_A + num_method_B\nproblem += objective # minimize the total time\n\n# Define the constraints\nproblem += 60 * num_method_A + 65 * num_method_B <= 3500 # the amount of special element used must be at most 3500\nproblem += 25 * num_method_A + 45 * num_method_B >= 1400 # the units of fabric produced must be at least 1400\nproblem += 14 * num_method_A + 25 * num_method_B >= 1000 # the units of plastic produced must be at least 1000\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of hours using method A:\", num_method_A.value())\nprint(\"The number of hours using method B:\", num_method_B.value())\nprint(\"The total time needed:\", objective.value())",
        "results": {
            "The number of hours using method A": "0.0",
            "The number of hours using method B": "40.0",
            "The total time needed": "40.0"
        },
        "formulation": "minimize x+y\nSubject to: \n25x+45y >= 1400\n14x+25y >= 1000\n60x+65y <= 3500 (end)",
        "type": "linear-notable",
        "index": 81,
        "length": 555,
        "var_num": 2
    },
    {
        "question": "The number of employees needed in a post office varies depending on the day of the week, as listed as Monday 15, Tuesday 13, Wednesday 15, Thursday 18, Friday 14, Saturday 16 and Sunday 10. Employees work five consecutive days and have the next two days off. It becomes necessary to organize groups of employees to work in different shifts, so that the number of employees required is satisfied every day of the week. The objective is to employ the minimum number of workers.",
        "formulation": "# Variables:\nWe need to determine the number of employees who start working on each day of the week. We denote the number of employees who start working on Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, and Sunday by x1, x2, x3, x4, x5, x6, and x7, respectively. We need to determine the values of these variables. As the number of employees who start working on each day of the week is a non-negative integer.\n```Variables\nx_i >= 0 and they are integers, i = 1, 2, 3, 4, 5, 6, 7 // non-negative integer variables\n```\n\n# Objective Function:\nWe want to employ the minimum number of workers, so the objective function is the sum of the number of employees whose working shift starts on each day of the week.\n```Objective Function\nMinimize: x1 + x2 + x3 + x4 + x5 + x6 + x7\n```\n\n# Constraints:\nWe need to ensure that the minimum number of employees required for each day of the week is satisfied.\nAs employees work five consecutive days and have the next two days off, for each day, the number of the employees who work on that day is the sum of the number of employees whose working shift starts on that day and the previous four days. \nFor example, the number of employees who work on Monday is the sum of the number of employees whose working shift starts on Thursday, Friday, Saturday, Sunday, and Monday. So, the number of employees who work on Monday is x1 + x2 + x3 + x4 + x5.\n```Constraints\nx1 + x2 + x3 + x4 + x5 >= 15 // minimum number of employees required on Monday\nx2 + x3 + x4 + x5 + x6 >= 13 // minimum number of employees required on Tuesday\nx3 + x4 + x5 + x6 + x7 >= 15 // minimum number of employees required on Wednesday\nx4 + x5 + x6 + x7 + x1 >= 18 // minimum number of employees required on Thursday\nx5 + x6 + x7 + x1 + x2 >= 14 // minimum number of employees required on Friday\nx6 + x7 + x1 + x2 + x3 >= 16 // minimum number of employees required on Saturday\nx7 + x1 + x2 + x3 + x4 >= 10 // minimum number of employees required on Sunday\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx1 = LpVariable(\"x1\", lowBound=0, cat='Integer')\nx2 = LpVariable(\"x2\", lowBound=0, cat='Integer')\nx3 = LpVariable(\"x3\", lowBound=0, cat='Integer')\nx4 = LpVariable(\"x4\", lowBound=0, cat='Integer')\nx5 = LpVariable(\"x5\", lowBound=0, cat='Integer')\nx6 = LpVariable(\"x6\", lowBound=0, cat='Integer')\nx7 = LpVariable(\"x7\", lowBound=0, cat='Integer')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimumEmployees\", LpMinimize)\n\n# Define the objective function\nproblem += x1 + x2 + x3 + x4 + x5 + x6 + x7\n\n# Define the constraints\nproblem += x1 + x2 + x3 + x4 + x5 >= 15\nproblem += x2 + x3 + x4 + x5 + x6 >= 13\nproblem += x3 + x4 + x5 + x6 + x7 >= 15\nproblem += x4 + x5 + x6 + x7 + x1 >= 18\nproblem += x5 + x6 + x7 + x1 + x2 >= 14\nproblem += x6 + x7 + x1 + x2 + x3 >= 16\nproblem += x7 + x1 + x2 + x3 + x4 >= 10\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The minimum number of workers needed is:\", value(problem.objective))\nprint(\"Number of workers starting on Monday:\", x1.value())\nprint(\"Number of workers starting on Tuesday:\", x2.value())\nprint(\"Number of workers starting on Wednesday:\", x3.value())\nprint(\"Number of workers starting on Thursday:\", x4.value())\nprint(\"Number of workers starting on Friday:\", x5.value())\nprint(\"Number of workers starting on Saturday:\", x6.value())\nprint(\"Number of workers starting on Sunday:\", x7.value())\n",
        "results": {
            "The minimum number of workers needed is": "22.0",
            "Number of workers starting on Monday": "7.0",
            "Number of workers starting on Tuesday": "0.0",
            "Number of workers starting on Wednesday": "4.0",
            "Number of workers starting on Thursday": "0.0",
            "Number of workers starting on Friday": "4.0",
            "Number of workers starting on Saturday": "5.0",
            "Number of workers starting on Sunday": "2.0"
        },
        "type": "linear-notable",
        "index": 82,
        "length": 475,
        "var_num": 7
    },
    {
        "question": "A tropical farmer has 100 acres of land to grow guavas and mangos. He prefers to grow more mangos than guavas, but because they require so much more work, he can grow at most 2 times the amount of mangos as guavas. In addition he must grow at least 20 acres of guavas and at least 40 acres of mangos. If the profit per acre of guavas is $300 and the profit per acres of mangos is $500, how many acre of each should he grow to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of acres of guavas\", \"name\": \"x\"}, {\"description\": \"number of acres of mangos\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total profit\", \"function\": \"300x + 500y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"total land constraint\", \"function\": \"x + y <= 100\"}, {\"description\": \"mango to guava ratio constraint\", \"function\": \"y <= 2x\"}, {\"description\": \"minimum guava constraint\", \"function\": \"x >= 20\"}, {\"description\": \"minimum mango constraint\", \"function\": \"y >= 40\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nacres_guavas = LpVariable(\"AcresGuavas\", lowBound=20, cat='Continuous') # number of acres of guavas\nacres_mangos = LpVariable(\"AcresMangos\", lowBound=40, cat='Continuous') # number of acres of mangos\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"TropicalFarmer\", LpMaximize)\n\n# Define the objective function\nobjective = 300 * acres_guavas + 500 * acres_mangos\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += acres_guavas + acres_mangos <= 100 # total land constraint\nproblem += acres_mangos <= 2 * acres_guavas # mango to guava ratio constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of acres of guavas to grow:\", acres_guavas.value())\nprint(\"The number of acres of mangos to grow:\", acres_mangos.value())\nprint(\"The maximum profit:\", objective.value())\n",
        "results": {
            "The number of acres of guavas to grow": "33.333333",
            "The number of acres of mangos to grow": "66.666667",
            "The maximum profit": "43333.3334"
        },
        "type": "linear-notable",
        "index": 83,
        "length": 442,
        "var_num": 2
    },
    {
        "question": "A toy company makes toys and knows that most of their customers are young boys and girls. To reach these groups, the company has decided to purchase commercial spots on cartoons and kids-movies. Each cartoon is seen by 2 millions young boys and 1 million young girls. Each kids-movie is seen by 4 million young boys and 6 million young girls. The company wants their commercials to be seen by at least 30 million young boys and 40 million young girls. If a commercial during a cartoon costs $5000 and a commercial during a kids-movie costs $12000, how many of each should be purchased to minimize cost?",
        "formulation": "{\"variable\": [{\"description\": \"number of commercials during cartoons\", \"name\": \"x\"}, {\"description\": \"number of commercials during kids-movies\", \"name\": \"y\"}], \"objective\": [{\"description\": \"cost of commercials\", \"function\": \"5000x + 12000y\", \"sense\": \"Minimize\"}], \"constraint\": [{\"description\": \"viewership by young boys\", \"function\": \"2 million*x + 4 million*y >= 30 million\"}, {\"description\": \"viewership by young girls\", \"function\": \"1 million*x + 6 million*y >= 40 million\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_commercials_cartoons = LpVariable(\"NumCommercialsCartoons\", lowBound=0, cat='Integer') # number of commercials during cartoons\nnum_commercials_movies = LpVariable(\"NumCommercialsMovies\", lowBound=0, cat='Integer') # number of commercials during kids-movies\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ToyCompanyAdvertising\", LpMinimize)\n\n# Define the objective function\nobjective = 5000 * num_commercials_cartoons + 12000 * num_commercials_movies\nproblem += objective # minimize the cost of commercials\n\n# Define the constraints\nproblem += 2 * num_commercials_cartoons + 4 * num_commercials_movies >= 30 # viewership by young boys (in millions)\nproblem += 1 * num_commercials_cartoons + 6 * num_commercials_movies >= 40 # viewership by young girls (in millions)\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of commercials during cartoons:\", num_commercials_cartoons.value())\nprint(\"The number of commercials during kids-movies:\", num_commercials_movies.value())\nprint(\"The total cost of the commercials:\", objective.value())\n",
        "results": {
            "The number of commercials during cartoons": "1.0",
            "The number of commercials during kids-movies": "7.0",
            "The total cost of the commercials": "89000.0"
        },
        "type": "linear-notable",
        "index": 84,
        "length": 602,
        "var_num": 2
    },
    {
        "question": "A manufacturer can sell product 1 at a profit of $2/unit and product 2 at a profit of $5/unit. Three units of raw material are needed to manufacture 1 unit of product 1, and 6 units of raw material are needed to manufacture 1 unit of product 2. A total of 120 units of raw material are available. If any of product 1 is produced, a setup cost of $10 is incurred, and if any of product 2 is produced, a setup cost of $20 is incurred. Formulate an LP to maximize profits.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for product 1 and product 2 that adhere to the constraints given. Let's denote the number of units of product 1 as P1 and the number of units of product 2 as P2.\nWe also need to define boolean variables to represent whether each product is produced or not. Let's denote the boolean variable for product 1 as B1 and the boolean variable for product 2 as B2.\n```Variables\nP1 //number of units of product 1 to produce\nP2 //number of units of product 2 to produce\nP1, P2 >= 0 and they are integers //non-negative integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit from selling product 1 and product 2. The profit from selling product 1 is $2\nunit and the profit from selling product 2 is $5/unit, which can be written as: 2P1 + 5P2.\nWe also need to subtract the setup costs for each product. The setup cost for product 1 is $10 and the setup\ncost for product 2 is $20, which can be written as: -10B1 - 20B2.\n```Objective\nMaximize: 2P1 + 5P2 - 10 * min(P1, 1) - 20 * min(P2, 1)\n```\n\n# Constraints:\nWe need to make sure that we have enough raw material to produce the desired quantities of product 1 and\nproduct 2. We need 3 units of raw material to produce 1 unit of product 1 and 6 units of raw material to\nproduce 1 unit of product 2. We have a total of 120 units of raw material available, which can be written as:\n3P1 + 6P2 <= 120.\n```Constraints\n3P1 + 6P2 <= 120 //A total of 120 units of raw material are available\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nP1 = LpVariable(\"Product1\", lowBound=0, cat='Integer') # number of units of product 1 to produce\nP2 = LpVariable(\"Product2\", lowBound=0, cat='Integer') # number of units of product 2 to produce\nB1 = LpVariable(\"Boolean1\", cat='Binary') # boolean variable for product 1\nB2 = LpVariable(\"Boolean2\", cat='Binary') # boolean variable for product 2\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ManufacturerProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 2 * P1 + 5 * P2 - 10 * B1 - 20 * B2\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 3 * P1 + 6 * P2 <= 120 # raw material constraint\nproblem += P1 - 1000000 * B1 <= 0 # linking constraint for product 1\nproblem += P2 - 1000000 * B2 <= 0 # linking constraint for product 2\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of units of product 1 to produce:\", P1.value())\nprint(\"The number of units of product 2 to produce:\", P2.value())\nprint(\"The total profit:\", objective.value())\n",
        "results": {
            "The number of units of product 1 to produce": "0.0",
            "The number of units of product 2 to produce": "20.0",
            "The total profit": "80.0"
        },
        "type": "linear-notable",
        "index": 85,
        "length": 469,
        "var_num": 3
    },
    {
        "scenario": "## Define Variables:\nA manufacturing company is planning to produce four types of products: ProductA, ProductB, ProductC, and ProductD. They need to decide how many units of each product to produce in the next month to optimize their profit.\n// variables: {\"number of units of ProductA\": \"ProductAUnits\", \"number of units of ProductB\": \"ProductBUnts\", \"number of units of ProductC\": \"ProductCUnits\", \"number of units of ProductD\": \"ProductDUnits\"}, where ProductAUnits, ProductBUnts, ProductCUnits, ProductDUnits >= 0 & ProductAUnits, ProductBUnts, ProductCUnits, ProductDUnits are integers\n\n## Define Objective Function:\nThe profit per unit for ProductA is $50, for ProductB is $70, for ProductC is $90, and for ProductD is $110. However, the production cost per unit increases non-linearly with the number of units produced due to economies of scale. Specifically, the production cost per unit for ProductA is $30 + (ProductAUnits^2)/1000, for ProductB is $40 + (ProductBUnts^2)/1000, for ProductC is $50 + (ProductCUnits^2)/1000, and for ProductD is $60 + (ProductDUnits^2)/1000. The company wants to maximize the total net profit.\n// Total net profit for ProductA: Profit_ProductA = (50 - (30 + (ProductAUnits^2)/1000)) * ProductAUnits\n// Total net profit for ProductB: Profit_ProductB = (70 - (40 + (ProductBUnts^2)/1000)) * ProductBUnts\n// Total net profit for ProductC: Profit_ProductC = (90 - (50 + (ProductCUnits^2)/1000)) * ProductCUnits\n// Total net profit for ProductD: Profit_ProductD = (110 - (60 + (ProductDUnits^2)/1000)) * ProductDUnits\n// So, the objective function is: Maximize (Profit_ProductA + Profit_ProductB + Profit_ProductC + Profit_ProductD)\n\n## Generate Constraint-1:\nThe company has a total production capacity of 1000 units for the month.\n// ProductAUnits + ProductBUnts + ProductCUnits + ProductDUnits <= 1000\n\n## Generate Constraint-2:\nDue to market demand, the company must produce at least 100 units of ProductA and no more than 200 units.\n// ProductAUnits >= 100; ProductAUnits <= 200\n\n## Generate Constraint-3:\nThe company has a budget of $50,000 for production costs for the month.\n// (30 + (ProductAUnits^2)/1000) * ProductAUnits + (40 + (ProductBUnts^2)/1000) * ProductBUnts + (50 + (ProductCUnits^2)/1000) * ProductCUnits + (60 + (ProductDUnits^2)/1000) * ProductDUnits <= 50,000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nProductAUnits = model.addVar(vtype=\"INTEGER\", name=\"ProductAUnits\") # number of units of ProductA\nmodel.addCons(ProductAUnits >= 0)\nProductBUnts = model.addVar(vtype=\"INTEGER\", name=\"ProductBUnts\") # number of units of ProductB\nmodel.addCons(ProductBUnts >= 0)\nProductCUnits = model.addVar(vtype=\"INTEGER\", name=\"ProductCUnits\") # number of units of ProductC\nmodel.addCons(ProductCUnits >= 0)\nProductDUnits = model.addVar(vtype=\"INTEGER\", name=\"ProductDUnits\") # number of units of ProductD\nmodel.addCons(ProductDUnits >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == ((50 - (30 + (ProductAUnits**2)/1000)) * ProductAUnits) + ((70 - (40 + (ProductBUnts**2)/1000)) * ProductBUnts) + ((90 - (50 + (ProductCUnits**2)/1000)) * ProductCUnits) + ((110 - (60 + (ProductDUnits**2)/1000)) * ProductDUnits))\n\n# Add constraints\nmodel.addCons(ProductAUnits + ProductBUnts + ProductCUnits + ProductDUnits <= 1000)\nmodel.addCons(ProductAUnits >= 100)\nmodel.addCons(ProductAUnits <= 200)\nmodel.addCons(((30 + (ProductAUnits**2)/1000) * ProductAUnits) + ((40 + (ProductBUnts**2)/1000) * ProductBUnts) + ((50 + (ProductCUnits**2)/1000) * ProductCUnits) + ((60 + (ProductDUnits**2)/1000) * ProductDUnits) <= 50000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Total Net Profit: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Total Net Profit": "10382.436"
        },
        "question": "A manufacturing company is planning to produce four types of products: ProductA, ProductB, ProductC, and ProductD. They need to decide how many units of each product to produce in the next month to optimize their profit. The profit per unit and the production cost per unit, which increases non-linearly with the number of units produced, are given in the following Table.\n\n| Product | Profit per Unit | Production Cost per Unit |\n|---------|-----------------|--------------------------|\n| ProductA | $50 | $30 + (ProductAUnits^2)/1000 |\n| ProductB | $70 | $40 + (ProductBUnts^2)/1000 |\n| ProductC | $90 | $50 + (ProductCUnits^2)/1000 |\n| ProductD | $110 | $60 + (ProductDUnits^2)/1000 |\n\nThe company has a total production capacity of 1000 units for the month. Due to market demand, the company must produce at least 100 units of ProductA and no more than 200 units. The company has a budget of $50,000 for production costs for the month. The company wants to maximize the total net profit, which is the sum of the profits from each product minus the respective production costs.\n",
        "type": "nonlinear-table",
        "index": 86,
        "length": 1080,
        "var_num": 4
    },
    {
        "question": "Dorian Auto has a $20,000 advertising budget. Dorian can purchase full-page ads in two magazines: Inside Jocks (IJ) and Family Square (FS). An exposure occurs when a person reads a Dorian Auto ad for the first time. The number of exposures generated by each ad in IJ is as follows: ads 1-6, 10,000 exposures; ads 7-10, 3,000 exposures; ads 11-15, 2,500 exposures; ads 16+, 0 exposures. For example, 8 ads in IJ would generate 6(10,000) + 2(3,000) = 66,000 exposures. The number of exposures generated by each ad in FS is as follows: ads 1-4, 8,000 exposures; ads 5-12, 6,000 exposures; ads 13-15, 2,000 exposures; ads 16+, 0 exposures. Thus, 13 ads in FS would generate 4(8,000) + 8(6,000) + 1(2,000) = 82,000 exposures. Each full-page ad in either magazine costs $1,000. Assume there is no overlap in the readership of the two magazines. Formulate an LP to maximize the number of exposures that Dorian can obtain with limited advertising funds.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal number of ads to purchase in each magazine. Let's denote the number of ads yielding 10,000 exposures in IJ as IJ_10, the number of ads yielding 3,000 exposures in IJ as IJ_3, the number of ads yielding 2,500 exposures in IJ as IJ_2p5, the number of ads yielding 8,000 exposures in FS as FS_8, the number of ads yielding 6,000 exposures in FS as FS_6, and the number of ads yielding 2,000 exposures in FS as FS_2.\n```Variables\nIJ_10 //number of IJ ads yielding 10,000 exposures\nIJ_3 //number of IJ ads yielding 3,000 exposures\nIJ_2p5 //number of IJ ads yielding 2,500 exposures\nFS_8 //number of FS ads yielding 8,000 exposures\nFS_6 //number of FS ads yielding 6,000 exposures\nFS_2 //number of FS ads yielding 2,000 exposures\nIJ_10, IJ_3, IJ_2p5, FS_8, FS_6, FS_2 >= 0 and they are integers // non-negativive integer variables\n```\n\n# Objective Function:\nWe want to maximize the number of exposures that Dorian can obtain with limited advertising funds. The number of exposures generated by each ad in IJ and FS is given. The total number of exposures is the sum of the number of exposures generated by each type of ad multiplied by the number of ads purchased in that type. So the objective function is 10 * IJ_10 + 3 * IJ_3 + 2.5 * IJ_2p5 + 8 * FS_8 + 6 * FS_6 + 2 * FS_2.\n```Objective Function\nMaximize: 10 * IJ_10 + 3 * IJ_3 + 2.5 * IJ_2p5 + 8 * FS_8 + 6 * FS_6 + 2 * FS_2\n```\n\n# Constraints:\nWe have several constraints to consider:\n1. The maximum advertising budget is $20,000, so the total cost of the ads purchased in IJ and FS should not exceed this budget. The cost of each ad is $1,000. So the constraint is IJ_10 + IJ_3 + IJ_2p5 + FS_8 + FS_6 + FS_2 <= 20.\n2. There are limits on the number of ads that can be purchased in each category. The maximum number of ads yielding 10,000 exposures in IJ is 6, so the constraint is IJ_10 <= 6. The maximum number of ads yielding 3,000 exposures in IJ is 4, so the constraint is IJ_3 <= 4. The maximum number of ads yielding 2,500 exposures in IJ is 5, so the constraint is IJ_2p5 <= 5. The maximum number of ads yielding 8,000 exposures in FS is 4, so the constraint is FS_8 <= 4. The maximum number of ads yielding 6,000 exposures in FS is 8, so the constraint is FS_6 <= 8. The maximum number of ads yielding 2,000 exposures in FS is 3, so the constraint is FS_2 <= 3.\n```Constraints\nIJ_10 + IJ_3 + IJ_2p5 + FS_8 + FS_6 + FS_2 <= 20 //maximum advertising budget\nIJ_10 <= 6 //maximum number of IJ ads yielding 10,000 exposures\nIJ_3 <= 4 //maximum number of IJ ads yielding 3,000 exposures\nIJ_2p5 <= 5 //maximum number of IJ ads yielding 2,500 exposures\nFS_8 <= 4 //maximum number of FS ads yielding 8,000 exposures\nFS_6 <= 8 //maximum number of FS ads yielding 6,000 exposures\nFS_2 <= 3 //maximum number of FS ads yielding 2,000 exposures\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nIJ_10 = LpVariable(\"IJ_10\", lowBound=0, upBound=6, cat='Integer')\nIJ_3 = LpVariable(\"IJ_3\", lowBound=0, upBound=4, cat='Integer')\nIJ_2p5 = LpVariable(\"IJ_2p5\", lowBound=0, upBound=5, cat='Integer')\nFS_8 = LpVariable(\"FS_8\", lowBound=0, upBound=4, cat='Integer')\nFS_6 = LpVariable(\"FS_6\", lowBound=0, upBound=8, cat='Integer')\nFS_2 = LpVariable(\"FS_2\", lowBound=0, upBound=3, cat='Integer')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeExposures\", LpMaximize)\n\n# Define the objective function\nproblem += 10000 * IJ_10 + 3000 * IJ_3 + 2500 * IJ_2p5 + 8000 * FS_8 + 6000 * FS_6 + 2000 * FS_2\n\n# Define the constraints\nproblem += IJ_10 + IJ_3 + IJ_2p5 + FS_8 + FS_6 + FS_2 <= 20\nproblem += IJ_10 <= 6\nproblem += IJ_3 <= 4\nproblem += IJ_2p5 <= 5\nproblem += FS_8 <= 4\nproblem += FS_6 <= 8\nproblem += FS_2 <= 3\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of IJ ads yielding 10,000 exposures:\", IJ_10.value())\nprint(\"The number of IJ ads yielding 3,000 exposures:\", IJ_3.value())\nprint(\"The number of IJ ads yielding 2,500 exposures:\", IJ_2p5.value())\nprint(\"The number of FS ads yielding 8,000 exposures:\", FS_8.value())\nprint(\"The number of FS ads yielding 6,000 exposures:\", FS_6.value())\nprint(\"The number of FS ads yielding 2,000 exposures:\", FS_2.value())\nprint(\"The maximum number of exposures:\", value(problem.objective))\n",
        "results": {
            "The number of IJ ads yielding 10,000 exposures": "6.0",
            "The number of IJ ads yielding 3,000 exposures": "2.0",
            "The number of IJ ads yielding 2,500 exposures": "0.0",
            "The number of FS ads yielding 8,000 exposures": "4.0",
            "The number of FS ads yielding 6,000 exposures": "8.0",
            "The number of FS ads yielding 2,000 exposures": "0.0",
            "The maximum number of exposures": "146000.0"
        },
        "type": "linear-notable",
        "index": 87,
        "length": 945,
        "var_num": 6
    },
    {
        "question": "You need to construct a square-bottomed box. The box should have a volume of at least 1000 cubic centimeters. Please find the dimensions that will minimize the surface area of the box.",
        "scenario": "## Define Variables:\nYou need to construct a square-bottomed box.\n// variables: {\"side length of the square bottom\": \"x\", \"height of the box\": \"h\"}, where x, h >= 0\n\n## Define Objective Function:\nPlease find the dimensions that will minimize the surface area of the box.\n// The surface area of the box is the sum of the area of the square bottom and the area of the four sides. The area of the square bottom is x^2, and the area of the four sides is 4*x*h.\n// So, the objective function is: Minimize x^2 + 4*x*h\n\n## Generate Constraint-1:\nThe volume of the box should be at least 1000 cubic centimeters.\n// x^2 * h >= 1000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"CONTINUOUS\", name=\"x\") # side length of the square bottom\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the box\n\n# Define objective function\nobj = model.addVar(vtype=\"CONTINUOUS\", name=\"obj\")\nmodel.setObjective(obj, \"minimize\")\nmodel.addCons(obj == x**2 + 4*x*h)\n\n# Add constraints\nmodel.addCons(x**2 * h >= 1000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The side length of the square bottom:\", model.getVal(x))\n    print(\"The height of the box:\", model.getVal(h))\n    print(\"The minimum surface area of the box: \", model.getVal(x**2 + 4*x*h))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The side length of the square bottom": "12.599210495162833",
            "The height of the box": "6.299605247590834",
            "The minimum surface area of the box": "476.2203153047384"
        },
        "type": "nonlinear-notable",
        "index": 88,
        "length": 184,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA city is planning to install five different types of renewable energy sources: solar panels, wind turbines, hydroelectric plants, biomass generators, and geothermal systems. The city needs to decide how many units of each type of energy source to install.\n// variables: {\"number of solar panels\": \"SolarPanels\", \"number of wind turbines\": \"WindTurbines\", \"number of hydroelectric plants\": \"HydroPlants\", \"number of biomass generators\": \"BiomassGenerators\", \"number of geothermal systems\": \"GeothermalSystems\"}, where SolarPanels, WindTurbines, HydroPlants, BiomassGenerators, GeothermalSystems >= 0 & SolarPanels, WindTurbines, HydroPlants, BiomassGenerators, GeothermalSystems are integers\n\n## Define Objective Function:\nFor solar panels, the installation cost per unit is $5,000, the annual energy output is 10,000 kWh, and the maintenance cost per year per unit is $500.\nFor wind turbines, the installation cost per unit is $10,000, the annual energy output is 20,000 kWh, and the maintenance cost per year per unit is $1,000.\nFor hydroelectric plants, the installation cost per unit is $15,000, the annual energy output is 30,000 kWh, and the maintenance cost per year per unit is $1,500.\nFor biomass generators, the installation cost per unit is $7,000, the annual energy output is 15,000 kWh, and the maintenance cost per year per unit is $700.\nFor geothermal systems, the installation cost per unit is $20,000, the annual energy output is 40,000 kWh, and the maintenance cost per year per unit is $2,000.\nThe city wants to maximize the net energy output per dollar spent in the next decade.\n// Total energy output: EnergyOutput = (10,000 * SolarPanels + 20,000 * WindTurbines + 30,000 * HydroPlants + 15,000 * BiomassGenerators + 40,000 * GeothermalSystems) * 10\n// Installation cost: InstallCost = 5,000 * SolarPanels + 10,000 * WindTurbines + 15,000 * HydroPlants + 7,000 * BiomassGenerators + 20,000 * GeothermalSystems\n// Total maintenance cost: (MaintenanceCost = 500 * SolarPanels + 1,000 * WindTurbines + 1,500 * HydroPlants + 700 * BiomassGenerators + 2,000 * GeothermalSystems) * 10\n// So, the objective function is: Maximize EnergyOutput / (InstallCost + MaintenanceCost)\n\n## Generate Constraint-1:\nThe city has a budget of $500,000 for the installation of renewable energy sources.\n// 5,000 * SolarPanels + 10,000 * WindTurbines + 15,000 * HydroPlants + 7,000 * BiomassGenerators + 20,000 * GeothermalSystems <= 500,000\n\n## Generate Constraint-2:\nThe city wants to ensure that at least 20% of the budget is spent on solar panels.\n// 5,000 * SolarPanels >= 0.2 * 500,000\n\n## Generate Constraint-3:\nThe city has a maintenance budget of $50,000 per year.\n// 500 * SolarPanels + 1,000 * WindTurbines + 1,500 * HydroPlants + 700 * BiomassGenerators + 2,000 * GeothermalSystems <= 50,000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nSolarPanels = model.addVar(vtype=\"INTEGER\", name=\"SolarPanels\") # number of solar panels\nmodel.addCons(SolarPanels >= 0)\nWindTurbines = model.addVar(vtype=\"INTEGER\", name=\"WindTurbines\") # number of wind turbines\nmodel.addCons(WindTurbines >= 0)\nHydroPlants = model.addVar(vtype=\"INTEGER\", name=\"HydroPlants\") # number of hydroelectric plants\nmodel.addCons(HydroPlants >= 0)\nBiomassGenerators = model.addVar(vtype=\"INTEGER\", name=\"BiomassGenerators\") # number of biomass generators\nmodel.addCons(BiomassGenerators >= 0)\nGeothermalSystems = model.addVar(vtype=\"INTEGER\", name=\"GeothermalSystems\") # number of geothermal systems\nmodel.addCons(GeothermalSystems >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nEnergyOutput = (10000 * SolarPanels + 20000 * WindTurbines + 30000 * HydroPlants + 15000 * BiomassGenerators + 40000 * GeothermalSystems) * 10\nInstallCost = 5000 * SolarPanels + 10000 * WindTurbines + 15000 * HydroPlants + 7000 * BiomassGenerators + 20000 * GeothermalSystems\nMaintenanceCost = (500 * SolarPanels + 1000 * WindTurbines + 1500 * HydroPlants + 700 * BiomassGenerators + 2000 * GeothermalSystems) * 10\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj * (InstallCost + MaintenanceCost) == EnergyOutput )\n\n# Add constraints\nmodel.addCons(5000 * SolarPanels + 10000 * WindTurbines + 15000 * HydroPlants + 7000 * BiomassGenerators + 20000 * GeothermalSystems <= 500000)\nmodel.addCons(5000 * SolarPanels >= 0.2 * 500000)\nmodel.addCons(500 * SolarPanels + 1000 * WindTurbines + 1500 * HydroPlants + 700 * BiomassGenerators + 2000 * GeothermalSystems <= 50000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Maximized Energy Output per Dollar: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Maximized Energy Output per Dollar": "10.571142284569138"
        },
        "question": "A city is planning to install five different types of renewable energy sources: solar panels, wind turbines, hydroelectric plants, biomass generators, and geothermal systems. The city needs to decide how many units of each type of energy source to install. The installation cost per unit, annual energy output, and maintenance cost per year per unit for each type of energy source are given in the following Table.\n\n| Energy Source       | Installation Cost per Unit | Annual Energy Output | Maintenance Cost per Year per Unit |\n|---------------------|---------------------------|----------------------|------------------------------------|\n| Solar Panels        | $5,000                    | 10,000 kWh           | $500                               |\n| Wind Turbines       | $10,000                   | 20,000 kWh           | $1,000                             |\n| Hydroelectric Plants| $15,000                   | 30,000 kWh           | $1,500                             |\n| Biomass Generators  | $7,000                    | 15,000 kWh           | $700                               |\n| Geothermal Systems  | $20,000                   | 40,000 kWh           | $2,000                             |\n\nThe city has a budget of $500,000 for the installation of renewable energy sources. The city wants to ensure that at least 20% of the budget is spent on solar panels. The city has a maintenance budget of $50,000 per year. The city wants to maximize the net energy output per dollar spent in the next decade.\n",
        "type": "nonlinear-table",
        "index": 89,
        "length": 1509,
        "var_num": 5
    },
    {
        "question": "You need to construct a cylinder with a hemispherical top. The container's volume is at least 100 cubic units. The hemispherical top has the same radius as the cylinder. The container is made with no bottom. The cost per unit area of the top is twice as great as the cost per unit area of the side. Please find the height and radius of the cylinder that minimizes the cost of the container.",
        "scenario": "## Define Variables:\nYou need to construct a cylinder with a hemispherical top.\n// variables: {\"radius of the cylinder\": \"r\", \"height of the cylinder\": \"h\"}, where r, h >= 0\n\n## Define Objective Function:\nThe hemispherical top has the same radius as the cylinder. The container is made with no bottom. The cost per unit area of the top is twice as great as the cost per unit area of the side. Please find the height and radius of the cylinder that minimizes the cost of the container.\n// Fist, we need to find the area of the container. The area of the side is 2\u03c0rh, and the area of the hemispherical top is 2\u03c0r^2. \n// Assuming the cost per unit area of the side is $1, then the cost per unit area of the top is $2. The total cost of the container is 2\u03c0rh + 4\u03c0r^2.\n// Therefore, the objective function is: Minimize 2\u03c0rh + 4\u03c0r^2\n\n## Generate Constraint-1:\nThe volume of the container is at least 100 cubic units.\n// The volume of the cylinder is given by the formula \u03c0r^2h, and the volume of the hemispherical top is given by the formula 2/3 * \u03c0r^3. The total volume is the sum of the volume of the cylinder and the volume of the hemispherical top, which is \u03c0r^2h + 2/3 * \u03c0r^3.\n// It is given that the volume is at least 100. Therefore, the constraint is: \u03c0r^2h + 2/3 * \u03c0r^3 >= 100",
        "code": "from pyscipopt import Model\nimport math\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nr = model.addVar(vtype=\"CONTINUOUS\", name=\"r\", lb=0, ub=100) # radius of the cylinder\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\", lb=0, ub=100) # height of the cylinder\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nmodel.addCons(obj == 2 * math.pi * r * h + 4 * math.pi * r**2)\n\n# Add constraints\nmodel.addCons(math.pi * r**2 * h + 2/3 * math.pi * r**3 >= 100)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The radius of the cylinder: \", model.getVal(r))\n    print(\"The height of the cylinder: \", model.getVal(h))\n    print(\"The minimum cost of the container: \", model.getVal(obj))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The radius of the cylinder": "2.285448517936186",
            "The height of the cylinder": "4.570434862483215",
            "The minimum cost of the container": "131.26857993995196"
        },
        "type": "nonlinear-notable",
        "index": 90,
        "length": 390,
        "var_num": 2
    },
    {
        "question": "Owners of a car rental company have determined that if they charge customers p dollars per day to rent a car, where 50\u2264p\u2264200, the number of cars n they rent per day can be modeled by the linear function n(p)=1000-5p. The price per day should be integer($). If they charge $50 per day or less, they will rent all their cars. If they charge  $200 per day or more, they will not rent any cars. Assuming the owners plan to charge customers between  $50 per day and  $200 per day to rent a car, how much should they charge to maximize their revenue?",
        "scenario": "## Define Variables:\nOwners of a car rental company have determined that if they charge customers p dollars per day to rent a car, where 50\u2264p\u2264200, the number of cars n they rent per day can be modeled by the linear function n(p)=1000-5p. The price per day should be integer($).\n// variables: {\"price per day to rent a car\": \"p\"}, where 50 <= p <= 200\n\n## Define Objective Function:\nIf they charge $50 per day or less, they will rent all their cars. If they charge  $200 per day or more, they will not rent any cars. Assuming the owners plan to charge customers between  $50 per day and  $200 per day to rent a car, how much should they charge to maximize their revenue?\n// The revenue is the product of the price per day and the number of cars rented per day. The number of cars rented per day can be modeled by the linear function n(p) = 1000 - 5p. \n// Therefore, the objective function is: Maximize p * (1000 - 5p) \n\n## Define Constraint-1:\nThe price per day should be integer($).\n// p is an integer",
        "code": "from pyscipopt import Model, quicksum\n\n# Create a new model\nmodel = Model()\n\n# Define variables\np = model.addVar(vtype=\"INTEGER\", name=\"p\", lb=50, ub=200)  # price per day to rent a car\n\n# Define objective function\nobj = model.addVar(vtype=\"C\", name=\"obj\")\nmodel.addCons(obj == p * (1000 - 5*p))\nmodel.setObjective(obj, \"maximize\")\n\n# Add constraints\n# No additional constraints needed as the variable p already has its bounds defined\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The optimal price per day to rent a car:\", model.getVal(p))\n    print(\"The maximum revenue:\", model.getVal(obj))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The optimal price per day to rent a car": "100.0",
            "The maximum revenue": "50000.0"
        },
        "type": "nonlinear-notable",
        "index": 91,
        "length": 544,
        "var_num": 1
    },
    {
        "question": "You want to make a rectangular pen for hogs. You have 800 ft of fencing. There is a river on one side of your property, and you do not need to fence that side. What is the dimension of the rectangular pen that maximizes the area?",
        "scenario": "## Define Variables:\nYou want to make a rectangular pen for hogs.\n// variables: {\"length of the pen\": \"L\", \"width of the pen\": \"W\"}, where L, W >= 0\n\n## Define Objective Function:\nWhat is the dimension of the rectangular pen that maximizes the area?\n// The area of the pen is given by the product of the length and the width. Therefore, the objective function is: Maximize L * W\n\n## Generate Constraint-1:\nYou have 800 ft of fencing. There is a river on one side of your property, and you do not need to fence that side.\n// L + 2W <= 800",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nL = model.addVar(vtype=\"CONTINUOUS\", name=\"L\") # length of the pen\nW = model.addVar(vtype=\"CONTINUOUS\", name=\"W\") # width of the pen\n\n# Define objective function\nobj = model.addVar(vtype=\"CONTINUOUS\", name=\"obj\")\nmodel.addCons(obj == L * W)\nmodel.setObjective(obj, \"maximize\")\n\n# Add constraints\nmodel.addCons(L + 2 * W <= 800)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The length of the pen: \", model.getVal(L))\n    print(\"The width of the pen: \", model.getVal(W))\n    print(\"The maximum area of the pen: \", model.getVal(L * W))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The length of the pen": "400.00000",
            "The width of the pen": "200.0000",
            "The maximum area of the pen": "80000.00"
        },
        "type": "nonlinear-notable",
        "index": 92,
        "length": 229,
        "var_num": 2
    },
    {
        "question": "A company seeks to maximize exposure within a limited advertising budget. The exposure per ad or commercial, along with the cost for each medium, is provided in the following Table. The budget is limited to $100,000, with a maximum of four television commercials, ten radio commercials, and seven newspaper ads. Additionally, there is a cap of 15 total commercials and/or ads. How can the company maximize exposure within these constraints?\n\nTable (Exposure and Cost per Advertising Medium):\n| Advertising Medium | Exposure (people/ad or commercial) | Cost (USD) |\n| ------------------- | ---------------------------------- | ---------- |\n| Television Commercial | 20,000                            | 15,000     |\n| Radio Commercial      | 2,000                             | 6,000      |\n| Newspaper Ad          | 9,000                             | 4,000      |\n\nConstraints:\n- Total budget: $100,000\n- Maximum number of television commercials: 4\n- Maximum number of radio commercials: 10\n- Maximum number of newspaper ads: 7\n- Maximum total number of commercials and/or ads: 15",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal number of television commercials, radio commercials, and newspaper ads to maximize the exposure. Let's denote the number of television commercials as TV, the number of radio commercials as RC, and the number of newspaper ads as NA.\n```Variables\nTV //number of television commercials\nRC //number of radio commercials\nNA //number of newspaper ads\nTV, RC, NA >= 0, and they are integers\n```\n\n# Objective Function:\nWe want to maximize the exposure, so the objective function is given by the sum of the exposure from television commercials, radio commercials, and newspaper ads. The exposure from television commercials is 20,000 * TV, the exposure from radio commercials is 2,000 * RC, and the exposure from newspaper ads is 9,000 * NA. Therefore, the objective function is 20,000 * TV + 2,000 * RC + 9,000 * NA.\n```Objective Function\nMaximize: 20000 * TV + 2000 * RC + 9000 * NA\n```\n\n# Constraints:\nWe need to consider the following constraints:\n- Budget constraint: The total cost of television commercials, radio commercials, and newspaper ads should not exceed the budget limit of $100,000. This can be represented as 15,000 * TV + 6,000 * RC + 4,000 * NA <= 100,000.\n- Television commercials constraint: The number of television commercials should not exceed 4. This can be represented as TV <= 4.\n- Radio commercials constraint: The number of radio commercials should not exceed 10. This can be represented as RC <= 10.\n- Newspaper ads constraint: The number of newspaper ads should not exceed 7. This can be represented as NA <= 7.\n- Total commercials and ads constraint: The total number of commercials and ads should not exceed 15. This can be represented as TV + RC + NA <= 15.\n```Constraints\n15000 * TV + 6000 * RC + 4000 * NA <= 100000 //Budget constraint\nTV <= 4 //Television commercials constraint\nRC <= 10 //Radio commercials constraint\nNA <= 7 //Newspaper ads constraint\nTV + RC + NA <= 15 //Total commercials and ads constraint\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nTV = LpVariable(\"Television_Commercials\", 0, 4, cat='Integer')\nRC = LpVariable(\"Radio_Commercials\", 0, 10, cat='Integer')\nNA = LpVariable(\"Newspaper_Ads\", 0, 7, cat='Integer')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"Maximize_Exposure\", LpMaximize)\n\n# Define the objective function\nproblem += 20000 * TV + 2000 * RC + 9000 * NA\n\n# Define the constraints\nproblem += 15000 * TV + 6000 * RC + 4000 * NA <= 100000\nproblem += TV <= 4\nproblem += RC <= 10\nproblem += NA <= 7\nproblem += TV + RC + NA <= 15\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of television commercials:\", TV.value())\nprint(\"The number of radio commercials:\", RC.value())\nprint(\"The number of newspaper ads:\", NA.value())\nprint(\"The maximum exposure:\", value(problem.objective))\n",
        "results": {
            "The number of television commercials": "4.0",
            "The number of radio commercials": "2.0",
            "The number of newspaper ads": "7.0",
            "The maximum exposure": "147000.0"
        },
        "type": "linear-table",
        "index": 93,
        "length": 1080,
        "var_num": 3
    },
    {
        "question": "A macro-counting fitness guru only eats salmon and eggs. Each bowl of salmon contains 300 calories, 15 grams of protein, and 80 mg of sodium. Each bowl of eggs contains 200 calories, 8 grams of protein, and 20 mg of sodium. Since the fitness guru has a limit to how many eggs he would like to eat, at most 40% of his meals can be eggs. The fitness guru needs to eat at least 2000 calories and 90 grams of protein. How many of each type of meal should he eat to minimize his sodium intake?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_salmon_meals = LpVariable(\"NumSalmonMeals\", lowBound=0, cat='Integer') # number of salmon meals\nnum_egg_meals = LpVariable(\"NumEggMeals\", lowBound=0, cat='Integer') # number of egg meals\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimizeSodiumIntake\", LpMinimize)\n\n# Define the objective function\nobjective = 80 * num_salmon_meals + 20 * num_egg_meals\nproblem += objective # minimize the sodium intake\n\n# Define the constraints\nproblem += 300 * num_salmon_meals + 200 * num_egg_meals >= 2000 # total calories must be at least 2000\nproblem += 15 * num_salmon_meals + 8 * num_egg_meals >= 90 # total protein must be at least 90 grams\nproblem += num_egg_meals <= (num_salmon_meals + num_egg_meals) * 0.4 # eggs meals must be at most 40% of the meals\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of salmon meals:\", num_salmon_meals.value())\nprint(\"The number of egg meals:\", num_egg_meals.value())\nprint(\"The sodium intake (mg):\", objective.value())",
        "results": {
            "The number of salmon meals": "5.0",
            "The number of egg meals": "3.0",
            "The sodium intake (mg)": "460.0"
        },
        "formulation": "minimize 80x+20y\nSubject to: \n300x+200y >= 2000\n15x+8y >= 90\ny <= 0.4(x+y) (end)",
        "type": "linear-notable",
        "index": 94,
        "length": 488,
        "var_num": 2
    },
    {
        "question": "A student takes calcium pills and vitamin D pills one after the other. Each calcium pill takes 5 minutes to be effective while each vitamin D pill takes 6 minutes to be effective. Over a month, the student must take at least 130 pills of medication and at least 40 should be vitamin D pills because they enhance the absorption of calcium in the body. Since vitamin D is complimentary to calcium, the student must take more calcium pills than vitamin D pills. How many pills of each should the student take to minimize the total time it takes for the medication to be effective?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_calcium_pills = LpVariable(\"NumCalciumPills\", lowBound=0, cat='Integer') # number of calcium pills\nnum_vitamin_d_pills = LpVariable(\"NumVitaminDPills\", lowBound=0, cat='Integer') # number of vitamin D pills\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MedicationEffectiveness\", LpMinimize)\n\n# Define the objective function\nobjective = 5 * num_calcium_pills + 6 * num_vitamin_d_pills\nproblem += objective # minimize the total time for medication to be effective\n\n# Define the constraints\nproblem += num_calcium_pills + num_vitamin_d_pills >= 130 # at least 130 pills of medication\nproblem += num_vitamin_d_pills >= 40 # at least 40 should be vitamin D pills\nproblem += num_calcium_pills >= num_vitamin_d_pills + 1 # more calcium pills than vitamin D pills\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of calcium pills:\", num_calcium_pills.value())\nprint(\"The number of vitamin D pills:\", num_vitamin_d_pills.value())\nprint(\"The total time for the medication to be effective:\", objective.value())",
        "results": {
            "The number of calcium pills": "90.0",
            "The number of vitamin D pills": "40.0",
            "The total time for the medication to be effective": "690.0"
        },
        "formulation": "minimize 5x+6y\nSubject to: \nx+y >= 130\ny >= 40\nx >= y (end)",
        "type": "linear-notable",
        "index": 95,
        "length": 577,
        "var_num": 2
    },
    {
        "question": "A flooring company produces engineered hardwood and vinyl planks. Their sales forecasts show an expected demand of at least 20,000 square foot of hardwood and 10,000 square feet of vinyl planks each week. To satisfy a shipping contract, a total of at least 60,000 square feet of flooring much be shipped each week. Due to a labor shortage issue, no more than 50,000 square feet of hardwood and 30,000  square feet of vinyl  can be produced weekly. If a square foot of hardwood flooring yields a profit of $2.5 and a square foot of vinyl planks produces a $3 profit, how many of each type of flooring should be made weekly to maximize the company's profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nhardwood = LpVariable(\"Hardwood\", lowBound=0, cat='Continuous') # number of square feet of hardwood flooring produced weekly\nvinyl = LpVariable(\"Vinyl\", lowBound=0, cat='Continuous') # number of square feet of vinyl planks produced weekly\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FlooringCompanyProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 2.5 * hardwood + 3 * vinyl\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += hardwood >= 20000 # demand of hardwood must be met\nproblem += vinyl >= 10000 # demand of vinyl planks must be met\nproblem += hardwood + vinyl >= 60000 # satisfy the shipping contract\nproblem += hardwood <= 50000 # due to labor shortage issue, cannot exceed this amount of production for hardwood \nproblem += vinyl <= 30000 # due to labor shortage issue, cannot exceed this amount of production for vinyl \n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of square feet of hardwood flooring produced weekly:\", hardwood.value())\nprint(\"The number of square feet of vinyl planks produced weekly:\", vinyl.value())\nprint(\"The maximum company's profit:\", objective.value())",
        "results": {
            "The number of square feet of hardwood flooring produced weekly": "50000.0",
            "The number of square feet of vinyl planks produced weekly": "30000.0",
            "The maximum company's profit": "215000.0"
        },
        "formulation": "maximize 2.5x+3y\nSubject to: \nx >= 20000\ny >= 10000\nx+y >= 60000\nx <= 50000\ny <= 30000 (end)",
        "type": "linear-notable",
        "index": 96,
        "length": 655,
        "var_num": 2
    },
    {
        "question": "A company is considering opening warehouses in four cities: New York, Los Angeles, Chicago, and Atlanta. Each warehouse can ship 100 units per week. The weekly fixed cost of keeping each warehouse open is $400 for New York, $500 for Los Angeles, $300 for Chicago, and $150 for Atlanta. Region 1 of the country requires 80 units per week, region 2 requires 70 units per week, and region 3 requires 40 units per week. The costs (including production and shipping costs) of sending one unit from a plant to a region are shown in Table 3. We want to meet weekly demands at minimum cost, subject to the preceding information and the following restrictions: 1. If the New York warehouse is opened, then the Los Angeles warehouse must be opened. 2. At most two warehouses can be opened. 3. Either the Atlanta or the Los Angeles warehouse must be opened. Formulate an LP that can be used to minimize the weekly costs of meeting demand. To ($) From Region 1 Region 2 Region 3 New York 20 40 50 Los Angeles 48 15 26 Chicago 26 35 18 Atlanta 24 50 35.",
        "formulation": "# Define Variables:\nFirst, we need to determine which warehouses to open and how many units to supply from each warehouse to meet the weekly demands. Let's denote the decision variable for whether the warehouse in city I is selected for opening as yi, and the number of units supplied from region j as xij.\n```\nVariables:\nyi // whether the warehouse in city I is selected for opening the warehouse\nyi = 0 or 1 // binary variable\nxij // number of units supplied from region j\nxij >= 0 and is integer // non-negative integer variable\ni, j = 1, 2, 3, 4\n```\n\n# Objective Function:\nWe want to minimize the weekly costs of meeting demand, which includes the fixed costs of keeping each warehouse open and the costs of sending units from the warehouses to the regions. The fixed costs are $400 for New York, $500 for Los Angeles, $300 for Chicago, and $150 for Atlanta. The costs of sending one unit from a warehouse to a region are given in Table 3. \nSo the objective function is the sum of the fixed costs and the costs of sending units from the warehouses to the regions:\n```Objective Function\nMinimize: 400y1 + 500y2 + 300y3 + 150y4 + 20x11 + 40x12 + 50x13 + 48x21 + 15x22 + 26x23 + 26x31 + 35x32 + 18x33 + 24x41 + 50x42 + 35x43\n```\n\n# Constraints:\nWe need to consider the following restrictions:\n1. If the New York warehouse is opened, then the Los Angeles warehouse must be opened: y1 <= y2\n2. At most two warehouses can be opened: y1 + y2 + y3 + y4 <= 2\n3. Either the Atlanta or the Los Angeles warehouse must be opened: y2 + y4 >= 1\n4. Maximum shipping units per week of each warehouse: \n   - New York: x11 + x12 + x13 <= 100y1\n   - Los Angeles: x21 + x22 + x23 <= 100y2\n   - Chicago: x31 + x32 + x33 <= 100y3\n   - Atlanta: x41 + x42 + x43 <= 100y4\nTherefore, the Constraints are as follows:\n```Constraints\ny1 <= y2\ny1 + y2 + y3 + y4 <= 2\ny2 + y4 >= 1\nx11 + x12 + x13 <= 100y1\nx21 + x22 + x23 <= 100y2\nx31 + x32 + x33 <= 100y3\nx41 + x42 + x43 <= 100y4\ny1, y2, y3, y4 = 0 or 1\nxij >= 0\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\ny1 = LpVariable(\"NewYorkWarehouse\", 0, 1, LpBinary)\ny2 = LpVariable(\"LosAngelesWarehouse\", 0, 1, LpBinary)\ny3 = LpVariable(\"ChicagoWarehouse\", 0, 1, LpBinary)\ny4 = LpVariable(\"AtlantaWarehouse\", 0, 1, LpBinary)\nx11 = LpVariable(\"UnitsFromNewYorkToRegion1\", lowBound=0, cat='Integer')\nx12 = LpVariable(\"UnitsFromNewYorkToRegion2\", lowBound=0, cat='Integer')\nx13 = LpVariable(\"UnitsFromNewYorkToRegion3\", lowBound=0, cat='Integer')\nx21 = LpVariable(\"UnitsFromLosAngelesToRegion1\", lowBound=0, cat='Integer')\nx22 = LpVariable(\"UnitsFromLosAngelesToRegion2\", lowBound=0, cat='Integer')\nx23 = LpVariable(\"UnitsFromLosAngelesToRegion3\", lowBound=0, cat='Integer')\nx31 = LpVariable(\"UnitsFromChicagoToRegion1\", lowBound=0, cat='Integer')\nx32 = LpVariable(\"UnitsFromChicagoToRegion2\", lowBound=0, cat='Integer')\nx33 = LpVariable(\"UnitsFromChicagoToRegion3\", lowBound=0, cat='Integer')\nx41 = LpVariable(\"UnitsFromAtlantaToRegion1\", lowBound=0, cat='Integer')\nx42 = LpVariable(\"UnitsFromAtlantaToRegion2\", lowBound=0, cat='Integer')\nx43 = LpVariable(\"UnitsFromAtlantaToRegion3\", lowBound=0, cat='Integer')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"WarehouseLocation\", LpMinimize)\n\n# Define the objective function\nobjective = 400*y1 + 500*y2 + 300*y3 + 150*y4 + 20*x11 + 40*x12 + 50*x13 + 48*x21 + 15*x22 + 26*x23 + 26*x31 + 35*x32 + 18*x33 + 24*x41 + 50*x42 + 35*x43\nproblem += objective\n\n# Define the constraints\nproblem += y1 <= y2\nproblem += y1 + y2 + y3 + y4 <= 2\nproblem += y2 + y4 >= 1\nproblem += x11 + x12 + x13 <= 100*y1\nproblem += x21 + x22 + x23 <= 100*y2\nproblem += x31 + x32 + x33 <= 100*y3\nproblem += x41 + x42 + x43 <= 100*y4\nproblem += x11 + x21 + x31 + x41 == 80\nproblem += x12 + x22 + x32 + x42 == 70\nproblem += x13 + x23 + x33 + x43 == 40\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Status:\", LpStatus[status])\nprint(\"The weekly cost of meeting demand is: $\", value(problem.objective))\nprint(\"Open New York Warehouse:\", y1.value())\nprint(\"Open Los Angeles Warehouse:\", y2.value())\nprint(\"Open Chicago Warehouse:\", y3.value())\nprint(\"Open Atlanta Warehouse:\", y4.value())\nprint(\"Units from New York to Region 1:\", x11.value())\nprint(\"Units from New York to Region 2:\", x12.value())\nprint(\"Units from New York to Region 3:\", x13.value())\nprint(\"Units from Los Angeles to Region 1:\", x21.value())\nprint(\"Units from Los Angeles to Region 2:\", x22.value())\nprint(\"Units from Los Angeles to Region 3:\", x23.value())\nprint(\"Units from Chicago to Region 1:\", x31.value())\nprint(\"Units from Chicago to Region 2:\", x32.value())\nprint(\"Units from Chicago to Region 3:\", x33.value())\nprint(\"Units from Atlanta to Region 1:\", x41.value())\nprint(\"Units from Atlanta to Region 2:\", x42.value())\nprint(\"Units from Atlanta to Region 3:\", x43.value())\n",
        "results": {
            "The weekly cost of meeting demand is": "4750.0",
            "Open New York Warehouse": "0.0",
            "Open Los Angeles Warehouse": "1.0",
            "Open Chicago Warehouse": "0.0",
            "Open Atlanta Warehouse": "1.0",
            "Units from New York to Region 1": "0.0",
            "Units from New York to Region 2": "0.0",
            "Units from New York to Region 3": "0.0",
            "Units from Los Angeles to Region 1": "0.0",
            "Units from Los Angeles to Region 2": "70.0",
            "Units from Los Angeles to Region 3": "30.0",
            "Units from Chicago to Region 1": "0.0",
            "Units from Chicago to Region 2": "0.0",
            "Units from Chicago to Region 3": "0.0",
            "Units from Atlanta to Region 1": "80.0",
            "Units from Atlanta to Region 2": "0.0",
            "Units from Atlanta to Region 3": "10.0"
        },
        "type": "linear-table",
        "index": 97,
        "length": 1040,
        "var_num": 17
    },
    {
        "question": "A magic school sends letters to student either by carrier pigeons or owls. A carrier pigeon can carry two letters at a time and requires 3 treats for service. An owl can carry 5 letters at a time and requires 5 treats for service.  At most 40% of the birds can be owls. In addition, the school only has 1000 treats available and at least 20 carrier pigeons must be uses. How many of each bird can be used to maximize the total number of letters that can be sent.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_pigeons = LpVariable(\"NumPigeons\", lowBound=20, cat='Integer') # number of carrier pigeons\nnum_owls = LpVariable(\"NumOwls\", lowBound=0, cat='Integer') # number of owls\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MagicSchoolLetters\", LpMaximize)\n\n# Define the objective function\nobjective = 2 * num_pigeons + 5 * num_owls\nproblem += objective # maximize the total number of letters transported\n\n# Define the constraints\nproblem += 3 * num_pigeons + 5 * num_owls <= 1000 # the total number of treats available\nproblem += num_owls <= 0.4 * (num_pigeons + num_owls) # at most 40% of the birds can be owls\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of carrier pigeons:\", num_pigeons.value())\nprint(\"The number of owls:\", num_owls.value())\nprint(\"The total number of letters sent:\", objective.value())",
        "results": {
            "The number of carrier pigeons": "158.0",
            "The number of owls": "105.0",
            "The total number of letters sent": "841.0"
        },
        "formulation": "maximize twox+5y\nSubject to: \ny <= 0.4(x+y)\n3x+5y <= 1000\nx >= 20 (end)",
        "type": "linear-notable",
        "index": 98,
        "length": 462,
        "var_num": 2
    },
    {
        "question": "We have a piece of cardboard that is 50 cm by 20 cm and we are going to cut out the corners and fold up the sides to form a box. Determine the height of the box that will give a maximum volume.",
        "scenario": "## Define Variables:\nWe have a piece of cardboard that is 50 cm by 20 cm and we are going to cut out the corners and fold up the sides to form a box.\n// variables: {\"height of the box\": \"h\"}, where h >= 0\n// The cutted height can not be more than half of the width of the cardboard, so 2h <= 20\n\n## Define Objective Function:\nDetermine the height of the box that will give a maximum volume.\n// We want to maximize the volume of the box, which is given by the product of the length, width, and height. After cutting out the corners, the length of the box is 50 - 2h and the width of the box is 20 - 2h. Therefore, the volume V of the box is V = h(50 - 2h)(20 - 2h).\n// So, the objective function is: Maximize V = h(50 - 2h)(20 - 2h)",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\")  # height of the box\n\n# Define objective function\nV = model.addVar('V')\nmodel.setObjective(V, \"maximize\")\nmodel.addCons(V == h * (50 - 2*h) * (20 - 2*h))\n\n# Add constraints\nmodel.addCons(2*h <= 20)\nmodel.addCons(h >= 0)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The height of the box that gives maximum volume:\", model.getVal(h))\n    print(\"The maximum volume of the box: \", model.getVal(V))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The height of the box that gives maximum volume": "4.401840938682219",
            "The maximum volume of the box": "2030.3362942094193"
        },
        "type": "nonlinear-notable",
        "index": 99,
        "length": 193,
        "var_num": 1
    },
    {
        "question": "Lucy has a dog and she wants his food to be mixed.  In order to keep the dog healthy but also keep the food tasty, the mix needs to have a minimum of 15 units of calcium, 20 units of vitamin mix, and 20 units of protein. A regular brand costs $20 per bag and contains 4 units of calcium, 7 units of vitamin mix, and 10 units of protein. A premium brand costs $35 per bag and contains 12 units of calcium, 10 units of vitamin mix, and 16 units of protein. How many bags of each brand should Lucy mix in order to minimize cost while also meeting the taste and health requirements.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_regular_bags = LpVariable(\"NumRegularBags\", lowBound=0, cat='Integer') # number of regular brand bags\nnum_premium_bags = LpVariable(\"NumPremiumBags\", lowBound=0, cat='Integer') # number of premium brand bags\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DogFoodMix\", LpMinimize)\n\n# Define the objective function\nobjective = 20 * num_regular_bags + 35 * num_premium_bags\nproblem += objective # minimize the total cost\n\n# Define the constraints\nproblem += 4 * num_regular_bags + 12 * num_premium_bags >= 15 # calcium requirement\nproblem += 7 * num_regular_bags + 10 * num_premium_bags >= 20 # vitamin mix requirement\nproblem += 10 * num_regular_bags + 16 * num_premium_bags >= 20 # protein requirement\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of regular brand bags:\", num_regular_bags.value())\nprint(\"The number of premium brand bags:\", num_premium_bags.value())\nprint(\"The total cost:\", objective.value())",
        "results": {
            "The number of regular brand bags": "0.0",
            "The number of premium brand bags": "2.0",
            "The total cost": "70.0"
        },
        "formulation": "minimize 35y+20x\nSubject to: \n4x+12y >= 15\n7x+10y >= 20\n10x+16y >= 20 (end)",
        "type": "linear-notable",
        "index": 100,
        "length": 578,
        "var_num": 2
    },
    {
        "question": "On their farm, the Friendly family grows apples that they harvest each fall and make into three products- apple butter, applesauce, and apple jelly. They sell these three items at several local grocery stores, at craft fairs in the region, and at their own Friendly Farm Pumpkin Festival for 2 weeks in October. Their three primary resources are cooking time in their kitchen, their own labor time, and the apples. They have a total of 500 cooking hours available, and it requires 3.5 hours to cook a 10-gallon batch of apple butter, 5.2 hours to cook 10 gallons of applesauce, and 2.8 hours to cook 10 gallons of jelly. A 10-gallon batch of apple butter requires 1.2 hours of labor, a batch of sauce takes 0.8 hour, and a batch of jelly requires 1.5 hours. The Friendly family has 240 hours of labor available during the fall. They produce about 6,500 apples each fall. A batch of apple butter requires 40 apples, a 10-gallon batch of applesauce requires 55 apples, and a batch of jelly requires 20 apples. After the products are canned, a batch of apple butter will generate $190 in sales revenue, a batch of applesauce will generate a sales revenue of $170, and a batch of jelly will generate sales revenue of $155. The Friendlys want to know how many batches of apple butter, applesauce, and apple jelly to produce in order to maximize their revenues.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for Apple Butter, Apple Sauce, and Apple Jelly that adhere to the constraints given. Let's denote the number of batches of Apple Butter as AB, the number of batches of Apple Sauce as AS, and the number of batches of Apple Jelly as AJ.\n```Variables\nAB //number of batches of Apple Butter to produce \nAS //number of batches of Apple Sauce to produce\nAJ //number of batches of Apple Jelly to produce\nAB, AS, AJ >= 0 and they are integers\n```\n\n# Objective Function:\nWe want to maximize the total revenue generated from selling the three products. The revenue from Apple Butter is $190 per batch, the revenue from Apple Sauce is $170 per batch, and the revenue from Apple Jelly is $155 per batch. Therefore, the objective function (total revenue) is given by 190AB + 170AS + 155AJ.\n```Objective Function\nMaximize: 190AB + 170AS + 155AJ\n```\n\n# Constraints:\nThe Friendly family has limited resources, so we need to consider the constraints given.\n```Constraints\n3.5AB + 5.2AS + 2.8AJ <= 500 //cooking time constraint\n1.2AB + 0.8AS + 1.5AJ <= 240 //labor time constraint\n40AB + 55AS + 20AJ <= 6500 //apples constraint\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nAB = LpVariable(\"AppleButterBatches\", lowBound=0, cat='Integer')\nAS = LpVariable(\"AppleSauceBatches\", lowBound=0, cat='Integer')\nAJ = LpVariable(\"AppleJellyBatches\", lowBound=0, cat='Integer')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeRevenue\", LpMaximize)\n\n# Define the objective function\nproblem += 190 * AB + 170 * AS + 155 * AJ\n\n# Define the constraints\nproblem += 3.5 * AB + 5.2 * AS + 2.8 * AJ <= 500\nproblem += 1.2 * AB + 0.8 * AS + 1.5 * AJ <= 240\nproblem += 40 * AB + 55 * AS + 20 * AJ <= 6500\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Number of Apple Butter batches to produce:\", AB.value())\nprint(\"Number of Apple Sauce batches to produce:\", AS.value())\nprint(\"Number of Apple Jelly batches to produce:\", AJ.value())\nprint(\"Total Revenue:\", value(problem.objective))\n",
        "results": {
            "Number of Apple Butter batches to produce": "42.0",
            "Number of Apple Sauce batches to produce": "0.0",
            "Number of Apple Jelly batches to produce": "126.0",
            "Total Revenue": "27510.0"
        },
        "type": "linear-notable",
        "index": 101,
        "length": 1355,
        "var_num": 3
    },
    {
        "question": "A taxi company will purchase vehicles to rent to their drivers. They are interested in purchasing either motorcycles or sedans. A motorcycle can transport 30 people, produces 4 units of pollution, and earns the taxi company $100 per shift. A sedan can transport 70 people, produces 15 units of pollution and earns the company $225 per shift. Because not every customer is comfortable with a motorcycle, at most 25% of vehicles can be motorcycles. Additionally, the company has committed to producing less than 200 units of pollution. The company needs to transport at least 1200 people every shift. How many of each type of vehicle should be used to maximize the total earnings for the taxi company per shift?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_motorcycles = LpVariable(\"NumMotorcycles\", lowBound=0, cat='Integer') # number of motorcycles\nnum_sedans = LpVariable(\"NumSedans\", lowBound=0, cat='Integer') # number of sedans\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"TaxiEarnings\", LpMaximize)\n\n# Define the objective function\nobjective = 100 * num_motorcycles + 225 * num_sedans\nproblem += objective # maximize the total earnings per shift\n\n# Define the constraints\nproblem += num_motorcycles <= 0.25 * (num_motorcycles + num_sedans) # at most 25% of vehicles can be motorcycles\nproblem += 4 * num_motorcycles + 15 * num_sedans <= 200 # less than 200 units of pollution \nproblem += 30 * num_motorcycles + 70 * num_sedans >= 1200 # needs to transport at least 1200 people\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of motorcycles:\", num_motorcycles.value())\nprint(\"The number of sedans:\", num_sedans.value())\nprint(\"Total earnings per shift:\", objective.value())",
        "results": {
            "The number of motorcycles": "4.0816327",
            "The number of sedans": "12.244898",
            "Total earnings per shift": "3163.26532"
        },
        "formulation": "maximize 100x+225y\nSubject to: \nx <= 0.25(x+y)\n4x+15y <= 200\n30x+70y >= 1200 (end)",
        "type": "linear-table",
        "index": 102,
        "length": 709,
        "var_num": 2
    },
    {
        "question": "A soup store sell two soups: a crab soup and a lobster soup. The soups are made using water, crab meat, and lobster meat. A serving of crab soup requires 7 units of water and 8 units of crab meat. A serving of lobster soup requires 10 units of water and 5 units of lobster meat. There is 80 units of water available, 65 units of crab meat available, and 55 units of lobster meat available. The profit per serving of crab soup is $3 and the profit per serving of lobster soup is $5. Formulate as a LP to maximize profit.",
        "formulation": "{\"variable\": [{\"description\": \"number of servings of crab soup\", \"name\": \"x\"}, {\"description\": \"number of servings of lobster soup\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit\", \"function\": \"3x + 5y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"water constraint\", \"function\": \"7x + 10y <= 80\"}, {\"description\": \"crab meat constraint\", \"function\": \"8x <= 65\"}, {\"description\": \"lobster meat constraint\", \"function\": \"5y <= 55\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_crab_soup_servings = LpVariable(\"NumCrabSoupServings\", lowBound=0, cat='Integer') # number of servings of crab soup\nnum_lobster_soup_servings = LpVariable(\"NumLobsterSoupServings\", lowBound=0, cat='Integer') # number of servings of lobster soup\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SoupStoreProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 3 * num_crab_soup_servings + 5 * num_lobster_soup_servings\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 7 * num_crab_soup_servings + 10 * num_lobster_soup_servings <= 80 # water constraint\nproblem += 8 * num_crab_soup_servings <= 65 # crab meat constraint\nproblem += 5 * num_lobster_soup_servings <= 55 # lobster meat constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of servings of crab soup:\", num_crab_soup_servings.value())\nprint(\"The number of servings of lobster soup:\", num_lobster_soup_servings.value())\nprint(\"The total profit:\", objective.value())\n",
        "results": {
            "The number of servings of crab soup": "0.0",
            "The number of servings of lobster soup": "8.0",
            "The total profit": "40.0"
        },
        "type": "linear-notable",
        "index": 103,
        "length": 519,
        "var_num": 2
    },
    {
        "question": "You are making cylindrical containers to contain 12 cubic inches of liquid. Suppose that the top and bottom are made of a material that is times as expensive (cost per unit area) as the material used for the lateral side of the cylinder. Find the shape of the cylinder that minimizes the cost of making the containers.",
        "scenario": "## Define Variables:\nYou are making cylindrical containers to contain a certain volume of liquid.\n// variables: {\"radius of the cylinder\": \"r\", \"height of the cylinder\": \"h\"}, where r, h >= 0\n\n## Define Objective Function:\nSuppose that the top and bottom are made of a material that is 3 times as expensive (cost per unit area) as the material used for the lateral side of the cylinder. Find the shape of the cylinder that minimizes the cost of making the containers.\n// The area of the top and bottom of the cylinder together is 2\u03c0r^2, and the area of the lateral side is 2\u03c0rh.\n// Suppose that the lateral side material costs $1 per square unit, then the top and bottom material costs $3 per square unit. So The total cost of the material is 3(2\u03c0r^2) + 2\u03c0rh.\n// Therefore, the objective function is: Minimize 3(2\u03c0r^2) + 2\u03c0rh\n\n## Generate Constraint-1:\nThe volume of the cylinder is 12 cubic inches.\n// The volume of the cylinder is given by the formula \u03c0r^2h, and it is given that the volume is 12. \n// Therefore, the constraint is \u03c0r^2h = 12.",
        "code": "from pyscipopt import Model\nimport math\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nr = model.addVar(vtype=\"CONTINUOUS\", name=\"r\") # radius of the cylinder\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the cylinder\n\n# Define objective function\ncost = model.addVar('cost')\nmodel.setObjective(cost, \"minimize\")\nmodel.addCons(cost == 3*(2*math.pi*r**2) + 2*math.pi*r*h)\n\n# Add constraints\nmodel.addCons(math.pi*r**2*h == 12)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The radius of the cylinder that minimizes the cost: \", model.getVal(r))\n    print(\"The height of the cylinder that minimizes the cost: \", model.getVal(h))\n    print(\"The minimum cost of making the containers: \", model.getVal(cost))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The radius of the cylinder that minimizes the cost": "0.8602135589215862",
            "The height of the cylinder that minimizes the cost": "5.162009398241112",
            "The minimum cost of making the containers": "41.84810349780642"
        },
        "type": "nonlinear-notable",
        "index": 104,
        "length": 318,
        "var_num": 2
    },
    {
        "question": "A park is designing their trails and can either create a wide trail or a narrow trail. A wide trail can take 50 visitors every day while the narrow trail expects 20 visitors every day. The wide trail will introduce 6 units of garbage and the narrow trail will introduce 3 units of garbage. There can be at most 3 wide trails and the park hopes to have at most 225 visitors every day. How many of each type of trail should the park construct to minimize the total amount of garbage produced.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_wide_trails = LpVariable(\"NumWideTrails\", lowBound=0, cat='Integer') # number of wide trails\nnum_narrow_trails = LpVariable(\"NumNarrowTrails\", lowBound=0, cat='Integer') # number of narrow trails\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ParkTrailDesign\", LpMinimize)\n\n# Define the objective function\nobjective = 6 * num_wide_trails + 3 * num_narrow_trails\nproblem += objective # minimize the total amount of garbage produced\n\n# Define the constraints\nproblem += num_wide_trails <= 3 # the park can construct at most 3 wide trails\nproblem += 50 * num_wide_trails + 20 * num_narrow_trails <= 225 # the park hopes to have at most 225 visitors every day\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of wide trails:\", num_wide_trails.value())\nprint(\"The number of narrow trails:\", num_narrow_trails.value())\nprint(\"The total amount of garbage produced:\", objective.value())",
        "results": {
            "The number of wide trails": "0.0",
            "The number of narrow trails": "0.0",
            "The total amount of garbage produced": "0.0"
        },
        "formulation": "minimize 6x+3y\nSubject to: \n50x+20y <= 225\nx <= 3 (end)",
        "type": "linear-notable",
        "index": 105,
        "length": 490,
        "var_num": 2
    },
    {
        "question": "Children can go to school either by van or by minibus. A van can take 6 kids and produces 7 units of pollution. A minibus can take 10 kids and produced 10 units of pollution. There are at least 150 kids than need to go to school and at most 10 minibuses can be used. In addition, the number of vans used must exceed the number of minibuses. How many of each should be used to minimize the total amount of pollution produced?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_vans = LpVariable(\"NumVans\", lowBound=0, cat='Integer') # number of vans\nnum_minibuses = LpVariable(\"NumMinibuses\", lowBound=0, upBound=10, cat='Integer') # number of minibuses\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SchoolTransport\", LpMinimize)\n\n# Define the objective function\nobjective = 7 * num_vans + 10 * num_minibuses\nproblem += objective # minimize the total amount of pollution\n\n# Define the constraints\nproblem += 6 * num_vans + 10 * num_minibuses >= 150 # At least 150 kids must go to school\nproblem += num_vans >= num_minibuses + 1 # The number of vans used must exceed the number of minibuses\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of vans used:\", num_vans.value())\nprint(\"The number of minibuses used:\", num_minibuses.value())\nprint(\"The total pollution produced:\", objective.value())",
        "results": {
            "The number of vans used": "10.0",
            "The number of minibuses used": "9.0",
            "The total pollution produced": "160.0"
        },
        "formulation": "minimize 7x+10y\nSubject to: \n6x+10y >= 150\ny <= 10\nx >= y (end)",
        "type": "linear-notable",
        "index": 106,
        "length": 424,
        "var_num": 2
    },
    {
        "question": "Maple Oil processes three types of crude oil: light oil, non-sticky oil and heavy oil. Each tank of light oil produces a net revenue of $550, each tank of non-sticky oil produces a net revenue of $750, and each tank of heavy oil produces a net revenue of $950. To process a tank of light oil, 3 units of compound A and 3 units of compound B are required. To process a tank of non-sticky oil, 6 units of compound A and 2 units of compound B are required. To process a tank of heavy oil, 9 units of compound A and 3 units of compound B are required. Currently the company has 250 units of compound A and 150 units of compound B to process. How many full or partial tanks of each oil should the company process so that net revenue is maximized?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nlight_oil = LpVariable(\"LightOil\", lowBound=0, cat='Integer') # amount of light oil\nnon_sticky_oil = LpVariable(\"NonStickyOil\", lowBound=0, cat='Integer') # amount of non-sticky oil\nheavy_oil = LpVariable(\"HeavyOil\", lowBound=0, cat='Integer') # amount of heavy oil\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MapleOil\", LpMaximize)\n\n# Define the objective function\nobjective = 550 * light_oil + 750 * non_sticky_oil + 950 * heavy_oil\nproblem += objective # maximize the net revenue\n\n# Define the constraints\nproblem += 3 * light_oil + 6 * non_sticky_oil + 9 * heavy_oil <= 250 # compound A constraint\nproblem += 3 * light_oil + 2 * non_sticky_oil + 3 * heavy_oil <= 150 # compound B constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The amount of light oil:\", light_oil.value())\nprint(\"The amount of non-sticky oil:\", non_sticky_oil.value())\nprint(\"The amount of heavy oil:\", heavy_oil.value())\nprint(\"The net revenue is:\", objective.value())",
        "results": {
            "The amount of light oil": "33.0",
            "The amount of non-sticky oil": "25.0",
            "The amount of heavy oil": "0.0",
            "The net revenue is": "36900.0"
        },
        "formulation": "maximize 550x+750y+950z\nSubject to: \n3x+6y+9z <= 250\n3z+2y+3x <= 150 (end)",
        "type": "linear-notable",
        "index": 107,
        "length": 741,
        "var_num": 3
    },
    {
        "question": "The Ace Manufacturing Company has orders for three similar products: A, B, C Order 1750, 500, 1100. Three machines are available for the manufacturing operations. All three machines can produce all the products at the same production rate. However, due to varying defect percentages of each product on each machine, the unit costs of the products vary depending on the machine used. Machine capacities for the next week and the unit costs are as follows: machine 1, 2, 3 and capacities are 1550, 1450, 1150. The cost for machine 1, 2, 3 with product A, B, C: [$0.80, $1.30, $0.70], [$1.40, $1.30, $1.50], [$0.80, $0.80, $1.20]. Use the transportation model to develop the minimum cost production schedule for the products and machines. Show the linear programming formulation. If the constant is \"1\" it must be entered in the box. If your answer is zero enter \"0\". ",
        "formulation": "# Define Variables:\nWe need to determine the number of units of each product produced on each machine. Let's denote the number of units of product A produced on machine 1 as A1, the number of units of product B produced on machine 1 as B1, and the number of units of product C produced on machine 1 as C1. Similarly, we denote the number of units of each product produced on machines 2 and 3 as A2, B2, C2, A3, B3, and C3, respectively.\n```\nVariables:\nA1 // Units of product A produced on machine 1\nB1 // Units of product B produced on machine 1\nC1 // Units of product C produced on machine 1\nA2 // Units of product A produced on machine 2\nB2 // Units of product B produced on machine 2\nC2 // Units of product C produced on machine 2\nA3 // Units of product A produced on machine 3\nB3 // Units of product B produced on machine 3\nC3 // Units of product C produced on machine 3\nA1, B1, C1, A2, B2, C2, A3, B3, C3 >= 0 and they are integers\n```\n\n# Objective Function:\nWe want to minimize the production cost, so the objective function (minimum production cost) is given by the sum of the cost of producing each product on each machine. The cost of producing each product on each machine is given in the question. Therefore, the objective function is:\n0.80A1 + 1.30B1 + 0.70C1 + 1.40A2 + 1.30B2 + 1.50C2 + 0.80A3 + 0.80B3 + 1.20C3\n```\nObjective Function:\nMinimize: 0.80A1 + 1.30B1 + 0.70C1 + 1.40A2 + 1.30B2 + 1.50C2 + 0.80A3 + 0.80B3 + 1.20C3\n```\n\n# Constraints:\nWe have several constraints that need to be satisfied:\n- Machine 1 capacity: The total number of units produced on machine 1 should not exceed its capacity of 1550 units.\n- Machine 2 capacity: The total number of units produced on machine 2 should not exceed its capacity of 1450 units.\n- Machine 3 capacity: The total number of units produced on machine 3 should not exceed its capacity of 1150 units.\n- Product A quantity demanded: The total number of units of product A produced on all machines should equal the quantity demanded, which is 1750 units.\n- Product B quantity demanded: The total number of units of product B produced on all machines should equal the quantity demanded, which is 500 units.\n- Product C quantity demanded: The total number of units of product C produced on all machines should equal the quantity demanded, which is 1100 units.\n```\nConstraints:\nA1 + B1 + C1 <= 1550 // Machine 1 capacity\nA2 + B2 + C2 <= 1450 // Machine 2 capacity\nA3 + B3 + C3 <= 1150 // Machine 3 capacity\nA1 + A2 + A3 = 1750 // Product A quantity demanded\nB1 + B2 + B3 = 500 // Product B quantity demanded\nC1 + C2 + C3 = 1100 // Product C quantity demanded\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nA1 = LpVariable(\"A1\", lowBound=0, cat='Integer')\nB1 = LpVariable(\"B1\", lowBound=0, cat='Integer')\nC1 = LpVariable(\"C1\", lowBound=0, cat='Integer')\nA2 = LpVariable(\"A2\", lowBound=0, cat='Integer')\nB2 = LpVariable(\"B2\", lowBound=0, cat='Integer')\nC2 = LpVariable(\"C2\", lowBound=0, cat='Integer')\nA3 = LpVariable(\"A3\", lowBound=0, cat='Integer')\nB3 = LpVariable(\"B3\", lowBound=0, cat='Integer')\nC3 = LpVariable(\"C3\", lowBound=0, cat='Integer')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimumCostProductionSchedule\", LpMinimize)\n\n# Define the objective function\nobjective = 0.80*A1 + 1.30*B1 + 0.70*C1 + 1.40*A2 + 1.30*B2 + 1.50*C2 + 0.80*A3 + 0.80*B3 + 1.20*C3\nproblem += objective\n\n# Define the constraints\nproblem += A1 + B1 + C1 <= 1550\nproblem += A2 + B2 + C2 <= 1450\nproblem += A3 + B3 + C3 <= 1150\nproblem += A1 + A2 + A3 == 1750\nproblem += B1 + B2 + B3 == 500\nproblem += C1 + C2 + C3 == 1100\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The production units for A on machine 1:\", A1.value())\nprint(\"The production units for B on machine 1:\", B1.value())\nprint(\"The production units for C on machine 1:\", C1.value())\nprint(\"The production units for A on machine 2:\", A2.value())\nprint(\"The production units for B on machine 2:\", B2.value())\nprint(\"The production units for C on machine 2:\", C2.value())\nprint(\"The production units for A on machine 3:\", A3.value())\nprint(\"The production units for B on machine 3:\", B3.value())\nprint(\"The production units for C on machine 3:\", C3.value())\nprint(\"The minimum production cost:\", objective.value())\n",
        "results": {
            "The production units for A on machine 1": "450.0",
            "The production units for B on machine 1": "0.0",
            "The production units for C on machine 1": "1100.0",
            "The production units for A on machine 2": "150.0",
            "The production units for B on machine 2": "500.0",
            "The production units for C on machine 2": "0.0",
            "The production units for A on machine 3": "1150.0",
            "The production units for B on machine 3": "0.0",
            "The production units for C on machine 3": "0.0",
            "The minimum production cost": "2910.0"
        },
        "type": "linear-notable",
        "index": 108,
        "length": 864,
        "var_num": 9
    },
    {
        "question": "Bangs Leisure Chairs produces three types of hand-crafted outdoor chairs: sling chairs, Adirondack chairs, and hammocks, with unit profits of $40, $100, and $90, respectively. The owner has 120 hours available each month for production and does not want to spend more than 50 hours on any one activity (cutting, assembling, and finishing). All products made can be sold. The time required for each activity for each type of chair is shown in the following Table. Determine the number of each type of chair to produce each month to maximize profit.\n\nTable (Time required in hours for each activity per chair type):\n| Chair Type     | Cutting | Assembling | Finishing |\n| -------------- | ------- | ---------- | --------- |\n| Sling Chairs   | 0.5     | 0.75       | 1         |\n| Adirondack     | 2       | 2          | 1         |\n| Hammocks       | 0.4     | 3          | 1         |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for sling chairs, Adirondack chairs, and hammocks that adhere to the constraints given. Let's denote the number of sling chairs as S, the number of Adirondack chairs as A, and the number of hammocks as H.\n```Variables\nS //number of sling chairs to produce \nA //number of Adirondack chairs to produce\nH //number of hammocks to produce\nS, A, H >= 0 and they are integers //non-negative integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function (profit) is given by the sum of the unit profit multiplied by the number of each type of chair produced. The unit profit for sling chairs is $40, for Adirondack chairs is $100, and for hammocks is $90.\nSo the objective function is 40S + 100A + 90H.\n```Objective Function\nMaximize: 40S + 100A + 90H\n```\n\n# Constraints:\nThe constraints are as follows:\n1. Maximum work hours in cutting: The cutting time for sling chairs is 30 minutes, for Adirondack chairs is 2 hours, and for hammocks is 0.4 hours. The total cutting time should not exceed 50 hours.\n2. Maximum work hours in assembling: The assembling time for sling chairs is 45 minutes, for Adirondack chairs is 2 hours, and for hammocks is 3 hours. The total assembling time should not exceed 50 hours.\n3. Maximum work hours in finishing: The finishing time for all types of chairs is 1 hour. The total finishing time should not exceed 50 hours.\n4. Available total work hours: The owner has 120 hours available each month. The total work hours for cutting, assembling, and finishing should not exceed 120 hours.\n```Constraints\n(30/60)S + 2A + (0.4)H <= 50 //maximum work hours in cutting\n(45/60)S + 2A + 3H <= 50 //maximum work hours in assembling\nS + A + H <= 50 //maximum work hours in finishing\n(30/60+45/60+1)S + (2+2+1)A + (0.4+3+1)H <= 120 //available total work hours\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nS = LpVariable(\"SlingChairs\", lowBound=0, cat='Integer') # number of sling chairs\nA = LpVariable(\"AdirondackChairs\", lowBound=0, cat='Integer') # number of Adirondack chairs\nH = LpVariable(\"Hammocks\", lowBound=0, cat='Integer') # number of hammocks\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ChairProduction\", LpMaximize)\n\n# Define the objective function\nproblem += 40 * S + 100 * A + 90 * H\n\n# Define the constraints\nproblem += (30/60) * S + 2 * A + (0.4) * H <= 50\nproblem += (45/60) * S + 2 * A + 3 * H <= 50\nproblem += S + A + H <= 50\nproblem += (30/60 + 45/60 + 1) * S + (2 + 2 + 1) * A + (0.4 + 3 + 1) * H <= 120\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of sling chairs to produce:\", S.value())\nprint(\"The number of Adirondack chairs to produce:\", A.value())\nprint(\"The number of hammocks to produce:\", H.value())\nprint(\"The maximum profit:\", value(problem.objective))\n",
        "results": {
            "The number of sling chairs to produce": "0.0",
            "The number of Adirondack chairs to produce": "24.0",
            "The number of hammocks to produce": "0.0",
            "The maximum profit": "2400.0"
        },
        "type": "linear-table",
        "index": 109,
        "length": 883,
        "var_num": 3
    },
    {
        "question": "A small pharmacy weighs and packages their medication. Each bottle of pills takes 20 minutes of weighing and 10 minutes of packaging. Each bottle of cream takes 15 minutes of weighing and 15 minutes of packaging. The pharmacy has available 4000 minutes for weighing and 3000 minutes for packaging. If the profit per bottle of pills is $50 and the profit per bottle of cream is $60, how many of each should the pharmacy prepare to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of bottles of pills\", \"name\": \"x\"}, {\"description\": \"number of bottles of cream\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total profit\", \"function\": \"50x + 60y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"weighing time constraint\", \"function\": \"20x + 15y <= 4000\"}, {\"description\": \"packaging time constraint\", \"function\": \"10x + 15y <= 3000\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_bottles_pills = LpVariable(\"NumBottlesPills\", lowBound=0, cat='Integer') # number of bottles of pills\nnum_bottles_cream = LpVariable(\"NumBottlesCream\", lowBound=0, cat='Integer') # number of bottles of cream\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"PharmacyProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 50 * num_bottles_pills + 60 * num_bottles_cream\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 20 * num_bottles_pills + 15 * num_bottles_cream <= 4000 # weighing time constraint\nproblem += 10 * num_bottles_pills + 15 * num_bottles_cream <= 3000 # packaging time constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of bottles of pills:\", num_bottles_pills.value())\nprint(\"The number of bottles of cream:\", num_bottles_cream.value())\nprint(\"The total profit:\", objective.value())\n",
        "results": {
            "The number of bottles of pills": "99.0",
            "The number of bottles of cream": "134.0",
            "The total profit": "12990.0"
        },
        "type": "linear-notable",
        "index": 110,
        "length": 446,
        "var_num": 2
    },
    {
        "question": "A company in the middle east delivers their packages to customers on camels and horses. A camel can carry 50 packages while a horse can carry 60 packages. A camel requires 20 units of food while a horse requires 30 units of food. The company needs to deliver at least 1000 packages and they have 450 units of food available. Since horses are not as suited for the hot climate, the number of horses cannot exceed the number of camels. How many of each animal should be used to minimize the total number of animals?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_camels = LpVariable(\"NumCamels\", lowBound=0, cat='Integer') # number of camels\nnum_horses = LpVariable(\"NumHorses\", lowBound=0, cat='Integer') # number of horses\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"PackageDelivery\", LpMinimize)\n\n# Define the objective function\nobjective = num_camels + num_horses\nproblem += objective # minimize the total number of animals\n\n# Define the constraints\nproblem += 50 * num_camels + 60 * num_horses >= 1000 # must deliver at least 1000 packages\nproblem += 20 * num_camels + 30 * num_horses <= 450 # can not exceed available food units\nproblem += num_horses <= num_camels # number of horses can not exceed number of camels\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of camels:\", num_camels.value())\nprint(\"The number of horses:\", num_horses.value())\nprint(\"Total number of animals:\", objective.value())",
        "results": {
            "The number of camels": "12.0",
            "The number of horses": "7.0",
            "Total number of animals": "19.0"
        },
        "formulation": "minimize x+y\nSubject to: \n50x+60y >= 1000\n20x+30y <= 450\ny <= x (end)",
        "type": "linear-notable",
        "index": 111,
        "length": 513,
        "var_num": 2
    },
    {
        "question": "A soda company sends bottles of their soda to stores around the city in old and new vans. An old van can take 100 soda bottles while a new van can take 80 soda bottles. An old van produces 50 units of pollution while a new van only produces 30 units of pollution. The company needs to send at least 5000 bottles. In addition, at most 30 new vans can be used. How many of each van should be used to minimize the total amount of pollution produced?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_old_vans = LpVariable(\"NumOldVans\", lowBound=0, cat='Integer') # number of old vans\nnum_new_vans = LpVariable(\"NumNewVans\", lowBound=0, cat='Integer') # number of new vans\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimizePollution\", LpMinimize)\n\n# Define the objective function\nobjective = 50 * num_old_vans + 30 * num_new_vans\nproblem += objective # minimize the total amount of pollution produced\n\n# Define the constraints\nproblem += 100 * num_old_vans + 80 * num_new_vans >= 5000 # must send at least 5000 bottles\nproblem += num_new_vans <= 30 # can use at most 30 new vans\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of old vans:\", num_old_vans.value())\nprint(\"The number of new vans:\", num_new_vans.value())\nprint(\"The total amount of pollution produced:\", objective.value())",
        "results": {
            "The number of old vans": "26.0",
            "The number of new vans": "30.0",
            "The total amount of pollution produced": "2200.0"
        },
        "formulation": "minimize 50x+30y\nSubject to: \n100x+80y >= 5000\ny <= 30 (end)",
        "type": "linear-notable",
        "index": 112,
        "length": 446,
        "var_num": 2
    },
    {
        "question": "A sandwich company can open two types of stores, a dine-in place and a food-truck. A dine-in place can make 100 sandwiches per day and requires 8 employees to operate. A food-truck can make 50 sandwiches per day and requires 3 employees to operate. The company must make at least 500 sandwiches per day but they only have available 35 employees. How many of each type of store should the company open to minimize the total number of stores?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_dine_in = LpVariable(\"NumDineIn\", lowBound=0, cat='Integer') # number of dine-in stores\nnum_food_truck = LpVariable(\"NumFoodTruck\", lowBound=0, cat='Integer') # number of food trucks\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SandwichStore\", LpMinimize)\n\n# Define the objective function\nobjective = num_dine_in + num_food_truck\nproblem += objective # minimize the total number of stores\n\n# Define the constraints\nproblem += 100 * num_dine_in + 50 * num_food_truck >= 500 # they must make at least 500 sandwiches per day\nproblem += 8 * num_dine_in + 3 * num_food_truck <= 35 # they have only 35 employees available\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of dine-in stores:\", num_dine_in.value())\nprint(\"The number of food trucks:\", num_food_truck.value())\nprint(\"The total number of stores:\", objective.value())",
        "results": {
            "The number of dine-in stores": "2.0",
            "The number of food trucks": "6.0",
            "The total number of stores": "8.0"
        },
        "formulation": "minimize x+y\nSubject to: \n100x+50y >= 500\n8x+3y <= 35 (end)",
        "type": "linear-notable",
        "index": 113,
        "length": 440,
        "var_num": 2
    },
    {
        "question": "CE Chemicals produces two types of products, adhesives and plasticizers. To produce each type of product, we need to use both an automatic device and a human-operated device. On a given day, each processing device is available for at most 450 minutes. To extract a package of adhesives, it takes 6 minutes of processing on the automatic device and 5 minutes on human-operated device. To extract a package of plasticizers, the automatic device needs to be run for 8 minutes and the human-operated device for 4 minutes. The manufacturer can sell a package of adhesives for a revenue of $8.5 and plasticizers for a revenue of $11.5. Assuming that the company can sell all the products it produces, how many packages of each product should be produced daily in order to maximize the revenue?",
        "formulation": "{\"variable\": [{\"description\": \"number of packages of adhesives produced daily\", \"name\": \"x\"}, {\"description\": \"number of packages of plasticizers produced daily\", \"name\": \"y\"}], \"objective\": [{\"description\": \"daily revenue\", \"function\": \"8.5x + 11.5y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"time constraint for automatic device\", \"function\": \"6x + 8y <= 450\"}, {\"description\": \"time constraint for human-operated device\", \"function\": \"5x + 4y <= 450\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"Adhesives\", lowBound=0, cat='Integer') # number of packages of adhesives produced daily\ny = LpVariable(\"Plasticizers\", lowBound=0, cat='Integer') # number of packages of plasticizers produced daily\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CE_Chemicals_Revenue\", LpMaximize)\n\n# Define the objective function\nobjective = 8.5 * x + 11.5 * y\nproblem += objective # maximize the daily revenue\n\n# Define the constraints\nproblem += 6 * x + 8 * y <= 450 # time constraint for automatic device\nproblem += 5 * x + 4 * y <= 450 # time constraint for human-operated device\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of packages of adhesives produced daily:\", x.value())\nprint(\"The number of packages of plasticizers produced daily:\", y.value())\nprint(\"The maximum daily revenue:\", objective.value())\n",
        "results": {
            "The number of packages of adhesives produced daily": "3.0",
            "The number of packages of plasticizers produced daily": "54",
            "The maximum daily revenue": "646.5"
        },
        "type": "linear-notable",
        "index": 114,
        "length": 787,
        "var_num": 2
    },
    {
        "question": "Stockco is considering four investments, each with its own net present value (NPV) and required cash outflow. Currently, $14,000 is available for investment. Tell Stockco how to maximize the NPV obtained from investments 1-4.\n\nTable (Net present value and cash outflow required for each investment):\n| Investment | NPV    | Cash Outflow |\n|------------|--------|--------------|\n| 1          | $16,000| $5,000       |\n| 2          | $22,000| $7,000       |\n| 3          | $12,000| $4,000       |\n| 4          | $8,000 | $3,000       |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal investment quantities for each investment. Let's denote the number of investment 1 as I1, the number of investment 2 as I2, the number of investment 3 as I3, and the number of investment 4 as I4.\nAdditionally, since we can only choose to invest or not invest in each investment, the investment quantities should be binary. Therefore, we have the binary constraint: I1, I2, I3, I4 = 0 or 1.\n```Variables\nI1 //number of investment 1\nI2 //number of investment 2\nI3 //number of investment 3\nI4 //number of investment 4\nI1, I2, I3, I4 = 0 or 1 //binary variables\n```\n\n# Objective Function:\nWe want to maximize the net present value (NPV) obtained from investments 1-4. The NPV for each investment is given as follows: \nInvestment 1: $16,000\nInvestment 2: $22,000\nInvestment 3: $12,000\nInvestment 4: $8,000\nTherefore, the objective function is the sum of the NPV for each investment multiplied by the corresponding investment quantity: 16000I1 + 22000I2 + 12000I3 + 8000I4.\n```Objective Function\nMaximize: 16000I1 + 22000I2 + 12000I3 + 8000I4\n```\n\n# Constraints:\nThe available investment is $14,000, so the total cash outflow cannot exceed this amount. The cash outflow for each investment is given as follows:\nInvestment 1: $5,000\nInvestment 2: $7,000\nInvestment 3: $4,000\nInvestment 4: $3,000\nTherefore, the constraint is: 5000I1 + 7000I2 + 4000I3 + 3000I4 <= 14000.\n```Constraints\n5000I1 + 7000I2 + 4000I3 + 3000I4 <= 14000\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nI1 = LpVariable(\"Investment_1\", cat='Binary') # Investment 1\nI2 = LpVariable(\"Investment_2\", cat='Binary') # Investment 2\nI3 = LpVariable(\"Investment_3\", cat='Binary') # Investment 3\nI4 = LpVariable(\"Investment_4\", cat='Binary') # Investment 4\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeNPV\", LpMaximize)\n\n# Define the objective function\nproblem += 16000 * I1 + 22000 * I2 + 12000 * I3 + 8000 * I4\n\n# Define the constraints\nproblem += 5000 * I1 + 7000 * I2 + 4000 * I3 + 3000 * I4 <= 14000\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Investment in 1:\", I1.value())\nprint(\"Investment in 2:\", I2.value())\nprint(\"Investment in 3:\", I3.value())\nprint(\"Investment in 4:\", I4.value())\nprint(\"Total NPV:\", value(problem.objective))\n",
        "results": {
            "Investment in 1": "0.0",
            "Investment in 2": "1.0",
            "Investment in 3": "1.0",
            "Investment in 4": "1.0",
            "Total NPV": "42000.0"
        },
        "type": "linear-table",
        "index": 115,
        "length": 533,
        "var_num": 4
    },
    {
        "question": "A sign company makes signs by hand. They make LED signs and neon signs. The LED signs are made by team A and they can make at most 3 a day. The neon signs are made by team B and they can make at most 4 a day. All signs have to be quality checked by a senior QC inspector and he can check at most 7 signs total a day. If the profit per LED sign is $1500 and the profit per neon sign is $1450, how many of each sign should be made to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of LED signs made\", \"name\": \"x\"}, {\"description\": \"number of neon signs made\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total profit\", \"function\": \"1500x + 1450y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"LED sign production constraint\", \"function\": \"x <= 3\"}, {\"description\": \"neon sign production constraint\", \"function\": \"y <= 4\"}, {\"description\": \"QC inspection constraint\", \"function\": \"x + y <= 7\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_LED_signs = LpVariable(\"NumLEDSigns\", lowBound=0, cat='Integer') # number of LED signs made\nnum_neon_signs = LpVariable(\"NumNeonSigns\", lowBound=0, cat='Integer') # number of neon signs made\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SignCompanyProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 1500 * num_LED_signs + 1450 * num_neon_signs\nproblem += objective # maximize total profit from signs\n\n# Define the constraints\nproblem += num_LED_signs <= 3 # LED sign production constraint\nproblem += num_neon_signs <= 4 # neon sign production constraint\nproblem += num_LED_signs + num_neon_signs <= 7 # QC inspection constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of LED signs made:\", num_LED_signs.value())\nprint(\"The number of neon signs made:\", num_neon_signs.value())\nprint(\"The total profit:\", objective.value())\n",
        "results": {
            "The number of LED signs made": "3.0",
            "The number of neon signs made": "4.0",
            "The total profit": "10300.0"
        },
        "type": "linear-notable",
        "index": 116,
        "length": 448,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA farm grows three types of crops: C1, C2, and C3, and a new type of crop C4. They need to determine the areas to allocate for each crop.\n// variables: {\"area for C1\": \"C1\", \"area for C2\": \"C2\", \"area for C3\": \"C3\", \"area for C4\": \"C4\"}, where C1, C2, C3, C4 >= 0 and C1, C2, C3, C4 are integers.\n\n## Define Objective Function:\nFor C1, the profit per acre is $100, the water usage per acre is 500 gallons, and the labor cost per acre is $30. \nFor C2, the profit per acre is $120, the water usage per acre is 600 gallons, and the labor cost per acre is $40. \nFor C3, the profit per acre is $140, the water usage per acre is 700 gallons, and the labor cost per acre is $50.\nFor C4, the profit per acre is $160, the water usage per acre is 800 gallons, and the labor cost per acre is $60.\nThe farm has limited resources for water and labor. The farm wants to maximize the profit efficiency (profit per gallon of water used).\n// Profit_C1 = 100 * C1 - 30 * C1\n// Profit_C2 = 120 * C2 - 40 * C2\n// Profit_C3 = 140 * C3 - 50 * C3\n// Profit_C4 = 160 * C4 - 60 * C4\n// So, the objective function is: Maximize (Profit_C1 + Profit_C2 + Profit_C3 + Profit_C4) / (500 * C1 + 600 * C2 + 700 * C3 + 800 * C4)\n\n## Generate Constraint-1:\nThe farm has a limited water supply of 100,000 gallons.\n// 500 * C1 + 600 * C2 + 700 * C3 + 800 * C4 <= 100,000\n\n## Generate Constraint-2:\nThe farm has a budget of $10,000 for labor costs.\n// 30 * C1 + 40 * C2 + 50 * C3 + 60 * C4 <= 10,000\n\n## Generate Constraint-3:\nThe farm has a total land area of 200 acres, and he wants to use at least 50 acres in total.\n// C1 + C2 + C3 + C4 <= 200\n// C1 + C2 + C3 + C4 >= 50",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nC1 = model.addVar(vtype=\"INTEGER\", name=\"C1\", lb=0) # area for C1\nC2 = model.addVar(vtype=\"INTEGER\", name=\"C2\", lb=0) # area for C2\nC3 = model.addVar(vtype=\"INTEGER\", name=\"C3\", lb=0) # area for C3\nC4 = model.addVar(vtype=\"INTEGER\", name=\"C4\", lb=0) # area for C4\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj * (500 * C1 + 600 * C2 + 700 * C3 + 800 * C4) == (100 * C1 - 30 * C1 + 120 * C2 - 40 * C2 + 140 * C3 - 50 * C3 + 160 * C4 - 60 * C4))\n\n# Add constraints\nmodel.addCons(500 * C1 + 600 * C2 + 700 * C3 + 800 * C4 <= 100000)\nmodel.addCons(30 * C1 + 40 * C2 + 50 * C3 + 60 * C4 <= 10000)\nmodel.addCons(C1 + C2 + C3 + C4 <= 200)\nmodel.addCons(C1 + C2 + C3 + C4 >= 50)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Profit Efficiency: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Profit Efficiency": "0.1400000000000"
        },
        "question": "A farm grows three types of crops: C1, C2, and C3, and a new type of crop C4. They need to determine the areas to allocate for each crop. The profit per acre, water usage per acre, and labor cost per acre for each crop are given in the following Table.\n\n| Crop | Profit per Acre | Water Usage per Acre | Labor Cost per Acre |\n|------|-----------------|----------------------|---------------------|\n| C1   | $100            | 500 gallons          | $30                 |\n| C2   | $120            | 600 gallons          | $40                 |\n| C3   | $140            | 700 gallons          | $50                 |\n| C4   | $160            | 800 gallons          | $60                 |\n\nThe farm has a limited water supply of 100,000 gallons. The farm has a budget of $10,000 for labor costs. The farm has a total land area of 200 acres, and they want to use at least 50 acres in total. The farm wants to maximize the profit efficiency (profit per gallon of water used).\n",
        "type": "nonlinear-table",
        "index": 117,
        "length": 970,
        "var_num": 4
    },
    {
        "scenario": "## Define Variables:\nA client asks his stockbroker to invest. The broker has identified five stocks (Oil, Auto, Pharmaceutical, Tech, and Green Energy) for investment.\n// variables: {\"number of shares in the oil stock\": \"Oil\", \"number of shares in the auto stock\": \"Auto\", \"number of shares in the pharmaceutical stock\": \"Pharmaceutical\", \"number of shares in the tech stock\": \"Tech\", \"number of shares in the green energy stock\": \"GreenEnergy\"}, where Oil, Auto, Pharmaceutical, Tech, GreenEnergy >= 0 & Oil, Auto, Pharmaceutical, Tech, GreenEnergy are integers\n\n## Define Objective Function:\nFor Oil, the estimated annual return is 10%, the risk is 5%, and the current price is $100. \nFor Auto, the estimated annual return is 15%, the risk is 8%, and the current price is $200. \nFor Pharmaceutical, the estimated annual return is 20%, the risk is 10%, and the current price is $150. \nFor Tech, the estimated annual return is 25%, the risk is 12%, and the current price is $250. \nFor Green Energy, the estimated annual return is 18%, the risk is 7%, and the current price is $180. \nThe client wants to maximize the Benefit-Risk ratio of the investment. (The Benefit-Risk ratio is defined as the sum of the estimated annual returns divided by the sum of the investment risks.)\n// sum of the estimated annual returns: Benefit = 10% * 100 * Oil + 15% * 200 * Auto + 20% * 150 * Pharmaceutical + 25% * 250 * Tech + 18% * 180 * GreenEnergy\n// sum of the investment risks: Risk = 5% * 100 * Oil + 8% * 200 * Auto + 10% * 150 * Pharmaceutical + 12% * 250 * Tech + 7% * 180 * GreenEnergy\n// So, the objective function is: Maximize Benefit / Risk\n\n## Generate Constraint-1:\nThe client has $100,000 to invest.\n// 100 * Oil + 200 * Auto + 150 * Pharmaceutical + 250 * Tech + 180 * GreenEnergy <= 100000\n\n## Generate Constraint-2:\nThe client wants to invest at least $60,000 in all stocks combined.\n// 100 * Oil + 200 * Auto + 150 * Pharmaceutical + 250 * Tech + 180 * GreenEnergy >= 60000\n\n## Generate Constraint-3:\nThe client wants to invest at least $9,000 in the oil stock.\n// 100 * Oil >= 9000\n\n## Generate Constraint-4:\nPut no more than 40 percent of the money into any one stock.\n// 100 * Oil <= 40000\n// 200 * Auto <= 40000\n// 150 * Pharmaceutical <= 40000\n// 250 * Tech <= 40000\n// 180 * GreenEnergy <= 40000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nOil = model.addVar(vtype=\"INTEGER\", name=\"Oil\", lb=0) # number of shares in the oil stock\nAuto = model.addVar(vtype=\"INTEGER\", name=\"Auto\", lb=0) # number of shares in the auto stock\nPharmaceutical = model.addVar(vtype=\"INTEGER\", name=\"Pharmaceutical\", lb=0) # number of shares in the pharmaceutical stock\nTech = model.addVar(vtype=\"INTEGER\", name=\"Tech\", lb=0) # number of shares in the tech stock\nGreenEnergy = model.addVar(vtype=\"INTEGER\", name=\"GreenEnergy\", lb=0) # number of shares in the green energy stock\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nBenefit = 100 * 0.10 * Oil + 200 * 0.15 * Auto + 150 * 0.20 * Pharmaceutical + 250 * 0.25 * Tech + 180 * 0.18 * GreenEnergy\nRisk = 100 * 0.05 * Oil + 200 * 0.08 * Auto + 150 * 0.10 * Pharmaceutical + 250 * 0.12 * Tech + 180 * 0.07 * GreenEnergy\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj * Risk == Benefit)\n\n# Add constraints\nmodel.addCons(100 * Oil + 200 * Auto + 150 * Pharmaceutical + 250 * Tech + 180 * GreenEnergy <= 100000)\nmodel.addCons(100 * Oil + 200 * Auto + 150 * Pharmaceutical + 250 * Tech + 180 * GreenEnergy >= 60000)\nmodel.addCons(100 * Oil >= 9000)\nmodel.addCons(100 * Oil <= 40000)\nmodel.addCons(200 * Auto <= 40000)\nmodel.addCons(150 * Pharmaceutical <= 40000)\nmodel.addCons(250 * Tech <= 40000)\nmodel.addCons(180 * GreenEnergy <= 40000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Oil Shares: \", model.getVal(Oil))\n    print(\"Number of Auto Shares: \", model.getVal(Auto))\n    print(\"Number of Pharmaceutical Shares: \", model.getVal(Pharmaceutical))\n    print(\"Number of Tech Shares: \", model.getVal(Tech))\n    print(\"Number of Green Energy Shares: \", model.getVal(GreenEnergy))\n    print(\"Benefit-Risk Ratio: \", model.getVal(obj))\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Oil Shares": "201.0",
            "Number of Auto Shares": "0.0",
            "Number of Pharmaceutical Shares": "0.0",
            "Number of Tech Shares": "0.0",
            "Number of Green Energy Shares": "222.0",
            "Benefit-Risk Ratio": "2.4203881963074005"
        },
        "question": "A client asks his stockbroker to invest. The broker has identified five stocks (Oil, Auto, Pharmaceutical, Tech, and Green Energy) for investment. For Auto, the estimated annual return is 15%, the risk is 8%, and the current price is $200. For Pharmaceutical, the estimated annual return is 20%, the risk is 10%, and the current price is $150. For Tech, the estimated annual return is 25%, the risk is 12%, and the current price is $250. For Green Energy, the estimated annual return is 18%, the risk is 7%, and the current price is $180. The client wants to maximize the Benefit-Risk ratio of the investment. (The Benefit-Risk ratio is defined as the sum of the estimated annual returns divided by the sum of the investment risks.) The client has $100,000 to invest. The client wants to invest at least $60,000 in all stocks combined. The client wants to invest at least $9,000 in the oil stock. Put no more than 40 percent of the money into any one stock. For Oil, the estimated annual return is 10%, the risk is 5%, and the current price is $100.",
        "type": "nonlinear-notable",
        "index": 118,
        "length": 1049,
        "var_num": 5
    },
    {
        "question": "A furniture factory makes two products: bedside tables and bookcases. Both products have to go through two processes: crafting and polishing. For each bedside table, the workers spend 2.5 hours crafting and 1.5 hours polishing. For each bookcase, the workers spend 5 hours crafting and 3 hours polishing. On any day, there is a maximum of 30 crafting hours available and 20 polishing hours available. The profit from the sale of each bedside table is $200 and the profit from the sale of each bookcase is $500. The factory can sell everything they make. How should they schedule daily production in order to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of bedside tables produced\", \"name\": \"x\"}, {\"description\": \"number of bookcases produced\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total profit\", \"function\": \"200x + 500y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"crafting hours constraint\", \"function\": \"2.5x + 5y <= 30\"}, {\"description\": \"polishing hours constraint\", \"function\": \"1.5x + 3y <= 20\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"BedsideTables\", lowBound=0, cat='Continuous') # number of bedside tables produced\ny = LpVariable(\"Bookcases\", lowBound=0, cat='Continuous') # number of bookcases produced\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FurnitureFactoryProduction\", LpMaximize)\n\n# Define the objective function\nobjective = 200 * x + 500 * y\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 2.5 * x + 5 * y <= 30 # crafting hours constraint\nproblem += 1.5 * x + 3 * y <= 20 # polishing hours constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of bedside tables produced:\", x.value())\nprint(\"The number of bookcases produced:\", y.value())\nprint(\"The total profit:\", objective.value())\n",
        "results": {
            "The number of bedside tables produced": "0.0",
            "The number of bookcases produced": "6.0",
            "The total profit": "3000.0"
        },
        "type": "linear-table",
        "index": 119,
        "length": 624,
        "var_num": 2
    },
    {
        "question": "Dorian Auto is considering manufacturing three types of autos: compact, midsize, and large. The resources required for, and the profits yielded by, each type of car are shown in the following Table. Currently, 10,000 tons of steel and 120,000 hours of labor are available. For production of a type of car to be economically feasible, at least 1,000 cars of that type must be produced. Maximize Dorian's profit.\n\nTable (Resources required and profits yielded for each type of car):\n| Auto Type | Steel Required (tons) | Labor Required (hours) | Profit Yielded ($) |\n|-----------|-----------------------|------------------------|--------------------|\n| Compact   | 1.5                   | 30                     | 2,000              |\n| Midsize   | 3                     | 40                     | 3,000              |\n| Large     | 5                     | 25                     | 4,000              |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for compact, midsize, and large cars that adhere to the constraints given. Let's denote the number of compact cars as C, the number of midsize cars as M, and the number of large cars as L.\n```Variables\nC //number of compact cars to produce \nM //number of midsize cars to produce\nL //number of large cars to produce\nC, M, L >= 0 and they are integers //non-negative and integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function (profit) is given by the sum of the profits from each type of car. The profit from compact cars is $2,000 per car * C cars. The profit from midsize cars is $3,000 per car * M cars. The profit from large cars is $4,000 per car * L cars. Therefore, the objective function is 2000C + 3000M + 4000L.\n```Objective Function\nMaximize: 2000C + 3000M + 4000L\n```\n\n# Constraints:\nWe have several constraints to consider. First, we need to ensure that the resources required for each type of car do not exceed the available resources. The steel required for compact cars is 1.5 tons per car * C cars, for midsize cars is 3 tons per car * M cars, and for large cars is 5 tons per car * L cars. The labor required for compact cars is 30 hours per car * C cars, for midsize cars is 40 hours per car * M cars, and for large cars is 25 hours per car * L cars. \nAdditionally, we need to ensure that at least 1,000 cars of each type are produced.\nTherefore, the constraints for available steel and labor are:\n```Constraints\n1.5C + 3M + 5L <= 10000 //available steel\n30C + 40M + 25L <= 120000 //available labor\nC >= 1000 //minimum number of compact cars produced\nM >= 1000 //minimum number of midsize cars produced\nL >= 1000 //minimum number of large cars produced\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nC = LpVariable(\"CompactCars\", lowBound=1000, cat='Integer') # number of compact cars\nM = LpVariable(\"MidsizeCars\", lowBound=1000, cat='Integer') # number of midsize cars\nL = LpVariable(\"LargeCars\", lowBound=1000, cat='Integer') # number of large cars\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DorianAutoProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 2000 * C + 3000 * M + 4000 * L\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 1.5 * C + 3 * M + 5 * L <= 10000 # available steel\nproblem += 30 * C + 40 * M + 25 * L <= 120000 # available labor\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of compact cars to produce:\", C.value())\nprint(\"The number of midsize cars to produce:\", M.value())\nprint(\"The number of large cars to produce:\", L.value())\nprint(\"The maximum profit:\", objective.value())\n",
        "results": {
            "The number of compact cars to produce": "1333.0",
            "The number of midsize cars to produce": "1000.0",
            "The number of large cars to produce": "1000.0",
            "The maximum profit": "9666000.0"
        },
        "type": "linear-table",
        "index": 120,
        "length": 900,
        "var_num": 3
    },
    {
        "question": "Both chorine and water softener need to be added to a pool. One unit of chlorine takes 1 minute to be effective while one unit of water softener takes 2 minutes to be effective. Because too much chlorine can burn your eyes, there has to at most half as much chlorine as water softener in the pool. If there has to be at least 100 units of chlorine in the water and a total of 500 units of chemicals in the water, how many units of each should be added to minimize the total time it takes for the pool to be ready? (Note: chlorine must be added before water softener or vice versa).",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_chlorine_units = LpVariable(\"NumChlorineUnits\", lowBound=0) # number of units of chlorine\nnum_water_softener_units = LpVariable(\"NumWaterSoftenerUnits\", lowBound=0) # number of units of water softener\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"PoolPreparation\", LpMinimize)\n\n# Define the objective function\nobjective = num_chlorine_units + 2 * num_water_softener_units\nproblem += objective # minimize the total time it takes for the pool to be ready\n\n# Define the constraints\nproblem += num_chlorine_units <= 0.5 * num_water_softener_units # chlorine has to be at most half as much water softener\nproblem += num_chlorine_units >= 100 # there has to be at least 100 units of chlorine in the water\nproblem += num_chlorine_units + num_water_softener_units == 500 # total of 500 units of chemicals in the water\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of units of chlorine:\", num_chlorine_units.value())\nprint(\"The number of units of water softener:\", num_water_softener_units.value())\nprint(\"The total time for the pool to be ready:\", objective.value())",
        "results": {
            "The number of units of chlorine": "166.0",
            "The number of units of water softener": "334.0",
            "The total time for the pool to be ready": "834.0"
        },
        "formulation": "minimize 1x+2y\nSubject to: \nx <= halfy\nx >= 200 (end)",
        "type": "linear-notable",
        "index": 121,
        "length": 581,
        "var_num": 2
    },
    {
        "question": "Brooks City has three consolidated high schools, each with a capacity of 1,200 students. The school board has partitioned the city into five busing districts\u2014north, south, east, west, and central\u2014each with different high school student populations. The three schools are located in the central, west, and south districts. Some students must be bused outside their districts, and the school board wants to minimize the total bus distance traveled by these students. The following Table shows the average distances from each district to the three schools and the total student population in each district. The school board wants to determine the number of students to bus from each district to each school to minimize the total busing miles traveled.\n\nTable (Average distances from each district to the schools and student populations):\n| District | Central School (miles) | West School (miles) | South School (miles) | Student Population |\n| -------- | ---------------------- | ------------------- | -------------------- | ------------------ |\n| North    | 8                      | 11                  | 14                   | 700                |\n| South    | 12                     | 9                   | 0                    | 300                |\n| East     | 9                      | 16                  | 10                   | 900                |\n| West     | 8                      | 0                   | 9                    | 600                |\n| Central  | 0                      | 8                   | 12                   | 500                |",
        "formulation": "# Variables:\nTo determine the number of students to bus from each district to each school, we need to define the following variables:\n```Variables\nx1 // Number of students from the North district to the central school\nx2 // Number of students from the North district to the west school\nx3 // Number of students from the North district to the south school\nx4 // Number of students from the East district to the central school\nx5 // Number of students from the East district to the west school\nx6 // Number of students from the East district to the south school\nx7 // Number of students from the Central district to the central school\nx8 // Number of students from the Central district to the west school\nx9 // Number of students from the Central district to the south school\nx10 // Number of students from the South district to the central school\nx11 // Number of students from the South district to the west school\nx12 // Number of students from the South district to the south school\nx13 // Number of students from the West district to the central school\nx14 // Number of students from the West district to the west school\nx1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14 >= 0 and they are integers\n```\n\n# Objective:\nThe objective is to minimize the total distance traveled by students being bused from different districts to different schools. The total distance traveled is the sum of the distances for each district-school combination, multiplied by the number of students being bused for that combination. Therefore, the objective function is:\n```Objective\nMinimize: 8x1 + 11x2 + 14x3 + 12x11 + 9x12 + 9x4 + 16x5 + 10x6 + 8x7 + 9x9 + 8x8 + 12x10\n```\n\n# Constraints:\nWe have the following constraints:\n- The total student population in the North district should be equal to 700: x1 + x2 + x3 = 700\n- The total student population in the South district should be equal to 300: x11 + x12 + x4 = 300\n- The total student population in the East district should be equal to 900: x5 + x6 + x7 = 900\n- The total student population in the West district should be equal to 600: x8 + x9 + x10 = 600\n- The number of students bused to the central school from all districts should not exceed the capacity of the central school (1200): x7 + x8 + x11 + x12 + x1 <= 1200\n- The number of students bused to the west school from all districts should not exceed the capacity of the west school (1200): x2 + x8 + x12 + x13 + x3 <= 1200\n- The number of students bused to the south school from all districts should not exceed the capacity of the south school (1200): x3 + x9 + x13 + x14 + x4 <= 1200\n```Constraints\nx1 + x2 + x3 = 700\nx11 + x12 + x4 = 300\nx5 + x6 + x7 = 900\nx8 + x9 + x10 = 600\nx7 + x8 + x11 + x12 + x1 <= 1200\nx2 + x8 + x12 + x13 + x3 <= 1200\nx3 + x9 + x13 + x14 + x4 <= 1200\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx1 = LpVariable(\"x1\", lowBound=0, cat='Integer')\nx2 = LpVariable(\"x2\", lowBound=0, cat='Integer')\nx3 = LpVariable(\"x3\", lowBound=0, cat='Integer')\nx4 = LpVariable(\"x4\", lowBound=0, cat='Integer')\nx5 = LpVariable(\"x5\", lowBound=0, cat='Integer')\nx6 = LpVariable(\"x6\", lowBound=0, cat='Integer')\nx7 = LpVariable(\"x7\", lowBound=0, cat='Integer')\nx8 = LpVariable(\"x8\", lowBound=0, cat='Integer')\nx9 = LpVariable(\"x9\", lowBound=0, cat='Integer')\nx10 = LpVariable(\"x10\", lowBound=0, cat='Integer')\nx11 = LpVariable(\"x11\", lowBound=0, cat='Integer')\nx12 = LpVariable(\"x12\", lowBound=0, cat='Integer')\nx13 = LpVariable(\"x13\", lowBound=0, cat='Integer')\nx14 = LpVariable(\"x14\", lowBound=0, cat='Integer')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimizeBusingMiles\", LpMinimize)\n\n# Define the objective function\nobjective = 8*x1 + 11*x2 + 14*x3 + 12*x11 + 9*x12 + 9*x4 + 16*x5 + 10*x6 + 8*x7 + 9*x9 + 8*x8 + 12*x10\nproblem += objective\n\n# Define the constraints\nproblem += x1 + x2 + x3 == 700\nproblem += x11 + x12 + x4 == 300\nproblem += x5 + x6 + x7 == 900\nproblem += x8 + x9 + x10 == 600\nproblem += x7 + x8 + x11 + x12 + x1 <= 1200\nproblem += x2 + x8 + x12 + x13 + x3 <= 1200\nproblem += x3 + x9 + x13 + x14 + x4 <= 1200\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of students from each district to each school:\")\nprint(\"North to Central:\", x1.value())\nprint(\"North to West:\", x2.value())\nprint(\"North to South:\", x3.value())\nprint(\"East to Central:\", x4.value())\nprint(\"East to West:\", x5.value())\nprint(\"East to South:\", x6.value())\nprint(\"Central to Central:\", x7.value())\nprint(\"Central to West:\", x8.value())\nprint(\"Central to South:\", x9.value())\nprint(\"South to Central:\", x10.value())\nprint(\"South to West:\", x11.value())\nprint(\"South to South:\", x12.value())\nprint(\"West to Central:\", x13.value())\nprint(\"West to West:\", x14.value())\nprint(\"Total busing miles traveled:\", objective.value())\n",
        "results": {
            "The number of students from North to Central": "700.0",
            "The number of students from North to West": "0.0",
            "The number of students from North to South": "0.0",
            "The number of students from East to Central": "300.0",
            "The number of students from East to West": "0.0",
            "The number of students from East to South": "400.0",
            "The number of students from Central to Central": "500.0",
            "The number of students from Central to West": "0.0",
            "The number of students from Central to South": "600.0",
            "The number of students from South to Central": "0.0",
            "The number of students from South to West": "0.0",
            "The number of students from South to South": "0.0",
            "The number of students from West to Central": "0.0",
            "The number of students from West to West": "0.0",
            "Total busing miles traveled": "21700.0"
        },
        "type": "linear-table",
        "index": 122,
        "length": 1562,
        "var_num": 15
    },
    {
        "question": "A box with square base is to hold a volume 200. The bottom and top are formed by folding in flaps from all four sides, so that the bottom and top consist of two layers of cardboard. Find the dimensions of the box that requires the least material. Also find the ratio of height to side of the base.",
        "scenario": "## Define Variables:\nYou need to construct a box with a square base.\n// variables: {\"side length of the square base\": \"x\", \"height of the box\": \"h\"}, where x, h >= 0\n\n## Define Objective Function:\nFind the dimensions of the box that requires the least material.\n// The surface area of the box is the sum of the area of the square base and the area of the four sides. The area of the square bottom and top is 2*x^2, and the area of the four sides is 4*x*h.\n// Therefore, the objective function is: Minimize 2*x^2 + 4*x*h\n\n## Generate Constraint-1:\nThe volume of the box is at least 200 cubic inches.\n// The volume of the box is given by the formula x^2h, and it is given that the volume is at least 200.\n// Therefore, the constraint is x^2h >= 200",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"CONTINUOUS\", name=\"x\") # side length of the square base\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the box\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nmodel.addCons(obj == 2*x**2 + 4*x*h)\n\n# Add constraints\nmodel.addCons(x**2*h >= 200)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The side length of the square base:\", model.getVal(x))\n    print(\"The height of the box:\", model.getVal(h))\n    print(\"The minimum surface area of the box: \", model.getVal(obj))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The side length of the square base": "5.848062994441619",
            "The height of the box": "5.847980431368237",
            "The minimum surface area of the box": "205.19711284322852"
        },
        "type": "nonlinear-notable",
        "index": 123,
        "length": 297,
        "var_num": 2
    },
    {
        "question": "An incandescent bulb manufacturing company uses either an argon gas approach or halogen gas approach to fill their light bulbs. The argon gas approach uses 10 units of gas and 12 units of glass to make 2 light bulbs. The halogen gas approach uses 12 units of gas and 8 units of glass to make 3 light bulbs. Additionally, the argon gas approach generates 3 units of heat while the halogen gas approach creates 4 units of heat. The manufacturing company has available 150 units of gas and 120 units of glass. If at most 28 units of heat can be generated during the manufacturing process, how many of each method should be used to maximize the number of light bulbs produced?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_argon_methods = LpVariable(\"NumArgonMethods\", lowBound=0, cat='Integer') # number of argon gas methods used\nnum_halogen_methods = LpVariable(\"NumHalogenMethods\", lowBound=0, cat='Integer') # number of halogen gas methods used\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"LightBulbManufacturing\", LpMaximize)\n\n# Define the objective function\nobjective = 2 * num_argon_methods + 3 * num_halogen_methods\nproblem += objective # maximize the total number of light bulbs produced\n\n# Define the constraints\nproblem += 10 * num_argon_methods + 12 * num_halogen_methods <= 150 # gas constraint\nproblem += 12 * num_argon_methods + 8 * num_halogen_methods <= 120 # glass constraint\nproblem += 3 * num_argon_methods + 4 * num_halogen_methods <= 28 # heat constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of argon methods:\", num_argon_methods.value())\nprint(\"The number of halogen methods:\", num_halogen_methods.value())\nprint(\"The total number of light bulbs produced:\", objective.value())",
        "results": {
            "The number of argon methods": "0.0",
            "The number of halogen methods": "7.0",
            "The total number of light bulbs produced": "21.0"
        },
        "formulation": "maximize 2x+3y\nSubject to: \n10x+12y <= 150\n12x+8y <= 120\n3x+4y <= 28 (end)",
        "type": "linear-notable",
        "index": 124,
        "length": 672,
        "var_num": 2
    },
    {
        "question": "A small chocolate shop makes milk chocolate and dark chocolate bars. Milk chocolate bars require 4 units of cocoa and 7 units of milk. Dark chocolate bars require 6 units of cocoa and 3 units of milk. The shop has 2000 units of cocoa and 1750 units of milk available. In addition since milk chocolate sells better, at least 2 times as many milk chocolate bars need to be made as dark chocolate bars.  If making a milk chocolate bar takes 15 minutes and making a dark chocolate bar takes 12 mins, how many of each should the make to minimize total production time?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_milk_chocolate_bars = LpVariable(\"NumMilkChocolateBars\", lowBound=0, cat='Integer') # number of milk chocolate bars\nnum_dark_chocolate_bars = LpVariable(\"NumDarkChocolateBars\", lowBound=0, cat='Integer') # number of dark chocolate bars\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ChocolateProduction\", LpMinimize)\n\n# Define the objective function\nobjective = 15 * num_milk_chocolate_bars + 12 * num_dark_chocolate_bars\nproblem += objective # minimize the total production time\n\n# Define the constraints\nproblem += 4 * num_milk_chocolate_bars + 6 * num_dark_chocolate_bars <= 2000 # cocoa constraint\nproblem += 7 * num_milk_chocolate_bars + 3 * num_dark_chocolate_bars <= 1750 # milk constraint\nproblem += num_milk_chocolate_bars >= 2 * num_dark_chocolate_bars # milk chocolate bars at least twice dark chocolate bars\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of milk chocolate bars:\", num_milk_chocolate_bars.value())\nprint(\"The number of dark chocolate bars:\", num_dark_chocolate_bars.value())\nprint(\"Total production time:\", objective.value())",
        "results": {
            "The number of milk chocolate bars": "0.0",
            "The number of dark chocolate bars": "0.0",
            "Total production time": "0.0"
        },
        "formulation": "minimize 15x+12y\nSubject to: \n4x+6y <= 2000\n7x+3y <= 1750\nx >= 2y (end)",
        "type": "linear-notable",
        "index": 125,
        "length": 563,
        "var_num": 2
    },
    {
        "question": "Basel Tool and Die Company (BTD) makes large industrial pipe wrenches in one of its factories. The marketing department estimates demand for this product during the next 6 months to be: January 370, February 430, March 380, April 450, May 520, June 440. With the current labor force, BTD believes it can make approximately 420 pipe wrenches per month at a cost of $40 per wrench using regular-time production. An additional 80 wrenches per month can be made using overtime production at a cost per wrench of $45. Wrenches can be made in advance and held in inventory for later shipment at a cost of $3 per month per wrench. The monthly demand for wrenches must be satisfied every month. At the end of December (beginning of January) BTD has 10 wrenches in inventory. BTD wants to plan its production, including overtime, and inventory for the next 6 months so as to maximize profit. Assuming the revenue for these wrenches is fixed, the production manager can maximize profit by minimizing the total costs incurred in producing and delivering the wrenches.",
        "formulation": "# Variables:\nTo plan the production and inventory for the next 6 months, we need to define the following variables:\n```Variables\nR1 // Number of wrenches made using regular-time production in January\nR2 // Number of wrenches made using regular-time production in February\nR3 // Number of wrenches made using regular-time production in March\nR4 // Number of wrenches made using regular-time production in April\nR5 // Number of wrenches made using regular-time production in May\nR6 // Number of wrenches made using regular-time production in June\nO1 // Number of wrenches made using overtime production in January\nO2 // Number of wrenches made using overtime production in February\nO3 // Number of wrenches made using overtime production in March\nO4 // Number of wrenches made using overtime production in April\nO5 // Number of wrenches made using overtime production in May\nO6 // Number of wrenches made using overtime production in June\nI1 // Number of wrenches in inventory at the end of January\nI2 // Number of wrenches in inventory at the end of February\nI3 // Number of wrenches in inventory at the end of March\nI4 // Number of wrenches in inventory at the end of April\nI5 // Number of wrenches in inventory at the end of May\nI6 // Number of wrenches in inventory at the end of June\nR1, R2, R3, R4, R5, R6, O1, O2, O3, O4, O5, O6, I1, I2, I3, I4, I5, I6 >= 0 and they are integers.\n```\n\n# Objective Function:\nThe objective is to maximize profit by minimizing the total costs incurred in producing and delivering the wrenches. The total cost is the sum of the costs of regular-time production, overtime production, and inventory holding costs. The cost of regular-time production is $40 per wrench, the cost of overtime production is $45 per wrench, and the inventory holding cost is $3 per month per wrench. Therefore, the objective function is:\n```Objective Function\nMinimize: 40(R1 + R2 + R3 + R4 + R5 + R6) + 45(O1 + O2 + O3 + O4 + O5 + O6) + 3(I1 + I2 + I3 + I4 + I5 + I6)\n```\n\n# Constraints:\nThe constraints ensure that the monthly demand for wrenches is satisfied and that the production quantities do not exceed the labor capacity. Additionally, the inventory of each month is determined by subtracting the demand from the sum of the production and the inventory of the previous month. The constraints are as follows:\n- Regular-time production constraints: R1 <= 420, R2 <= 420, R3 <= 420, R4 <= 420, R5 <= 420, R6 <= 420\n- Overtime production constraints: O1 <= 80, O2 <= 80, O3 <= 80, O4 <= 80, O5 <= 80, O6 <= 80\n- Inventory constraints: I1 = 10 + R1 + O1 - 370, I2 = I1 + R2 + O2 - 430, I3 = I2 + R3 + O3 - 380, I4 = I3 + R4 + O4 - 450, I5 = I4 + R5 + O5 - 520, I6 = I5 + R6 + O6 - 440\n```Constraints\nR1 <= 420\nR2 <= 420\nR3 <= 420\nR4 <= 420\nR5 <= 420\nR6 <= 420\nO1 <= 80\nO2 <= 80\nO3 <= 80\nO4 <= 80\nO5 <= 80\nO6 <= 80\nI1 = 10 + R1 + O1 - 370\nI2 = I1 + R2 + O2 - 430\nI3 = I2 + R3 + O3 - 380\nI4 = I3 + R4 + O4 - 450\nI5 = I4 + R5 + O5 - 520\nI6 = I5 + R6 + O6 - 440\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nR = [LpVariable(f\"R{i}\", lowBound=0, cat='Integer') for i in range(1, 7)]\nO = [LpVariable(f\"O{i}\", lowBound=0, cat='Integer') for i in range(1, 7)]\nI = [LpVariable(f\"I{i}\", lowBound=0, cat='Integer') for i in range(1, 7)]\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimizeCosts\", LpMinimize)\n\n# Define the objective function\nobjective = lpSum([40 * R[i] + 45 * O[i] + 3 * I[i] for i in range(6)])\nproblem += objective\n\n# Define the constraints\n# Regular-time production constraints\nfor i in range(6):\n    problem += R[i] <= 420\n\n# Overtime production constraints\nfor i in range(6):\n    problem += O[i] <= 80\n\n# Inventory constraints\ndemands = [370, 430, 380, 450, 520, 440]\nproblem += I[0] == 10 + R[0] + O[0] - demands[0]\nfor i in range(1, 6):\n    problem += I[i] == I[i-1] + R[i] + O[i] - demands[i]\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nfor i in range(6):\n    print(f\"Month {i+1}:\")\n    print(f\"Regular-time production: {R[i].value()}\")\n    print(f\"Overtime production: {O[i].value()}\")\n    print(f\"Inventory at the end of the month: {I[i].value()}\")\nprint(f\"Total cost: {value(problem.objective)}\")\n",
        "results": {
            "Month 1 Regular-time production": "370.0",
            "Month 1 Overtime production": "0.0",
            "Month 1 Inventory at the end of the month": "10.0",
            "Month 2 Regular-time production": "420.0",
            "Month 2 Overtime production": "0.0",
            "Month 2 Inventory at the end of the month": "0.0",
            "Month 3 Regular-time production": "420.0",
            "Month 3 Overtime production": "0.0",
            "Month 3 Inventory at the end of the month": "40.0",
            "Month 4 Regular-time production": "420.0",
            "Month 4 Overtime production": "10.0",
            "Month 4 Inventory at the end of the month": "20.0",
            "Month 5 Regular-time production": "420.0",
            "Month 5 Overtime production": "80.0",
            "Month 5 Inventory at the end of the month": "0.0",
            "Month 6 Regular-time production": "420.0",
            "Month 6 Overtime production": "20.0",
            "Month 6 Inventory at the end of the month": "0.0",
            "Total cost": "103960.0"
        },
        "type": "linear-notable",
        "index": 126,
        "length": 1056,
        "var_num": 4
    },
    {
        "question": "A hot dog store sells two products: its regular hot-dog, and a premium hot-dog with more toppings. The store makes x1 regular hot-dogs a day at a profit of $3 each and x2 premium hot-dogs a day at a profit of $5 each. (x1 and x2 are unknowns and they both must be greater than or equal to 0). Currently, the demand is limited to at most 100 regular hot-dogs per day and at most 250 premium hot-dogs per day. Also, the store can make a maximum of 300 hot-dogs of either type per day. How many of each hot-dog should be made to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of regular hot-dogs made per day\", \"name\": \"x1\"}, {\"description\": \"number of premium hot-dogs made per day\", \"name\": \"x2\"}], \"objective\": [{\"description\": \"total profit per day\", \"function\": \"3x1 + 5x2\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"demand constraint for regular hot-dogs\", \"function\": \"x1 <= 100\"}, {\"description\": \"demand constraint for premium hot-dogs\", \"function\": \"x2 <= 250\"}, {\"description\": \"maximum production capacity constraint\", \"function\": \"x1 + x2 <= 300\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x1, x2 >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx1 = LpVariable(\"RegularHotDogs\", lowBound=0, cat='Integer') # number of regular hot-dogs made per day\nx2 = LpVariable(\"PremiumHotDogs\", lowBound=0, cat='Integer') # number of premium hot-dogs made per day\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 3 * x1 + 5 * x2\nproblem += objective # maximize the total profit per day\n\n# Define the constraints\nproblem += x1 <= 100 # demand constraint for regular hot-dogs\nproblem += x2 <= 250 # demand constraint for premium hot-dogs\nproblem += x1 + x2 <= 300 # maximum production capacity constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of regular hot-dogs to make:\", x1.value())\nprint(\"The number of premium hot-dogs to make:\", x2.value())\nprint(\"Maximum profit per day:\", objective.value())\n",
        "results": {
            "The number of regular hot-dogs to make": "50.0",
            "The number of premium hot-dogs to make": "250.0",
            "Maximum profit per day": "1400.0"
        },
        "type": "linear-notable",
        "index": 127,
        "length": 542,
        "var_num": 2
    },
    {
        "question": "A chemistry teacher teaches her students two experiments, experiment 1 and experiment 2. In experiment 1, 3 units of the red liquid and 4 units of the blue liquid mix to create 5 units of green gas. In experiment 2, 5 units of the red liquid and 3 units of the blue liquid mix to create 6 units of the green gas. In addition, experiment 1 produces 1 units of smelly gas while experiment 2 produces 2 units of smelly gas.  The lab has available 80 units of red liquid and 70 units of blue liquid. If at most 10 units of smelly gas can be produced, how many experiments of each should be done to maximize the total amount of green gas produced?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_exp1 = LpVariable(\"NumExp1\", lowBound=0, cat='Integer') # number of experiment 1\nnum_exp2 = LpVariable(\"NumExp2\", lowBound=0, cat='Integer') # number of experiment 2\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ChemistryExperiment\", LpMaximize)\n\n# Define the objective function\nobjective = 5 * num_exp1 + 6 * num_exp2\nproblem += objective # maximize the total units of green gas produced\n\n# Define the constraints\nproblem += 3 * num_exp1 + 5 * num_exp2 <= 80 # the total amount of red liquid used cannot exceed 80 units\nproblem += 4 * num_exp1 + 3 * num_exp2 <= 70 # the total amount of blue liquid used cannot exceed 70 units\nproblem += num_exp1 + 2 * num_exp2 <= 10 # at most, produce 10 units of smelly gas\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of Experiment 1 conducted:\", num_exp1.value())\nprint(\"The number of Experiment 2 conducted:\", num_exp2.value())\nprint(\"The total units of green gas produced:\", objective.value())",
        "results": {
            "The number of Experiment 1 conducted": "10.0",
            "The number of Experiment 2 conducted": "0.0",
            "The total units of green gas produced": "50.0"
        },
        "formulation": "maximize 5x+6y\nSubject to: \n3x+5y <= 80\n4x+3y <= 70\n1x+2y <= 10 (end)",
        "type": "linear-notable",
        "index": 128,
        "length": 642,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA logistics company is managing the distribution of three types of goods (GoodA, GoodB, and GoodC) across multiple regions. The company needs to decide the number of trucks to allocate for each type of good and the number of trips each truck will make. Additionally, the company is considering using a fleet of drones to assist in the delivery of goods, especially in hard-to-reach areas.\n// variables: {\"number of trucks for GoodA\": \"TrucksA\", \"number of trucks for GoodB\": \"TrucksB\", \"number of trucks for GoodC\": \"TrucksC\", \"number of trips per truck for GoodA\": \"TripsA\", \"number of trips per truck for GoodB\": \"TripsB\", \"number of trips per truck for GoodC\": \"TripsC\", \"number of drones for GoodA\": \"DronesA\", \"number of drones for GoodB\": \"DronesB\", \"number of drones for GoodC\": \"DronesC\"}, where TrucksA, TrucksB, TrucksC, TripsA, TripsB, TripsC, DronesA, DronesB, DronesC >= 0 and all are integers.\n\n## Define Objective Function:\nThe cost of operating a truck per trip is $500, and the revenue generated per trip is $1000. The cost of operating a drone per trip is $100, and the revenue generated per trip is $300. The company wants to maximize the total net profit from all goods.\n// NetProfit_GoodA = (1000 * TripsA - 500 * TripsA) * TrucksA + (300 * DronesA - 100 * DronesA) * DronesA\n// NetProfit_GoodB = (1000 * TripsB - 500 * TripsB) * TrucksB + (300 * DronesB - 100 * DronesB) * DronesB\n// NetProfit_GoodC = (1000 * TripsC - 500 * TripsC) * TrucksC + (300 * DronesC - 100 * DronesC) * DronesC\n// So, the objective function is: Maximize (NetProfit_GoodA + NetProfit_GoodB + NetProfit_GoodC)\n\n## Generate Constraint-1:\nThe company has a total of 20 trucks available.\n// TrucksA + TrucksB + TrucksC <= 20\n\n## Generate Constraint-2:\nThe company can make a maximum of 100 trips per day.\n// TripsA * TrucksA + TripsB * TrucksB + TripsC * TrucksC <= 100\n\n## Generate Constraint-3:\nThe company has a budget of $3000 for operating costs per day.\n// 500 * (TripsA * TrucksA + TripsB * TrucksB + TripsC * TrucksC) + 100 * (DronesA + DronesB + DronesC) <= 3000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nTrucksA = model.addVar(vtype=\"INTEGER\", name=\"TrucksA\") # number of trucks for GoodA\nmodel.addCons(TrucksA >= 0)\nTrucksB = model.addVar(vtype=\"INTEGER\", name=\"TrucksB\") # number of trucks for GoodB\nmodel.addCons(TrucksB >= 0)\nTrucksC = model.addVar(vtype=\"INTEGER\", name=\"TrucksC\") # number of trucks for GoodC\nmodel.addCons(TrucksC >= 0)\nTripsA = model.addVar(vtype=\"INTEGER\", name=\"TripsA\") # number of trips per truck for GoodA\nmodel.addCons(TripsA >= 0)\nTripsB = model.addVar(vtype=\"INTEGER\", name=\"TripsB\") # number of trips per truck for GoodB\nmodel.addCons(TripsB >= 0)\nTripsC = model.addVar(vtype=\"INTEGER\", name=\"TripsC\") # number of trips per truck for GoodC\nmodel.addCons(TripsC >= 0)\nDronesA = model.addVar(vtype=\"INTEGER\", name=\"DronesA\") # number of drones for GoodA\nmodel.addCons(DronesA >= 0)\nDronesB = model.addVar(vtype=\"INTEGER\", name=\"DronesB\") # number of drones for GoodB\nmodel.addCons(DronesB >= 0)\nDronesC = model.addVar(vtype=\"INTEGER\", name=\"DronesC\") # number of drones for GoodC\nmodel.addCons(DronesC >= 0)\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == ((1000 * TripsA - 500 * TripsA) * TrucksA + (300 * DronesA - 100 * DronesA) * DronesA) +\n                  ((1000 * TripsB - 500 * TripsB) * TrucksB + (300 * DronesB - 100 * DronesB) * DronesB) +\n                  ((1000 * TripsC - 500 * TripsC) * TrucksC + (300 * DronesC - 100 * DronesC) * DronesC))\n\n# Add constraints\nmodel.addCons(TrucksA + TrucksB + TrucksC <= 20)\nmodel.addCons(TripsA * TrucksA + TripsB * TrucksB + TripsC * TrucksC <= 100)\nmodel.addCons(500 * (TripsA * TrucksA + TripsB * TrucksB + TripsC * TrucksC) + 100 * (DronesA + DronesB + DronesC) <= 3000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Total Net Profit: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Total Net Profit": "180000.0"
        },
        "question": "A logistics company is managing the distribution of three types of goods (GoodA, GoodB, and GoodC) across multiple regions. The company needs to decide the number of trucks to allocate for each type of good and the number of trips each truck will make, as well as the number of drones to use for each type of good. The cost and revenue details for trucks and drones are given in the following Table.\n\n| Type of Transport | Cost per Trip | Revenue per Trip |\n|-------------------|---------------|------------------|\n| Truck             | $500          | $1000            |\n| Drone             | $100          | $300             |\n\nThe company has a total of 20 trucks available. The company can make a maximum of 100 trips per day. The company has a budget of $3000 for operating costs per day. The company wants to maximize the total net profit from all goods.\n",
        "type": "nonlinear-table",
        "index": 129,
        "length": 860,
        "var_num": 9
    },
    {
        "scenario": "## Define Variables:\nA company produces five types of widgets: X, Y, Z, W, and V. The company needs to decide how many units of each widget to produce in next week.\n// variables: {\"number of units of widget X\": \"X\", \"number of units of widget Y\": \"Y\", \"number of units of widget Z\": \"Z\", \"number of units of widget W\": \"W\", \"number of units of widget V\": \"V\"}, where X, Y, Z, W, V >= 0 & X, Y, Z, W, V are integers\n\n## Define Objective Function:\nFor Widget X, the selling price is 10$, the material cost is 5$, and the production time is 2 hours. \nFor Widget Y, the selling price is 15$, the material cost is 7$, and the production time is 3 hours. \nFor Widget Z, the selling price is 20$, the material cost is 9$, and the production time is 4 hours.\nFor Widget W, the selling price is 25$, the material cost is 11$, and the production time is 5 hours.\nFor Widget V, the selling price is 30$, the material cost is 13$, and the production time is 6 hours.\nThe company has only one production line and can only produce one widget at a time. The company aims to maximize the rate at which it earns profits (which is defined as the sum of the selling profit divided by the sum of the production times).\n// Selling profit of X: Profit_X = (10 - 5) * X\n// Selling profit of Y: Profit_Y = (15 - 7) * Y\n// Selling profit of Z: Profit_Z = (20 - 9) * Z\n// Selling profit of W: Profit_W = (25 - 11) * W\n// Selling profit of V: Profit_V = (30 - 13) * V\n// So, the objective function is: Maximize (Profit_X + Profit_Y + Profit_Z + Profit_W + Profit_V) / (2 * X + 3 * Y + 4 * Z + 5 * W + 6 * V)\n\n## Generate Constraint-1:\nThe company has $900 available for material costs next week.\n// 5 * X + 7 * Y + 9 * Z + 11 * W + 13 * V <= 900\n\n## Generate Constraint-2:\nThe company wants to produce at least 10 units of each widget next week.\n// X >= 10; Y >= 10; Z >= 10; W >= 10; V >= 10\n\n## Generate Constraint-3:\nThe company wants to spend at most 400 hours on production next week.\n// 2 * X + 3 * Y + 4 * Z + 5 * W + 6 * V <= 400\n\n## Generate Constraint-4:\nThe company wants to ensure that the total production of Widget W does not exceed the combined production of Widgets X, Y, and Z.\n// W <= X + Y + Z\n\n## Generate Constraint-5:\nThe company wants to ensure that the total production of Widget V does not exceed the combined production of Widgets X, Y, Z, and W.\n// V <= X + Y + Z + W",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nX = model.addVar(vtype=\"INTEGER\", name=\"X\") # number of units of widget X\nmodel.addCons(X >= 0)\nY = model.addVar(vtype=\"INTEGER\", name=\"Y\") # number of units of widget Y\nmodel.addCons(Y >= 0)\nZ = model.addVar(vtype=\"INTEGER\", name=\"Z\") # number of units of widget Z\nmodel.addCons(Z >= 0)\nW = model.addVar(vtype=\"INTEGER\", name=\"W\") # number of units of widget W\nmodel.addCons(W >= 0)\nV = model.addVar(vtype=\"INTEGER\", name=\"V\") # number of units of widget V\nmodel.addCons(V >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == (10 - 5) * X + (15 - 7) * Y + (20 - 9) * Z + (25 - 11) * W + (30 - 13) * V - (2 * X + 3 * Y + 4 * Z + 5 * W + 6 * V) * model.addVar(vtype=\"CONTINUOUS\", name=\"dummy\"))\n\n# Add constraints\nmodel.addCons(5 * X + 7 * Y + 9 * Z + 11 * W + 13 * V <= 900)\nmodel.addCons(X >= 10)\nmodel.addCons(Y >= 10)\nmodel.addCons(Z >= 10)\nmodel.addCons(W >= 10)\nmodel.addCons(V >= 10)\nmodel.addCons(2 * X + 3 * Y + 4 * Z + 5 * W + 6 * V <= 400)\nmodel.addCons(W <= X + Y + Z)\nmodel.addCons(V <= X + Y + Z + W)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of units of widget X: \", model.getVal(X))\n    print(\"Number of units of widget Y: \", model.getVal(Y))\n    print(\"Number of units of widget Z: \", model.getVal(Z))\n    print(\"Number of units of widget W: \", model.getVal(W))\n    print(\"Number of units of widget V: \", model.getVal(V))\n    print(\"Objective Value (Profit Rate): \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of units of widget X": "10.0",
            "Number of units of widget Y": "10.0",
            "Number of units of widget Z": "10.0",
            "Number of units of widget W": "14.0",
            "Number of units of widget V": "40.0",
            "Objective Value (Profit Rate)": "1116.0"
        },
        "question": "A company produces five types of widgets: X, Y, Z, W, and V. The company needs to decide how many units of each widget to produce in next week. The selling price, material cost, and production time for each widget are given in the following Table.\n\n| Widget | Selling Price | Material Cost | Production Time |\n|--------|---------------|---------------|-----------------|\n| X      | 10$           | 5$            | 2 hours         |\n| Y      | 15$           | 7$            | 3 hours         |\n| Z      | 20$           | 9$            | 4 hours         |\n| W      | 25$           | 11$           | 5 hours         |\n| V      | 30$           | 13$           | 6 hours         |\n\nThe company has $900 available for material costs next week. The company wants to produce at least 10 units of each widget next week. The company wants to spend at most 400 hours on production next week. The company wants to ensure that the total production of Widget W does not exceed the combined production of Widgets X, Y, and Z. The company also wants to ensure that the total production of Widget V does not exceed the combined production of Widgets X, Y, Z, and W. The company has only one production line and can only produce one widget at a time. The company aims to maximize the rate at which it earns profits (which is defined as the sum of the selling profit divided by the sum of the production times).\n",
        "type": "nonlinear-table",
        "index": 130,
        "length": 1392,
        "var_num": 5
    },
    {
        "question": "A client asks his stockbroker to invest $100,000 for maximum annual income, subject to the following conditions: Spread the investment over no more than three different stocks. Put no more than 40 percent of the money into any one stock. Put a minimum of $10,000 into an oil stock. The broker has identified three stocks for investment. Their estimated annual returns per share and price per share are shown in the following Table. \n\nTable (Estimated annual returns per share and price per share for three stocks):\n| Stock Type    | Price per Share | Annual Return per Share |\n| ------------- | --------------- | ----------------------- |\n| Oil           | $120            | $11                     |\n| Auto          | $52             | $4                      |\n| Pharmaceutical| $18             | $2                      |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal allocation of the investment among the three stocks. Let's denote the number of shares in the oil stock as x, the number of shares in the auto stock as y, and the number of shares in the pharmaceutical stock as z.\n```Variables\nx //number of shares in the oil stock\ny //number of shares in the auto stock\nz //number of shares in the pharmaceutical stock\nx, y, z >= 0 and they are integers //non-negativity integer variables\n```\n\n# Objective Function:\nWe want to maximize the annual investment income, so the objective function is given by the sum of the annual returns from each stock. The annual investment income is 11x + 4y + 2z.\n```Objective Function\nMaximize: 11x + 4y + 2z\n```\n\n# Constraints:\n1. The available investment is $100,000, so the total cost of the shares should not exceed this amount. The cost of the shares is given by the sum of the price per share multiplied by the number of shares for each stock. Therefore, the constraint is 120x + 52y + 18z <= 100,000.\n2. The maximum investment in any one stock is 40% of the total investment. Therefore, the constraints are 120x <= 0.4 * 100,000, 52y <= 0.4 * 100,000, and 18z <= 0.4 * 100,000.\n3. The minimum investment in the oil stock is $10,000. Therefore, the constraint is 120x >= 10,000.\n```Constraints\n120x + 52y + 18z <= 100,000 //available investment\n120x <= 0.4 * 100,000 //maximum investment in oil stock\n52y <= 0.4 * 100,000 //maximum investment in auto stock\n18z <= 0.4 * 100,000 //maximum investment in pharmaceutical stock\n120x >= 10,000 //minimum investment in oil stock\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"OilShares\", lowBound=0, cat='Integer') # number of shares in the oil stock\ny = LpVariable(\"AutoShares\", lowBound=0, cat='Integer') # number of shares in the auto stock\nz = LpVariable(\"PharmaShares\", lowBound=0, cat='Integer') # number of shares in the pharmaceutical stock\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeAnnualIncome\", LpMaximize)\n\n# Define the objective function\nproblem += 11 * x + 4 * y + 2 * z # maximize the annual investment income\n\n# Define the constraints\nproblem += 120 * x + 52 * y + 18 * z <= 100000 # available investment\nproblem += 120 * x <= 0.4 * 100000 # maximum investment in oil stock\nproblem += 52 * y <= 0.4 * 100000 # maximum investment in auto stock\nproblem += 18 * z <= 0.4 * 100000 # maximum investment in pharmaceutical stock\nproblem += 120 * x >= 10000 # minimum investment in oil stock\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of oil stock shares:\", x.value())\nprint(\"The number of auto stock shares:\", y.value())\nprint(\"The number of pharmaceutical stock shares:\", z.value())\nprint(\"The maximum annual income:\", value(problem.objective))\n",
        "results": {
            "The number of oil stock shares": "333.0",
            "The number of auto stock shares": "385.0",
            "The number of pharmaceutical stock shares": "2222.0",
            "The maximum annual income": "9647.0"
        },
        "type": "linear-table",
        "index": 131,
        "length": 824,
        "var_num": 3
    },
    {
        "question": "You need to construct a rectangular fence. The area of the rectangle must be at least 1600 ft. What are the dimensions of the rectangular pen to minimize the amount of material needed?",
        "scenario": "## Define Variables:\nYou need to construct a rectangular fence.\n// variables: {\"length of the rectangle\": \"L\", \"width of the rectangle\": \"W\"}, where L, W >= 0\n\n## Define Objective Function:\nWhat are the dimensions of the rectangular pen to minimize the amount of material needed?\n// The amount of material needed is the perimeter of the rectangle. The perimeter of a rectangle is given by 2L + 2W. \n// Therefore, the objective function is: Minimize 2L + 2W\n\n## Generate Constraint-1:\nThe area of the rectangle must be at least 1600 ft.\n// L * W >= 1600",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nL = model.addVar(vtype=\"CONTINUOUS\", name=\"L\") # length of the rectangle\nW = model.addVar(vtype=\"CONTINUOUS\", name=\"W\") # width of the rectangle\n\n# Define objective function\nmodel.setObjective(2*L + 2*W, \"minimize\")\n\n# Add constraints\nmodel.addCons(L * W >= 1600)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The length of the rectangle:\", model.getVal(L))\n    print(\"The width of the rectangle:\", model.getVal(W))\n    print(\"The amount of material needed: \", 2*model.getVal(L) + 2*model.getVal(W))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The length of the rectangle": "40.000",
            "The width of the rectangle": "40.000",
            "The amount of material needed": "160"
        },
        "type": "nonlinear-notable",
        "index": 132,
        "length": 184,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA manufacturing company produces three types of electronic devices: Smartphones, Tablets, and Laptops. The company needs to decide the production quantities for each device to optimize its resources and profits.\n// variables: {\"quantity of Smartphones\": \"S\", \"quantity of Tablets\": \"T\", \"quantity of Laptops\": \"L\"}, where S, T, L >= 0 and S, T, L are integers.\n\n## Define Objective Function:\nThe profit per unit for Smartphones is $100, for Tablets is $150, and for Laptops is $200. Due to economies of scale, the profit per unit increases by $0.5 for each unit produced above 100 for each type of device. The company aims to maximize its total profit from the sales of these devices.\n// Profit_S = max(100 + 0.5 * (S - 100), 100) * S\n// Profit_T = max(150 + 0.5 * (T - 100), 150) * T\n// Profit_L = max(200 + 0.5 * (L - 100), 200) * L\n// So, the objective function is: Maximize Profit_S + Profit_T + Profit_L\n\n## Generate Constraint-1:\nThe company has a limited supply of a critical component used in all devices, which is 1500 units. Each Smartphone requires 1 unit, each Tablet requires 2 units, and each Laptop requires 3 units of this component.\n// S + 2T + 3L <= 1500\n\n## Generate Constraint-2:\nThere is a market demand constraint for each device. The maximum demand for Smartphones is 500 units, for Tablets is 400 units, and for Laptops is 300 units.\n// S <= 500; T <= 400; L <= 300\n\n## Generate Constraint-3:\nThe company has a total production capacity constraint of 1000 units across all devices.\n// S + T + L <= 1000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\n\"\"\"\nProfit_S = max(100 + 0.5 * (S - 100), 100) * S\nProfit_T = max(150 + 0.5 * (T - 100), 150) * T\nProfit_L = max(200 + 0.5 * (L - 100), 200) * L\n\"\"\"\n\nS1 = model.addVar(vtype=\"INTEGER\", name=\"S1\", lb=0, ub=100)\nS2 = model.addVar(vtype=\"INTEGER\", name=\"S2\", lb=100, ub=500)\nS_b1 = model.addVar(vtype=\"B\", name=\"S_b1\")\nS_b2 = model.addVar(vtype=\"B\", name=\"S_b2\")\nmodel.addCons(S_b1 + S_b2 == 1)\nS = S1*S_b1 + S2*S_b2\nProfit_S = 100 * S1 * S_b1 + (100 + 0.5 * (S2 - 100)) * S2 * S_b2\n\nT1 = model.addVar(vtype=\"INTEGER\", name=\"T1\", lb=0, ub=100)\nT2 = model.addVar(vtype=\"INTEGER\", name=\"T2\", lb=100, ub=400)\nT_b1 = model.addVar(vtype=\"B\", name=\"T_b1\")\nT_b2 = model.addVar(vtype=\"B\", name=\"T_b2\")\nmodel.addCons(T_b1 + T_b2 == 1)\nT = T1*T_b1 + T2*T_b2\nProfit_T = 150 * T1 * T_b1 + (150 + 0.5 * (T2 - 100)) * T2 * T_b2\n\nL1 = model.addVar(vtype=\"INTEGER\", name=\"L1\", lb=0, ub=100)\nL2 = model.addVar(vtype=\"INTEGER\", name=\"L2\", lb=100, ub=300)\nL_b1 = model.addVar(vtype=\"B\", name=\"L_b1\")\nL_b2 = model.addVar(vtype=\"B\", name=\"L_b2\")\nmodel.addCons(L_b1 + L_b2 == 1)\nL = L1*L_b1 + L2*L_b2\nProfit_L = 200 * L1 * L_b1 + (200 + 0.5 * (L2 - 100)) * L2 * L_b2\n\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == Profit_S + Profit_T + Profit_L)\n\n# Add constraints\nmodel.addCons(S + 2 * T + 3 * L <= 1500)\nmodel.addCons(S + T + L <= 1000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Quantity of Smartphone: \", model.getVal(S1)*model.getVal(S_b1) + model.getVal(S2)*model.getVal(S_b2))\n    print(\"Quantity of Tablet: \", model.getVal(T1)*model.getVal(T_b1) + model.getVal(T2)*model.getVal(T_b2))\n    print(\"Quantity of Laptop: \", model.getVal(L1)*model.getVal(L_b1) + model.getVal(L2)*model.getVal(L_b2))\n    print(\"Total Profit: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Quantity of Smartphone": "500.0",
            "Quantity of Tablet": "400.0",
            "Quantity of Laptop": "66.0",
            "Total Profit": "283200.00000000"
        },
        "question": "A manufacturing company produces three types of electronic devices: Smartphones, Tablets, and Laptops. The company needs to decide the production quantities for each device to optimize its resources and profits. The profit per unit for each device and the requirements for a critical component are given in the following Table.\n\n| Device     | Profit per Unit | Critical Component Usage |\n|------------|-----------------|--------------------------|\n| Smartphones| $100 (increases by $0.5 for each unit above 100) | 1 unit |\n| Tablets    | $150 (increases by $0.5 for each unit above 100) | 2 units |\n| Laptops    | $200 (increases by $0.5 for each unit above 100) | 3 units |\n\nThe company has a limited supply of 1500 units of a critical component used in all devices. Each Smartphone requires 1 unit, each Tablet requires 2 units, and each Laptop requires 3 units of this component. There is a market demand constraint for each device. The maximum demand for Smartphones is 500 units, for Tablets is 400 units, and for Laptops is 300 units. The company also has a total production capacity constraint of 1000 units across all devices. The company aims to maximize its total profit from the sales of these devices, considering the economies of scale where the profit per unit increases by $0.5 for each unit produced above 100 for each type of device.\n",
        "type": "nonlinear-table",
        "index": 133,
        "length": 1351,
        "var_num": 3
    },
    {
        "question": "A pharmacy makes eye cream and foot cream using two different machines, machine 1 and machine 2. Machine 1 can  make 30 ml of eye cream and 60 ml of foot cream per hour. Machine 2 can make 45 ml of eye cream and 30 ml of foot cream per hour. Furthermore, machine 1 requires 20 ml of distilled water per hour while machine 2 requires 15 ml of distilled water per hour. The pharmacy has available 1200 ml of distilled water. If the pharmacy needs to make at least 1300 ml of eye cream and 1500 ml of foot cream, how many hours should each machine be used to minimize the total time needed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nhours_machine_1 = LpVariable(\"HoursMachine1\", lowBound=0, cat='Continuous') # hours for machine 1\nhours_machine_2 = LpVariable(\"HoursMachine2\", lowBound=0, cat='Continuous') # hours for machine 2\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"PharmacyProduction\", LpMinimize)\n\n# Define the objective function\nobjective = hours_machine_1 + hours_machine_2\nproblem += objective # minimize the total time\n\n# Define the constraints\nproblem += 30 * hours_machine_1 + 45 * hours_machine_2 >= 1300 # at least 1300 ml of eye cream\nproblem += 60 * hours_machine_1 + 30 * hours_machine_2 >= 1500 # at least 1500 ml of foot cream\nproblem += 20 * hours_machine_1 + 15 * hours_machine_2 <= 1200 # no more than 1200 ml of distilled water\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The hours machine 1 should be used:\", hours_machine_1.value())\nprint(\"The hours machine 2 should be used:\", hours_machine_2.value())\nprint(\"The total time needed:\", objective.value())",
        "results": {
            "The hours machine 1 should be used": "15.833333",
            "The hours machine 2 should be used": "18.333333",
            "The total time needed": "34.166666"
        },
        "formulation": "minimize x+y\nSubject to: \n20x+15y <= 1200\n30x+45y >= 1300\n60x+30y >= 1500 (end)",
        "type": "linear-notable",
        "index": 134,
        "length": 587,
        "var_num": 2
    },
    {
        "question": "My grandma is required to take two medicines Z1 and D3 everyday. She needs to take at least 5 grams of Z1 and 10 grams of D3 everyday. These medicines are available in two pills named Zodiac and Sunny. One pill of Zodiac contains 1.3 grams of Z1 while one pill of Sunny contains 1.2 grams of Z1. On the other hand, one pill of Zodiac contains 1.5 grams of D3 and one pill of Sunny contains 5 grams of D3. The cost per pill of Zodiac is $1 and the cost per pill of Sunny is $3. Formulate a LP such that the medicine requirement can be fulfilled at the lowest cost.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_Zodiac_pills = LpVariable(\"NumZodiacPills\", lowBound=0, cat='Integer') # number of Zodiac pills\nnum_Sunny_pills = LpVariable(\"NumSunnyPills\", lowBound=0, cat='Integer') # number of Sunny pills\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MedicineCost\", LpMinimize)\n\n# Define the objective function\nobjective = num_Zodiac_pills + 3 * num_Sunny_pills\nproblem += objective # minimize the total cost\n\n# Define the constraints\nproblem += 1.3 * num_Zodiac_pills + 1.2 * num_Sunny_pills >= 5 # the amount of Z1 must be at least 5 grams\nproblem += 1.5 * num_Zodiac_pills + 5 * num_Sunny_pills >= 10 # the amount of D3 must be at least 10 grams\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of Zodiac pills:\", num_Zodiac_pills.value())\nprint(\"The number of Sunny pills:\", num_Sunny_pills.value())\nprint(\"The total cost:\", objective.value())",
        "results": {
            "The number of Zodiac pills": "4.0",
            "The number of Sunny pills": "1.0",
            "The total cost": "7.0"
        },
        "formulation": "minimize 1x+3y\nSubject to: \n1.3x+1.2y >= 5\n1.5x+5y >= 10 (end)",
        "type": "linear-notable",
        "index": 135,
        "length": 563,
        "var_num": 2
    },
    {
        "question": "You need to construct a rectangule. The perimeter of the rectangle must be at most 100 square units. What are the dimensions of the rectangle to maximize the area?",
        "scenario": "## Define Variables:\nYou need to construct a rectangle.\n// variables: {\"length of the rectangle\": \"L\", \"width of the rectangle\": \"W\"}, where L, W >= 0\n\n## Define Objective Function:\nWhat are the dimensions of the rectangle to maximize the area?\n// The area of the rectangle is given by the product of the length and the width.\n// Therefore, the objective function is: Maximize L * W\n\n## Generate Constraint-1:\nThe perimeter of the rectangle must be at most 100 square units.\n// The perimeter of the rectangle is given by 2L + 2W, and it is given that the perimeter is at most 100. Therefore, the constraint is 2L + 2W <= 100",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nL = model.addVar(vtype=\"CONTINUOUS\", name=\"L\") # length of the rectangle\nW = model.addVar(vtype=\"CONTINUOUS\", name=\"W\") # width of the rectangle\n\n# Define objective function\nobj = model.addVar(vtype=\"C\", name=\"obj\")\nmodel.addCons(obj == L * W)\nmodel.setObjective(obj, \"maximize\")\n\n# Add constraints\nmodel.addCons(2 * L + 2 * W <= 100)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The length of the rectangle:\", model.getVal(L))\n    print(\"The width of the rectangle:\", model.getVal(W))\n    print(\"The maximum area of the rectangle: \", model.getVal(L * W))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The length of the rectangle": "25.00",
            "The width of the rectangle": "25.00",
            "The maximum area of the rectangle": "625.000"
        },
        "type": "nonlinear-notable",
        "index": 136,
        "length": 163,
        "var_num": 2
    },
    {
        "question": "Stockco is considering four investments, each with its own net present value (NPV) and required cash outflow. Currently, $14,000 is available for investment. Formulate an LP whose solution will tell Stockco how to maximize the NPV obtained from investments 1-4.\n\nTable (Net present value and cash outflow required for each investment):\n| Investment | NPV    | Cash Outflow |\n|------------|--------|--------------|\n| 1          | $16,000| $5,000       |\n| 2          | $22,000| $7,000       |\n| 3          | $12,000| $4,000       |\n| 4          | $8,000 | $3,000       |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal investment quantities for each investment. Let's denote the number of investment 1 as I1, the number of investment 2 as I2, the number of investment 3 as I3, and the number of investment 4 as I4.\nAdditionally, since we can only choose to invest or not invest in each investment, the investment quantities should be binary. Therefore, we have the binary constraint: I1, I2, I3, I4 = 0 or 1.\n```Variables\nI1 //number of investment 1\nI2 //number of investment 2\nI3 //number of investment 3\nI4 //number of investment 4\nI1, I2, I3, I4 = 0 or 1 //binary variables\n```\n\n# Objective Function:\nWe want to maximize the net present value (NPV) obtained from investments 1-4. The NPV for each investment is given as follows: \nInvestment 1: $16,000\nInvestment 2: $22,000\nInvestment 3: $12,000\nInvestment 4: $8,000\nTherefore, the objective function is the sum of the NPV for each investment multiplied by the corresponding investment quantity: 16000I1 + 22000I2 + 12000I3 + 8000I4.\n```Objective Function\nMaximize: 16000I1 + 22000I2 + 12000I3 + 8000I4\n```\n\n# Constraints:\nThe available investment is $14,000, so the total cash outflow cannot exceed this amount. The cash outflow for each investment is given as follows:\nInvestment 1: $5,000\nInvestment 2: $7,000\nInvestment 3: $4,000\nInvestment 4: $3,000\nTherefore, the constraint is: 5000I1 + 7000I2 + 4000I3 + 3000I4 <= 14000.\n```Constraints\n5000I1 + 7000I2 + 4000I3 + 3000I4 <= 14000\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nI1 = LpVariable(\"Investment_1\", cat='Binary') # Investment 1\nI2 = LpVariable(\"Investment_2\", cat='Binary') # Investment 2\nI3 = LpVariable(\"Investment_3\", cat='Binary') # Investment 3\nI4 = LpVariable(\"Investment_4\", cat='Binary') # Investment 4\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeNPV\", LpMaximize)\n\n# Define the objective function\nproblem += 16000 * I1 + 22000 * I2 + 12000 * I3 + 8000 * I4\n\n# Define the constraints\nproblem += 5000 * I1 + 7000 * I2 + 4000 * I3 + 3000 * I4 <= 14000\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Investment in 1:\", I1.value())\nprint(\"Investment in 2:\", I2.value())\nprint(\"Investment in 3:\", I3.value())\nprint(\"Investment in 4:\", I4.value())\nprint(\"Total NPV:\", value(problem.objective))\n",
        "results": {
            "Investment in 1": "0.0",
            "Investment in 2": "1.0",
            "Investment in 3": "1.0",
            "Investment in 4": "1.0",
            "Total NPV": "42000.0"
        },
        "type": "linear-table",
        "index": 137,
        "length": 569,
        "var_num": 4
    },
    {
        "question": "A bubble tea shop sells mango and lychee bubble tea. Each mango bubble tea requires 4 units of mango juice and 8 units of tea. Each lychee bubble tea requires 6 units of lychee juice and 6 units of tea. The shop has available 2000 units of mango juice and 3000 units of lychee juice. At least 40% of the bubble teas made must be lychee flavored. However, mango bubble tea sells better and thus the number of mango bubble teas made must be large than the number of lychee bubble teas made. How many of each bubble tea flavor should be made to minimize the total amount of tea needed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_mango_bubble_tea = LpVariable(\"NumMangoBubbleTea\", lowBound=0, cat='Integer') # number of mango bubble tea\nnum_lychee_bubble_tea = LpVariable(\"NumLycheeBubbleTea\", lowBound=0, cat='Integer') # number of lychee bubble tea\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BubbleTeaProduction\", LpMinimize)\n\n# Define the objective function\nobjective = 8 * num_mango_bubble_tea + 6 * num_lychee_bubble_tea\nproblem += objective # minimize the total amount of tea needed\n\n# Define the constraints\nproblem += 4 * num_mango_bubble_tea <= 2000 # the number of mango bubble tea must not exceed the available amount of mango juice\nproblem += 6 * num_lychee_bubble_tea <= 3000 # the number of lychee bubble tea must not exceed the available amount of lychee juice\nproblem += num_lychee_bubble_tea >= 0.4 * (num_mango_bubble_tea + num_lychee_bubble_tea) # at least 40% of bubble teas made must be lychee flavored\nproblem += num_mango_bubble_tea >= num_lychee_bubble_tea + 1 # the number of mango bubble tea made should be greater than that of lychee\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of mango bubble tea:\", num_mango_bubble_tea.value())\nprint(\"The number of lychee bubble tea:\", num_lychee_bubble_tea.value())\nprint(\"The total amount of tea needed:\", objective.value())",
        "results": {
            "The number of mango bubble tea": "3.0",
            "The number of lychee bubble tea": "2.0",
            "The total amount of tea needed": "36.0"
        },
        "formulation": "minimize 8y+6x\nSubject to: \n4y <= 2000\n6x <= 3000\nx >= 0.4(x+y)\ny >= x (end)",
        "type": "linear-notable",
        "index": 138,
        "length": 582,
        "var_num": 2
    },
    {
        "question": "Robertville Furniture Company (RFC) makes two types of dressers: the Classic and the Modern. RFC sells the Classic for $310 and the Modern for $350. At these prices RFC believes it can sell up to 20 Classic and 25 Modern dressers per week. Each type of dresser is made of oak and covered with a pecan veneer. The wood requirements for each dresser are given in the table. Oak costs $1.50 per square foot, and pecan veneer costs $2 per square foot. The dressers must go through two manufacturing departments: cutting and veneering. The machine hours required for each dresser are also given below. The Oak Dresse size (square foot), Pecan Dresser size (square foot), cutting Time and Veneering Time for Classic and Modern are [90, 50, 1.20, 1.00] and [100, 60, 0.90, 1.20]. RFC has only 40 hours of production time available each week in each department, and it can obtain up to 2000 board feet of oak and 1500 square feet of pecan veneer each week. The cost of operating each manufacturing department is essentially fixed, so RFC would like to maximize its contribution to overhead (revenue minus variable costs).",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for Classic and Modern dressers that adhere to the constraints given. Let's denote the number of Classic dressers as C and the number of Modern dressers as M.\n```Variables\nC //number of Classic dressers to produce \nM //number of Modern dressers to produce\nC, M >= 0 and they are integers //Non-negative and integer variables\n```\n\n# Objective Function:\nWe want to maximize the contribution to overhead, which is the revenue minus the variable costs. \nThe revenue is the sum of the revenue from Classic and Modern dressers, which is 310C + 350M.\nThe variable costs consist of the cost of oak and pecan veneer. The cost of oak is $1.50 per board foot * (90C + 100M) board feet. The cost of pecan veneer is $2 per square foot * (50C + 60M) square feet. \nSo the total variable costs are 1.5(90C + 100M) + 2(50C + 60M) = 135C + 150M + 100C + 120M = 235C + 270M\nTherefore, the objective function is 310C + 350M - (235C + 270M) = 75C + 80M\n```Objective Function\nMaximize: 75C + 80M\n```\n\n# Constraints:\n```Constraints\n1.2C + 0.9M <= 40 //Maximum production hours of cutting department\nC + 1.2M <= 40 //Maximum production hours of veneering department\n90C + 100M <= 2000 //Maximum board feet of oak\n50C + 60M <= 1500 //Maximum square feet of pecan veneer\nC <= 20 //Maximum number of Classic dressers\nM <= 25 //Maximum number of Modern dressers\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nC = LpVariable(\"Classic\", lowBound=0, cat='Integer') # number of Classic dressers\nM = LpVariable(\"Modern\", lowBound=0, cat='Integer') # number of Modern dressers\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"RFC_Maximize_Profit\", LpMaximize)\n\n# Define the objective function\nobjective = 75 * C + 80 * M\nproblem += objective # maximize the contribution to overhead\n\n# Define the constraints\nproblem += 1.2 * C + 0.9 * M <= 40 # cutting department hours\nproblem += 1 * C + 1.2 * M <= 40 # veneering department hours\nproblem += 90 * C + 100 * M <= 2000 # oak wood constraint\nproblem += 50 * C + 60 * M <= 1500 # pecan veneer constraint\nproblem += C <= 20 # maximum Classic dressers\nproblem += M <= 25 # maximum Modern dressers\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of Classic dressers to produce:\", C.value())\nprint(\"The number of Modern dressers to produce:\", M.value())\nprint(\"The maximum contribution to overhead:\", objective.value())\n",
        "results": {
            "The number of Classic dressers to produce": "20.0",
            "The number of Modern dressers to produce": "2.0",
            "The maximum contribution to overhead": "1660.0"
        },
        "type": "linear-table",
        "index": 139,
        "length": 1113,
        "var_num": 2
    },
    {
        "question": "Euing Gas produces two types of gasoline (gas 1 and gas 2) from two types of oil (oil 1 and oil 2). Each gallon of gas 1 must contain at least 50 percent oil 1, and each gallon of gas 2 must contain at least 60 percent oil 1. Each gallon of gas 1 can be sold for $12, and each gallon of gas 2 can be sold for $14. Currently, 500 gallons of oil 1 and 1,000 gallons of oil 2 are available. As many as 1,500 more gallons of oil 1 can be purchased at the prices shown in the following Table. Formulate an LP that will maximize Euing's profits (revenues - purchasing costs).\n\nTable (Purchasing prices for additional gallons of oil 1):\n| Additional Gallons of Oil 1 | Price per Gallon |\n| --------------------------- | ---------------- |\n| First 500                   | $25              |\n| Next 500                    | $20              |\n| Next 500                    | $15              |",
        "formulation": "# Variables:\nWe need to determine the optimal amounts of oil and gas to maximize profits. Let's denote the following variables:\n```Variables\nx1 // amount of oil 1 purchased\nx11 // amount of oil 1 used to produce gas 1\nx12 // amount of oil 1 used to produce gas 2\nx21 // amount of oil 2 used to produce gas 1\nx22 // amount of oil 2 used to produce gas 2\nx1, x11, x12, x21, x22 >= 0\n```\n\n# Objective Function:\nWe want to maximize profits, which is the difference between the total revenue and the purchasing costs. The total revenue is the sum of the revenue from gas 1 and gas 2, which is 12x11 + 14x12 + 12x21 + 14x22. \nThe purchasing costs depend on the amount of oil 1 purchased. \nIf x1 is less than or equal to 500, the purchasing cost is 25x1. \nIf x1 is between 500 and 1000, the purchasing cost is 20(x1-500) + 500 * 25 = 20x1 + 2500 \nIf x1 is between 1000 and 1500, the purchasing cost is 15(x1-1000) + 500 * 20 + 500 * 25 = 15x1 + 7500\nTherefore, the objective function is:\n```Objective Function\nMaximize: 12x11 + 14x12 + 12x21 + 14x22 - \\left\\{\n        25x1 (0 <= x1 <= 500), \\\n    20x1 + 2500 (500 <= x1 <= 1000), \\\n    15x1 + 7500 (1000 <= x1 <= 1500)  \n\right\n.}\n```\n\n# Constraints:\nEach gallon of gas 1 must contain at least 50% oil 1, so the constraint on oil 1 usage for gas 1 is 0.\nSo, x11 / (x11 + x21) >= 0.5, which is equivalent to 0.5x11 - 0.5x21 >= 0.\nEach gallon of gas 2 must contain at least 60% oil 1, so the constraint on oil 1 usage for gas 2 is 0.\nSo, x12 / (x12 + x22) >= 0.6, which is equivalent to 0.4x12 - 0.6x22 >= 0.\nThe amount of oil 1 used to produce gas 1 and gas 2 cannot exceed the amount of oil 1 purchased, so the constraint on oil 1 usage is x11 + x12 <= x1 + 500.\nThe amount of oil 2 used to produce gas 1 and gas 2 cannot exceed the amount of oil 2 available, so the constraint on oil 2 usage is x21 + x22 <= 1000.\nThe amount of oil 1 purchased cannot exceed 1500 gallons, so the upper bound constraint on oil 1 purchased is x1 <= 1500.\n```Constraints\n0.5x11 - 0.5x21 >= 0\n0.4x12 - 0.6x22 >= 0\nx11 + x12 <= x1 + 500\nx21 + x22 <= 1000\nx1 <= 1500\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx1 = LpVariable(\"x1\", lowBound=0, cat='Continuous') # amount of oil 1 purchased\nx11 = LpVariable(\"x11\", lowBound=0, cat='Continuous') # amount of oil 1 used to produce gas 1\nx12 = LpVariable(\"x12\", lowBound=0, cat='Continuous') # amount of oil 1 used to produce gas 2\nx21 = LpVariable(\"x21\", lowBound=0, cat='Continuous') # amount of oil 2 used to produce gas 1\nx22 = LpVariable(\"x22\", lowBound=0, cat='Continuous') # amount of oil 2 used to produce gas 2\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"EuingGasProfitMaximization\", LpMaximize)\n\n# Define the objective function\n# We need to handle the piecewise linear cost function for purchasing oil 1\ncosts = (25 * x1, 20 * x1 + 2500, 15 * x1 + 7500)\nbreakpoints = (0, 500, 1000)\npurchase_cost = lpSum([costs[i] if breakpoints[i] <= x1 <= breakpoints[i+1] else 0 for i in range(len(breakpoints)-1)])\nrevenue = 12 * x11 + 14 * x12 + 12 * x21 + 14 * x22\nproblem += revenue - purchase_cost\n\n# Define the constraints\nproblem += 0.5 * x11 - 0.5 * x21 >= 0 # at least 50% oil 1 in gas 1\nproblem += 0.4 * x12 - 0.6 * x22 >= 0 # at least 60% oil 1 in gas 2\nproblem += x11 + x12 <= x1 + 500 # oil 1 usage\nproblem += x21 + x22 <= 1000 # oil 2 usage\nproblem += x1 <= 1500 # oil 1 purchase limit\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The amount of oil 1 purchased:\", x1.value())\nprint(\"The amount of oil 1 used to produce gas 1:\", x11.value())\nprint(\"The amount of oil 1 used to produce gas 2:\", x12.value())\nprint(\"The amount of oil 2 used to produce gas 1:\", x21.value())\nprint(\"The amount of oil 2 used to produce gas 2:\", x22.value())\nprint(\"The maximum profit:\", problem.objective.value())\n",
        "results": {
            "The amount of oil 1 purchased": "0.0",
            "The amount of oil 1 used to produce gas 1": "500.0",
            "The amount of oil 1 used to produce gas 2": "-0.0",
            "The amount of oil 2 used to produce gas 1": "500.0",
            "The amount of oil 2 used to produce gas 2": "0.0",
            "The maximum profit": "9500.0"
        },
        "type": "linear-table",
        "index": 140,
        "length": 884,
        "var_num": 5
    },
    {
        "question": "A cough syrup company sells cough syrup in kids and adult size bottles. A kids size bottle can hold 100 ml of cough syrup while an adult size bottle can hold 300 ml of cough syrup. Since there is no difference in concentration of medical ingredients between the two bottles, at least 3 times as many adult size bottle must be made as kids size bottles. However, at least 50 kids size bottles must be made. If the company has 25000 ml of cough syrup available, how many bottles of each should be made to maximize the total number of bottles?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_kids_bottles = LpVariable(\"NumKidsBottles\", lowBound=50, cat='Integer') # number of kids size bottles\nnum_adult_bottles = LpVariable(\"NumAdultBottles\", lowBound=0, cat='Integer') # number of adult size bottles\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CoughSyrupBottles\", LpMaximize)\n\n# Define the objective function\nobjective = num_kids_bottles + num_adult_bottles\nproblem += objective # maximize the total number of bottles\n\n# Define the constraints\nproblem += 100 * num_kids_bottles + 300 * num_adult_bottles <= 25000 # total amount of cough syrup used can not exceed 25000 ml\nproblem += num_adult_bottles >= 3 * num_kids_bottles # at least 3 times as many adult size bottle must be made as kids size bottles\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of kids size bottles:\", num_kids_bottles.value())\nprint(\"The number of adult size bottles:\", num_adult_bottles.value())\nprint(\"The total number of bottles:\", objective.value())",
        "results": {
            "The number of kids size bottles": "25.0",
            "The number of adult size bottles": "75.0",
            "The total number of bottles": "100.0"
        },
        "formulation": "maximize x+y\nSubject to: \ny >= 3x\nx >= 50\n100x+300y <= 25000 (end)",
        "type": "linear-notable",
        "index": 141,
        "length": 540,
        "var_num": 2
    },
    {
        "question": "The ABC Firefighting Equipment company operates two assembly plants and has two distribution centers. Plant A, located in Atlanta, can produce at most 800 alarm valves per week, while Plant B in Buffalo can produce at most 1000 alarm valves per week. Distribution Center I in Savannah must receive at least 900 alarm valves per week, and Center II in Pittsburgh must receive at least 600 alarm valves per week. The transportation costs per unit from the plants to the centers are provided in the following Table. Formulate the constraint inequalities that define the production limits for the plants and the requirements for the distribution centers, and create the total cost function that needs to be minimized. Solve the mixed constraint problem to find the minimum transportation cost.\n\nTable (Transportation costs per unit from plants to distribution centers):\n| From / To       | Center I (Savannah) | Center II (Pittsburgh) |\n|-----------------|---------------------|------------------------|\n| Plant A (Atlanta) | $8                  | $12                    |\n| Plant B (Buffalo) | $16                 | $4                     |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal transportation quantities from each plant to each center. Let's denote the number of alarm valves from plant A to center I as A1, from plant A to center II as A2, from plant B to center I as B1, and from plant B to center II as B2.\n```Variables\nA1 //number of alarm valves from plant A to center I\nA2 //number of alarm valves from plant A to center II\nB1 //number of alarm valves from plant B to center I\nB2 //number of alarm valves from plant B to center II\nA1, A2, B1, B2 >= 0 and they are integers //non-negative integer variables\n```\n\n# Objective Function:\nWe want to minimize the transportation cost, so the objective function is the sum of the transportation costs from each plant to each center. The transportation cost from plant A to center I is $8 per unit * A1 units. The transportation cost from plant A to center II is $12 per unit * A2 units. The transportation cost from plant B to center I is $16 per unit * B1 units. The transportation cost from plant B to center II is $4 per unit * B2 units. \nSo the total cost function is 8A1 + 12A2 + 16B1 + 4B2.\n```Objective Function\nMinimize: 8A1 + 12A2 + 16B1 + 4B2\n```\n\n# Constraints:\nThe constraints are as follows:\n- Plant A can produce at most 800 alarm valves per week, so the total number of alarm valves from plant A to center I and center II should be less than or equal to 800: A1 + A2 <= 800.\n- Plant B can produce at most 1000 alarm valves per week, so the total number of alarm valves from plant B to center I and center II should be less than or equal to 1000: B1 + B2 <= 1000.\n- Center I must have at least 900 alarm valves per week, so the total number of alarm valves from plant A and plant B to center I should be greater than or equal to 900: A1 + B1 >= 900.\n- Center II must have at least 600 alarm valves per week, so the total number of alarm valves from plant A and plant B to center II should be greater than or equal to 600: A2 + B2 >= 600.\n```Constraints\nA1 + A2 <= 800 //maximum number of alarm valves plant A can produce\nB1 + B2 <= 1000 //maximum number of alarm valves plant B can produce\nA1 + B1 >= 900 //minimum number of alarm valves center I has\nA2 + B2 >= 600 //minimum number of alarm valves center II has\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nA1 = LpVariable(\"A1\", lowBound=0, cat='Integer')\nA2 = LpVariable(\"A2\", lowBound=0, cat='Integer')\nB1 = LpVariable(\"B1\", lowBound=0, cat='Integer')\nB2 = LpVariable(\"B2\", lowBound=0, cat='Integer')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimizeTransportationCost\", LpMinimize)\n\n# Define the objective function\nobjective = 8 * A1 + 12 * A2 + 16 * B1 + 4 * B2\nproblem += objective\n\n# Define the constraints\nproblem += A1 + A2 <= 800\nproblem += B1 + B2 <= 1000\nproblem += A1 + B1 >= 900\nproblem += A2 + B2 >= 600\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of alarm valves from Plant A to Center I:\", A1.value())\nprint(\"The number of alarm valves from Plant A to Center II:\", A2.value())\nprint(\"The number of alarm valves from Plant B to Center I:\", B1.value())\nprint(\"The number of alarm valves from Plant B to Center II:\", B2.value())\nprint(\"The minimum transportation cost:\", objective.value())\n",
        "results": {
            "The number of alarm valves from Plant A to Center I": "800.0",
            "The number of alarm valves from Plant A to Center II": "0.0",
            "The number of alarm valves from Plant B to Center I": "100.0",
            "The number of alarm valves from Plant B to Center II": "600.0",
            "The minimum transportation cost": "10400.0"
        },
        "type": "linear-table",
        "index": 142,
        "length": 1137,
        "var_num": 4
    },
    {
        "question": "A factory has two machines, A and B. Each day, machine A can make 30 items and consumes 100 kWh. Machine B can make 50 items and consumes 120 kWh per day. The factory must produce at least 1000 items per day and has 3000 kWh of electricity available per day. Since there are not many workers that can operate both machines, at most 30% of the machines must be of type B. Further, at least 5 machines of type A should be used. How many of each machine should be used to minimize the total number of machines?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_machine_A = LpVariable(\"NumMachineA\", lowBound=5, cat='Integer') # number of machine A, at least 5\nnum_machine_B = LpVariable(\"NumMachineB\", lowBound=0, cat='Integer') # number of machine B\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FactoryProduction\", LpMinimize)\n\n# Define the objective function\nobjective = num_machine_A + num_machine_B\nproblem += objective # minimize the total number of machines\n\n# Define the constraints\nproblem += 30 * num_machine_A + 50 * num_machine_B >= 1000 # at least 1000 items per day\nproblem += 100 * num_machine_A + 120 * num_machine_B <= 3000 # no more than 3000 kWh\nproblem += num_machine_B <= 0.3 * (num_machine_A + num_machine_B) # at most 30% of the machines must be of type B\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of machine A:\", num_machine_A.value())\nprint(\"The number of machine B:\", num_machine_B.value())\nprint(\"The minimum number of machines:\", objective.value())",
        "results": {
            "The number of machine A": "20.0",
            "The number of machine B": "8.0",
            "The minimum number of machines": "28.0"
        },
        "formulation": "minimize x+y\nSubject to: \n30x+50y >= 1000\n100x+120y <= 3000\ny <= 0.3(x+y)\nx >= 5 (end)",
        "type": "linear-notable",
        "index": 143,
        "length": 507,
        "var_num": 2
    },
    {
        "question": "You are the manager of an apartment complex with 50 units. When you set rent at $800/month, all apartments are rented. As you increase rent by $25/month, one fewer apartment is rented. Maintenance costs run $50/month for each occupied unit. What is the rent that maximizes the total amount of profit?",
        "scenario": "## Define Variables:\nYou are the manager of an apartment complex, and you want to increase the rent to rise the profit. According to the contract, you can only increase the rent by 25 dollars each time.\n// variables: {\"number of times the rent is increased by $25\": \"x\"}, where x >= 0 and x is an integer\n\n## Define Objective Function:\nAt first, the rent is $800/month, and all apartments are rented. Each time the rent is increased by $25, one fewer apartment is rented. Maintenance costs run $50/month for each occupied unit. Please maximizes the total amount of profit?\n// The total profit is the total revenue minus the total maintenance costs. The total revenue is the rent per apartment times the number of rented apartments, which is (800 + 25x)(50 - x). \n// The total maintenance costs are $50/month for each occupied unit, which is 50(50 - x).\n// Therefore, the objective function is: Maximize (800 + 25x)(50 - x) - 50(50 - x)",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"INTEGER\", name=\"x\") # number of times the rent is increased by $25\n\n# Define objective function\nobj = model.addVar(name=\"obj\")\nmodel.addCons(obj == (800 + 25*x)*(50 - x) - 50*(50 - x))\nmodel.setObjective(obj, \"maximize\")\n\n# Add constraints\nmodel.addCons(x >= 0)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The number of times the rent should be increased by $25:\", model.getVal(x))\n    print(\"The maximum total profit: \", model.getVal(model.getObjective()))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The maximum total profit": "39975.0"
        },
        "type": "nonlinear-notable",
        "index": 144,
        "length": 300,
        "var_num": 1
    },
    {
        "question": "We want to construct a cylindrical can with a bottom but no top. It will have a volume of 30 centimeters cubed. Determine the dimensions of the can that will minimize the amount of material needed to construct the can.",
        "scenario": "## Define Variables:\nWe want to construct a cylindrical can with a bottom but no top.\n// variables: {\"radius of the can\": \"r\", \"height of the can\": \"h\"}, where r, h >= 0\n\n## Define Objective Function:\nWe want to minimize the amount of material needed to construct the can.\n// The surface area of the can is 2\u03c0rh + \u03c0r^2. Therefore, the objective function is: Minimize 2\u03c0rh + \u03c0r^2\n\n## Generate Constraint-1:\nThe volume of the can must be 30 cm^3.\n// \u03c0r^2h = 30",
        "code": "from pyscipopt import Model\nimport math\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nr = model.addVar(vtype=\"CONTINUOUS\", name=\"r\") # radius of the can\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the can\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nmodel.addCons(obj == 2*math.pi*r*h + math.pi*r**2)\n\n# Add constraints\nmodel.addCons(math.pi*r**2*h == 30)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The radius of the can: \", model.getVal(r))\n    print(\"The height of the can: \", model.getVal(h))\n    print(\"The minimum amount of material needed: \", model.getVal(obj))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The radius of the can": "2.1217681343696215",
            "The height of the can": "2.1211702341905765",
            "The minimum amount of material needed": "42.42143626839228"
        },
        "type": "nonlinear-notable",
        "index": 145,
        "length": 218,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA farm is cultivating three types of crops: Corn, Wheat, and Soybeans. The farm needs to decide how many acres to allocate to each crop for the upcoming growing season. Additionally, the farm is considering leasing some of its land to another farmer.\n// variables: {\"acres of Corn\": \"CornAcres\", \"acres of Wheat\": \"WheatAcres\", \"acres of Soybeans\": \"SoybeansAcres\", \"acres leased to another farmer\": \"LeasedAcres\"}, where CornAcres, WheatAcres, SoybeansAcres, LeasedAcres >= 0 & all are integers\n\n## Define Objective Function:\nFor Corn, the Expected Profit per Acre is $500, the Cost per Acre is $200, and the Water Usage per Acre is 1000 gallons.\nFor Wheat, the Expected Profit per Acre is $400, the Cost per Acre is $150, and the Water Usage per Acre is 800 gallons.\nFor Soybeans, the Expected Profit per Acre is $300, the Cost per Acre is $100, and the Water Usage per Acre is 500 gallons.\nFor leased land, the Rental Income per Acre is $100.\nThe farm aims to maximize the average profit per acre (which is defined as the total profit divided by the total acres used for all purposes).\n// Total profit for Corn: Profit_Corn = (500 - 200) * CornAcres\n// Total profit for Wheat: Profit_Wheat = (400 - 150) * WheatAcres\n// Total profit for Soybeans: Profit_Soybeans = (300 - 100) * SoybeansAcres\n// Total profit for leased land: Profit_Leased = 100 * LeasedAcres\n// So, the objective function is: Maximize ((Profit_Corn + Profit_Wheat + Profit_Soybeans + Profit_Leased) / (CornAcres + WheatAcres + SoybeansAcres + LeasedAcres))\n\n## Generate Constraint-1:\nThe farm has a total of 1000 acres available for the season.\n// CornAcres + WheatAcres + SoybeansAcres + LeasedAcres <= 1000\n\n## Generate Constraint-2:\nDue to soil conditions, the farm can allocate at most 400 acres to Corn.\n// CornAcres <= 400\n\n## Generate Constraint-3:\nThe farm has a water allocation of 700,000 gallons for the season.\n// 1000 * CornAcres + 800 * WheatAcres + 500 * SoybeansAcres <= 700,000\n\n## Generate Constraint-4:\nThe farm wants to ensure that at least 30 acres are dedicated to each crop.\n// CornAcres >= 30; WheatAcres >= 30; SoybeansAcres >= 30",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nCornAcres = model.addVar(vtype=\"INTEGER\", name=\"CornAcres\") # acres of Corn\nmodel.addCons(CornAcres >= 0)\nWheatAcres = model.addVar(vtype=\"INTEGER\", name=\"WheatAcres\") # acres of Wheat\nmodel.addCons(WheatAcres >= 0)\nSoybeansAcres = model.addVar(vtype=\"INTEGER\", name=\"SoybeansAcres\") # acres of Soybeans\nmodel.addCons(SoybeansAcres >= 0)\nLeasedAcres = model.addVar(vtype=\"INTEGER\", name=\"LeasedAcres\") # acres leased to another farmer\nmodel.addCons(LeasedAcres >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj * (CornAcres + WheatAcres + SoybeansAcres + LeasedAcres) == ((500 - 200) * CornAcres + (400 - 150) * WheatAcres + (300 - 100) * SoybeansAcres + 100 * LeasedAcres))\n\n# Add constraints\nmodel.addCons(CornAcres + WheatAcres + SoybeansAcres + LeasedAcres <= 1000)\nmodel.addCons(CornAcres <= 400)\nmodel.addCons(1000 * CornAcres + 800 * WheatAcres + 500 * SoybeansAcres <= 700000)\nmodel.addCons(CornAcres >= 30)\nmodel.addCons(WheatAcres >= 30)\nmodel.addCons(SoybeansAcres >= 30)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Acres of Corn: \", model.getVal(CornAcres))\n    print(\"Acres of Wheat: \", model.getVal(WheatAcres))\n    print(\"Acres of Soybeans: \", model.getVal(SoybeansAcres))\n    print(\"Acres Leased: \", model.getVal(LeasedAcres))\n    print(\"Average Profit per Acre: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Acres of Corn": "400.0",
            "Acres of Wheat": "30.0",
            "Acres of Soybeans": "30.0",
            "Acres Leased": "0.0",
            "Average Profit per Acre": "290.2173913043478"
        },
        "question": "A farm is cultivating three types of crops: Corn, Wheat, and Soybeans, and is also considering leasing some of its land to another farmer. The farm needs to decide how many acres to allocate to each crop and how many acres to lease for the upcoming growing season. The expected profit per acre, cost per acre, and water usage per acre for each crop, as well as the rental income per acre for leased land, are given in the following Table.\n\n| Crop         | Expected Profit per Acre | Cost per Acre | Water Usage per Acre |\n|--------------|-------------------------|---------------|----------------------|\n| Corn         | $500                    | $200          | 1000 gallons         |\n| Wheat        | $400                    | $150          | 800 gallons          |\n| Soybeans     | $300                    | $100          | 500 gallons          |\n| Leased Land  | $100                    | -             | -                    |\n\nThe farm aims to maximize the average profit per acre (which is defined as the total profit divided by the total acres used for all purposes). The farm has a total of 1000 acres available for the season. Due to soil conditions, the farm can allocate at most 400 acres to Corn. The farm has a water allocation of 700,000 gallons for the season. The farm wants to ensure that at least 30 acres are dedicated to each crop.\n",
        "type": "nonlinear-table",
        "index": 146,
        "length": 1353,
        "var_num": 4
    },
    {
        "question": "A bakery only has 1000 units of blueberries to make pies and small tarts. Each pie needs 5 units of blueberries and each tart needs 3 units of blueberries. Since tarts are easier to eat quickly, the bakery must make at least three times as many tarts as pies. However, the bakery must make at least 30 pies. If each pie sold yields a profit of $8 and each tart sold yields a profit of $5, how many of each should the bakery make to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of pies\", \"name\": \"x\"}, {\"description\": \"number of tarts\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total profit\", \"function\": \"8x + 5y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"blueberry constraint\", \"function\": \"5x + 3y <= 1000\"}, {\"description\": \"number of tarts must be at least three times the number of pies\", \"function\": \"y >= 3x\"}, {\"description\": \"minimum number of pies\", \"function\": \"x >= 30\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_pies = LpVariable(\"NumPies\", lowBound=30, cat='Integer') # number of pies\nnum_tarts = LpVariable(\"NumTarts\", lowBound=0, cat='Integer') # number of tarts\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BakeryProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 8 * num_pies + 5 * num_tarts\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 5 * num_pies + 3 * num_tarts <= 1000 # blueberry constraint\nproblem += num_tarts >= 3 * num_pies # number of tarts must be at least three times the number of pies\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of pies to make:\", num_pies.value())\nprint(\"The number of tarts to make:\", num_tarts.value())\nprint(\"The maximum profit:\", objective.value())\n",
        "results": {
            "The number of pies to make": "32.0",
            "The number of tarts to make": "280.0",
            "The maximum profit": "1656.0"
        },
        "type": "linear-notable",
        "index": 147,
        "length": 448,
        "var_num": 2
    },
    {
        "question": "Comp-Max Computers assembles computers and computer equipment. It is about to start production of three new types of computers, called model X, Y, and Z, respectively. Each type will require assembly time, inspection time, and storage space. The availability of each of these resources is limited. Specifically, available assembly time is 400 hours, available inspection time is 300 hours, and available storage space is 500 cubic feet (about 14.2 ms). The amount of each resource required for the different products is reported in the table below. For model X, assembly time is 1 hours, inspection time 2 hours, storage space 3 cubic feet. For model Y, assembly time is 2 hours, inspection time 3 hours, and storage space 4 cubic feet. For model Z, assembly time is 3 hours, inspection time 4 hours, and storage space 5 cubic feet. Model X earns a profit of $100 per unit, model Y earns a profit of $125 per unit, and model Z earns a profit of $200 per unit. Due to some prior agreements with customers, Comp-Max must produce at least 12 model X computers. In addition, management requires that the fraction of total production made up of model Z computers must not exceed 25%. Formulate a linear program (LP) that will help the manager determine the quantity of each model to produce in order to maximize profit.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for model X, Y, and Z that adhere to the constraints given. Let's denote the number of model X computers as X, the number of model Y computers as Y, and the number of model Z computers as Z.\n```Variables\nX //number of model X computers to produce \nY //number of model Y computers to produce\nZ //number of model Z computers to produce\nX, Y, Z >= 0 and they are integers //non-negative integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function (profit) is given by the sum of the profit from each model. The profit from model X is $100 per unit * X units, the profit from model Y is $125 per unit * Y units, and the profit from model Z is $200 per unit * Z units. Therefore, the objective function is 100X + 125Y + 200Z.\n```Objective Function\nMaximize: 100X + 125Y + 200Z\n```\n\n# Constraints:\nWe have several constraints that limit the availability of resources and the production quantities of each model.\n```Constraints\n1X + 2Y + 3Z <= 400 //available assembly time\n2X + 3Y + 4Z <= 300 //available inspection time\n3X + 4Y + 5Z <= 500 //available storage space\nX >= 12 //minimum number of model X computers\nZ <= 0.25(X + Y + Z) //maximum number of model Z computers\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nX = LpVariable(\"X\", lowBound=12, cat='Integer') # number of model X computers to produce\nY = LpVariable(\"Y\", lowBound=0, cat='Integer') # number of model Y computers to produce\nZ = LpVariable(\"Z\", lowBound=0, cat='Integer') # number of model Z computers to produce\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CompMaxComputers\", LpMaximize)\n\n# Define the objective function\nobjective = 100*X + 125*Y + 200*Z\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 1*X + 2*Y + 3*Z <= 400 # available assembly time\nproblem += 2*X + 3*Y + 4*Z <= 300 # available inspection time\nproblem += 3*X + 4*Y + 5*Z <= 500 # available storage space\nproblem += X >= 12 # minimum number of model X computers\nproblem += Z <= 0.25 * (X + Y + Z) # maximum number of model Z computers\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of model X computers to produce:\", X.value())\nprint(\"The number of model Y computers to produce:\", Y.value())\nprint(\"The number of model Z computers to produce:\", Z.value())\nprint(\"The maximum profit:\", value(problem.objective))\n",
        "results": {
            "The number of model X computers to produce": "150.0",
            "The number of model Y computers to produce": "0.0",
            "The number of model Z computers to produce": "0.0",
            "The maximum profit": "15000.0"
        },
        "type": "linear-table",
        "index": 148,
        "length": 1314,
        "var_num": 3
    },
    {
        "question": "A village hosts a banquet and provides bike and car transportation for everyone. A bike can take 3 people while a car can take 5 people. Since cars are more expensive, at most 40% of the vehicles can be cars. If the village needs to transport at least 500 people, how many of each vehicle should be used to minimize the total number of bikes needed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_bikes = LpVariable(\"NumBikes\", lowBound=0, cat='Integer') # number of bikes\nnum_cars = LpVariable(\"NumCars\", lowBound=0, cat='Integer') # number of cars\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"VillageBanquetTransportation\", LpMinimize)\n\n# Define the objective function\nobjective = num_bikes # minimize the total number of bikes needed\nproblem += objective\n\n# Define the constraints\nproblem += 3 * num_bikes + 5 * num_cars >= 500 # at least 500 people must be transported\nproblem += num_cars <= 0.4 * (num_bikes + num_cars) # at most 40% of the vehicles can be cars\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of bikes needed:\", num_bikes.value())\nprint(\"The number of cars needed:\", num_cars.value())\nprint(\"The total number of vehicles used:\", num_bikes.value() + num_cars.value())",
        "results": {
            "The number of bikes needed": "80.0",
            "The number of cars needed": "53.0",
            "The total number of vehicles used": "133.0"
        },
        "formulation": "minimize x\nSubject to: \ny <= 0.4(x+y)\n3x+5y >= 500 (end)",
        "type": "linear-notable",
        "index": 149,
        "length": 349,
        "var_num": 2
    },
    {
        "question": "The Southfork Feed Company makes a feed mix from four ingredients: oats, corn, soybeans, and a vitamin supplement. The company has a limited supply of each ingredient and specific requirements for the mix composition. The mix must weigh at least 500 pounds. The company seeks to minimize the total cost of the mix. The cost of each ingredient per pound and the available amounts are shown in the following Table. Additionally, the mix must meet the following constraints: At least 30% of the mix must be soybeans (constraint 1), at least 20% of the mix must be the vitamin supplement (constraint 2), the ratio of corn to oats cannot exceed 2 to 1 (constraint 3), and the amount of oats cannot exceed the amount of soybeans (constraint 4).\n\nTable (Ingredients available and cost per pound):\n| Ingredient        | Available (pounds) | Cost per Pound |\n| ----------------- | ------------------ | -------------- |\n| Oats              | 300                | $0.50          |\n| Corn              | 400                | $1.20          |\n| Soybeans          | 200                | $0.60          |\n| Vitamin Supplement| 100                | $2.00          |\n\nDetermine the number of pounds of each ingredient to put in the mix to minimize the total costs while satisfying the mix requirements.",
        "formulation": "# Variables:\nLet's denote the number of pounds of oats as O, the number of pounds of corn as C, the number of pounds of soybeans as S, and the number of pounds of vitamin supplement as V.\n```Variables\nO //number of pounds of oats\nC //number of pounds of corn\nS //number of pounds of soybeans\nV //number of pounds of vitamin supplement\nO, C, S, V >= 0\n```\n\n# Objective Function:\nWe want to minimize the total cost, so the objective function (total cost) is given by the sum of the cost of each ingredient multiplied by its respective weight. The cost of oats is $0.50 per pound * O pounds. The cost of corn is $1.20 per pound * C pounds. The cost of soybeans is $0.60 per pound * S pounds. The cost of the vitamin supplement is $2.00 per pound * V pounds. \nSo the objective function is 0.50O + 1.20C + 0.60S + 2.00V.\n```Objective Function\nMinimize: 0.50O + 1.20C + 0.60S + 2.00V\n```\n\n# Constraints:\n```Constraints\nS >= 0.3(O + C + S + V) //At least 30% of the mix must be soybeans\nV >= 0.2(O + C + S + V) //At least 20% of the mix must be the vitamin supplement\n2C <= O //The ratio of corn to oats cannot exceed 2 to 1\nO <= S //The amount of oats cannot exceed the amount of soybeans\nO + C + S + V >= 500 //The mix must weigh at least 500 pounds\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nO = LpVariable(\"Oats\", lowBound=0, cat='Continuous') # number of pounds of oats\nC = LpVariable(\"Corn\", lowBound=0, cat='Continuous') # number of pounds of corn\nS = LpVariable(\"Soybeans\", lowBound=0, cat='Continuous') # number of pounds of soybeans\nV = LpVariable(\"VitaminSupplement\", lowBound=0, cat='Continuous') # number of pounds of vitamin supplement\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FeedMixProblem\", LpMinimize)\n\n# Define the objective function\nobjective = 0.50 * O + 1.20 * C + 0.60 * S + 2.00 * V\nproblem += objective # minimize the total cost\n\n# Define the constraints\nproblem += S >= 0.3 * (O + C + S + V) # At least 30% of the mix must be soybeans\nproblem += V >= 0.2 * (O + C + S + V) # At least 20% of the mix must be the vitamin supplement\nproblem += C <= 2 * O # The ratio of corn to oats cannot exceed 2 to 1\nproblem += O <= S # The amount of oats cannot exceed the amount of soybeans\nproblem += O + C + S + V >= 500 # The mix must weigh at least 500 pounds\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of pounds of oats:\", O.value())\nprint(\"The number of pounds of corn:\", C.value())\nprint(\"The number of pounds of soybeans:\", S.value())\nprint(\"The number of pounds of vitamin supplement:\", V.value())\nprint(\"The total cost of the mix:\", objective.value())\n",
        "results": {
            "The number of pounds of oats": "200.0",
            "The number of pounds of corn": "0.0",
            "The number of pounds of soybeans": "200.0",
            "The number of pounds of vitamin supplement": "100.0",
            "The total cost of the mix": "420.0"
        },
        "type": "linear-table",
        "index": 150,
        "length": 1285,
        "var_num": 4
    },
    {
        "question": "A client asks his stockbroker to invest $100,000 for maximum annual income, subject to the three conditions: Spread the investment over no more than three different stocks. Put no more than 40 percent of the money into any one stock. Put a minimum of $10,000 into an oil stock. The broker has identified three stocks for investment. Their estimated annual returns per share and price per share are shown in the following table: Stock, Price and annual returns are, (Oil, $120, $11), (Auto, $52, $4), (Pharmaceutical, $18, $2).",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal allocation of the investment among the three stocks. Let's denote the number of shares in the oil stock as x, the number of shares in the auto stock as y, and the number of shares in the pharmaceutical stock as z.\n```Variables\nx //number of shares in the oil stock\ny //number of shares in the auto stock\nz //number of shares in the pharmaceutical stock\nx, y, z >= 0 and they are integers //non-negativity integer variables\n```\n\n# Objective Function:\nWe want to maximize the annual investment income, so the objective function is given by the sum of the annual returns from each stock. The annual investment income is 11x + 4y + 2z.\n```Objective Function\nMaximize: 11x + 4y + 2z\n```\n\n# Constraints:\n1. The available investment is $100,000, so the total cost of the shares should not exceed this amount. The cost of the shares is given by the sum of the price per share multiplied by the number of shares for each stock. Therefore, the constraint is 120x + 52y + 18z <= 100,000.\n2. The maximum investment in any one stock is 40% of the total investment. Therefore, the constraints are 120x <= 0.4 * 100,000, 52y <= 0.4 * 100,000, and 18z <= 0.4 * 100,000.\n3. The minimum investment in the oil stock is $10,000. Therefore, the constraint is 120x >= 10,000.\n```Constraints\n120x + 52y + 18z <= 100,000 //available investment\n120x <= 0.4 * 100,000 //maximum investment in oil stock\n52y <= 0.4 * 100,000 //maximum investment in auto stock\n18z <= 0.4 * 100,000 //maximum investment in pharmaceutical stock\n120x >= 10,000 //minimum investment in oil stock\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"OilShares\", lowBound=0, cat='Integer') # number of shares in the oil stock\ny = LpVariable(\"AutoShares\", lowBound=0, cat='Integer') # number of shares in the auto stock\nz = LpVariable(\"PharmaShares\", lowBound=0, cat='Integer') # number of shares in the pharmaceutical stock\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeAnnualIncome\", LpMaximize)\n\n# Define the objective function\nproblem += 11 * x + 4 * y + 2 * z # maximize the annual investment income\n\n# Define the constraints\nproblem += 120 * x + 52 * y + 18 * z <= 100000 # available investment\nproblem += 120 * x <= 0.4 * 100000 # maximum investment in oil stock\nproblem += 52 * y <= 0.4 * 100000 # maximum investment in auto stock\nproblem += 18 * z <= 0.4 * 100000 # maximum investment in pharmaceutical stock\nproblem += 120 * x >= 10000 # minimum investment in oil stock\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of oil stock shares:\", x.value())\nprint(\"The number of auto stock shares:\", y.value())\nprint(\"The number of pharmaceutical stock shares:\", z.value())\nprint(\"The maximum annual income:\", value(problem.objective))\n",
        "results": {
            "The number of oil stock shares": "333.0",
            "The number of auto stock shares": "385.0",
            "The number of pharmaceutical stock shares": "2222.0",
            "The maximum annual income": "9647.0"
        },
        "type": "linear-table",
        "index": 151,
        "length": 526,
        "var_num": 3
    },
    {
        "question": "A grape farmer transports his grapes in either small crates or large crates. A small crate can take 200 grapes while a large crate can take 500.  Because his customers prefer smaller crates, at least 3 times as many small crates must be used than large crates. The farmer has available at most 100 small crates and at most 50 large crates. In addition, his truck can take at most 60 crates total and he must use at least 10 large crates. How many of each crate should he use to maximize the total number of grapes he can transport?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_small_crates = LpVariable(\"NumSmallCrates\", lowBound=0, upBound=100, cat='Integer') # number of small crates\nnum_large_crates = LpVariable(\"NumLargeCrates\", lowBound=10, upBound=50, cat='Integer') # number of large crates\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"GrapeTransport\", LpMaximize)\n\n# Define the objective function\nobjective = 200 * num_small_crates + 500 * num_large_crates\nproblem += objective # maximize the total number of grapes transported\n\n# Define the constraints\nproblem += num_small_crates + num_large_crates <= 60 # the total crates must be at most 60\nproblem += num_small_crates >= 3 * num_large_crates # small crates used should be at least three times large crates used\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of small crates used:\", num_small_crates.value())\nprint(\"The number of large crates used:\", num_large_crates.value())\nprint(\"The total number of grapes transported:\", objective.value())",
        "results": {
            "The number of small crates used": "45.0",
            "The number of large crates used": "15.0",
            "The total number of grapes transported": "16500.0"
        },
        "formulation": "maximize 200x+500y\nSubject to: \nx >= 3y\nx <= 100\ny <= 50\nx+y <= 60\ny >= 10 (end)",
        "type": "linear-notable",
        "index": 152,
        "length": 531,
        "var_num": 2
    },
    {
        "question": "Emma is required to take two medicines AX7 and BY5 every day. She needs to take at least 6 grams of AX7 and 8 grams of BY5 every day. These medicines are available in two pills named Klun and Tao. One pill of Klun contains 1.5 grams of AX7 while one pill of Tao contains 1.3 grams of AX7. On the other hand, one pill of Klun contains 1.8 grams of BY5 and one pill of Tao contains 2 grams of BY5. The cost per pill of Klun is $2.6 and the cost per pill of Tao is $3.2. Formulate an LP such that the medicine requirement can be fulfilled at the lowest cost.",
        "formulation": "{\"variable\": [{\"description\": \"number of Klun pills\", \"name\": \"x\"}, {\"description\": \"number of Tao pills\", \"name\": \"y\"}], \"objective\": [{\"description\": \"cost of pills\", \"function\": \"2.6x + 3.2y\", \"sense\": \"Minimize\"}], \"constraint\": [{\"description\": \"AX7 requirement\", \"function\": \"1.5x + 1.3y >= 6\"}, {\"description\": \"BY5 requirement\", \"function\": \"1.8x + 2y >= 8\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_Klun_pills = LpVariable(\"NumKlunPills\", lowBound=0, cat='Integer')  # number of Klun pills\nnum_Tao_pills = LpVariable(\"NumTaoPills\", lowBound=0, cat='Integer')  # number of Tao pills\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MedicineCostMinimization\", LpMinimize)\n\n# Define the objective function\nobjective = 2.6 * num_Klun_pills + 3.2 * num_Tao_pills\nproblem += objective  # minimize the cost of pills\n\n# Define the constraints\nproblem += 1.5 * num_Klun_pills + 1.3 * num_Tao_pills >= 6  # AX7 requirement\nproblem += 1.8 * num_Klun_pills + 2 * num_Tao_pills >= 8  # BY5 requirement\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of Klun pills:\", num_Klun_pills.value())\nprint(\"The number of Tao pills:\", num_Tao_pills.value())\nprint(\"The total cost is: ${}\".format(objective.value()))\n",
        "results": {
            "The number of Klun pills": "5",
            "The number of Tao pills": "0.0",
            "The total cost is": "13"
        },
        "type": "linear-notable",
        "index": 153,
        "length": 555,
        "var_num": 2
    },
    {
        "question": "Gabriel is growing pumpkins and carrots on his farm. He has 100 acres available on which he must grow a minimum of 7 acres of pumpkins and a minimum of 12 acres of carrots to meet demands. The profit per pumpkin is $2.5 and the profit per carrot is $3.4. He prefers to grow more carrots than pumpkins but limitations in his workforce allow him to grow at most three times the amount of carrots as pumpkins. How many of each produce should Gabriel grow in order to maximize his profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of acres of pumpkins\", \"name\": \"x\"}, {\"description\": \"number of acres of carrots\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit from selling pumpkins and carrots\", \"function\": \"2.5x + 3.4y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"total acres available\", \"function\": \"x + y <= 100\"}, {\"description\": \"minimum acres of pumpkins\", \"function\": \"x >= 7\"}, {\"description\": \"minimum acres of carrots\", \"function\": \"y >= 12\"}, {\"description\": \"workforce limitations\", \"function\": \"y <= 3x\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_acres_pumpkins = LpVariable(\"NumAcresPumpkins\", lowBound=7, cat='Continuous') # number of acres of pumpkins\nnum_acres_carrots = LpVariable(\"NumAcresCarrots\", lowBound=12, cat='Continuous') # number of acres of carrots\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FarmProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 2.5 * num_acres_pumpkins + 3.4 * num_acres_carrots\nproblem += objective # maximize the total profit from pumpkins and carrots\n\n# Define the constraints\nproblem += num_acres_pumpkins + num_acres_carrots <= 100 # total acres available\nproblem += num_acres_carrots <= 3 * num_acres_pumpkins # workforce limitations\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of acres of pumpkins to plant:\", num_acres_pumpkins.value())\nprint(\"The number of acres of carrots to plant:\", num_acres_carrots.value())\nprint(\"The maximum profit:\", objective.value())\n",
        "results": {
            "The number of acres of pumpkins to plant": "25.0",
            "The number of acres of carrots to plant": "75.0",
            "The maximum profit": "317.5"
        },
        "type": "linear-notable",
        "index": 154,
        "length": 484,
        "var_num": 2
    },
    {
        "question": "A fruit farmer has 80 acres to grow peaches and nectarines. Peaches take 3 hours to plant per acre while nectarines take 4.5 hours to plant per acre. Peaches take 2 hours to water per acre while nectarines take 3 hours to water per acre. The farmer has 300 hours available for planting and 250 hours available for watering. If the profit per acre of peaches is $200 and the profit per acre of nectarines is $175, how many acres of each should be grown to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of acres growing peaches\", \"name\": \"x\"}, {\"description\": \"number of acres growing nectarines\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total profit\", \"function\": \"200x + 175y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"total acreage constraint\", \"function\": \"x + y <= 80\"}, {\"description\": \"time constraint for planting\", \"function\": \"3x + 4.5y <= 300\"}, {\"description\": \"time constraint for watering\", \"function\": \"2x + 3y <= 250\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_acres_peaches = LpVariable(\"NumAcresPeaches\", lowBound=0, cat='Continuous') # number of acres growing peaches\nnum_acres_nectarines = LpVariable(\"NumAcresNectarines\", lowBound=0, cat='Continuous') # number of acres growing nectarines\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FruitFarmerProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 200 * num_acres_peaches + 175 * num_acres_nectarines\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += num_acres_peaches + num_acres_nectarines <= 80 # total acreage constraint\nproblem += 3 * num_acres_peaches + 4.5 * num_acres_nectarines <= 300 # time constraint for planting\nproblem += 2 * num_acres_peaches + 3 * num_acres_nectarines <= 250 # time constraint for watering\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Number of acres for peaches:\", num_acres_peaches.value())\nprint(\"Number of acres for nectarines:\", num_acres_nectarines.value())\nprint(\"Total profit:\", objective.value())\n",
        "results": {
            "Number of acres for peaches": "80.0",
            "Number of acres for nectarines": "0.0",
            "Total profit": "16000.0"
        },
        "type": "linear-notable",
        "index": 155,
        "length": 471,
        "var_num": 2
    },
    {
        "question": "The United Charities annual fund-raising drive is scheduled to take place next week. Donations are collected during the day and night, by telephone, and through personal contact. The average donation resulting from each type of contact is shown in the following Table. The charity group has enough donated gasoline and cars to make at most 300 personal contacts during one day and night combined. The volunteer minutes required to conduct each type of interview are also shown in the Table. The charity has 20 volunteer hours available each day and 40 volunteer hours each night. The chairperson of the fund-raising drive wants to know how many different types of contacts to schedule in a 24-hour period (i.e., 1 day and 1 night) to maximize the total donations.\n\nTable (Average donation and time required for each type of contact):\n| Contact Type | Time of Day | Average Donation | Interview Time (min) |\n| ------------ | ----------- | ---------------- | -------------------- |\n| Phone        | Day         | $2.00 (x_1)      | 6 (x_1)              |\n| Phone        | Night       | $3.00 (x_2)      | 5 (x_2)              |\n| Personal     | Day         | $4.00 (x_3)      | 15 (x_3)             |\n| Personal     | Night       | $7.00 (x_4)      | 12 (x_4)             |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal number of each type of contact to schedule in a 24-hour period. Let's denote the number of phone interviews during the day as D1, the number of phone interviews at night as N1, the number of personal interviews during the day as D2, and the number of personal interviews at night as N2.\n```Variables\nD1 //number of phone interviews during the day\nN1 //number of phone interviews at night\nD2 //number of personal interviews during the day\nN2 //number of personal interviews at night\nD1, N1, D2, N2 >= 0 and they are integers //non-negative integer variables\n```\n\n# Objective Function:\nWe want to maximize the total donations, so the objective function is given by the sum of the donations from each type of contact. The average donation for each type of contact is as follows: \n- Phone Interview during the day: $2.00 (D1)\n- Phone Interview at night: $3.00 (N1)\n- Personal Interview during the day: $4.00 (D2)\n- Personal Interview at night: $7.00 (N2)\n\nTherefore, the objective function is 2D1 + 3N1 + 4D2 + 7N2.\n```Objective Function\nMaximize: 2D1 + 3N1 + 4D2 + 7N2\n```\n\n# Constraints:\n- Constraint on the total number of personal contacts: The charity group has enough donated gasoline and cars to make at most 300 personal contacts during one day and night combined. Therefore, the constraint is D2 + N2 <= 300.\n- Constraint on volunteer minutes for phone interviews during the day: The volunteer minutes required to conduct each type of interview are as follows: \n  - Phone Interview during the day: 6 minutes (D1)\n  - Personal Interview during the day: 15 minutes (D2)\n  The charity has 20 volunteer hours available each day, which is equivalent to 1200 minutes. Therefore, the constraint is 6D1 + 15D2 <= 1200.\n- Constraint on volunteer minutes for phone interviews at night: The volunteer minutes required to conduct each type of interview are as follows: \n  - Phone Interview at night: 5 minutes (N1)\n  - Personal Interview at night: 12 minutes (N2)\n  The charity has 40 volunteer hours available each night, which is equivalent to 2400 minutes. Therefore, the constraint is 5N1 + 12N2 <= 2400.\n```Constraints\nD2 + N2 <= 300\n6D1 + 15D2 <= 1200\n5N1 + 12N2 <= 2400\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nD1 = LpVariable(\"DayPhoneInterviews\", lowBound=0, cat='Integer')\nN1 = LpVariable(\"NightPhoneInterviews\", lowBound=0, cat='Integer')\nD2 = LpVariable(\"DayPersonalInterviews\", lowBound=0, cat='Integer')\nN2 = LpVariable(\"NightPersonalInterviews\", lowBound=0, cat='Integer')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"UnitedCharitiesFundRaising\", LpMaximize)\n\n# Define the objective function\nproblem += 2 * D1 + 3 * N1 + 4 * D2 + 7 * N2\n\n# Define the constraints\nproblem += D2 + N2 <= 300\nproblem += 6 * D1 + 15 * D2 <= 1200\nproblem += 5 * N1 + 12 * N2 <= 2400\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Number of day phone interviews:\", D1.value())\nprint(\"Number of night phone interviews:\", N1.value())\nprint(\"Number of day personal interviews:\", D2.value())\nprint(\"Number of night personal interviews:\", N2.value())\nprint(\"Total donations:\", value(problem.objective))\n",
        "results": {
            "Number of day phone interviews": "200.0",
            "Number of night phone interviews": "480.0",
            "Number of day personal interviews": "0.0",
            "Number of night personal interviews": "0.0",
            "Total donations": "1840.0"
        },
        "type": "linear-table",
        "index": 156,
        "length": 1271,
        "var_num": 4
    },
    {
        "scenario": "## Define Variables:\nA company is planning to optimize its energy consumption by installing solar panels and wind turbines. The company has identified three types of solar panels (A, B, C) and two types of wind turbines (X, Y) for installation.\n// variables: {\"number of solar panels A\": \"SolarA\", \"number of solar panels B\": \"SolarB\", \"number of solar panels C\": \"SolarC\", \"number of wind turbines X\": \"WindX\", \"number of wind turbines Y\": \"WindY\"}, where SolarA, SolarB, SolarC, WindX, WindY >= 0 & SolarA, SolarB, SolarC, WindX, WindY are integers\n\n## Define Objective Function:\nThe cost of solar panel A is $500, B is $700, and C is $900. The cost of wind turbine X is $1000, and Y is $1200. The energy output of solar panel A is 100 kWh, B is 150 kWh, and C is 200 kWh. The energy output of wind turbine X is 300 kWh, and Y is 400 kWh. The company wants to minimize the cost per unit of energy produced.\n// total cost: Cost = 500 * SolarA + 700 * SolarB + 900 * SolarC + 1000 * WindX + 1200 * WindY\n// total energy output: Energy = 100 * SolarA + 150 * SolarB + 200 * SolarC + 300 * WindX + 400 * WindY\n// So, the objective function is: Minimize Cost / Energy\n\n## Generate Constraint-1:\nThe company has a budget of $50,000 for the installation.\n// 500 * SolarA + 700 * SolarB + 900 * SolarC + 1000 * WindX + 1200 * WindY <= 50000\n\n## Generate Constraint-2:\nThe company aims to produce at least 10,000 kWh of energy.\n// 100 * SolarA + 150 * SolarB + 200 * SolarC + 300 * WindX + 400 * WindY >= 10000\n\n## Generate Constraint-3:\nAt least 20% of the budget should be spent on solar panels.\n// 500 * SolarA + 700 * SolarB + 900 * SolarC >= 0.2 * 50000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nSolarA = model.addVar(vtype=\"INTEGER\", name=\"SolarA\") # number of solar panels A\nmodel.addCons(SolarA >= 0)\nSolarB = model.addVar(vtype=\"INTEGER\", name=\"SolarB\") # number of solar panels B\nmodel.addCons(SolarB >= 0)\nSolarC = model.addVar(vtype=\"INTEGER\", name=\"SolarC\") # number of solar panels C\nmodel.addCons(SolarC >= 0)\nWindX = model.addVar(vtype=\"INTEGER\", name=\"WindX\") # number of wind turbines X\nmodel.addCons(WindX >= 0)\nWindY = model.addVar(vtype=\"INTEGER\", name=\"WindY\") # number of wind turbines Y\nmodel.addCons(WindY >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nmodel.addCons(obj == (500 * SolarA + 700 * SolarB + 900 * SolarC + 1000 * WindX + 1200 * WindY) / (100 * SolarA + 150 * SolarB + 200 * SolarC + 300 * WindX + 400 * WindY))\n\n# Add constraints\nmodel.addCons(500 * SolarA + 700 * SolarB + 900 * SolarC + 1000 * WindX + 1200 * WindY <= 50000)\nmodel.addCons(100 * SolarA + 150 * SolarB + 200 * SolarC + 300 * WindX + 400 * WindY >= 10000)\nmodel.addCons(500 * SolarA + 700 * SolarB + 900 * SolarC >= 0.2 * 50000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Total Cost per Unit of Energy: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Total Cost per Unit of Energy": "3.22077922077922"
        },
        "question": "A company is planning to optimize its energy consumption by installing solar panels and wind turbines. The company has identified three types of solar panels (A, B, C) and two types of wind turbines (X, Y) for installation. The cost and energy output for each type of equipment are given in the following Table.\n\n| Equipment | Cost | Energy Output |\n|-----------|------|---------------|\n| Solar A   | $500 | 100 kWh       |\n| Solar B   | $700 | 150 kWh       |\n| Solar C   | $900 | 200 kWh       |\n| Wind X    | $1000| 300 kWh       |\n| Wind Y    | $1200| 400 kWh       |\n\nThe company has a budget of $50,000 for the installation. The company aims to produce at least 10,000 kWh of energy. At least 20% of the budget should be spent on solar panels. The company wants to minimize the cost per unit of energy produced.\n",
        "type": "nonlinear-table",
        "index": 157,
        "length": 817,
        "var_num": 5
    },
    {
        "question": "An office supply company makes two types of printers: color printers and black and white printers. Different sections of the factory with different teams produce each printer. The color printer team can produce at most 20 color printers per day while the black and white printer team can produce at most 30 black and white printers per day. Both teams require use of the same paper tray installing machine and this machine can make at most 35 printers of either type each day. Color printers generate a profit of $200 per printer while black and white printers generate a profit of $70 per printer. How many of each printer should be made to maximize the company's profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_color_printers = LpVariable(\"NumColorPrinters\", lowBound=0, cat='Integer') # number of color printers\nnum_bw_printers = LpVariable(\"NumBWPrinters\", lowBound=0, cat='Integer') # number of black and white printers\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"OfficeSupplyProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 200 * num_color_printers + 70 * num_bw_printers\nproblem += objective # maximize the profit\n\n# Define the constraints\nproblem += num_color_printers <= 20 # at most 20 color printers per day\nproblem += num_bw_printers <= 30 # at most 30 black and white printers per day\nproblem += num_color_printers + num_bw_printers <= 35 # at most 35 printers of either type each day\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of color printers:\", num_color_printers.value())\nprint(\"The number of black and white printers:\", num_bw_printers.value())\nprint(\"The maximum profit:\", objective.value())",
        "results": {
            "The number of color printers": "20.0",
            "The number of black and white printers": "15.0",
            "The maximum profit": "5050.0"
        },
        "formulation": "maximize 200x+70y\nSubject to: \nx <= 20\ny <= 30\nx+y <= 35 (end)",
        "type": "linear-notable",
        "index": 158,
        "length": 672,
        "var_num": 2
    },
    {
        "question": "A rope is strung from the tops of two vertical poles(pole A is 4 meters high and pole B is 5 meters high). The distance between the poles is 8 meters, and the rope it is tied to a point on the ground. Please find distance from the point on the ground to the base of the pole A that will minimize the length of the rope.",
        "scenario": "## Define Variables:\nA rope is strung from the tops of two vertical poles(pole A is 4 meters high and pole B is 5 meters high). The distance between the poles is 8 meters, and the rope it is tied to a point on the ground.\n// variables: {\"distance from the point on the ground to the base of the pole A\": \"x\"}, where x >= 0\n\n## Define Objective Function:\nPlease find distance from the point on the ground to the base of the pole A that will minimize the length of the rope.\n// The length of the rope from the point on the ground to the top of pole A is sqrt(x^2 + 4^2)\n// And the length of the rope from the point on the ground to the top of pole B is sqrt((8 - x)^2 + 5^2).\n// So, the objective function is: Minimum sqrt(x^2 + 16) + sqrt((8 - x)^2 + 5^2)",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"CONTINUOUS\", name=\"x\") # distance from the point on the ground to the base of the pole A\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nmodel.addCons(obj == ((x**2 + 16)**0.5 + ((8 - x)**2 + 5**2)**0.5))\n\n# Add constraints\nmodel.addCons(x >= 0)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The distance from the point on the ground to the base of the pole A:\", model.getVal(x))\n    print(\"The length of the rope required to rescue him: \", model.getVal(obj))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The distance from the point on the ground to the base of the pole A": "3.555788727193115",
            "The length of the rope required to rescue him": "12.041593987675089"
        },
        "type": "nonlinear-notable",
        "index": 159,
        "length": 319,
        "var_num": 1
    },
    {
        "question": "A bakery uses a stand-mixer and a slow bake oven to make bread and cookies. Each machine can run for at most 3000 hours per year. To bake a loaf of bread takes 1 hour in the stand mixer and 3 hours in the oven. A batch of cookies requires 0.5 hours in the mixer and 1 hour in the oven. The profit per loaf of bread is $5 and the profit per batch of cookies is $3. How should the bakery operate to maximize total profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_loaf = LpVariable(\"NumLoaves\", lowBound=0, cat='Continuous') # number of loaves of bread\nnum_cookies = LpVariable(\"NumCookies\", lowBound=0, cat='Continuous') # number of batches of cookies\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BakeryOperation\", LpMaximize)\n\n# Define the objective function\nobjective = 5 * num_loaf + 3 * num_cookies\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += num_loaf + 0.5 * num_cookies <= 3000 # stand mixer constraint\nproblem += 3 * num_loaf + num_cookies <= 3000 # slow bake oven constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of loaves of bread:\", num_loaf.value())\nprint(\"The number of batches of cookies:\", num_cookies.value())\nprint(\"Total profit:\", objective.value())",
        "results": {
            "The number of loaves of bread": "0.0",
            "The number of batches of cookies": "3000.0",
            "Total profit": "9000.0"
        },
        "formulation": "maximize 5x+3y\nSubject to: \n1x+0.5y <= 3000\n3x+1y <= 3000 (end)",
        "type": "linear-notable",
        "index": 160,
        "length": 419,
        "var_num": 2
    },
    {
        "question": "An ice cream store can buy two machines, a counter-top sized one and a fridge sized one, to make ice cream. The counter-top sized one can produce 80 cones worth of ice cream every day while the fridge sizes one can produce 150 cones worth of ice cream every day. The counter-top sized machine outputs 50 units of heat while the fridge sized one outputs 70 units of heat. The ice cream store can output at most 500 units of heat per day and must produce at least 1000 cones worth of ice cream. How many of each machine should they buy to minimize the total number of machines needed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_counter_top_machines = LpVariable(\"NumCounterTopMachines\", lowBound=0, cat='Integer') # number of counter-top sized machines\nnum_fridge_size_machines = LpVariable(\"NumFridgeSizeMachines\", lowBound=0, cat='Integer') # number of fridge-sized machines\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"IceCreamMachines\", LpMinimize)\n\n# Define the objective function\nobjective = num_counter_top_machines + num_fridge_size_machines\nproblem += objective # minimize the total number of machines needed\n\n# Define the constraints\nproblem += 50 * num_counter_top_machines + 70 * num_fridge_size_machines <= 500 # heat output limit\nproblem += 80 * num_counter_top_machines + 150 * num_fridge_size_machines >= 1000 # ice cream production requirement\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of counter-top sized machines:\", num_counter_top_machines.value())\nprint(\"The number of fridge-sized machines:\", num_fridge_size_machines.value())\nprint(\"Total number of machines needed:\", objective.value())",
        "results": {
            "The number of counter-top sized machines": "0.0",
            "The number of fridge-sized machines": "7.0",
            "Total number of machines needed": "7.0"
        },
        "formulation": "minimize x+y\nSubject to: \n50x+70y <= 500\n80x+150y >= 1000 (end)",
        "type": "linear-notable",
        "index": 161,
        "length": 582,
        "var_num": 2
    },
    {
        "question": "To protect soil from erosion, some farmers plant winter cover crops such as winter wheat and rye. In addition to conserving soil, cover crops often increase crop yields in the row crops that follow in spring and summer. Suppose that a farmer has 800 acres of land and plans to plant winter wheat and rye. The input cost for I acre for each crop is given in the table along with the cost for machinery and labor. The profit for 1 acre of each crop is given in the last column. Input Cost per Acre, Labor/Machinery Cost per Acre, Profit per Acre. Wheat: [$90, $50, $42], Rye: [$120, $40, $35]. Suppose the farmer has budgeted a maximum of $90,000 for input costs and a maximum of $36,000 for labor and machinery. Determine the number of acres of each crop that the farmer should plant to maximize profit. (Assume that all crops will be sold.). What is the maximum profit? If the profit per acre for wheat were $40 and the profit per acre for rye were $45, how many acres of each crop should be planted to maximize profit?",
        "formulation": "# Variables:\nTo determine the optimal number of acres of winter wheat and rye to plant, let's denote the number of acres of winter wheat as W and the number of acres of rye as R.\n```Variables\nW //number of acres of winter wheat planted\nR //number of acres of rye planted\nW, R >= 0 //non-negative variables\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function (profit) is given by the sum of the profit from winter wheat and rye, which is 42W + 35R.\n```Objective Function\nMaximize: 42W + 35R\n```\n\n# Constraints:\n```Constraints\nW + R <= 800 //land conservation constraint\n90W + 120R <= 90000 //input cost constraint\n50W + 40R <= 36000 //labor and machinery cost constraint\n```\n\nTo find the optimal solution, we need to solve this linear programming problem.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nW = LpVariable(\"WheatAcres\", lowBound=0, cat='Continuous') # number of acres of winter wheat planted\nR = LpVariable(\"RyeAcres\", lowBound=0, cat='Continuous') # number of acres of rye planted\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nproblem += 42 * W + 35 * R # maximize the total profit\n\n# Define the constraints\nproblem += W + R <= 800 # land conservation constraint\nproblem += 90 * W + 120 * R <= 90000 # input cost constraint\nproblem += 50 * W + 40 * R <= 36000 # labor and machinery cost constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of acres of winter wheat to plant:\", W.value())\nprint(\"The number of acres of rye to plant:\", R.value())\nprint(\"The maximum profit:\", value(problem.objective))\n\n# Change the profit per acre for wheat to $40 and for rye to $45 and resolve\nproblem += 40 * W + 45 * R # new objective function with updated profits\n\n# Solve the problem again\nstatus = problem.solve()\n\n# Output the new answer\nprint(\"New optimal number of acres of winter wheat to plant:\", W.value())\nprint(\"New optimal number of acres of rye to plant:\", R.value())\nprint(\"New maximum profit:\", value(problem.objective))\n",
        "results": {
            "The number of acres of winter wheat to plant": "400.0",
            "The number of acres of rye to plant": "400.0",
            "The maximum profit": "30800.0",
            "New optimal number of acres of winter wheat to plant": "200.0",
            "New optimal number of acres of rye to plant": "600.0",
            "New maximum profit": "35000.0"
        },
        "type": "linear-table",
        "index": 162,
        "length": 1019,
        "var_num": 5
    },
    {
        "question": "A company makes two types of cars, a SUV and a sedan. The SUV takes 200 minutes on the manufacturing line and 120 minutes of testing. The sedan takes 150 minutes on the manufacturing line and 100 minutes of testing. The company has 20000 minutes available on the manufacturing line and 10000 minutes available for testing. If the profit per SUV is $10000 and the profit per sedan is $9000, how many of each should they make to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of SUVs\", \"name\": \"x\"}, {\"description\": \"number of sedans\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total profit\", \"function\": \"10000x + 9000y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"manufacturing line constraint\", \"function\": \"200x + 150y <= 20000\"}, {\"description\": \"testing constraint\", \"function\": \"120x + 100y <= 10000\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_SUVs = LpVariable(\"NumSUVs\", lowBound=0, cat='Integer') # number of SUVs\nnum_sedans = LpVariable(\"NumSedans\", lowBound=0, cat='Integer') # number of sedans\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CarManufacturing\", LpMaximize)\n\n# Define the objective function\nobjective = 10000 * num_SUVs + 9000 * num_sedans\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 200 * num_SUVs + 150 * num_sedans <= 20000 # manufacturing line constraint\nproblem += 120 * num_SUVs + 100 * num_sedans <= 10000 # testing constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of SUVs to produce:\", num_SUVs.value())\nprint(\"The number of sedans to produce:\", num_sedans.value())\nprint(\"The maximum total profit:\", objective.value())\n",
        "results": {
            "The number of SUVs to produce": "0.0",
            "The number of sedans to produce": "100.0",
            "The maximum total profit": "900000.0"
        },
        "type": "linear-notable",
        "index": 163,
        "length": 443,
        "var_num": 2
    },
    {
        "question": "A shipping company can purchase regular and hybrid vans to make deliveries. A regular van can deliver 500 packages per day and produces 200 units of pollutants. A hybrid van can deliver 300 packages per day and produces 100 units of pollutants. Due to a new environmental law, they can produce at most 7000 units of pollutants per day. However, the company needs to be able to deliver at least 20000 packages per day. How many of each type of van should they buy to minimize the total number of vans needed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_regular_vans = LpVariable(\"NumRegularVans\", lowBound=0, cat='Integer') # number of regular vans\nnum_hybrid_vans = LpVariable(\"NumHybridVans\", lowBound=0, cat='Integer') # number of hybrid vans\n\n# Define the question as a minimum problem\nproblem = LpProblem(\"VanSelection\", LpMinimize)\n\n# Define the objective function\nobjective = num_regular_vans + num_hybrid_vans\nproblem += objective # minimize the total number of vans needed\n\n# Define the constraints\nproblem += 500 * num_regular_vans + 300 * num_hybrid_vans >= 20000 # they must be able to deliver at least 20000 packages per day \nproblem += 200 * num_regular_vans + 100 * num_hybrid_vans <= 7000 # can produce at most 7000 units of pollutants per day \n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of regular vans:\", num_regular_vans.value())\nprint(\"The number of hybrid vans:\", num_hybrid_vans.value())# Define the question as a maximum or minimum problem\n# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_regular_vans = LpVariable(\"NumRegularVans\", lowBound=0, cat='Integer') # number of regular vans\nnum_hybrid_vans = LpVariable(\"NumHybridVans\", lowBound=0, cat='Integer') # number of hybrid vans\n\n# Define the question as a minimum problem\nproblem = LpProblem(\"VanSelection\", LpMinimize)\n\n# Define the objective function\nobjective = num_regular_vans + num_hybrid_vans\nproblem += objective # minimize the total number of vans needed\n\n# Define the constraints\nproblem += 500 * num_regular_vans + 300 * num_hybrid_vans >= 20000 # they must be able to deliver at least 20000 packages per day \nproblem += 200 * num_regular_vans + 100 * num_hybrid_vans <= 7000 # can produce at most 7000 units of pollutants per day \n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of regular vans:\", num_regular_vans.value())\nprint(\"The number of hybrid vans:\", num_hybrid_vans.value())",
        "results": {
            "The number of regular vans": "10.0",
            "The number of hybrid vans": "50.0"
        },
        "formulation": "minimize x+y\nSubject to: \n200x+100y <= 7000\n500x+300y >= 20000 (end)",
        "type": "linear-notable",
        "index": 164,
        "length": 507,
        "var_num": 3
    },
    {
        "question": "Bangs Leisure Chairs produces three types of hand- crafted outdoor chairs that are popular for beach pool, and patios: sling chairs, Adirondack chairs, and hammocks. The unit profit for these products is $40, $100, and $90, respectively. Each type of chair requires cutting, assembling, and finishing. The owner is retired and is willing to work six hours/ day for five days/week, so has 120 hours available each month. He does not want to spend more than 50 hours each month on any one activity (that is, cutting, assembling, and finishing). The retailer he works with is certain that all products he makes can easily be sold. Sling chairs are made up of ten wood pieces for the frame and one piece of cloth. The actual cutting of the wood takes 30 minutes. Assembling includes sewing of the fabric and the attachment of rivets, screws, fabric, and dowel rods, and takes 45 minutes. The finishing stage involves sanding, staining, and varnishing of the various parts and takes one hour. Adirondack chairs take two hours for both the cutting and assembling phases. and finishing takes one hour. For hammocks, cutting takes 0.4 hour; assembly takes three hours; and finishing also takes one hour. How many of each type of chair should he produce each month to maximize profit.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for sling chairs, Adirondack chairs, and hammocks that adhere to the constraints given. Let's denote the number of sling chairs as S, the number of Adirondack chairs as A, and the number of hammocks as H.\n```Variables\nS //number of sling chairs to produce \nA //number of Adirondack chairs to produce\nH //number of hammocks to produce\nS, A, H >= 0 and they are integers //non-negative integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function (profit) is given by the sum of the unit profit multiplied by the number of each type of chair produced. The unit profit for sling chairs is $40, for Adirondack chairs is $100, and for hammocks is $90.\nSo the objective function is 40S + 100A + 90H.\n```Objective Function\nMaximize: 40S + 100A + 90H\n```\n\n# Constraints:\nThe constraints are as follows:\n1. Maximum work hours in cutting: The cutting time for sling chairs is 30 minutes, for Adirondack chairs is 2 hours, and for hammocks is 0.4 hours. The total cutting time should not exceed 50 hours.\n2. Maximum work hours in assembling: The assembling time for sling chairs is 45 minutes, for Adirondack chairs is 2 hours, and for hammocks is 3 hours. The total assembling time should not exceed 50 hours.\n3. Maximum work hours in finishing: The finishing time for all types of chairs is 1 hour. The total finishing time should not exceed 50 hours.\n4. Available total work hours: The owner has 120 hours available each month. The total work hours for cutting, assembling, and finishing should not exceed 120 hours.\n```Constraints\n(30/60)S + 2A + (0.4)H <= 50 //maximum work hours in cutting\n(45/60)S + 2A + 3H <= 50 //maximum work hours in assembling\nS + A + H <= 50 //maximum work hours in finishing\n(30/60+45/60+1)S + (2+2+1)A + (0.4+3+1)H <= 120 //available total work hours\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nS = LpVariable(\"SlingChairs\", lowBound=0, cat='Integer') # number of sling chairs\nA = LpVariable(\"AdirondackChairs\", lowBound=0, cat='Integer') # number of Adirondack chairs\nH = LpVariable(\"Hammocks\", lowBound=0, cat='Integer') # number of hammocks\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ChairProduction\", LpMaximize)\n\n# Define the objective function\nproblem += 40 * S + 100 * A + 90 * H\n\n# Define the constraints\nproblem += (30/60) * S + 2 * A + (0.4) * H <= 50\nproblem += (45/60) * S + 2 * A + 3 * H <= 50\nproblem += S + A + H <= 50\nproblem += (30/60 + 45/60 + 1) * S + (2 + 2 + 1) * A + (0.4 + 3 + 1) * H <= 120\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of sling chairs to produce:\", S.value())\nprint(\"The number of Adirondack chairs to produce:\", A.value())\nprint(\"The number of hammocks to produce:\", H.value())\nprint(\"The maximum profit:\", value(problem.objective))\n",
        "results": {
            "The number of sling chairs to produce": "0.0",
            "The number of Adirondack chairs to produce": "24.0",
            "The number of hammocks to produce": "0.0",
            "The maximum profit": "2400.0"
        },
        "type": "linear-notable",
        "index": 165,
        "length": 1275,
        "var_num": 3
    },
    {
        "question": "You want to make cylindrical containers to hold 100 cubic inches using the least amount of construction material. The side is made from a rectangular piece of material, and this can be done with no material wasted. However, the top and bottom are cut from squares of side 2r, so that 2*((2*r)^2) = 8 * r^2 of material is needed (rather than 2 * \u03c0 * r^2, which is the total area of the top and bottom). Find the dimensions of the container using the least amount of material, and also find the ratio of height to radius for this container.",
        "scenario": "## Define Variables:\nYou want to make cylindrical containers.\n// variables: {\"radius of the cylinder\": \"r\", \"height of the cylinder\": \"h\"}, where r, h >= 0\n\n## Define Objective Function:\nThe side is made from a rectangular piece of material, and this can be done with no material wasted. However, the top and bottom are cut from squares of side 2r, so that 2*((2*r)^2) = 8 * r^2 of material is needed (rather than 2 * \u03c0 * r^2, which is the total area of the top and bottom). Find the dimensions of the container using the least amount of material.\n// The total amount of material needed is 8r^2 + 2\u03c0rh. \n// Therefore, the objective function is: Minimize 8r^2 + 2\u03c0rh\n\n## Generate Constraint-1:\nThe volume of the container is at least 100 cubic inches.\n// The volume of the cylinder is given by the formula \u03c0r^2h, and it is given that the volume is at least 100. Therefore, the constraint is \u03c0r^2h >= 100",
        "code": "from pyscipopt import Model\nimport math\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nr = model.addVar(vtype=\"CONTINUOUS\", name=\"r\") # radius of the cylinder\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the cylinder\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nmodel.addCons(obj == 8*r**2 + 2*math.pi*r*h)\n\n# Add constraints\nmodel.addCons(math.pi*r**2*h >= 100)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The radius of the cylinder:\", model.getVal(r))\n    print(\"The height of the cylinder:\", model.getVal(h))\n    print(\"The minimum amount of material needed: \", model.getVal(obj))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The radius of the cylinder": "2.32074837747842",
            "The height of the cylinder": "5.910088887087799",
            "The minimum amount of material needed": "129.26608058453235"
        },
        "type": "nonlinear-notable",
        "index": 166,
        "length": 538,
        "var_num": 2
    },
    {
        "question": "Amanda has 4000 acres of land to grow apple and peach trees. Apple trees cost $50 for their saplings, and they take 3 hours to maintain per acre. Peach trees cost $80 for their saplings and take 5 hours to maintain per acre. Amanda has a budget of $30000 for saplings and has 600 available hours for maintenance. If the profit per acre of apples is $15 and the profit per acre of peaches is $25, how many acres of each should be grown to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of acres for apple trees\", \"name\": \"x\"}, {\"description\": \"number of acres for peach trees\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit from apples and peaches\", \"function\": \"15x + 25y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"budget for saplings\", \"function\": \"50x + 80y <= 30000\"}, {\"description\": \"time for maintenance\", \"function\": \"3x + 5y <= 600\"}, {\"description\": \"total land available\", \"function\": \"x + y <= 4000\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nacres_apples = LpVariable(\"AcresOfApples\", lowBound=0, cat='Integer') # number of acres for apple trees\nacres_peaches = LpVariable(\"AcresOfPeaches\", lowBound=0, cat='Integer') # number of acres for peach trees\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 15 * acres_apples + 25 * acres_peaches\nproblem += objective # maximize the profit from apples and peaches\n\n# Define the constraints\nproblem += 50 * acres_apples + 80 * acres_peaches <= 30000 # budget for saplings\nproblem += 3 * acres_apples + 5 * acres_peaches <= 600 # time for maintenance\nproblem += acres_apples + acres_peaches <= 4000 # total land available\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of acres for apple trees:\", acres_apples.value())\nprint(\"The number of acres for peach trees:\", acres_peaches.value())\nprint(\"The maximum profit:\", objective.value())\n",
        "results": {
            "The number of acres for apple trees": "200.0",
            "The number of acres for peach trees": "0.0",
            "The maximum profit": "3000.0"
        },
        "type": "linear-notable",
        "index": 167,
        "length": 454,
        "var_num": 2
    },
    {
        "question": "A man takes two supplements to get his daily iron and calcium requirements. A pill of supplement A has 5 units of iron and 10 units of calcium. A pill of supplement B contains 4 units of iron and 15 units of calcium.  The man needs a minimum of 40 units of iron and 50 units of calcium per day. If the cost per pill of supplement A is $2 and the cost per pill of supplement B is  $3, how many of each should he buy to minimize costs?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_pills_A = LpVariable(\"NumPillsA\", lowBound=0, cat='Integer') # number of supplement A pills\nnum_pills_B = LpVariable(\"NumPillsB\", lowBound=0, cat='Integer') # number of supplement B pills\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SupplementCost\", LpMinimize)\n\n# Define the objective function\nobjective = 2 * num_pills_A + 3 * num_pills_B\nproblem += objective # minimize the total cost\n\n# Define the constraints\nproblem += 5 * num_pills_A + 4 * num_pills_B >= 40 # the total iron intake must be at least 40 units\nproblem += 10 * num_pills_A + 15 * num_pills_B >= 50 # the total calcium intake must be at least 50 units\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of supplement A pills:\", num_pills_A.value())\nprint(\"The number of supplement B pills:\", num_pills_B.value())\nprint(\"The total cost:\", objective.value())",
        "results": {
            "The number of supplement A pills": "8.0",
            "The number of supplement B pills": "0.0",
            "The total cost": "16.0"
        },
        "formulation": "minimize 3y+2x\nSubject to: \n5x+4y >= 40\n10x+15y >= 50 (end)",
        "type": "linear-notable",
        "index": 168,
        "length": 433,
        "var_num": 2
    },
    {
        "question": "A ferry service provides vehicle tickets and passenger tickets. The ferry can sell at most 100 tickets. A profit of $50 is made per vehicle ticket and a profit of $50 is made per passenger ticket. The ferry reserved a minimum of 10 tickets for vehicles. However, because most people don't have cars, at least 5 times as may people buy passenger tickets than vehicle tickets. How many of each type should be sold to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of vehicle tickets sold\", \"name\": \"x\"}, {\"description\": \"number of passenger tickets sold\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total profit\", \"function\": \"50x + 50y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"total tickets sold\", \"function\": \"x + y <= 100\"}, {\"description\": \"minimum vehicle tickets\", \"function\": \"x >= 10\"}, {\"description\": \"passenger tickets sold at least 5 times vehicle tickets\", \"function\": \"y >= 5x\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_vehicle_tickets = LpVariable(\"NumVehicleTickets\", lowBound=10, cat='Integer') # number of vehicle tickets sold\nnum_passenger_tickets = LpVariable(\"NumPassengerTickets\", lowBound=0, cat='Integer') # number of passenger tickets sold\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FerryTicketSales\", LpMaximize)\n\n# Define the objective function\nobjective = 50 * num_vehicle_tickets + 50 * num_passenger_tickets\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += num_vehicle_tickets + num_passenger_tickets <= 100 # total tickets sold\nproblem += num_passenger_tickets >= 5 * num_vehicle_tickets # passenger tickets sold at least 5 times vehicle tickets\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of vehicle tickets sold:\", num_vehicle_tickets.value())\nprint(\"The number of passenger tickets sold:\", num_passenger_tickets.value())\nprint(\"Total profit:\", objective.value())\n",
        "results": {
            "The number of vehicle tickets sold": "16.0",
            "The number of passenger tickets sold": "84.0",
            "Total profit": "5000.0"
        },
        "type": "linear-notable",
        "index": 169,
        "length": 431,
        "var_num": 2
    },
    {
        "question": "A glass company makes sliding doors and windows. They have orders for at least 120 sliding doors and at least 110 windows per day. However, due to supply constraints, the company can make at most 210 sliding doors and at most 170 windows per day. In addition, they have a contract to ship at least 250 products of either type per day. If the profit per sliding door is $30 and the profit per window is $25, how many of each should the company make to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of sliding doors made per day\", \"name\": \"x\"}, {\"description\": \"number of windows made per day\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit per day\", \"function\": \"30x + 25y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"minimum number of sliding doors per day\", \"function\": \"x >= 120\"}, {\"description\": \"maximum number of sliding doors per day\", \"function\": \"x <= 210\"}, {\"description\": \"minimum number of windows per day\", \"function\": \"y >= 110\"}, {\"description\": \"maximum number of windows per day\", \"function\": \"y <= 170\"}, {\"description\": \"minimum total products per day\", \"function\": \"x + y >= 250\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_sliding_doors = LpVariable(\"NumSlidingDoors\", lowBound=120, upBound=210, cat='Integer') # number of sliding doors made per day\nnum_windows = LpVariable(\"NumWindows\", lowBound=110, upBound=170, cat='Integer') # number of windows made per day\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"GlassCompanyProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 30 * num_sliding_doors + 25 * num_windows\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += num_sliding_doors >= 120 # minimum number of sliding doors per day\nproblem += num_sliding_doors <= 210 # maximum number of sliding doors per day\nproblem += num_windows >= 110 # minimum number of windows per day\nproblem += num_windows <= 170 # maximum number of windows per day\nproblem += num_sliding_doors + num_windows >= 250 # minimum total products per day\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of sliding doors to make:\", num_sliding_doors.value())\nprint(\"The number of windows to make:\", num_windows.value())\nprint(\"Total profit per day:\", objective.value())\n",
        "results": {
            "The number of sliding doors to make": "210.0",
            "The number of windows to make": "170.0",
            "Total profit per day": "10550.0"
        },
        "type": "linear-notable",
        "index": 170,
        "length": 467,
        "var_num": 2
    },
    {
        "question": "A patient is undergoing radiation treatment involving two beams, Beam 1 and Beam 2. Beam 1 delivers a dose of 0.3 units of medicine per minute to the benign area of the pancreas and 0.2 units of medicine per minute to the benign area of the skin. Beam 2 delivers 0.2 units of medicine per minute to the benign area of the pancreas and 0.1 units of medicine per minute to the benign area of the skin.  In addition, beam 1 delivers 0.6 units of medicine per minute to the tumor and beam 2 delivers 0.4 units of medicine per minute to the tumor. At most 4 units of medicine should be received by the skin and at least 3 units of medicine should be delivered to the tumor.  How many minutes of each beam should be used to minimize the total radiation received by the pancreas?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\ntime_beam_1 = LpVariable(\"TimeBeam1\", lowBound=0, cat='Continuous') # time for Beam 1\ntime_beam_2 = LpVariable(\"TimeBeam2\", lowBound=0, cat='Continuous') # time for Beam 2\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"RadiationTreatment\", LpMinimize)\n\n# Define the objective function\nobjective = 0.3 * time_beam_1 + 0.2 * time_beam_2\nproblem += objective # minimize the total radiation received by the pancreas\n\n# Define the constraints\nproblem += 0.2 * time_beam_1 + 0.1 * time_beam_2 <= 4 # at most 4 units of medicine should be received by the skin\nproblem += 0.6 * time_beam_1 + 0.4 * time_beam_2 >= 3 # at least 3 units of medicine should be delivered to the tumor\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Time for Beam 1:\", time_beam_1.value())\nprint(\"Time for Beam 2:\", time_beam_2.value())\nprint(\"Total radiation to the pancreas:\", objective.value())",
        "results": {
            "Time for Beam 1": "5.0",
            "Time for Beam 2": "0.0",
            "Total radiation to the pancreas": "1.5"
        },
        "formulation": "minimize 0.3x+0.2y\nSubject to: \n0.2x+0.1y <= 4\n0.6x+0.4y >= 3 (end)",
        "type": "linear-notable",
        "index": 171,
        "length": 772,
        "var_num": 2
    },
    {
        "question": "A keyboard manufacturer makes mechanical and standard keyboards. Mechanical keyboards are becoming more popular and thus the manufacturer aims to have five times as many mechanical than standard keyboards. A mechanical keyboard costs five units of plastic and two units of solder whereas a standard keyboard costs two units of plastic and one unit of solder. There are still customers that prefer a less noisy alternative. Therefore, there must be at least 30 standard keyboards. If the company has available 1000 units of plastic and 800 units of solder, how many of each type should be manufactured to maximize the total number of keyboards?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_mech_keyboards = LpVariable(\"NumMechKeyboards\", lowBound=0, cat='Integer') # number of mechanical keyboards\nnum_std_keyboards = LpVariable(\"NumStdKeyboards\", lowBound=0, cat='Integer') # number of standard keyboards\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"KeyboardManufacture\", LpMaximize)\n\n# Define the objective function\nobjective = num_mech_keyboards + num_std_keyboards\nproblem += objective # maximize the total number of keyboards\n\n# Define the constraints\nproblem += 5 * num_mech_keyboards + 2 * num_std_keyboards <= 1000 # limit on units of plastic\nproblem += 2 * num_mech_keyboards + num_std_keyboards <= 800 # limit on units of solder\nproblem += num_mech_keyboards == 5 * num_std_keyboards # there should be five times as many mechanical keyboards\nproblem += num_std_keyboards >= 30 # at least 30 standard keyboards must be produced\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of mechanical keyboards:\", num_mech_keyboards.value())\nprint(\"The number of standard keyboards:\", num_std_keyboards.value())\nprint(\"The total number of keyboards:\", objective.value())",
        "results": {
            "The number of mechanical keyboards": "185.0",
            "The number of standard keyboards": "37.0",
            "The total number of keyboards": "222.0"
        },
        "formulation": "maximize x+y\nSubject to: \nx >= 5y\ny >= 30\n5x+2y <= 1000\n2x+1y <= 800 (end)",
        "type": "linear-notable",
        "index": 172,
        "length": 643,
        "var_num": 2
    },
    {
        "question": "A party organizer needs to transport party goers either by limousine or bus. Limousines can carry 12 people and buses can carry 18 people. They need to transport at least 400 people. Because limousines are more attractive, at least 70% of the vehicles must be limousines. How many of each type of vehicle should be used to minimize the total number of limousines and buses used?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_limousines = LpVariable(\"NumLimousines\", lowBound=0, cat='Integer') # number of limousines\nnum_buses = LpVariable(\"NumBuses\", lowBound=0, cat='Integer') # number of buses\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"PartyTransport\", LpMinimize)\n\n# Define the objective function\nobjective = num_limousines + num_buses\nproblem += objective # minimize the total number of vehicles used\n\n# Define the constraints\nproblem += 12 * num_limousines + 18 * num_buses >= 400 # at least 400 people must be transported\nproblem += num_limousines >= 0.7 * (num_limousines + num_buses) # at least 70% of the vehicles must be limousines\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of limousines:\", num_limousines.value())\nprint(\"The number of buses:\", num_buses.value())\nprint(\"The total number of vehicles:\", objective.value())",
        "results": {
            "The number of limousines": "21.0",
            "The number of buses": "9.0",
            "The total number of vehicles": "30.0"
        },
        "formulation": "minimize x+y\nSubject to: \n12x+18y >= 400\nx >= 0.7(x+y) (end)",
        "type": "linear-notable",
        "index": 173,
        "length": 378,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA city is planning to build three types of public facilities: parks, libraries, and sports centers. The city needs to decide how many of each facility to build and how many staff members to allocate to each facility.\n// variables: {\"number of parks\": \"Parks\", \"number of libraries\": \"Libraries\", \"number of sports centers\": \"SportsCenters\", \"number of staff members per park\": \"StaffPerPark\", \"number of staff members per library\": \"StaffPerLibrary\", \"number of staff members per sports center\": \"StaffPerSportsCenter\"}, where Parks, Libraries, SportsCenters, StaffPerPark, StaffPerLibrary, StaffPerSportsCenter >= 0 and Parks, Libraries, SportsCenters, StaffPerPark, StaffPerLibrary, StaffPerSportsCenter are integers.\n\n## Define Objective Function:\nThe city council aims to maximize the total utility of the facilities, which is defined as a non-linear function of the number of facilities and staff. The utility function is given by: Utility = (Parks * StaffPerPark^2) + (Libraries * StaffPerLibrary^2) + (SportsCenters * StaffPerSportsCenter^2).\n// So, the objective function is: Maximize (Parks * StaffPerPark^2 + Libraries * StaffPerLibrary^2 + SportsCenters * StaffPerSportsCenter^2)\n\n## Generate Constraint-1:\nThe city has a budget of $1,000,000 for construction and operation of these facilities. The cost per park is $10,000, per library is $15,000, and per sports center is $20,000. The annual salary for each staff member is $50,000.\n// 10000 * Parks + 15000 * Libraries + 20000 * SportsCenters + 50000 * (StaffPerPark * Parks + StaffPerLibrary * Libraries + StaffPerSportsCenter * SportsCenters) <= 1000000\n\n## Generate Constraint-2:\nThe city has a total of 50 staff members available.\n// StaffPerPark * Parks + StaffPerLibrary * Libraries + StaffPerSportsCenter * SportsCenters <= 50\n\n## Generate Constraint-3:\nThe city has a land constraint that limits the total number of facilities to 20.\n// Parks + Libraries + SportsCenters <= 20\n\n## Generate Constraint-4:\nThe city should have at least one of each type of facility, and each facility should have at least one staff member.\n// Parks >= 1; Libraries >= 1; SportsCenters >= 1\n// StaffPerPark >= 1; StaffPerLibrary >= 1; StaffPerSportsCenter >= 1",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nParks = model.addVar(vtype=\"INTEGER\", name=\"Parks\", lb=0, ub=20) # number of parks\nLibraries = model.addVar(vtype=\"INTEGER\", name=\"Libraries\", lb=0, ub=20) # number of libraries\nSportsCenters = model.addVar(vtype=\"INTEGER\", name=\"SportsCenters\", lb=0, ub=20) # number of sports centers\nStaffPerPark = model.addVar(vtype=\"INTEGER\", name=\"StaffPerPark\", lb=0, ub=50) # number of staff members per park\nStaffPerLibrary = model.addVar(vtype=\"INTEGER\", name=\"StaffPerLibrary\", lb=0, ub=50) # number of staff members per library\nStaffPerSportsCenter = model.addVar(vtype=\"INTEGER\", name=\"StaffPerSportsCenter\", lb=0, ub=50) # number of staff members per sports center\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == Parks * StaffPerPark**2 + Libraries * StaffPerLibrary**2 + SportsCenters * StaffPerSportsCenter**2)\n\n# Add constraints\nmodel.addCons(10000 * Parks + 15000 * Libraries + 20000 * SportsCenters + 50000 * (StaffPerPark * Parks + StaffPerLibrary * Libraries + StaffPerSportsCenter * SportsCenters) <= 1000000)\nmodel.addCons(StaffPerPark * Parks + StaffPerLibrary * Libraries + StaffPerSportsCenter * SportsCenters <= 50)\nmodel.addCons(Parks + Libraries + SportsCenters <= 20)\nmodel.addCons(Parks >= 1)\nmodel.addCons(Libraries >= 1)\nmodel.addCons(SportsCenters >= 1)\nmodel.addCons(StaffPerPark >= 1)\nmodel.addCons(StaffPerLibrary >= 1)\nmodel.addCons(StaffPerSportsCenter >= 1)\n\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Total Utility: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Total Utility": "291.0"
        },
        "question": "A city is planning to build three types of public facilities: parks, libraries, and sports centers. The city needs to decide how many of each facility to build and how many staff members to allocate to each facility. The city has a budget of $1,000,000 for construction and operation of these facilities. The cost per park is $10,000, per library is $15,000, and per sports center is $20,000. The annual salary for each staff member is $50,000. The city has a total of 50 staff members available. The city has a land constraint that limits the total number of facilities to 20. The city should have at least one of each type of facility, and each facility should have at least one staff member. The city council aims to maximize the total utility of the facilities, which is defined as a non-linear function of the number of facilities and staff. The utility function is given by: Utility = (Parks * StaffPerPark^2) + (Libraries * StaffPerLibrary^2) + (SportsCenters * StaffPerSportsCenter^2).",
        "type": "nonlinear-notable",
        "index": 174,
        "length": 993,
        "var_num": 6
    },
    {
        "scenario": "## Define Variables:\nGlueco has 3 different production lines for glue. He needs to determine the number of workers to assign to each production line.\n// variables: {\"number of workers on production line 1\": \"N1\", \"number of workers on production line 2\": \"N2\", \"number of workers on production line 3\": \"N3\"}, where N1, N2, N3 >= 0 & N1, N2, N3 are integers\n\n## Define Objective Function:\nGlueco produces 3 types of glue on the 3 production lines. \nOn production line 1, each worker produces 20 units of glue 1, 30 units of glue 2, and 40 units of glue 3 during a hour. \nOn production line 2, each worker produces 50 units of glue 1, 35 units of glue 2, and 45 units of glue 3 during a hour. \nOn production line 3, each worker produces 30 units of glue 1, 40 units of glue 2, and 50 units of glue 3 during a hour. \nNow, Glueco needs to produce at least 120 units of glue 1, at least 150 units of glue 2, and at least 200 units of glue 3. The three production lines can only be opened or closed at the same time. Please determine the minimum production time to meet the weekly demand.\n// The production time for glue 1: T1 = 120 / (20 * N1 + 50 * N2 + 30 * N3)\n// The production time for glue 2: T2 = 150 / (30 * N1 + 35 * N2 + 40 * N3)\n// The production time for glue 3: T3 = 200 / (40 * N1 + 45 * N2 + 50 * N3)\n// So, the objective function is: Minimize max(T1, T2, T3)\n\n## Generate Constraint-1:\nThere are total 45 workers available.\n// N1 + N2 + N3 <= 45\n\n## Generate Constraint-2:\nEach line can be utilized by up to 20 workers at a time.\n// N1 <= 20; N2 <= 20; N3 <= 20",
        "code": "\"\"\"## Define Variables:\nGlueco has 3 different production lines for glue. He needs to determine the number of workers to assign to each production line.\n// variables: {\"number of workers on production line 1\": \"N1\", \"number of workers on production line 2\": \"N2\", \"number of workers on production line 3\": \"N3\"}, where N1, N2, N3 >= 0 & N1, N2, N3 are integers\n\n## Define Objective Function:\nGlueco produces 3 types of glue on the 3 production lines. \nOn production line 1, each worker produces 20 units of glue 1, 30 units of glue 2, and 40 units of glue 3 during a hour. \nOn production line 2, each worker produces 50 units of glue 1, 35 units of glue 2, and 45 units of glue 3 during a hour. \nOn production line 3, each worker produces 30 units of glue 1, 40 units of glue 2, and 50 units of glue 3 during a hour. \nNow, Glueco needs to produce at least 120 units of glue 1, at least 150 units of glue 2, and at least 200 units of glue 3. The three production lines can only be opened or closed at the same time. Please determine the minimum production time to meet the weekly demand.\n// The production time for glue 1: T1 = 120 / (20 * N1 + 50 * N2 + 30 * N3)\n// The production time for glue 2: T2 = 150 / (30 * N1 + 35 * N2 + 40 * N3)\n// The production time for glue 3: T3 = 200 / (40 * N1 + 45 * N2 + 50 * N3)\n// So, the objective function is: Minimize max(T1, T2, T3)\n\n## Generate Constraint-1:\nThere are total 45 workers available.\n// N1 + N2 + N3 <= 45\n\n## Generate Constraint-2:\nEach line can be utilized by up to 20 workers at a time.\n// N1 <= 20; N2 <= 20; N3 <= 20\"\"\"\n\n\nfrom pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nN1 = model.addVar(vtype=\"INTEGER\", name=\"N1\") # number of workers on production line 1\nmodel.addCons(N1 >= 0)\nN2 = model.addVar(vtype=\"INTEGER\", name=\"N2\") # number of workers on production line 2\nmodel.addCons(N2 >= 0)\nN3 = model.addVar(vtype=\"INTEGER\", name=\"N3\") # number of workers on production line 3\nmodel.addCons(N3 >= 0)\n\n# Define objective function\n# Since the objective function is not linear, we need to introduce a new variable and constraints to linearize it\nT = model.addVar(name=\"T\")\nmodel.setObjective(T, \"minimize\")\nmodel.addCons(T >= 120 / (20 * N1 + 50 * N2 + 30 * N3))\nmodel.addCons(T >= 150 / (30 * N1 + 35 * N2 + 40 * N3))\nmodel.addCons(T >= 200 / (40 * N1 + 45 * N2 + 50 * N3))\n\n# Add constraints\nmodel.addCons(N1 + N2 + N3 <= 45)\nmodel.addCons(N1 <= 20)\nmodel.addCons(N2 <= 20)\nmodel.addCons(N3 <= 20)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Workers on Production Line 1: \", model.getVal(N1))\n    print(\"Number of Workers on Production Line 2: \", model.getVal(N2))\n    print(\"Number of Workers on Production Line 3: \", model.getVal(N3))\n    print(\"Minimum Time to Meet Weekly Demand: \", model.getVal(T))\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Workers on Production Line 1": "5.0",
            "Number of Workers on Production Line 2": "20.0",
            "Number of Workers on Production Line 3": "20.0",
            "Minimum Time to Meet Weekly Demand": "0.09523809523809523"
        },
        "question": "Glueco has 3 different production lines for glue and needs to determine the number of workers to assign to each production line. The production capacity of each worker on each line is given in the following Table.\n\n| Production Line | Glue 1 Units/Hour | Glue 2 Units/Hour | Glue 3 Units/Hour |\n|-----------------|-------------------|-------------------|-------------------|\n| 1               | 20                | 30                | 40                |\n| 2               | 50                | 35                | 45                |\n| 3               | 30                | 40                | 50                |\n\nGlueco needs to produce at least 120 units of glue 1, at least 150 units of glue 2, and at least 200 units of glue 3. The three production lines can only be opened or closed at the same time. The company aims to minimize the maximum production time required to meet the weekly demand for each type of glue.\n\nThere are total 45 workers available. Each line can be utilized by up to 20 workers at a time.\n",
        "type": "nonlinear-table",
        "index": 175,
        "length": 1018,
        "var_num": 3
    },
    {
        "question": "Basel Tool and Die Company (BTD) manufactures large industrial pipe wrenches in one of its factories. The marketing department has estimated the demand for this product over the next 6 months as shown in the following Table. With the current labor force, BTD can produce approximately 420 pipe wrenches per month at a cost of $40 per wrench using regular-time production. Additionally, up to 80 wrenches per month can be produced using overtime at a cost of $45 per wrench. Wrenches can also be produced in advance and stored in inventory at a cost of $3 per month per wrench. The monthly demand for wrenches must be met without fail. At the end of December (beginning of January), BTD has an inventory of 10 wrenches. BTD aims to plan its production, including overtime, and inventory for the next 6 months to maximize profit. Assuming the revenue for these wrenches is fixed, the production manager can maximize profit by minimizing the total costs of production and inventory.\n\nTable (Estimated demand for pipe wrenches over the next 6 months):\n| Month    | Demand |\n| -------- | ------ |\n| January  | 370    |\n| February | 430    |\n| March    | 380    |\n| April    | 450    |\n| May      | 520    |\n| June     | 440    |",
        "formulation": "# Variables:\nTo plan the production and inventory for the next 6 months, we need to define the following variables:\n```Variables\nR1 // Number of wrenches made using regular-time production in January\nR2 // Number of wrenches made using regular-time production in February\nR3 // Number of wrenches made using regular-time production in March\nR4 // Number of wrenches made using regular-time production in April\nR5 // Number of wrenches made using regular-time production in May\nR6 // Number of wrenches made using regular-time production in June\nO1 // Number of wrenches made using overtime production in January\nO2 // Number of wrenches made using overtime production in February\nO3 // Number of wrenches made using overtime production in March\nO4 // Number of wrenches made using overtime production in April\nO5 // Number of wrenches made using overtime production in May\nO6 // Number of wrenches made using overtime production in June\nI1 // Number of wrenches in inventory at the end of January\nI2 // Number of wrenches in inventory at the end of February\nI3 // Number of wrenches in inventory at the end of March\nI4 // Number of wrenches in inventory at the end of April\nI5 // Number of wrenches in inventory at the end of May\nI6 // Number of wrenches in inventory at the end of June\nR1, R2, R3, R4, R5, R6, O1, O2, O3, O4, O5, O6, I1, I2, I3, I4, I5, I6 >= 0 and they are integers.\n```\n\n# Objective Function:\nThe objective is to maximize profit by minimizing the total costs incurred in producing and delivering the wrenches. The total cost is the sum of the costs of regular-time production, overtime production, and inventory holding costs. The cost of regular-time production is $40 per wrench, the cost of overtime production is $45 per wrench, and the inventory holding cost is $3 per month per wrench. Therefore, the objective function is:\n```Objective Function\nMinimize: 40(R1 + R2 + R3 + R4 + R5 + R6) + 45(O1 + O2 + O3 + O4 + O5 + O6) + 3(I1 + I2 + I3 + I4 + I5 + I6)\n```\n\n# Constraints:\nThe constraints ensure that the monthly demand for wrenches is satisfied and that the production quantities do not exceed the labor capacity. Additionally, the inventory of each month is determined by subtracting the demand from the sum of the production and the inventory of the previous month. The constraints are as follows:\n- Regular-time production constraints: R1 <= 420, R2 <= 420, R3 <= 420, R4 <= 420, R5 <= 420, R6 <= 420\n- Overtime production constraints: O1 <= 80, O2 <= 80, O3 <= 80, O4 <= 80, O5 <= 80, O6 <= 80\n- Inventory constraints: I1 = 10 + R1 + O1 - 370, I2 = I1 + R2 + O2 - 430, I3 = I2 + R3 + O3 - 380, I4 = I3 + R4 + O4 - 450, I5 = I4 + R5 + O5 - 520, I6 = I5 + R6 + O6 - 440\n```Constraints\nR1 <= 420\nR2 <= 420\nR3 <= 420\nR4 <= 420\nR5 <= 420\nR6 <= 420\nO1 <= 80\nO2 <= 80\nO3 <= 80\nO4 <= 80\nO5 <= 80\nO6 <= 80\nI1 = 10 + R1 + O1 - 370\nI2 = I1 + R2 + O2 - 430\nI3 = I2 + R3 + O3 - 380\nI4 = I3 + R4 + O4 - 450\nI5 = I4 + R5 + O5 - 520\nI6 = I5 + R6 + O6 - 440\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nR = [LpVariable(f\"R{i}\", lowBound=0, cat='Integer') for i in range(1, 7)]\nO = [LpVariable(f\"O{i}\", lowBound=0, cat='Integer') for i in range(1, 7)]\nI = [LpVariable(f\"I{i}\", lowBound=0, cat='Integer') for i in range(1, 7)]\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimizeCosts\", LpMinimize)\n\n# Define the objective function\nobjective = lpSum([40 * R[i] + 45 * O[i] + 3 * I[i] for i in range(6)])\nproblem += objective\n\n# Define the constraints\n# Regular-time production constraints\nfor i in range(6):\n    problem += R[i] <= 420\n\n# Overtime production constraints\nfor i in range(6):\n    problem += O[i] <= 80\n\n# Inventory constraints\ndemands = [370, 430, 380, 450, 520, 440]\nproblem += I[0] == 10 + R[0] + O[0] - demands[0]\nfor i in range(1, 6):\n    problem += I[i] == I[i-1] + R[i] + O[i] - demands[i]\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nfor i in range(6):\n    print(f\"Month {i+1}:\")\n    print(f\"Regular-time production: {R[i].value()}\")\n    print(f\"Overtime production: {O[i].value()}\")\n    print(f\"Inventory at the end of the month: {I[i].value()}\")\nprint(f\"Total cost: {value(problem.objective)}\")\n",
        "results": {
            "Month 1 Regular-time production": "370.0",
            "Month 1 Overtime production": "0.0",
            "Month 1 Inventory at the end of the month": "10.0",
            "Month 2 Regular-time production": "420.0",
            "Month 2 Overtime production": "0.0",
            "Month 2 Inventory at the end of the month": "0.0",
            "Month 3 Regular-time production": "420.0",
            "Month 3 Overtime production": "0.0",
            "Month 3 Inventory at the end of the month": "40.0",
            "Month 4 Regular-time production": "420.0",
            "Month 4 Overtime production": "10.0",
            "Month 4 Inventory at the end of the month": "20.0",
            "Month 5 Regular-time production": "420.0",
            "Month 5 Overtime production": "80.0",
            "Month 5 Inventory at the end of the month": "0.0",
            "Month 6 Regular-time production": "420.0",
            "Month 6 Overtime production": "20.0",
            "Month 6 Inventory at the end of the month": "0.0",
            "Total cost": "103960.0"
        },
        "type": "linear-table",
        "index": 176,
        "length": 1223,
        "var_num": 4
    },
    {
        "question": "You can run at a speed of 6 mph and swim at a speed of 3 mph to reach an island. The island is located 1 mile north of the shoreline and 4 miles east of your location on the shore. How far should you run west to minimize the time needed to reach the island?",
        "scenario": "## Define Variables:\nYou can run at a speed of 6 mph and swim at a speed of 3 mph to reach an island. The island is located 1 mile north of the shoreline and 4 miles east of your location on the shore.\n// variables: {\"distance to run west\": \"x\"}, where 0 <= x <= 4\n\n## Define Objective Function:\nHow far should you run west to minimize the time needed to reach the island?\n// The total time needed to reach the island is the sum of the time to run and the time to swim. \n// The time to run is the distance to run divided by the running speed, which is x/6. \n// The time to swim is the distance to swim divided by the swimming speed. \n// The distance to swim is the hypotenuse of a right triangle with sides of lengths 1 mile (the north-south distance to the island) and (4-x) miles (the east-west distance to the island), which is sqrt((4-x)^2 + 1) miles. \n// Therefore, the time to swim is sqrt((4-x)^2 + 1)/3. \n// So the objective function is: x/6 + sqrt((4-x)^2 + 1)/3",
        "code": "from pyscipopt import Model\nimport math\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"CONTINUOUS\", name=\"x\", lb=0, ub=4)  # distance to run west\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nmodel.addCons(obj == x/6 +((4-x)**2 + 1)**0.5/3)\n\n# Add constraints\n# No additional constraints needed as x is already bounded by 0 and 4\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The distance to run west to minimize the time needed to reach the island:\", model.getVal(x))\n    print(\"The minimum time needed to reach the island: \", model.getVal(obj))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The distance to run west to minimize the time needed to reach the island": "3.4233312989000892",
            "The minimum time needed to reach the island": "0.9553413988436567"
        },
        "type": "nonlinear-notable",
        "index": 177,
        "length": 257,
        "var_num": 1
    },
    {
        "question": "You need to find the shape of the maximum area rectangle that fits inside a graph. The graph is a parabola y = x^2 below the line y = 4. The the top side of the rectangle on the horizontal line y = 4. Please provide the area of the rectangle and the shape of the rectangle.",
        "scenario": "## Define Variables:\nYou need to find the shape of the maximum area rectangle that fits inside a graph.\n// variables: {\"width of the rectangle\": \"w\", \"height of the rectangle\": \"h\", \"x-coordinate of the left top corner of the rectangle\": \"x_0\", \"y-coordinate of the left top corner of the rectangle\": \"y_0\"}, where w, h >= 0\n\n## Define Objective Function:\nThe graph is a parabola y = x^2 below the line y = 4. Please provide the area of the rectangle and the shape of the rectangle.\n// The area of the rectangle is given by the product of the width and the height.\n// Therefore, the objective function is: Maximize w * h\n\n## Generate Constraint-1:\nThe graph is a parabola y = x^2 below the line y = 4. The top side of the rectangle is on the horizontal line y = 4.\n// The top side of the rectangle is on the horizontal line y = 4, so y_0 = 4.\n// The four corners of the rectangle are (x_0, 4), (x_0 + w, 4), (x_0 + w, 4 - h), and (x_0, 4 - h), they should lie in the given area\n// So the constraints are: x_0^2 <= 4, (x_0 + w)^2 <= 4, (x_0 + w)^2 <= 4 - h, x_0^2 <= 4 - h",
        "code": "from pyscipopt import Model\nimport math\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nw = model.addVar(vtype=\"CONTINUOUS\", name=\"w\") # width of the rectangle\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the rectangle\nx_0 = model.addVar(vtype=\"CONTINUOUS\", name=\"x_0\") # x-coordinate of the left top corner of the rectangle\ny_0 = model.addVar(vtype=\"CONTINUOUS\", name=\"y_0\") # y-coordinate of the left top corner of the rectangle\n\n# Define objective function\nobj = model.addVar(vtype=\"CONTINUOUS\", name=\"obj\")\nmodel.addCons(obj == w * h)\nmodel.setObjective(obj, \"maximize\")\n\n# Add constraints\nmodel.addCons(y_0 == 4)\nmodel.addCons(x_0**2 <= 4)\nmodel.addCons((x_0 + w)**2 <= 4)\nmodel.addCons((x_0 + w)**2 <= 4 - h)\nmodel.addCons(x_0**2 <= 4 - h)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The width of the rectangle: \", model.getVal(w))\n    print(\"The height of the rectangle: \", model.getVal(h))\n    print(\"The x-coordinate of the left top corner of the rectangle: \", model.getVal(x_0))\n    print(\"The y-coordinate of the left top corner of the rectangle: \", model.getVal(y_0))\n    print(\"The area of the rectangle: \", model.getVal(w * h))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The width of the rectangle": "1.1546927982726114",
            "The height of the rectangle": "2.666684674594099",
            "The x-coordinate of the left top corner of the rectangle": "0.0",
            "The y-coordinate of the left top corner of the rectangle": "4.0",
            "The area of the rectangle": "3.079201589017748"
        },
        "type": "nonlinear-notable",
        "index": 178,
        "length": 273,
        "var_num": 4
    },
    {
        "question": "A large fast-food restaurant employs waiters and managers. Waiters earn $1200 per week and managers earn $2000 per week. The restaurant requires a minimum of 50 workers of whom at least 15 must be managers. To keep the restaurant clean and running smoothly, the number of managers should be at least a third of the number of waiters. The restaurant wants to keep the weekly wage bill below $500000. Formulate an LP to minimize the wage bill.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_waiters = LpVariable(\"NumWaiters\", lowBound=0, cat='Integer') # number of waiters\nnum_managers = LpVariable(\"NumManagers\", lowBound=0, cat='Integer') # number of managers\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FastFoodWageBill\", LpMinimize)\n\n# Define the objective function\nobjective = 1200 * num_waiters + 2000 * num_managers\nproblem += objective # minimize the total wage bill\n\n# Define the constraints\nproblem += num_waiters + num_managers >= 50 # a minimum of 50 workers\nproblem += num_managers >= 15 # at least 15 must be managers\nproblem += num_managers * 3 >= num_waiters # managers should be at least a third of the number of waiters\nproblem += 1200 * num_waiters + 2000 * num_managers <= 500000 # weekly wage bill below $500000\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of waiters:\", num_waiters.value())\nprint(\"The number of managers:\", num_managers.value())\nprint(\"The total wage bill:\", objective.value())",
        "results": {
            "The number of waiters": "35.0",
            "The number of managers": "15.0",
            "The total wage bill": "72000.0"
        },
        "formulation": "{\"variable\": [{\"description\": \"number of waiters\", \"name\": \"x\"}, {\"description\": \"number of managers\", \"name\": \"y\"}], \"objective\": [{\"description\": \"weekly wage bill\", \"function\": \"1200x + 2000y\", \"sense\": \"Minimize\"}], \"constraint\": [{\"description\": \"minimum number of workers constraint\", \"function\": \"x + y >= 50\"}, {\"description\": \"minimum number of managers constraint\", \"function\": \"y >= 15\"}, {\"description\": \"managers to waiters ratio constraint\", \"function\": \"y >= 1/3x\"}, {\"description\": \"weekly wage bill constraint\", \"function\": \"1200x + 2000y <= 500000\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "type": "linear-notable",
        "index": 179,
        "length": 441,
        "var_num": 2
    },
    {
        "question": "An appliance company sells and installs refrigerators and stoves. Each refrigerator takes 60 minutes of mover time and 20 minutes of setup time. Each stove takes 45 minutes of mover time and 25 minutes of setup time. The company has available 20000 minutes of mover time and 13000 minutes of setup time. If the profit per refrigerator is $400 and the profit per stove is $260, how many of each should they sell in order to maximize profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_refrigerators = LpVariable(\"NumRefrigerators\", lowBound=0, cat='Integer') # number of refrigerators\nnum_stoves = LpVariable(\"NumStoves\", lowBound=0, cat='Integer') # number of stoves\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ApplianceCompanyProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 400 * num_refrigerators + 260 * num_stoves\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 60 * num_refrigerators + 45 * num_stoves <= 20000 # mover time constraint\nproblem += 20 * num_refrigerators + 25 * num_stoves <= 13000 # setup time constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of refrigerators to sell:\", num_refrigerators.value())\nprint(\"The number of stoves to sell:\", num_stoves.value())\nprint(\"The maximum profit:\", objective.value())",
        "results": {
            "The number of refrigerators to sell": "333.0",
            "The number of stoves to sell": "0.0",
            "The maximum profit": "133200.0"
        },
        "formulation": "maximize 260y+400x\nSubject to: \n60x+45y <= 20000\n20x+25y <= 13000 (end)",
        "type": "linear-notable",
        "index": 180,
        "length": 439,
        "var_num": 2
    },
    {
        "question": "Zeta Bakery sells two types of cookies. They sell a strawberry cookie and a sugar cookie. Let's say they make x1 strawberry cookies, at a profit of $5.5 each, and x2 sugar cookies, at a profit of $12 each (x1 and x2 are unknowns both greater than or equal to 0). The daily demand for these cookies is at most 100 strawberry cookies and at most 80 sugar cookies. The bakery is short staffed and can make a maximum of 100 cookies of either type per day. How much of each cookie should the bakery make in order to maximize profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_strawberry_cookies = LpVariable(\"NumStrawberryCookies\", lowBound=0, cat='Integer') # number of strawberry cookies\nnum_sugar_cookies = LpVariable(\"NumSugarCookies\", lowBound=0, cat='Integer') # number of sugar cookies\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ZetaBakeryProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 5.5 * num_strawberry_cookies + 12 * num_sugar_cookies\nproblem += objective # maximize the profit\n\n# Define the constraints\nproblem += num_strawberry_cookies <= 100 # cannot exceed daily demand for strawberry cookies\nproblem += num_sugar_cookies <= 80 # cannot exceed daily demand for sugar cookies\nproblem += num_strawberry_cookies + num_sugar_cookies <= 100 # total cookies made must not exceed 100\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of strawberry cookies:\", num_strawberry_cookies.value())\nprint(\"The number of sugar cookies:\", num_sugar_cookies.value())\nprint(\"The total profit:\", objective.value())",
        "results": {
            "The number of strawberry cookies": "20.0",
            "The number of sugar cookies": "80.0",
            "The total profit": "1070.0"
        },
        "formulation": "maximize 5.5x+12y\nSubject to: \nx <= 100\ny <= 80\nx+y <= 100 (end)",
        "type": "linear-notable",
        "index": 181,
        "length": 527,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA city is planning to build three types of public facilities: parks, libraries, and sports centers. The city needs to decide how many of each facility to build and how many staff members to allocate to each facility.\n// variables: {\"number of parks\": \"Parks\", \"number of libraries\": \"Libraries\", \"number of sports centers\": \"SportsCenters\", \"number of staff members per park\": \"StaffPerPark\", \"number of staff members per library\": \"StaffPerLibrary\", \"number of staff members per sports center\": \"StaffPerSportsCenter\"}, where Parks, Libraries, SportsCenters, StaffPerPark, StaffPerLibrary, StaffPerSportsCenter >= 0 and Parks, Libraries, SportsCenters, StaffPerPark, StaffPerLibrary, StaffPerSportsCenter are integers.\n\n## Define Objective Function:\nThe city council aims to maximize the total utility of the facilities, which is defined as a non-linear function of the number of facilities and staff. The utility function is given by: Utility = (Parks * StaffPerPark^2) + (Libraries * StaffPerLibrary^2) + (SportsCenters * StaffPerSportsCenter^2).\n// So, the objective function is: Maximize (Parks * StaffPerPark^2 + Libraries * StaffPerLibrary^2 + SportsCenters * StaffPerSportsCenter^2)\n\n## Generate Constraint-1:\nThe city has a budget of $1,000,000 for construction and operation of these facilities. The cost per park is $10,000, per library is $15,000, and per sports center is $20,000. The annual salary for each staff member is $50,000.\n// 10000 * Parks + 15000 * Libraries + 20000 * SportsCenters + 50000 * (StaffPerPark * Parks + StaffPerLibrary * Libraries + StaffPerSportsCenter * SportsCenters) <= 1000000\n\n## Generate Constraint-2:\nThe city has a total of 50 staff members available.\n// StaffPerPark * Parks + StaffPerLibrary * Libraries + StaffPerSportsCenter * SportsCenters <= 50\n\n## Generate Constraint-3:\nThe city has a land constraint that limits the total number of facilities to 20.\n// Parks + Libraries + SportsCenters <= 20\n\n## Generate Constraint-4:\nThe city should have at least one of each type of facility, and each facility should have at least one staff member.\n// Parks >= 1; Libraries >= 1; SportsCenters >= 1\n// StaffPerPark >= 1; StaffPerLibrary >= 1; StaffPerSportsCenter >= 1",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nParks = model.addVar(vtype=\"INTEGER\", name=\"Parks\", lb=0, ub=20) # number of parks\nLibraries = model.addVar(vtype=\"INTEGER\", name=\"Libraries\", lb=0, ub=20) # number of libraries\nSportsCenters = model.addVar(vtype=\"INTEGER\", name=\"SportsCenters\", lb=0, ub=20) # number of sports centers\nStaffPerPark = model.addVar(vtype=\"INTEGER\", name=\"StaffPerPark\", lb=0, ub=50) # number of staff members per park\nStaffPerLibrary = model.addVar(vtype=\"INTEGER\", name=\"StaffPerLibrary\", lb=0, ub=50) # number of staff members per library\nStaffPerSportsCenter = model.addVar(vtype=\"INTEGER\", name=\"StaffPerSportsCenter\", lb=0, ub=50) # number of staff members per sports center\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == Parks * StaffPerPark**2 + Libraries * StaffPerLibrary**2 + SportsCenters * StaffPerSportsCenter**2)\n\n# Add constraints\nmodel.addCons(10000 * Parks + 15000 * Libraries + 20000 * SportsCenters + 50000 * (StaffPerPark * Parks + StaffPerLibrary * Libraries + StaffPerSportsCenter * SportsCenters) <= 1000000)\nmodel.addCons(StaffPerPark * Parks + StaffPerLibrary * Libraries + StaffPerSportsCenter * SportsCenters <= 50)\nmodel.addCons(Parks + Libraries + SportsCenters <= 20)\nmodel.addCons(Parks >= 1)\nmodel.addCons(Libraries >= 1)\nmodel.addCons(SportsCenters >= 1)\nmodel.addCons(StaffPerPark >= 1)\nmodel.addCons(StaffPerLibrary >= 1)\nmodel.addCons(StaffPerSportsCenter >= 1)\n\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Total Utility: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Total Utility": "291.0"
        },
        "question": "A city is planning to build three types of public facilities: parks, libraries, and sports centers. The city needs to decide how many of each facility to build and how many staff members to allocate to each facility. The city council aims to maximize the total utility of the facilities, which is defined as a non-linear function of the number of facilities and staff. The utility function is given by: Utility = (Parks * StaffPerPark^2) + (Libraries * StaffPerLibrary^2) + (SportsCenters * StaffPerSportsCenter^2).\n\n| Facility Type | Construction Cost | Annual Salary per Staff Member |\n|---------------|-------------------|---------------------------------|\n| Parks         | $10,000           | $50,000                         |\n| Libraries     | $15,000           | $50,000                         |\n| Sports Centers| $20,000           | $50,000                         |\n\nThe city has a budget of $1,000,000 for construction and operation of these facilities. The city has a total of 50 staff members available. The city has a land constraint that limits the total number of facilities to 20. The city should have at least one of each type of facility, and each facility should have at least one staff member.\n",
        "type": "nonlinear-table",
        "index": 182,
        "length": 1214,
        "var_num": 6
    },
    {
        "question": "Find two positive numbers. The product of the two numbers is 750. We want to minimize the sum of one number and 10 times the other number.",
        "scenario": "## Define Variables:\nFind two positive numbers.\n// variables: {\"first number\": \"x\", \"second number\": \"y\"}, where x, y >= 0\n\n## Define Objective Function:\nWe want to minimize the sum of one number and 10 times the other number.\n// Minimize: x + 10y\n\n## Generate Constraint-1:\nThe product of the two numbers is 750.\n// x*y = 750",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"CONTINUOUS\", name=\"x\") # first number\ny = model.addVar(vtype=\"CONTINUOUS\", name=\"y\") # second number\n\n# Define objective function\nmodel.setObjective(x + 10*y, \"minimize\")\n\n# Add constraints\nmodel.addCons(x*y == 750)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The first number:\", model.getVal(x))\n    print(\"The second number:\", model.getVal(y))\n    print(\"The minimized sum: \", model.getVal(x + 10*y))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The first number": "86.60253927502986",
            "The second number": "8.660254148185787",
            "The minimized sum": "173.20508075688772"
        },
        "type": "nonlinear-notable",
        "index": 183,
        "length": 138,
        "var_num": 2
    },
    {
        "question": "Organic Farming has 300 acres of land to grow daikons and fennels. Daikons require 0.5 hours of watering and $70 worth of compost per acre. Fennels require 1.5 hours of watering and $50 worth of compost per acre. The farmer has 500 hours available for watering and $7400 available to spend on compost. If the revenue per acre of daikons is $300 and the revenue per acre of fennels is $250, how many acres of each should he grow to maximize his revenue.",
        "formulation": "{\"variable\": [{\"description\": \"number of acres to grow daikons\", \"name\": \"x\"}, {\"description\": \"number of acres to grow fennels\", \"name\": \"y\"}], \"objective\": [{\"description\": \"revenue\", \"function\": \"300x + 250y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"land constraint\", \"function\": \"x + y <= 300\"}, {\"description\": \"watering constraint\", \"function\": \"0.5x + 1.5y <= 500\"}, {\"description\": \"compost constraint\", \"function\": \"70x + 50y <= 7400\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"AcresDaikons\", lowBound=0, cat='Continuous')  # number of acres to grow daikons\ny = LpVariable(\"AcresFennels\", lowBound=0, cat='Continuous')  # number of acres to grow fennels\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeRevenue\", LpMaximize)\n\n# Define the objective function\nproblem += 300 * x + 250 * y  # maximize revenue\n\n# Define the constraints\nproblem += x + y <= 300  # land constraint\nproblem += 0.5 * x + 1.5 * y <= 500  # watering constraint\nproblem += 70 * x + 50 * y <= 7400  # compost constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Number of acres to grow daikons:\", x.value())\nprint(\"Number of acres to grow fennels:\", y.value())\nprint(\"Total revenue:\", value(problem.objective))\n",
        "results": {
            "Number of acres to grow daikons": "0.0",
            "Number of acres to grow fennels": "148.0",
            "Total revenue": "37000.0"
        },
        "type": "linear-notable",
        "index": 184,
        "length": 452,
        "var_num": 2
    },
    {
        "question": "My family has decided to invest in real state for the first time. Currently, they have $600,000 to invest, some in apartments and the rest in townhouses. The money invested in apartments must not be greater than $200,000. They have decided that the money invested in apartments must be at least a half as much as that in townhouses.  If the apartments earn 10%, and the townhouses earn 15%, how much money should they invest in each to maximize profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nmoney_in_apartments = LpVariable(\"MoneyInApartments\", lowBound=0) # money invested in apartments\nmoney_in_townhouses = LpVariable(\"MoneyInTownhouses\", lowBound=0) # money invested in townhouses\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"RealStateInvestment\", LpMaximize)\n\n# Define the objective function\nobjective = 0.10 * money_in_apartments + 0.15 * money_in_townhouses\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += money_in_apartments <= 200000 # money in apartments should not be more than $200,000\nproblem += money_in_apartments >= 0.5 * money_in_townhouses # money in apartments must be at least half of that in townhouses\nproblem += money_in_apartments + money_in_townhouses <= 600000 # total investment is $600,000\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The money invested in apartments:\", money_in_apartments.value())\nprint(\"The money invested in townhouses:\", money_in_townhouses.value())\nprint(\"The maximum profit:\", objective.value())",
        "results": {
            "The money invested in apartments": "200000.0",
            "The money invested in townhouses": "400000.0",
            "The maximum profit": "80000.0"
        },
        "formulation": "maximize 15%y+10%x\nSubject to: \nx+y <= 600000\nx <= 200000\nx >= halfy (end)",
        "type": "linear-notable",
        "index": 185,
        "length": 452,
        "var_num": 2
    },
    {
        "question": "An accounting firm has senior accountants earning $3000 per week and junior accountants earning $1000 per week. The contracts with companies to provide accounting services require at least 100 accountants, of whom at least 5 must be senior accountants. To make sure there is enough experience on the accounting team, the number of senior accountants should be at least a third of the number to junior accountants. The firm wants to keep the weekly wage bill below $150000. Formulate an LP to minimize the wage bill.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_senior_accountants = LpVariable(\"NumSeniorAccountants\", lowBound=0, cat='Integer') # number of senior accountants\nnum_junior_accountants = LpVariable(\"NumJuniorAccountants\", lowBound=0, cat='Integer') # number of junior accountants\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"AccountingFirm\", LpMinimize)\n\n# Define the objective function\nobjective = 3000 * num_senior_accountants + 1000 * num_junior_accountants\nproblem += objective # minimize the total wage bill\n\n# Define the constraints\nproblem += num_senior_accountants + num_junior_accountants >= 100 # At least 100 accountants\nproblem += num_senior_accountants >= 5 # At least 5 senior accountants\nproblem += num_senior_accountants >= (1/3) * num_junior_accountants # The number of senior accountants should be at least a third of the number to junior accountants\nproblem += objective <= 150000 # weekly wage bill must be less than $150,000\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of senior accountants:\", num_senior_accountants.value())\nprint(\"The number of junior accountants:\", num_junior_accountants.value())\nprint(\"Total wage bill: $\", objective.value())",
        "results": {
            "The number of senior accountants": "25.0",
            "The number of junior accountants": "75.0",
            "Total wage bill": "150000.0"
        },
        "formulation": "minimize 3000x+1000y\nSubject to: \nx+y >= 100\nx >= 5\nx >= 3y\n3000x+1000y <= 150000 (end)",
        "type": "linear-notable",
        "index": 186,
        "length": 515,
        "var_num": 2
    },
    {
        "question": "An airport can either install escalators or elevators. Escalators can transport 20 people every minute whereas elevators can transport 8 people every minute. Escalators take up 5 units of space while elevators take 2 units of space. The airport needs to have enough capacity to transport at least 400 people every minute. Additionally, there must be at least three times more escalators than elevators and at least 2 elevators must be used. How many of each type should the airport install to minimize the total units of space taken?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_escalators = LpVariable(\"NumEscalators\", lowBound=0, cat='Integer') # number of escalators\nnum_elevators = LpVariable(\"NumElevators\", lowBound=2, cat='Integer') # number of elevators\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"AirportCapacity\", LpMinimize)\n\n# Define the objective function\nobjective = 5 * num_escalators + 2 * num_elevators\nproblem += objective # minimize the total units of space taken\n\n# Define the constraints\nproblem += 20 * num_escalators + 8 * num_elevators >= 400 # at least 400 people every minute\nproblem += num_escalators >= 3 * num_elevators # at least three times more escalators than elevators\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of escalators:\", num_escalators.value())\nprint(\"The number of elevators:\", num_elevators.value())\nprint(\"The total units of space taken:\", objective.value())",
        "results": {
            "The number of escalators": "18.0",
            "The number of elevators": "5.0",
            "The total units of space taken": "100.0"
        },
        "formulation": "minimize 2y+5x\nSubject to: \n20x+8y >= 400\nx >= 3y\ny >= 2 (end)",
        "type": "linear-notable",
        "index": 187,
        "length": 533,
        "var_num": 2
    },
    {
        "question": "You need to construct a A box with square base and no top. The box need hold a volume of 100 cubic inches. Find the dimensions of the box that requires the least material for the five sides.",
        "scenario": "## Define Variables:\nYou need to construct a box with a square base and no top.\n// variables: {\"side length of the square base\": \"x\", \"height of the box\": \"h\"}, where x, h >= 0\n\n## Define Objective Function:\nFind the dimensions of the box that requires the least material for the five sides.\n// The surface area of the box is the sum of the area of the square base and the area of the four sides. The area of the square base is x^2, and the area of the four sides is 4*x*h.\n// Therefore, the objective function is: Minimize x^2 + 4*x*h\n\n## Generate Constraint-1:\nThe volume of the box is 100 cubic inches.\n// The volume of the box is given by the formula x^2h, and it is given that the volume is 100. Therefore, the constraint is x^2h = 100",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"CONTINUOUS\", name=\"x\") # side length of the square base\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the box\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nmodel.addCons(obj == x**2 + 4*x*h)\n\n# Add constraints\nmodel.addCons(x**2*h == 100)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The side length of the square base:\", model.getVal(x))\n    print(\"The height of the box:\", model.getVal(h))\n    print(\"The minimum surface area of the box: \", model.getVal(obj))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The side length of the square base": "5.848206145096713",
            "The height of the box": "2.9238470606094826",
            "The minimum surface area of the box": "102.59855554521748"
        },
        "type": "nonlinear-notable",
        "index": 188,
        "length": 190,
        "var_num": 2
    },
    {
        "question": "A glass factory makes two types of glass panes: a regular glass pane and a tempered glass pane. Both require time on a heating and cooling machine. Both machines are available for a maximum of 300 minutes per day. It takes 3 minutes in the heating machine and 5 minutes in the cooling machine to make one regular glass pane. It takes 5 minutes in the heating machine and 8 minutes in the cooling machine to make one tempered glass pane. The profit per pane of regular glass is $8 and the profit per pane of tempered glass is $10. How many panes of each glass type should the factory make to maximize profit? What is the maximum profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_regular_panes = LpVariable(\"NumRegularPanes\", lowBound=0, cat='Integer') # number of regular glass panes\nnum_tempered_panes = LpVariable(\"NumTemperedPanes\", lowBound=0, cat='Integer') # number of tempered glass panes\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"GlassFactoryProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 8 * num_regular_panes + 10 * num_tempered_panes\nproblem += objective # maximize the profit\n\n# Define the constraints\nproblem += 3 * num_regular_panes + 5 * num_tempered_panes <= 300 # heating machine constraint\nproblem += 5 * num_regular_panes + 8 * num_tempered_panes <= 300 # cooling machine constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of regular glass panes:\", num_regular_panes.value())\nprint(\"The number of tempered glass panes:\", num_tempered_panes.value())\nprint(\"The maximum profit:\", objective.value())",
        "results": {
            "The number of regular glass panes": "60.0",
            "The number of tempered glass panes": "0.0",
            "The maximum profit": "480.0"
        },
        "formulation": "maximize 8x+10y\nSubject to: \n3x+5y <= 300\n5x+8y <= 300 (end)",
        "type": "linear-notable",
        "index": 189,
        "length": 635,
        "var_num": 2
    },
    {
        "question": "X-Luxury Cloth wants to add coats and skirts, both with printed designs, to its collection. Both coats and skirts require designing and printing. Each coat requires 1.5 hours of designing time and 2.5 hours of printing time. Each skirt requires 3 hours of designing time and 3.5 hours of printing time. The designers are available 45 hours a week and the printing machine is available 70 hours per week. Each coat nets the company $12 in profit, and each skirt nets $16 in profit. What ratio of coats and skirts will produce the most profit within the constraints?",
        "formulation": "{\"variable\": [{\"description\": \"number of coats\", \"name\": \"x\"}, {\"description\": \"number of skirts\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total profit\", \"function\": \"12x + 16y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"designers availability\", \"function\": \"1.5x + 3y <= 45\"}, {\"description\": \"printing machine availability\", \"function\": \"2.5x + 3.5y <= 70\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"Coats\", lowBound=0, cat='Continuous')  # number of coats\ny = LpVariable(\"Skirts\", lowBound=0, cat='Continuous')  # number of skirts\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ClothProduction\", LpMaximize)\n\n# Define the objective function\nproblem += 12 * x + 16 * y  # maximize the total profit\n\n# Define the constraints\nproblem += 1.5 * x + 3 * y <= 45  # designers availability\nproblem += 2.5 * x + 3.5 * y <= 70  # printing machine availability\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of coats:\", x.value())\nprint(\"The number of skirts:\", y.value())\nprint(\"The total profit:\", value(problem.objective))\n",
        "results": {
            "The number of coats": "28.0",
            "The number of skirts": "0.0",
            "The total profit": "336.0"
        },
        "type": "linear-notable",
        "index": 190,
        "length": 564,
        "var_num": 2
    },
    {
        "question": "A tourist spot in the mountains allows visitors to travel to the top either by hot-air balloon or gondola lift. A hot air balloon can carry 4 visitors while a gondola lift can carry 6 visitors. Each hot air balloon produces 10 units of pollution while each gondola lift produces 15 units of pollution. There can be at most 10 hot-air balloon rides and at least 70 visitors need to be transported. How many of each type of transport method should be taken to minimize the total pollution produced?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_balloon_rides = LpVariable(\"NumBalloonRides\", lowBound=0, upBound=10, cat='Integer') # number of balloon rides\nnum_gondola_rides = LpVariable(\"NumGondolaRides\", lowBound=0, cat='Integer') # number of gondola rides\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MountainTransport\", LpMinimize)\n\n# Define the objective function\nobjective = 10 * num_balloon_rides + 15 * num_gondola_rides\nproblem += objective # minimize the total pollution produced\n\n# Define the constraints\nproblem += 4 * num_balloon_rides + 6 * num_gondola_rides >= 70 # at least 70 visitors need to be transported\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of hot air balloon rides:\", num_balloon_rides.value())\nprint(\"The number of gondola lift rides:\", num_gondola_rides.value())\nprint(\"The total pollution produced:\", objective.value())",
        "results": {
            "The number of hot air balloon rides": "10.0",
            "The number of gondola lift rides": "5.0",
            "The total pollution produced": "175.0"
        },
        "formulation": "minimize 10x+15y\nSubject to: \nx <= 10\n4x+6y >= 70 (end)",
        "type": "linear-notable",
        "index": 191,
        "length": 496,
        "var_num": 2
    },
    {
        "question": "A new fast food place makes wraps and platters. Each wrap requires 5 units of meat and 3 units of rice. Each platter requires 7 units of meant and 5 units of rice. While each wrap takes 10 minutes to make, each platter takes 8 minutes to make. The fast food place must use at least 3000 units of meat and 2500 units of rice. Since wraps are easier to eat on the go, at least 3 times as many wraps need to be made as platter. How many of each should the fast food place make to minimize the total production time?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_wraps = LpVariable(\"NumWraps\", lowBound=0, cat='Integer') # number of wraps\nnum_platters = LpVariable(\"NumPlatters\", lowBound=0, cat='Integer') # number of platters\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FastFoodProduction\", LpMinimize)\n\n# Define the objective function\nobjective = 10 * num_wraps + 8 * num_platters\nproblem += objective # minimize the total production time\n\n# Define the constraints\nproblem += 5 * num_wraps + 7 * num_platters >= 3000 # must use at least 3000 units of meat\nproblem += 3 * num_wraps + 5 * num_platters >= 2500 # must use at least 2500 units of rice\nproblem += num_wraps >= 3 * num_platters # at least 3 times as many wraps need to be made as platter\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of wraps:\", num_wraps.value())\nprint(\"The number of platters:\", num_platters.value())\nprint(\"The total production time (in minutes):\", objective.value())",
        "results": {
            "The number of wraps": "537.0",
            "The number of platters": "178.0",
            "The total production time (in minutes)": "6794.0"
        },
        "formulation": "minimize 10x+8y\nSubject to: \n5x+7y >= 3000\n3x+5y >= 2500\nx >= 3y (end)",
        "type": "linear-notable",
        "index": 192,
        "length": 512,
        "var_num": 2
    },
    {
        "question": "The Curious electronics business wants to determine the level of production of its two hottest digital keyboards: A400 and P500. Making one A400 keyboard requires 5 hours of labour and yields a $35 profit. On the other hand, one P500 keyboard can be produced in 9 hours and offers a greater profit of $80. Given the demand forecast, the business decides to produce at least three times as many A400 keyboards as P500 ones. In addition, it can spend up to 45 hours a week to manufacture these keyboards. Can you help the business determine the number of each keyboard to be produced each week to obtain the maximum profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of A400 keyboards produced each week\", \"name\": \"x\"}, {\"description\": \"number of P500 keyboards produced each week\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total profit obtained\", \"function\": \"35x + 80y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"labour hours constraint\", \"function\": \"5x + 9y <= 45\"}, {\"description\": \"demand forecast constraint\", \"function\": \"x >= 3y\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"x\", lowBound=0, cat='Integer') # number of A400 keyboards\ny = LpVariable(\"y\", lowBound=0, cat='Integer') # number of P500 keyboards\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 35 * x + 80 * y\nproblem += objective # maximize the total profit obtained\n\n# Define the constraints\nproblem += 5 * x + 9 * y <= 45 # labour hours constraint\nproblem += x >= 3 * y # demand forecast constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Number of A400 keyboards to produce each week:\", x.value())\nprint(\"Number of P500 keyboards to produce each week:\", y.value())\nprint(\"Maximum profit:\", objective.value())\n",
        "results": {
            "Number of A400 keyboards to produce each week": "7.0",
            "Number of P500 keyboards to produce each week": "1.0",
            "Maximum profit": "325.0"
        },
        "type": "linear-notable",
        "index": 193,
        "length": 621,
        "var_num": 2
    },
    {
        "question": "Comp-Max Computers assembles computers and computer equipment. It is about to start production of three new types of computers, called model X, Y, and Z, respectively. Each type will require assembly time, inspection time, and storage space. The availability of each of these resources is limited. Specifically, available assembly time is 400 hours, available inspection time is 300 hours, and available storage space is 500 cubic feet (about 14.2 m\u00b3). The amount of each resource required for the different products and the profit per unit is reported in the table below. Due to some prior agreements with customers, Comp-Max must produce at least 12 model X computers. In addition, management requires that the fraction of total production made up of model Z computers must not exceed 25%. Formulate a linear program (LP) that will help the manager determine the quantity of each model to produce in order to maximize profit.\n\nTable (Resource requirements and profit per unit for each computer model):\n| Computer Model | Assembly Time (hours) | Inspection Time (hours) | Storage Space (cubic feet) | Profit per Unit ($) |\n| -------------- | --------------------- | ----------------------- | -------------------------- | ------------------- |\n| Model X        | 1                     | 2                       | 3                          | 100                 |\n| Model Y        | 2                     | 3                       | 4                          | 125                 |\n| Model Z        | 3                     | 4                       | 5                          | 200                 |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for model X, Y, and Z that adhere to the constraints given. Let's denote the number of model X computers as X, the number of model Y computers as Y, and the number of model Z computers as Z.\n```Variables\nX //number of model X computers to produce \nY //number of model Y computers to produce\nZ //number of model Z computers to produce\nX, Y, Z >= 0 and they are integers //non-negative integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function (profit) is given by the sum of the profit from each model. The profit from model X is $100 per unit * X units, the profit from model Y is $125 per unit * Y units, and the profit from model Z is $200 per unit * Z units. Therefore, the objective function is 100X + 125Y + 200Z.\n```Objective Function\nMaximize: 100X + 125Y + 200Z\n```\n\n# Constraints:\nWe have several constraints that limit the availability of resources and the production quantities of each model.\n```Constraints\n1X + 2Y + 3Z <= 400 //available assembly time\n2X + 3Y + 4Z <= 300 //available inspection time\n3X + 4Y + 5Z <= 500 //available storage space\nX >= 12 //minimum number of model X computers\nZ <= 0.25(X + Y + Z) //maximum number of model Z computers\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nX = LpVariable(\"X\", lowBound=12, cat='Integer') # number of model X computers to produce\nY = LpVariable(\"Y\", lowBound=0, cat='Integer') # number of model Y computers to produce\nZ = LpVariable(\"Z\", lowBound=0, cat='Integer') # number of model Z computers to produce\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CompMaxComputers\", LpMaximize)\n\n# Define the objective function\nobjective = 100*X + 125*Y + 200*Z\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 1*X + 2*Y + 3*Z <= 400 # available assembly time\nproblem += 2*X + 3*Y + 4*Z <= 300 # available inspection time\nproblem += 3*X + 4*Y + 5*Z <= 500 # available storage space\nproblem += X >= 12 # minimum number of model X computers\nproblem += Z <= 0.25 * (X + Y + Z) # maximum number of model Z computers\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of model X computers to produce:\", X.value())\nprint(\"The number of model Y computers to produce:\", Y.value())\nprint(\"The number of model Z computers to produce:\", Z.value())\nprint(\"The maximum profit:\", value(problem.objective))\n",
        "results": {
            "The number of model X computers to produce": "150.0",
            "The number of model Y computers to produce": "0.0",
            "The number of model Z computers to produce": "0.0",
            "The maximum profit": "15000.0"
        },
        "type": "linear-table",
        "index": 194,
        "length": 1603,
        "var_num": 3
    },
    {
        "question": "An amusement park has two types of games: throwing and climbing games. Throwing games attract 15 customers every hour and climbing games attract 8 customers every hour. Throwing games costs the amusement park $2 in prizes per hour whereas climbing games cost $3 in prizes per hour. Since throwing games yield the most profit, there must be at least twice as many throwing games as climbing games. However, at least 5 games must be climbing. If the amusement park can have at most $100 in prizes every hour, maximize the total number of customers attracted every hour.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_throwing_games = LpVariable(\"NumThrowingGames\", lowBound=0, cat='Integer') # number of throwing games\nnum_climbing_games = LpVariable(\"NumClimbingGames\", lowBound=5, cat='Integer') # number of climbing games\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"AmusementPark\", LpMaximize)\n\n# Define the objective function\nobjective = 15 * num_throwing_games + 8 * num_climbing_games\nproblem += objective # maximize the total number of customers attracted\n\n# Define the constraints\nproblem += 2 * num_throwing_games + 3 * num_climbing_games <= 100 # total prize cost must not exceed $100\nproblem += num_throwing_games >= 2 * num_climbing_games # throwing games should be at least twice as climbing games\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of throwing games:\", num_throwing_games.value())\nprint(\"The number of climbing games:\", num_climbing_games.value())\nprint(\"The total number of customers attracted per hour:\", objective.value())",
        "results": {
            "The number of throwing games": "42.0",
            "The number of climbing games": "5.0",
            "The total number of customers attracted per hour": "670.0"
        },
        "formulation": "maximize 8y+15x\nSubject to: \nx >= 2y\ny >= 5\n2x+3y <= 100 (end)",
        "type": "linear-notable",
        "index": 195,
        "length": 567,
        "var_num": 2
    },
    {
        "question": "Robertville Furniture Company (RFC) makes two types of dressers: the Classic and the Modern. RFC sells the Classic for $310 and the Modern for $350. At these prices, RFC believes it can sell up to 20 Classic and 25 Modern dressers per week. Each type of dresser is made of oak and covered with a pecan veneer. The cost of oak is $1.50 per square foot, and the cost of pecan veneer is $2 per square foot. The dressers must go through two manufacturing departments: cutting and veneering. The machine hours required for each dresser, as well as the wood requirements, are given in the following table. RFC has only 40 hours of production time available each week in each department, and it can obtain up to 2000 board feet of oak and 1500 square feet of pecan veneer each week. The cost of operating each manufacturing department is essentially fixed, so RFC would like to maximize its contribution to overhead (revenue minus variable costs).\n\nTable (Wood requirements and machine hours for each type of dresser):\n| Dresser Type | Oak Size (sq ft) | Pecan Size (sq ft) | Cutting Time (hrs) | Veneering Time (hrs) |\n| ------------ | ---------------- | ------------------ | ------------------ | -------------------- |\n| Classic      | 90               | 50                 | 1.20               | 1.00                 |\n| Modern       | 100              | 60                 | 0.90               | 1.20                 |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for Classic and Modern dressers that adhere to the constraints given. Let's denote the number of Classic dressers as C and the number of Modern dressers as M.\n```Variables\nC //number of Classic dressers to produce \nM //number of Modern dressers to produce\nC, M >= 0 and they are integers //Non-negative and integer variables\n```\n\n# Objective Function:\nWe want to maximize the contribution to overhead, which is the revenue minus the variable costs. \nThe revenue is the sum of the revenue from Classic and Modern dressers, which is 310C + 350M.\nThe variable costs consist of the cost of oak and pecan veneer. The cost of oak is $1.50 per board foot * (90C + 100M) board feet. The cost of pecan veneer is $2 per square foot * (50C + 60M) square feet. \nSo the total variable costs are 1.5(90C + 100M) + 2(50C + 60M) = 135C + 150M + 100C + 120M = 235C + 270M\nTherefore, the objective function is 310C + 350M - (235C + 270M) = 75C + 80M\n```Objective Function\nMaximize: 75C + 80M\n```\n\n# Constraints:\n```Constraints\n1.2C + 0.9M <= 40 //Maximum production hours of cutting department\nC + 1.2M <= 40 //Maximum production hours of veneering department\n90C + 100M <= 2000 //Maximum board feet of oak\n50C + 60M <= 1500 //Maximum square feet of pecan veneer\nC <= 20 //Maximum number of Classic dressers\nM <= 25 //Maximum number of Modern dressers\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nC = LpVariable(\"Classic\", lowBound=0, cat='Integer') # number of Classic dressers\nM = LpVariable(\"Modern\", lowBound=0, cat='Integer') # number of Modern dressers\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"RFC_Maximize_Profit\", LpMaximize)\n\n# Define the objective function\nobjective = 75 * C + 80 * M\nproblem += objective # maximize the contribution to overhead\n\n# Define the constraints\nproblem += 1.2 * C + 0.9 * M <= 40 # cutting department hours\nproblem += 1 * C + 1.2 * M <= 40 # veneering department hours\nproblem += 90 * C + 100 * M <= 2000 # oak wood constraint\nproblem += 50 * C + 60 * M <= 1500 # pecan veneer constraint\nproblem += C <= 20 # maximum Classic dressers\nproblem += M <= 25 # maximum Modern dressers\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of Classic dressers to produce:\", C.value())\nprint(\"The number of Modern dressers to produce:\", M.value())\nprint(\"The maximum contribution to overhead:\", objective.value())\n",
        "results": {
            "The number of Classic dressers to produce": "20.0",
            "The number of Modern dressers to produce": "2.0",
            "The maximum contribution to overhead": "1660.0"
        },
        "type": "linear-table",
        "index": 196,
        "length": 1415,
        "var_num": 2
    },
    {
        "question": "A disease testing station is conducting a temperature check and/or a blood test on each patient. A temperature check takes 2 minutes while a blood test takes 10 minutes. The disease testing station must conduct at least 45 blood tests. Since the temperature check is recommended to be performed on most people, the testing station requires that the temperature check is performed at least 5 times as many as the blood test. If the disease testing station only has a total of 22000 staff minutes, how many of each test or check should be done to maximize the number of patients seen?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_temp_checks = LpVariable(\"NumTempChecks\", lowBound=0, cat='Integer') # number of temperature checks\nnum_blood_tests = LpVariable(\"NumBloodTests\", lowBound=45, cat='Integer') # number of blood tests\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DiseaseTestingStation\", LpMaximize)\n\n# Define the objective function\nobjective = num_temp_checks + num_blood_tests\nproblem += objective # maximize the total number of patients seen\n\n# Define the constraints\nproblem += 2 * num_temp_checks + 10 * num_blood_tests <= 22000 # the total staff time is at most 22000 minutes\nproblem += num_temp_checks >= 5 * num_blood_tests # temperature checks should be performed at least 5 times as many as the blood test\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of temperature checks:\", num_temp_checks.value())\nprint(\"The number of blood tests:\", num_blood_tests.value())\nprint(\"The total number of patients seen:\", objective.value())",
        "results": {
            "The number of temperature checks": "10775.0",
            "The number of blood tests": "45.0",
            "The total number of patients seen": "10820.0"
        },
        "formulation": "maximize x+y\nSubject to: \n2x+10y <= 22000\ny >= 45\nx >= 5y (end)",
        "type": "linear-notable",
        "index": 197,
        "length": 582,
        "var_num": 2
    },
    {
        "question": "A snack exporter sends snacks to his customer in small and large suitcases. A small suitcase can hold 50 snacks while a large suitcase can hold 80 snacks. Most customer prefer small suitcases, and so at least twice as many small suitcases must be used as large suitcases. The exporter has available at most 70 small suitcases and 50 large suitcases. If he must send at least 15 large suitcases and can send  at most 70 suitcases in total, how many of each should he send to maximize the total number of snacks that can be delivered?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_small_suitcases = LpVariable(\"NumSmallSuitcases\", lowBound=0, upBound=70, cat='Integer') # number of small suitcases\nnum_large_suitcases = LpVariable(\"NumLargeSuitcases\", lowBound=15, upBound=50, cat='Integer') # number of large suitcases\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SnackExporter\", LpMaximize)\n\n# Define the objective function\nobjective = 50 * num_small_suitcases + 80 * num_large_suitcases\nproblem += objective # maximize the total number of snacks transported\n\n# Define the constraints\nproblem += num_small_suitcases >= 2 * num_large_suitcases # small suitcases must be at least twice as many as large suitcases\nproblem += num_small_suitcases + num_large_suitcases <= 70 # total suitcases cannot exceed 70\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of small suitcases:\", num_small_suitcases.value())\nprint(\"The number of large suitcases:\", num_large_suitcases.value())\nprint(\"The total number of snacks transported:\", objective.value())",
        "results": {
            "The number of small suitcases": "47.0",
            "The number of large suitcases": "23.0",
            "The total number of snacks transported": "4190.0"
        },
        "formulation": "maximize 50x+80y\nSubject to: \nx >= 2y\nx <= 70\ny <= 50\ny >= 15\nx+y <= 70 (end)",
        "type": "linear-notable",
        "index": 198,
        "length": 532,
        "var_num": 2
    },
    {
        "question": "You need to construct a rectangular play area alongside the wall of your house. You have 100 feet of fence. The wall of the house bounds one side. Please find the dimensions of the play area that maximize the area.",
        "scenario": "## Define Variables:\nYou need to construct a rectangular play area alongside the wall of your house.\n// variables: {\"length of the play area\": \"L\", \"width of the play area\": \"W\"}, where L, W >= 0\n\n## Define Objective Function:\nPlease find the dimensions of the play area that maximize the area.\n// The area of the play area is given by the product of the length and the width. Therefore, the objective function is: Maximize L * W\n\n## Generate Constraint-1:\nYou have 100 feet of fence. The wall of the house bounds one side.\n// The length of the play area and the two widths of the play area must sum to 100. The length of the play area is L, and the two widths are 2W. Therefore, the constraint is L + 2W <= 100",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nL = model.addVar(vtype=\"CONTINUOUS\", name=\"L\") # length of the play area\nW = model.addVar(vtype=\"CONTINUOUS\", name=\"W\") # width of the play area\n\n# Define objective function\nobj = model.addVar(vtype=\"C\", name=\"obj\")\nmodel.addCons(obj == L * W)\nmodel.setObjective(obj, \"maximize\")\n\n# Add constraints\nmodel.addCons(L + 2*W <= 100)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The length of the play area:\", model.getVal(L))\n    print(\"The width of the play area:\", model.getVal(W))\n    print(\"The maximum area of the play area: \", model.getVal(L * W))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The length of the play area": "50.0000",
            "The width of the play area": "25.0000",
            "The maximum area of the play area": "1250.00"
        },
        "type": "nonlinear-notable",
        "index": 199,
        "length": 214,
        "var_num": 2
    },
    {
        "question": "The ABC Firefighting Equipment company has two assembly plants: Plant A in Atlanta and plant B in Buffalo. It has two distribution centers: Center I in Savannah and center II in Pittsburgh. The company can product at most 800 alarm valves per week at plant A and at most 1000 per week at plant B. Center I must have at least 900 alarm valves per week and center II must have at least 600 alarm valves per week. The costs per unit for transportation from the plants to the centers follow. Plant A to center I    $8 Plant A to center II    $12 Plant B to center I    $16 Plant B to center II   $4  Form the constraint inequalities that give the limits for the plants and distribution centers and form the total cost function that is to be minimized. Solve the mixed constraint problem for the minimum transportation cost.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal transportation quantities from each plant to each center. Let's denote the number of alarm valves from plant A to center I as A1, from plant A to center II as A2, from plant B to center I as B1, and from plant B to center II as B2.\n```Variables\nA1 //number of alarm valves from plant A to center I\nA2 //number of alarm valves from plant A to center II\nB1 //number of alarm valves from plant B to center I\nB2 //number of alarm valves from plant B to center II\nA1, A2, B1, B2 >= 0 and they are integers //non-negative integer variables\n```\n\n# Objective Function:\nWe want to minimize the transportation cost, so the objective function is the sum of the transportation costs from each plant to each center. The transportation cost from plant A to center I is $8 per unit * A1 units. The transportation cost from plant A to center II is $12 per unit * A2 units. The transportation cost from plant B to center I is $16 per unit * B1 units. The transportation cost from plant B to center II is $4 per unit * B2 units. \nSo the total cost function is 8A1 + 12A2 + 16B1 + 4B2.\n```Objective Function\nMinimize: 8A1 + 12A2 + 16B1 + 4B2\n```\n\n# Constraints:\nThe constraints are as follows:\n- Plant A can produce at most 800 alarm valves per week, so the total number of alarm valves from plant A to center I and center II should be less than or equal to 800: A1 + A2 <= 800.\n- Plant B can produce at most 1000 alarm valves per week, so the total number of alarm valves from plant B to center I and center II should be less than or equal to 1000: B1 + B2 <= 1000.\n- Center I must have at least 900 alarm valves per week, so the total number of alarm valves from plant A and plant B to center I should be greater than or equal to 900: A1 + B1 >= 900.\n- Center II must have at least 600 alarm valves per week, so the total number of alarm valves from plant A and plant B to center II should be greater than or equal to 600: A2 + B2 >= 600.\n```Constraints\nA1 + A2 <= 800 //maximum number of alarm valves plant A can produce\nB1 + B2 <= 1000 //maximum number of alarm valves plant B can produce\nA1 + B1 >= 900 //minimum number of alarm valves center I has\nA2 + B2 >= 600 //minimum number of alarm valves center II has\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nA1 = LpVariable(\"A1\", lowBound=0, cat='Integer')\nA2 = LpVariable(\"A2\", lowBound=0, cat='Integer')\nB1 = LpVariable(\"B1\", lowBound=0, cat='Integer')\nB2 = LpVariable(\"B2\", lowBound=0, cat='Integer')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimizeTransportationCost\", LpMinimize)\n\n# Define the objective function\nobjective = 8 * A1 + 12 * A2 + 16 * B1 + 4 * B2\nproblem += objective\n\n# Define the constraints\nproblem += A1 + A2 <= 800\nproblem += B1 + B2 <= 1000\nproblem += A1 + B1 >= 900\nproblem += A2 + B2 >= 600\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of alarm valves from Plant A to Center I:\", A1.value())\nprint(\"The number of alarm valves from Plant A to Center II:\", A2.value())\nprint(\"The number of alarm valves from Plant B to Center I:\", B1.value())\nprint(\"The number of alarm valves from Plant B to Center II:\", B2.value())\nprint(\"The minimum transportation cost:\", objective.value())\n",
        "results": {
            "The number of alarm valves from Plant A to Center I": "800.0",
            "The number of alarm valves from Plant A to Center II": "0.0",
            "The number of alarm valves from Plant B to Center I": "100.0",
            "The number of alarm valves from Plant B to Center II": "600.0",
            "The minimum transportation cost": "10400.0"
        },
        "type": "linear-notable",
        "index": 200,
        "length": 819,
        "var_num": 4
    },
    {
        "question": "Out of a stock of three electronic components A, B, and C given as 200, 120, and 150 respectively, it is required to produce two types of circuits. Circuit type 1 requires 20 resistors, 10 transistors, and 10 capacitors, while circuit type 2 requires 10 resistors, 20 transistors, and 30 capacitors. Circuit type 1 sells at Gh.5 cedis each and type 2 circuit at Gh.12 cedis each. Advise management about how many of each type should be made to get the maximum financial returns algebraically.\n\nTable (Components required for each type of circuit):\n| Component | Circuit Type 1 | Circuit Type 2 | Stock Available |\n| --------- | -------------- | -------------- | --------------- |\n| A (Resistors) | 20             | 10             | 200             |\n| B (Transistors) | 10             | 20             | 120             |\n| C (Capacitors) | 10             | 30             | 150             |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for type 1 and type 2 circuits that adhere to the constraints given. Let's denote the number of type 1 circuits as x and the number of type 2 circuits as y.\n```Variables\nx //number of type 1 circuits to produce \ny //number of type 2 circuits to produce\nx, y >= 0 and they are integers //non-negative integer variables\n```\n\n# Objective Function:\nWe want to maximize the financial returns from the production of the circuits. The profit from the production of type 1 circuits is Gh.5 per circuit and Gh.12 per circuit for type 2 circuits. The objective function is therefore:\n```Objective\nMaximize: 5x + 12y\n```\n\n# Constraints:\n```Constraints\n20x + 10y <= 200 //maximum number of resistors\n10x + 20y <= 120 //maximum number of transistors\n10x + 30y <= 150 //maximum number of capacitors\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"x\", lowBound=0, cat='Integer') # number of type 1 circuits to produce\ny = LpVariable(\"y\", lowBound=0, cat='Integer') # number of type 2 circuits to produce\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeFinancialReturns\", LpMaximize)\n\n# Define the objective function\nproblem += 5 * x + 12 * y\n\n# Define the constraints\nproblem += 20 * x + 10 * y <= 200 # maximum number of resistors\nproblem += 10 * x + 20 * y <= 120 # maximum number of transistors\nproblem += 10 * x + 30 * y <= 150 # maximum number of capacitors\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of type 1 circuits to produce:\", x.value())\nprint(\"The number of type 2 circuits to produce:\", y.value())\nprint(\"The maximum financial returns:\", value(problem.objective))\n",
        "results": {
            "The number of type 1 circuits to produce": "6.0",
            "The number of type 2 circuits to produce": "3.0",
            "The maximum financial returns": "66.0"
        },
        "type": "linear-table",
        "index": 201,
        "length": 892,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA company is planning to optimize its production of five different products (Product A, Product B, Product C, Product D, and Product E) to maximize profit while considering the environmental impact of production.\n// variables: {\"number of units of Product A\": \"ProductA\", \"number of units of Product B\": \"ProductB\", \"number of units of Product C\": \"ProductC\", \"number of units of Product D\": \"ProductD\", \"number of units of Product E\": \"ProductE\"}, where ProductA, ProductB, ProductC, ProductD, ProductE >= 0 & ProductA, ProductB, ProductC, ProductD, ProductE are integers\n\n## Define Objective Function:\nThe profit per unit for Product A is $50, for Product B is $70, for Product C is $60, for Product D is $80, and for Product E is $90. The environmental impact per unit for Product A is 10 units, for Product B is 15 units, for Product C is 12 units, for Product D is 20 units, and for Product E is 18 units. The company wants to maximize the Profit-Impact ratio, where the Profit-Impact ratio is defined as the total profit divided by the total environmental impact.\n// total profit: Profit = 50 * ProductA + 70 * ProductB + 60 * ProductC + 80 * ProductD + 90 * ProductE\n// total environmental impact: Impact = 10 * ProductA + 15 * ProductB + 12 * ProductC + 20 * ProductD + 18 * ProductE\n// So, the objective function is: Maximize Profit / Impact\n\n## Generate Constraint-1:\nThe company has a total production capacity of 1500 units across all products.\n// ProductA + ProductB + ProductC + ProductD + ProductE <= 1500\n\n## Generate Constraint-2:\nThe company must produce at least 200 units of Product A and 300 units of Product B to fulfill contractual obligations.\n// ProductA >= 200\n// ProductB >= 300\n\n## Generate Constraint-3:\nThe total environmental impact should not exceed 20,000 units.\n// 10 * ProductA + 15 * ProductB + 12 * ProductC + 20 * ProductD + 18 * ProductE <= 20000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nProductA = model.addVar(vtype=\"INTEGER\", name=\"ProductA\", lb=0, ub=1500) # number of units of Product A\nProductB = model.addVar(vtype=\"INTEGER\", name=\"ProductB\", lb=0, ub=1500) # number of units of Product B\nProductC = model.addVar(vtype=\"INTEGER\", name=\"ProductC\", lb=0, ub=1500) # number of units of Product C\nProductD = model.addVar(vtype=\"INTEGER\", name=\"ProductD\", lb=0, ub=1500) # number of units of Product D\nProductE = model.addVar(vtype=\"INTEGER\", name=\"ProductE\", lb=0, ub=1500) # number of units of Product E\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\n\nRatio = model.addVar(name=\"Ratio\")\nmodel.setObjective(Ratio, \"maximize\")\nProfit = 50 * ProductA + 70 * ProductB + 60 * ProductC + 80 * ProductD + 90 * ProductE\nImpact = 10 * ProductA + 15 * ProductB + 12 * ProductC + 20 * ProductD + 18 * ProductE\nmodel.addCons(Ratio * Impact == Profit)\n\n# Add constraints\nmodel.addCons(ProductA + ProductB + ProductC + ProductD + ProductE <= 1500)\nmodel.addCons(ProductA >= 200)\nmodel.addCons(ProductB >= 300)\nmodel.addCons(10 * ProductA + 15 * ProductB + 12 * ProductC + 20 * ProductD + 18 * ProductE <= 20000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Profit-Impact Ratio: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Profit-Impact Ratio": "4.925000000000026"
        },
        "question": "A company is planning to optimize its production of five different products (Product A, Product B, Product C, Product D, and Product E) to maximize profit while considering the environmental impact of production. The company has a total production capacity of 1500 units across all products. The company must produce at least 200 units of Product A and 300 units of Product B to fulfill contractual obligations. The total environmental impact should not exceed 20,000 units. The profit per unit for Product A is $50, for Product B is $70, for Product C is $60, for Product D is $80, and for Product E is $90. The environmental impact per unit for Product A is 10 units, for Product B is 15 units, for Product C is 12 units, for Product D is 20 units, and for Product E is 18 units. The company wants to maximize the Profit-Impact ratio, where the Profit-Impact ratio is defined as the total profit divided by the total environmental impact.",
        "type": "nonlinear-notable",
        "index": 202,
        "length": 940,
        "var_num": 5
    },
    {
        "question": "The Kalo Fertilizer Company produces two brands of lawn fertilizer-Super Two and Green Grow-at plants in Fresno, California, and Dearborn, Michigan. The plant at Fresno has resources available to produce 5,000 pounds of fertilizer daily; the plant at Dearborn has enough resources to produce 6,000 pounds daily. The cost per pound of producing each brand at each plant is as follows: (cost of Production) Plant, Max Demand.Product, Fresno, Dearborn Available/day,  Price per Item. SuperTwo $2 $4 6,000 lbs/day $9/lb. Green Grow $2  $3 7,000 lbs/day $7/lb. The company has a daily budget of $45,000 for both plants combined. Based on past sales, the company knows the maximum demand (converted to a daily basis) is 6,000 pounds for Super Two and 7,000 pounds for Green Grow. The selling price is $9 per pound for Super Two and $7 per pound for Green Grow. The company wants to know the number of pounds of each brand of fertilizer to produce at each plant in order to maximize profit.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for Super Two and Green Grow at each plant. Let's denote the number of pounds of Super Two produced at Fresno as SF, the number of pounds of Super Two produced at Dearborn as SD, the number of pounds of Green Grow produced at Fresno as GF, and the number of pounds of Green Grow produced at Dearborn as GD.\n```\nVariables:\nSF // number of pounds of Super Two produced at Fresno\nSD // number of pounds of Super Two produced at Dearborn\nGF // number of pounds of Green Grow produced at Fresno\nGD // number of pounds of Green Grow produced at Dearborn\nSF, SD, GF, GD >= 0\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function is given by subtracting the total cost from the total revenue. \nThe total revenue is the sum of the revenue from Super Two and Green Grow, which is 9(SF + SD) + 7(GF + GD).\nThe total cost is the sum of the cost of production for Super Two and Green Grow at each plant. The cost of producing Super Two at Fresno is $2 per pound * SF pounds. The cost of producing Super Two at Dearborn is $4 per pound * SD pounds. The cost of producing Green Grow at Fresno is $2 per pound * GF pounds. The cost of producing Green Grow at Dearborn is $3 per pound * GD pounds.\nSo the total cost is 2SF + 4SD + 2GF + 3GD.\nTherefore, the objective function is 9(SF + SD) + 7(GF + GD) - (2SF + 4SD + 2GF + 3GD) = 7SF + 5SD + 5GF + 4GD.\n```\nObjective Function:\nMaximize: 7SF + 5SD + 5GF + 4GD\n```\n\n# Constraints:\nThe total cost of production cannot exceed $45,000. The total cost of production is 2SF + 4SD + 2GF + 3GD. So the first constraint is 2SF + 4SD + 2GF + 3GD <= 45,000.\nThe maximum demand for Super Two is 6,000 pounds. The maximum demand for Green Grow is 7,000 pounds. So the second constraint is SF + SD <= 6,000 and the third constraint is GF + GD <= 7,000.\nThe plant at Fresno has resources available to produce 5,000 pounds of fertilizer daily; the plant at Dearborn has enough resources to produce 6,000 pounds daily. \nSo the fourth constraint is SF + GF <= 5,000 and the fifth constraint is SD + GD <= 6,000.\n```\nConstraints:\n2SF + 4SD + 2GF + 3GD <= 45000 // total cost constraint\nSF + SD <= 6000 // Demand constraint for Super Two\nGF + GD <= 7000 // Demand constraint for Green Grow\nSF + GF <= 5000 // Resources constraint at Fresno\nSD + GD <= 6000 // Resources constraint at Dearborn\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nSF = LpVariable(\"SuperTwo_Fresno\", lowBound=0, cat='Continuous') # Super Two at Fresno\nSD = LpVariable(\"SuperTwo_Dearborn\", lowBound=0, cat='Continuous') # Super Two at Dearborn\nGF = LpVariable(\"GreenGrow_Fresno\", lowBound=0, cat='Continuous') # Green Grow at Fresno\nGD = LpVariable(\"GreenGrow_Dearborn\", lowBound=0, cat='Continuous') # Green Grow at Dearborn\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FertilizerProduction\", LpMaximize)\n\n# Define the objective function\nobjective = 7*SF + 5*SD + 5*GF + 4*GD\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 2*SF + 4*SD + 2*GF + 3*GD <= 45000 # the cost must be at most $45000\nproblem += SF + SD <= 6000 # Demand constraint for Super Two\nproblem += GF + GD <= 7000 # Demand constraint for Green Grow\nproblem += SF + GF <= 5000 # Resources constraint at Fresno\nproblem += SD + GD <= 6000 # Resources constraint at Dearborn\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of pounds of Super Two produced at Fresno:\", SF.value())\nprint(\"The number of pounds of Super Two produced at Dearborn:\", SD.value())\nprint(\"The number of pounds of Green Grow produced at Fresno:\", GF.value())\nprint(\"The number of pounds of Green Grow produced at Dearborn:\", GD.value())\nprint(\"The maximum profit:\", value(problem.objective))\n",
        "results": {
            "The number of pounds of Super Two produced at Fresno": "5000.0",
            "The number of pounds of Super Two produced at Dearborn": "1000.0",
            "The number of pounds of Green Grow produced at Fresno": "0.0",
            "The number of pounds of Green Grow produced at Dearborn": "5000.0",
            "The maximum profit": "60000.0"
        },
        "type": "linear-notable",
        "index": 203,
        "length": 983,
        "var_num": 4
    },
    {
        "scenario": "## Define Variables:\nA logistics company operates five different types of trucks: TruckA, TruckB, TruckC, TruckD, and TruckE. The company needs to determine how many of each type of truck to deploy for the next month to optimize its operations. Each type of truck has different fuel efficiency, maintenance costs, and cargo capacity.\n// variables: {\"number of TruckA\": \"TruckA\", \"number of TruckB\": \"TruckB\", \"number of TruckC\": \"TruckC\", \"number of TruckD\": \"TruckD\", \"number of TruckE\": \"TruckE\"}, where TruckA, TruckB, TruckC, TruckD, TruckE >= 0 & all are integers\n\n## Define Objective Function:\nFor TruckA, the fuel cost per kilometer is $2, maintenance cost per month is $1000, and cargo capacity is 10 tons.\nFor TruckB, the fuel cost per kilometer is $3, maintenance cost per month is $1500, and cargo capacity is 15 tons.\nFor TruckC, the fuel cost per kilometer is $4, maintenance cost per month is $2000, and cargo capacity is 20 tons.\nFor TruckD, the fuel cost per kilometer is $5, maintenance cost per month is $2500, and cargo capacity is 25 tons.\nFor TruckE, the fuel cost per kilometer is $6, maintenance cost per month is $3000, and cargo capacity is 30 tons.\nEach truck needs to run 2000 kilometers every moth. The company aims to minimize the total cost per ton-kilometer (defined as the sum of the monthly maintenance costs and fuel costs per kilometer, divided by the total cargo capacity in tons).\n// Total cost for TruckA: Cost_TruckA = (2 * 2000 + 1000) * TruckA\n// Total cost for TruckB: Cost_TruckB = (3 * 2000 + 1500) * TruckB\n// Total cost for TruckC: Cost_TruckC = (4 * 2000 + 2000) * TruckC\n// Total cost for TruckD: Cost_TruckD = (5 * 2000 + 2500) * TruckD\n// Total cost for TruckE: Cost_TruckE = (6 * 2000 + 3000) * TruckE\n// So, the objective function is: Minimize ((Cost_TruckA + Cost_TruckB + Cost_TruckC + Cost_TruckD + Cost_TruckE) / (10 * TruckA + 15 * TruckB + 20 * TruckC + 25 * TruckD + 30 * TruckE))\n\n## Generate Constraint-1:\nThe company has a budget of $100,000 for maintenance costs next month.\n// 1000 * TruckA + 1500 * TruckB + 2000 * TruckC + 2500 * TruckD + 3000 * TruckE <= 100,000\n\n## Generate Constraint-2:\nThe company needs to transport at least 500 tons of cargo next month.\n// 10 * TruckA + 15 * TruckB + 20 * TruckC + 25 * TruckD + 30 * TruckE >= 500\n\n## Generate Constraint-3:\nDue to licensing restrictions, the company can operate at most 30 trucks in total.\n// TruckA + TruckB + TruckC + TruckD + TruckE <= 30",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nTruckA = model.addVar(vtype=\"INTEGER\", name=\"TruckA\") # number of TruckA\nmodel.addCons(TruckA >= 0)\nTruckB = model.addVar(vtype=\"INTEGER\", name=\"TruckB\") # number of TruckB\nmodel.addCons(TruckB >= 0)\nTruckC = model.addVar(vtype=\"INTEGER\", name=\"TruckC\") # number of TruckC\nmodel.addCons(TruckC >= 0)\nTruckD = model.addVar(vtype=\"INTEGER\", name=\"TruckD\") # number of TruckD\nmodel.addCons(TruckD >= 0)\nTruckE = model.addVar(vtype=\"INTEGER\", name=\"TruckE\") # number of TruckE\nmodel.addCons(TruckE >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nCost_TruckA = (2 * 2000 + 1000) * TruckA\nCost_TruckB = (3 * 2000 + 1500) * TruckB\nCost_TruckC = (4 * 2000 + 2000) * TruckC\nCost_TruckD = (5 * 2000 + 2500) * TruckD\nCost_TruckE = (6 * 2000 + 3000) * TruckE\nCargo_Capacity = 10 * TruckA + 15 * TruckB + 20 * TruckC + 25 * TruckD + 30 * TruckE\nmodel.addCons(obj * Cargo_Capacity == Cost_TruckA + Cost_TruckB + Cost_TruckC + Cost_TruckD + Cost_TruckE)\n\n# Add constraints\nmodel.addCons(1000 * TruckA + 1500 * TruckB + 2000 * TruckC + 2500 * TruckD + 3000 * TruckE <= 100000)\nmodel.addCons(10 * TruckA + 15 * TruckB + 20 * TruckC + 25 * TruckD + 30 * TruckE >= 500)\nmodel.addCons(TruckA + TruckB + TruckC + TruckD + TruckE <= 30)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Total Cost per Ton-Kilometer: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Total Cost per Ton-Kilometer": "500.0"
        },
        "question": "A logistics company operates five different types of trucks: TruckA, TruckB, TruckC, TruckD, and TruckE. The company needs to determine how many of each type of truck to deploy for the next month to optimize its operations. Each type of truck has different fuel efficiency, maintenance costs, and cargo capacity. The details for each type of truck are given in the following Table.\n\n| Truck Type | Fuel Cost per Kilometer | Maintenance Cost per Month | Cargo Capacity |\n|------------|-------------------------|----------------------------|----------------|\n| TruckA     | $2                      | $1000                      | 10 tons        |\n| TruckB     | $3                      | $1500                      | 15 tons        |\n| TruckC     | $4                      | $2000                      | 20 tons        |\n| TruckD     | $5                      | $2500                      | 25 tons        |\n| TruckE     | $6                      | $3000                      | 30 tons        |\n\nEach truck needs to run 2000 kilometers every month. The company aims to minimize the total cost per ton-kilometer (defined as the sum of the monthly maintenance costs and fuel costs per kilometer, divided by the total cargo capacity in tons). The company has a budget of $100,000 for maintenance costs next month. The company needs to transport at least 500 tons of cargo next month. Due to licensing restrictions, the company can operate at most 30 trucks in total.\n",
        "type": "nonlinear-table",
        "index": 204,
        "length": 1460,
        "var_num": 5
    },
    {
        "question": "A tropical farmer has available 200 acres of land to grow pineapples and bananas. He likes bananas, but because they require so much more work, he can grow at most 4 times the amount of bananas as pineapples. In addition he must grow at least 40 acres of pineapples and at least 60 acres of bananas. If the profit per acre of pineapples is $200 and the profit per acres of bananas is $150, how many acre of each should he grow to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of acres of pineapples\", \"name\": \"x\"}, {\"description\": \"number of acres of bananas\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total profit\", \"function\": \"200x + 150y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"total land constraint\", \"function\": \"x + y <= 200\"}, {\"description\": \"banana to pineapple ratio constraint\", \"function\": \"y <= 4x\"}, {\"description\": \"minimum pineapple constraint\", \"function\": \"x >= 40\"}, {\"description\": \"minimum banana constraint\", \"function\": \"y >= 60\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_acres_pineapples = LpVariable(\"NumAcresPineapples\", lowBound=40, cat='Continuous') # number of acres of pineapples\nnum_acres_bananas = LpVariable(\"NumAcresBananas\", lowBound=60, cat='Continuous') # number of acres of bananas\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"TropicalFarmProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 200 * num_acres_pineapples + 150 * num_acres_bananas\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += num_acres_pineapples + num_acres_bananas <= 200 # total land constraint\nproblem += num_acres_bananas <= 4 * num_acres_pineapples # banana to pineapple ratio constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of acres of pineapples:\", num_acres_pineapples.value())\nprint(\"The number of acres of bananas:\", num_acres_bananas.value())\nprint(\"The maximum profit:\", objective.value())\n",
        "results": {
            "The number of acres of pineapples": "140.0",
            "The number of acres of bananas": "60.0",
            "The maximum profit": "37000.0"
        },
        "type": "linear-notable",
        "index": 205,
        "length": 446,
        "var_num": 2
    },
    {
        "question": "Gandhi Cloth Company is capable of manufacturing three types of clothing: shirts, shorts, and pants. The manufacture of each type of clothing requires that Gandhi have the appropriate type of machinery available. The machinery needed to manufacture each type of clothing must be rented at the following rates: shirt machinery, $200 per week; shorts machinery, $150 per week; pants machinery, $100 per week. The manufacture of each type of clothing also requires the amounts of cloth and labor shown in Table 2. Clothing type, labor hours, Cloth: (Shirt 3, 4), (shorts, 2, 3), (pants, 6, 4). Each week, 150 hours of labor and 160 sq yd of cloth are available. The variable unit cost and selling price for each type of clothing are shown in Table 3. Revenue and Cost Information, Clothing type, sales price, variable (Shirt 12, 6), (shorts, 8, 4), (pants, 15, 8). Formulate an LP whose solution will maximize Gandhi's weekly profits.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for shirts, shorts, and pants, as well as the number of machinery rented for each type. Let's denote the number of shirts produced each week as S, the number of shorts produced each week as SH, and the number of pants produced each week as P. Additionally, let's denote the number of shirt machineries rented as SM, the number of shorts machineries rented as SHM, and the number of pants machineries rented as PM.\n```Variables\nS // number of shirts produced each week\nSH // number of shorts produced each week\nP // number of pants produced each week\nS, SH, P >= 0 and they are integers // non-negative integer variables\nSM // whether the shirt machinery should be rented\nSHM // whether the shorts machinery should be rented\nPM // whether the pants machinery should be rented \nSM, SHM, PM = 0 or 1 // binary variables\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function (profit) is given by subtracting the total cost from the total revenue. \nThe total revenue is the sum of the revenue from shirts, shorts, and pants, which is 12S + 8SH + 15P.\nThe total cost is the sum of the cost of the machineries rented and the cost of the units produced. The cost of the shirt machinery is $200 per week * SM, the cost of the shorts machinery is $150 per week * SHM, and the cost of the pants machinery is $100 per week * PM. \nThe cost of the units produced is the sum of the cost of the shirts, shorts, and pants, which is 6S + 4SH + 8P.\nSo the total cost is 200SM + 150SHM + 100PM + 6S + 4SH + 8P.\nTherefore, the objective function is given by:\n12S + 8SH + 15P - 200SM - 150SHM - 100PM - 6S - 4SH - 8P = 6S + 4SH + 7P - 200SM - 150SHM - 100PM\n```Objective Function\nMaximize: 6S + 4SH + 7P - 200SM - 150SHM - 100PM\n```\n\n# Constraints:\nThe labor hours constraint states that the total labor hours used for shirts, shorts, and pants production should not exceed the available labor hours of 150 hours per week. This can be expressed as:\n3S + 2SH + 6P <= 150\n\nThe cloth constraint states that the total amount of cloth used for shirts, shorts, and pants production should not exceed the available cloth of 160 sq yd per week. This can be expressed as:\n4S + 3SH + 4P <= 160\n\n```Constraints\n3S + 2SH + 6P <= 150\n4S + 3SH + 4P <= 160\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nS = LpVariable(\"Shirts\", lowBound=0, cat='Integer')\nSH = LpVariable(\"Shorts\", lowBound=0, cat='Integer')\nP = LpVariable(\"Pants\", lowBound=0, cat='Integer')\nSM = LpVariable(\"ShirtMachinery\", cat='Binary')\nSHM = LpVariable(\"ShortsMachinery\", cat='Binary')\nPM = LpVariable(\"PantsMachinery\", cat='Binary')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"GandhiClothCompanyProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 6*S + 4*SH + 7*P - 200*SM - 150*SHM - 100*PM\nproblem += objective\n\n# Define the constraints\nproblem += 3*S + 2*SH + 6*P <= 150\nproblem += 4*S + 3*SH + 4*P <= 160\nproblem += S <= 1000*SM  # Ensures that if S > 0, then SM must be 1 (machinery rented)\nproblem += SH <= 1000*SHM  # Ensures that if SH > 0, then SHM must be 1 (machinery rented)\nproblem += P <= 1000*PM  # Ensures that if P > 0, then PM must be 1 (machinery rented)\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of shirts produced each week:\", S.value())\nprint(\"The number of shorts produced each week:\", SH.value())\nprint(\"The number of pants produced each week:\", P.value())\nprint(\"Shirt machinery rented:\", SM.value())\nprint(\"Shorts machinery rented:\", SHM.value())\nprint(\"Pants machinery rented:\", PM.value())\nprint(\"The maximum weekly profit:\", objective.value())\n",
        "results": {
            "The number of shirts produced each week": "0.0",
            "The number of shorts produced each week": "0.0",
            "The number of pants produced each week": "25.0",
            "Shirt machinery rented": "0.0",
            "Shorts machinery rented": "0.0",
            "Pants machinery rented": "1.0",
            "The maximum weekly profit": "75.0"
        },
        "type": "linear-table",
        "index": 206,
        "length": 931,
        "var_num": 6
    },
    {
        "question": "A factory makes soccer balls and basket balls. Soccer balls take 5 minutes on the manufacturing machine and 3 minutes to fill with air. Basket balls take 7 minutes on the manufacturing machine and 4 minutes to fill with air. The factory can run the manufacturing machine for at most 700 minutes and they have 500 minutes available for filling the balls with air. If the profit per soccer ball is $4 and the profit per basket all is $5, how many of each ball should the factory make to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of soccer balls\", \"name\": \"x\"}, {\"description\": \"number of basket balls\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total profit\", \"function\": \"4x + 5y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"manufacturing time constraint\", \"function\": \"5x + 7y <= 700\"}, {\"description\": \"air fill time constraint\", \"function\": \"3x + 4y <= 500\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_soccer_balls = LpVariable(\"NumSoccerBalls\", lowBound=0, cat='Integer') # number of soccer balls\nnum_basket_balls = LpVariable(\"NumBasketBalls\", lowBound=0, cat='Integer') # number of basket balls\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BallFactoryProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 4 * num_soccer_balls + 5 * num_basket_balls\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 5 * num_soccer_balls + 7 * num_basket_balls <= 700 # manufacturing time constraint\nproblem += 3 * num_soccer_balls + 4 * num_basket_balls <= 500 # air fill time constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of soccer balls:\", num_soccer_balls.value())\nprint(\"The number of basket balls:\", num_basket_balls.value())\nprint(\"The total profit:\", objective.value())\n",
        "results": {
            "The number of soccer balls": "140.0",
            "The number of basket balls": "0.0",
            "The total profit": "560.0"
        },
        "type": "linear-notable",
        "index": 207,
        "length": 501,
        "var_num": 2
    },
    {
        "question": "Stockco is considering four investments. Investment 1 will yield a net present value (NPV) of $16,000; investment 2, an NPV of $22,000; investment 3, an NPV of $12,000; and in- vestment 4, an NPV of $8,000. Each investment requires a certain cash outflow at the pres- ent time: investment 1, $5,000; investment 2, $7,000; investment 3, $4,000; and investment 4, $3,000. Currently, $14,000 is available for investment. Formulate an LP whose solution will tell Stockco how to maximize the NPV obtained from investments 1-4.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal investment quantities for each investment. Let's denote the number of investment 1 as I1, the number of investment 2 as I2, the number of investment 3 as I3, and the number of investment 4 as I4.\nAdditionally, since we can only choose to invest or not invest in each investment, the investment quantities should be binary. Therefore, we have the binary constraint: I1, I2, I3, I4 = 0 or 1.\n```Variables\nI1 //number of investment 1\nI2 //number of investment 2\nI3 //number of investment 3\nI4 //number of investment 4\nI1, I2, I3, I4 = 0 or 1 //binary variables\n```\n\n# Objective Function:\nWe want to maximize the net present value (NPV) obtained from investments 1-4. The NPV for each investment is given as follows: \nInvestment 1: $16,000\nInvestment 2: $22,000\nInvestment 3: $12,000\nInvestment 4: $8,000\nTherefore, the objective function is the sum of the NPV for each investment multiplied by the corresponding investment quantity: 16000I1 + 22000I2 + 12000I3 + 8000I4.\n```Objective Function\nMaximize: 16000I1 + 22000I2 + 12000I3 + 8000I4\n```\n\n# Constraints:\nThe available investment is $14,000, so the total cash outflow cannot exceed this amount. The cash outflow for each investment is given as follows:\nInvestment 1: $5,000\nInvestment 2: $7,000\nInvestment 3: $4,000\nInvestment 4: $3,000\nTherefore, the constraint is: 5000I1 + 7000I2 + 4000I3 + 3000I4 <= 14000.\n```Constraints\n5000I1 + 7000I2 + 4000I3 + 3000I4 <= 14000\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nI1 = LpVariable(\"Investment_1\", cat='Binary') # Investment 1\nI2 = LpVariable(\"Investment_2\", cat='Binary') # Investment 2\nI3 = LpVariable(\"Investment_3\", cat='Binary') # Investment 3\nI4 = LpVariable(\"Investment_4\", cat='Binary') # Investment 4\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeNPV\", LpMaximize)\n\n# Define the objective function\nproblem += 16000 * I1 + 22000 * I2 + 12000 * I3 + 8000 * I4\n\n# Define the constraints\nproblem += 5000 * I1 + 7000 * I2 + 4000 * I3 + 3000 * I4 <= 14000\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Investment in 1:\", I1.value())\nprint(\"Investment in 2:\", I2.value())\nprint(\"Investment in 3:\", I3.value())\nprint(\"Investment in 4:\", I4.value())\nprint(\"Total NPV:\", value(problem.objective))\n",
        "results": {
            "Investment in 1": "0.0",
            "Investment in 2": "1.0",
            "Investment in 3": "1.0",
            "Investment in 4": "1.0",
            "Total NPV": "42000.0"
        },
        "type": "linear-notable",
        "index": 208,
        "length": 521,
        "var_num": 4
    },
    {
        "question": "Thunder Wood is a logging company and it cuts three specific trees: Elm, Oak, and Alder. The company has two operations. The north side operation costs $450 to operate per day and produces 5 elm trees, 5 oak trees, and 4 alder trees daily. The south side operation costs $550 to operate per day and produces 6 elm trees, 4 oak trees, and 6 alder trees daily. The logging company must provide a paper pulp with 25 elm trees, 15 oak trees, and 30 alder trees per week. How many days a week should each operation be run in order to minimize cost while meeting the requirements?",
        "formulation": "{\"variable\": [{\"description\": \"number of days the north side operation is run per week\", \"name\": \"x\"}, {\"description\": \"number of days the south side operation is run per week\", \"name\": \"y\"}], \"objective\": [{\"description\": \"cost of operation\", \"function\": \"450x + 550y\", \"sense\": \"Minimize\"}], \"constraint\": [{\"description\": \"number of elm trees\", \"function\": \"5x + 6y >= 25\"}, {\"description\": \"number of oak trees\", \"function\": \"5x + 4y >= 15\"}, {\"description\": \"number of alder trees\", \"function\": \"4x + 6y >= 30\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_days_north = LpVariable(\"NumDaysNorth\", lowBound=0, cat='Integer') # number of days the north side operation is run per week\nnum_days_south = LpVariable(\"NumDaysSouth\", lowBound=0, cat='Integer') # number of days the south side operation is run per week\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"LoggingCompany\", LpMinimize)\n\n# Define the objective function\nobjective = 450 * num_days_north + 550 * num_days_south\nproblem += objective # minimize the cost of operation\n\n# Define the constraints\nproblem += 5 * num_days_north + 6 * num_days_south >= 25 # number of elm trees\nproblem += 5 * num_days_north + 4 * num_days_south >= 15 # number of oak trees\nproblem += 4 * num_days_north + 6 * num_days_south >= 30 # number of alder trees\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Number of days to run north side operation:\", num_days_north.value())\nprint(\"Number of days to run south side operation:\", num_days_south.value())\nprint(\"Total operation cost:\", objective.value())\n",
        "results": {
            "Number of days to run north side operation": "0.0",
            "Number of days to run south side operation": "5.0",
            "Total operation cost": "2750.0"
        },
        "type": "linear-notable",
        "index": 209,
        "length": 574,
        "var_num": 2
    },
    {
        "question": "Employees have the option of car-pooling to work or taking the company bus. A car can take 4 employees and produces 10 units of pollution, while a bus can take 20 employees and produces 30 units of pollution. At least 300 employees need to be transported and at most 4 buses can be used. How many of each type of transport should be taken to minimize the total pollution produced.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_cars = LpVariable(\"NumCars\", lowBound=0, cat='Integer') # number of cars\nnum_buses = LpVariable(\"NumBuses\", lowBound=0, cat='Integer') # number of buses\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CompanyTransport\", LpMinimize)\n\n# Define the objective function\nobjective = 10 * num_cars + 30 * num_buses\nproblem += objective # minimize the total pollution\n\n# Define the constraints\nproblem += 4 * num_cars + 20 * num_buses >= 300 # at least 300 employees need to be transported\nproblem += num_buses <= 4 # at most 4 buses can be used\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of cars:\", num_cars.value())\nprint(\"The number of buses:\", num_buses.value())\nprint(\"Total pollution produced:\", objective.value())",
        "results": {
            "The number of cars": "55.0",
            "The number of buses": "4.0",
            "Total pollution produced": "670.0"
        },
        "formulation": "minimize 10x+30y\nSubject to: \n4x+20y >= 300\ny <= 4 (end)",
        "type": "linear-notable",
        "index": 210,
        "length": 380,
        "var_num": 2
    },
    {
        "question": "A soda company sells soda in two types of containers: cans and glass bottles. A can holds 250 ml of soda whereas a bottle holds 1000 ml of soda. The soda company needs to bottle at least 1000000 ml of soda every day and due to the ability to sell soda cans as packs, there must be at least three times more cans than glass bottles. However, because of previous contracts with gas stations, there must be at least 100 glass bottles made. How many of each should be made to minimize the total number of units produced?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_cans = LpVariable(\"NumCans\", lowBound=0, cat='Integer') # number of soda cans\nnum_bottles = LpVariable(\"NumBottles\", lowBound=100, cat='Integer') # number of soda bottles\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SodaBottling\", LpMinimize)\n\n# Define the objective function\nobjective = num_cans + num_bottles\nproblem += objective # maximize the total number of units produced\n\n# Define the constraints\nproblem += 250 * num_cans + 1000 * num_bottles >= 1000000 # the soda company needs to bottle at least 1,000,000 ml of soda\nproblem += num_cans >= 3 * num_bottles # there must be at least three times more cans than bottles\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of soda cans:\", num_cans.value())\nprint(\"The number of soda bottles:\", num_bottles.value())\nprint(\"The total number of units produced:\", objective.value())",
        "results": {
            "The number of soda cans": "1716.0",
            "The number of soda bottles": "571.0",
            "The total number of units produced": "2287.0"
        },
        "formulation": "maximize x+y\nSubject to: \n250x+1000y >= 1000000\nx >= 3y\ny >= 100 (end)",
        "type": "linear-notable",
        "index": 211,
        "length": 516,
        "var_num": 2
    },
    {
        "question": "A landscape architect plans to enclose a rectangular region in a botanical garden. The area of the rectangular region should be at least 3000 square feet. She will use shrubs costing $25 per foot along three sides and fencing costing $10 per foot along the fourth side. What dimensions of the rectangular region will result in the least possible cost?",
        "scenario": "## Define Variables:\nA landscape architect plans to enclose a rectangular region in a botanical garden. \n// variables: {\"length of the rectangle\": \"L\", \"width of the rectangle\": \"W\"}, where L, W >= 0\n\n## Define Objective Function:\nShe will use shrubs costing $25 per foot along three sides and fencing costing $10 per foot along the fourth side. What dimensions of the rectangular region will result in the least possible cost?\n// The cost of the shrubs is $25 per foot along three sides, and the cost of the fencing is $10 per foot along the fourth side. The cost of the shrubs is 25 * (L + 2W), and the cost of the fencing is 10 * L.\n// So, the objective function is: Minimize 25 * (L + 2W) + 10 * L\n\n## Generate Constraint-1:\nThe area of the rectangular region should be at least 3000 square feet.\n// L * W >= 3000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nL = model.addVar(vtype=\"CONTINUOUS\", name=\"L\") # length of the rectangle\nW = model.addVar(vtype=\"CONTINUOUS\", name=\"W\") # width of the rectangle\n\n# Define objective function\ncost = 25 * (L + 2*W) + 10 * L\nmodel.setObjective(cost, \"minimize\")\n\n# Add constraints\nmodel.addCons(L * W >= 3000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The length of the rectangle:\", model.getVal(L))\n    print(\"The width of the rectangle:\", model.getVal(W))\n    print(\"The least possible cost: \", model.getVal(cost))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The length of the rectangle": "65.46536706097805",
            "The width of the rectangle": "45.825756942684635",
            "The least possible cost": "4582.575694268464"
        },
        "type": "nonlinear-notable",
        "index": 212,
        "length": 351,
        "var_num": 2
    },
    {
        "question": "Four-product T-shirt/sweatshirt manufacturing company. Must complete production within 72 hours Truck capacity = 1,200 standard sized boxes. Standard size box holds12 T-shirts. One-dozen sweatshirts box is three times size of standard box. $25,000 available for a production run.  500 dozen blank T-shirts and sweatshirts in stock. How many dozens (boxes) of each type of shirt to produce for maximizing profit? Resource requirements for the product mix example. Processing Time (hr) Per dozen, Cost ($) per dozen, Profit ($) per dozen. Sweatshirt -F: 0.10 $36 $90. Sweatshirt - B/F:0.25 48 125. T-shirt - F:0.08 25 45. T-shirt - B/F: 0.21 35 65.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for each type of shirt. Let's denote the number of sweatshirts with front printing as SF, the number of sweatshirts with back and front printing as SBF, the number of T-shirts with front printing as TF, and the number of T-shirts with back and front printing as TBF.\n```Variables\nSF //number of sweatshirts with front printing to produce\nSBF //number of sweatshirts with back and front printing to produce\nTF //number of T-shirts with front printing to produce\nTBF //number of T-shirts with back and front printing to produce\nSF, SBF, TF, TBF >= 0 and they are integers //non-negative integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function is given by the sum of the profit from each type of shirt. The profit for each type of shirt is given as follows:\n- Sweatshirt with front printing: $90 per dozen * SF dozens\n- Sweatshirt with back and front printing: $125 per dozen * SBF dozens\n- T-shirt with front printing: $45 per dozen * TF dozens\n- T-shirt with back and front printing: $65 per dozen * TBF dozens\nTherefore, the objective function is 90SF + 125SBF + 45TF + 65TBF.\n```Objective Function\nMaximize: 90SF + 125SBF + 45TF + 65TBF\n```\n\n# Constraints:\n- Processing Time Constraint: The total processing time for each type of shirt should not exceed 72 hours. The processing time for each type of shirt is given as follows:\n  - Sweatshirt with front printing: 0.10 hours per dozen * SF dozens\n  - Sweatshirt with back and front printing: 0.25 hours per dozen * SBF dozens\n  - T-shirt with front printing: 0.08 hours per dozen * TF dozens\n  - T-shirt with back and front printing: 0.21 hours per dozen * TBF dozens\n  Therefore, the processing time constraint is 0.10SF + 0.25SBF + 0.08TF + 0.21TBF <= 72.\n- Truck Capacity Constraint: The total number of boxes of shirts should not exceed the truck capacity of 1,200 standard-sized boxes. Each standard-sized box holds 12 T-shirts, and each one-dozen sweatshirt box is three times the size of a standard box. Therefore, the truck capacity constraint is 3SF + 3SBF + TF + TBF <= 1,200.\n- Available Resources Constraint: The total cost of producing each type of shirt should not exceed the available budget of $25,000. The cost for each type of shirt is given as follows:\n  - Sweatshirt with front printing: $36 per dozen * SF dozens\n  - Sweatshirt with back and front printing: $48 per dozen * SBF dozens\n  - T-shirt with front printing: $25 per dozen * TF dozens\n  - T-shirt with back and front printing: $35 per dozen * TBF dozens\n  Therefore, the available resources constraint is 36SF + 48SBF + 25TF + 35TBF <= 25,000.\n- Blank Shirts Constraint: The total number of blank shirts (without any printing) should not exceed the available stock of 500 dozen shirts. Therefore, the blank shirts constraint is SF + SBF <= 500.\n- Total Number of Shirts Constraint: The total number of shirts produced should be equal to 500 dozen shirts. Therefore, the total number of shirts constraint is TF + TBF = 500.\n```Constraints\n0.10SF + 0.25SBF + 0.08TF + 0.21TBF <= 72 //Processing Time Constraint\n3SF + 3SBF + TF + TBF <= 1,200 //Truck Capacity Constraint\n36SF + 48SBF + 25TF + 35TBF <= 25,000 //Available Resources Constraint\nSF + SBF <= 500 //Blank Shirts Constraint\nTF + TBF = 500 //Total Number of Shirts Constraint\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nSF = LpVariable(\"Sweatshirts_Front\", lowBound=0, cat='Integer')\nSBF = LpVariable(\"Sweatshirts_Back_Front\", lowBound=0, cat='Integer')\nTF = LpVariable(\"Tshirts_Front\", lowBound=0, cat='Integer')\nTBF = LpVariable(\"Tshirts_Back_Front\", lowBound=0, cat='Integer')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nproblem += 90 * SF + 125 * SBF + 45 * TF + 65 * TBF\n\n# Define the constraints\nproblem += 0.10 * SF + 0.25 * SBF + 0.08 * TF + 0.21 * TBF <= 72\nproblem += 3 * SF + 3 * SBF + TF + TBF <= 1200\nproblem += 36 * SF + 48 * SBF + 25 * TF + 35 * TBF <= 25000\nproblem += SF + SBF <= 500\nproblem += TF + TBF == 500\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of sweatshirts with front printing to produce:\", SF.value())\nprint(\"The number of sweatshirts with back and front printing to produce:\", SBF.value())\nprint(\"The number of T-shirts with front printing to produce:\", TF.value())\nprint(\"The number of T-shirts with back and front printing to produce:\", TBF.value())\nprint(\"The maximum profit:\", value(problem.objective))\n",
        "results": {
            "The number of sweatshirts with front printing to produce": "175.0",
            "The number of sweatshirts with back and front printing to produce": "58.0",
            "The number of T-shirts with front printing to produce": "500.0",
            "The number of T-shirts with back and front printing to produce": "0.0",
            "The maximum profit": "45500.0"
        },
        "type": "linear-notable",
        "index": 213,
        "length": 646,
        "var_num": 4
    },
    {
        "question": "A jam company sends its product out in small and large jars. A small jar can hold 50 ml of jam while a large jar can hold 200 ml of jam. Most store prefer the smaller size and so the number of large jars cannot exceed the number of small jars. If the company wants to ship at least 100000 ml of jam, find the minimum number of jars that can be used.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_small_jars = LpVariable(\"NumSmallJars\", lowBound=0, cat='Integer') # number of small jars\nnum_large_jars = LpVariable(\"NumLargeJars\", lowBound=0, cat='Integer') # number of large jars\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"JamShipping\", LpMinimize)\n\n# Define the objective function\nobjective = num_small_jars + num_large_jars\nproblem += objective # minimize the total number of jars\n\n# Define the constraints\nproblem += 50 * num_small_jars + 200 * num_large_jars >= 100000 # at least 100000 ml of jam needs to be shipped\nproblem += num_large_jars <= num_small_jars # large jars cannot exceed the number of small jars\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of small jars:\", num_small_jars.value())\nprint(\"The number of large jars:\", num_large_jars.value())\nprint(\"The total number of jars used:\", objective.value())",
        "results": {
            "The number of small jars": "400.0",
            "The number of large jars": "400.0",
            "The total number of jars used": "800.0"
        },
        "formulation": "minimize x+y\nSubject to: \ny <= x\n50x+200y >= 100000 (end)",
        "type": "linear-notable",
        "index": 214,
        "length": 349,
        "var_num": 2
    },
    {
        "question": "A meat shop ships their burger patties using refrigerated trucks and vans. Each truck can take 1000 patties at a cost of $300 per trip. Each van can take 500 patties at a cost of $100 per trip. Because the trucks have difficulty moving around in the city, the number of trucks must not exceed the number of vans. The meat shop has to ship at least 50000 patties and they have a budget of $12500. How should they plan their shipment to minimize the total number of trips?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_truck_trips = LpVariable(\"NumTruckTrips\", lowBound=0, cat='Integer') # number of truck trips\nnum_van_trips = LpVariable(\"NumVanTrips\", lowBound=0, cat='Integer') # number of van trips\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BurgerPattiesShipment\", LpMinimize)\n\n# Define the objective function\nobjective = num_truck_trips + num_van_trips\nproblem += objective # minimize the total number of trips\n\n# Define the constraints\nproblem += 1000 * num_truck_trips + 500 * num_van_trips >= 50000 # they must ship at least 50000 patties\nproblem += 300 * num_truck_trips + 100 * num_van_trips <= 12500 # the cost should not exceed $12500\nproblem += num_truck_trips <= num_van_trips # number of trucks cannot exceed the number of vans\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of truck trips:\", num_truck_trips.value())\nprint(\"The number of van trips:\", num_van_trips.value())\nprint(\"The total number of trips:\", objective.value())",
        "results": {
            "The number of truck trips": "25.0",
            "The number of van trips": "50.0",
            "The total number of trips": "75.0"
        },
        "formulation": "minimize x+y\nSubject to: \nx <= y\n1000x+500y >= 50000\n300x+100y <= 12500 (end)",
        "type": "linear-notable",
        "index": 215,
        "length": 470,
        "var_num": 2
    },
    {
        "question": "To graduate from Basketweavers University with a major in operations research, a student must complete at least two math courses, at least two OR courses, and at least two computer courses. Some courses can be used to fulfill more than one requirement: Calculus can fulfill the math requirement; operations research, math and OR requirements; data structures, computer and math requirements; business statistics, math and OR requirements; computer simulation, OR and computer requirements; introduction to computer programming, computer requirement; and forecasting, OR and math requirements. Some courses are prerequisites for others: Calculus is a prerequisite for business statistics; introduction to computer programming is a prerequisite for computer simulation and for data structures; and business statistics is a prerequisite for forecasting. Formulate an LP that minimizes the number of courses needed to satisfy the major requirements.",
        "formulation": "# Define Variables:\nTo formulate the LP, we need to define binary variables to represent whether each course is selected or not. Let's denote the variable for course i as xi.\n```Variables\nx1 // Calculus\nx2 // Operations Research\nx3 // Data Structures\nx4 // Business Statistics\nx5 // Computer Simulation\nx6 // Introduction to Computer Programming\nx7 // Forecasting\nx1, x2, x3, x4, x5, x6, x7 = 0 or 1 // Binary variables\n```\n\n# Objective Function:\nWe want to minimize the number of courses needed to satisfy the major requirements. Since each selected course contributes 1 to the total number of courses needed, the objective function is simply the sum of all the selected courses.\n```Objective Function\nMinimize: x1 + x2 + x3 + x4 + x5 + x6 + x7\n```\n\n# Constraints:\nWe have several constraints to ensure that the minimum requirements for each category are met and that the prerequisites are satisfied.\n```Constraints\nx1 + x2 + x3 + x4 + x7 >= 2 // Minimum number of math courses\nx2 + x4 + x5 + x7 >= 2 // Minimum number of OR courses\nx3 + x5 + x6 >= 2 // Minimum number of computer courses\nx1 >= x4 // Calculus is a prerequisite for business statistics\nx6 >= x5 // Introduction to computer programming is a prerequisite for computer simulation\nx6 >= x3 // Introduction to computer programming is a prerequisite for data structures\nx4 >= x7 // Business statistics is a prerequisite for forecasting\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx1 = LpVariable(\"Calculus\", cat='Binary')\nx2 = LpVariable(\"Operations_Research\", cat='Binary')\nx3 = LpVariable(\"Data_Structures\", cat='Binary')\nx4 = LpVariable(\"Business_Statistics\", cat='Binary')\nx5 = LpVariable(\"Computer_Simulation\", cat='Binary')\nx6 = LpVariable(\"Intro_to_Computer_Programming\", cat='Binary')\nx7 = LpVariable(\"Forecasting\", cat='Binary')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"Course_Selection\", LpMinimize)\n\n# Define the objective function\nproblem += x1 + x2 + x3 + x4 + x5 + x6 + x7\n\n# Define the constraints\nproblem += x1 + x2 + x3 + x4 + x7 >= 2 # Minimum number of math courses\nproblem += x2 + x4 + x5 + x7 >= 2 # Minimum number of OR courses\nproblem += x3 + x5 + x6 >= 2 # Minimum number of computer courses\nproblem += x1 >= x4 # Calculus is a prerequisite for business statistics\nproblem += x6 >= x5 # Introduction to computer programming is a prerequisite for computer simulation\nproblem += x6 >= x3 # Introduction to computer programming is a prerequisite for data structures\nproblem += x4 >= x7 # Business statistics is a prerequisite for forecasting\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The selected courses are:\")\nprint(\"Calculus:\", x1.value())\nprint(\"Operations Research:\", x2.value())\nprint(\"Data Structures:\", x3.value())\nprint(\"Business Statistics:\", x4.value())\nprint(\"Computer Simulation:\", x5.value())\nprint(\"Introduction to Computer Programming:\", x6.value())\nprint(\"Forecasting:\", x7.value())\nprint(\"The minimum number of courses needed:\", value(problem.objective))\n",
        "results": {
            "Calculus": "0.0",
            "Operations Research": "1.0",
            "Data Structures": "1.0",
            "Business Statistics": "0.0",
            "Computer Simulation": "1.0",
            "Introduction to Computer Programming": "1.0",
            "Forecasting": "0.0",
            "The minimum number of courses needed": "4.0"
        },
        "type": "linear-notable",
        "index": 216,
        "length": 945,
        "var_num": 8
    },
    {
        "question": "You need to construct a rectangular pen for cattle. You have 400 ft of fencing. What are the dimensions of the pen that maximize the area?",
        "scenario": "## Define Variables:\nYou need to construct a rectangular pen for cattle.\n// variables: {\"length of the pen\": \"L\", \"width of the pen\": \"W\"}, where L, W >= 0\n\n## Define Objective Function:\nWhat are the dimensions of the pen that maximize the area?\n// The area of the pen is given by the product of the length and the width. Therefore, the objective function is: Maximize L * W\n\n## Generate Constraint-1:\nYou have 400 ft of fencing.\n// The perimeter of the pen is given by 2L + 2W, and it is given that you have 400 ft of fencing. Therefore, the constraint is 2L + 2W <= 400",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nL = model.addVar(vtype=\"CONTINUOUS\", name=\"L\") # length of the pen\nW = model.addVar(vtype=\"CONTINUOUS\", name=\"W\") # width of the pen\n\n# Define objective function\nobj = model.addVar(vtype=\"C\", name=\"obj\")\nmodel.addCons(obj == L * W)\nmodel.setObjective(obj, \"maximize\")\n\n# Add constraints\nmodel.addCons(2 * L + 2 * W <= 400)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The length of the pen:\", model.getVal(L))\n    print(\"The width of the pen:\", model.getVal(W))\n    print(\"The maximum area of the pen: \", model.getVal(L * W))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The length of the pen": "100.00",
            "The width of the pen": "100.00",
            "The maximum area of the pen": "10000.00"
        },
        "type": "nonlinear-notable",
        "index": 217,
        "length": 138,
        "var_num": 2
    },
    {
        "question": "International Wool Company operates a large farm on which sheep are raised. The farm manager determined that for the sheep to grow in the desired fashion, they need at least minimum amounts of four nutrients (the nutrients are nontoxic so the sheep can consume more than the minimum without harm). The manager is considering three different grains to feed the sheep. The table below lists the number of units of each nutrient in each pound of grain, the minimum daily requirements of each nutrient for each sheep, and the cost of each grain. The manager believes that as long as a sheep receives the minimum daily amount of each nutrient, it will be healthy and produce a standard amount of wool. The manager wants to raise the sheep at minimum cost. \n\nTable (The number of units of each nutrient in each pound of grain, the minimum daily requirements of each nutrient for each sheep, and the cost of each grain):\n| Nutrient | Grain A | Grain B | Grain C | Minimum Daily Requirement |\n|----------|---------|---------|---------|---------------------------|\n| Nutrient A | 20      | 30      | 70      | 110                       |\n| Nutrient B | 10      | 10      | 0       | 18                        |\n| Nutrient C | 50      | 30      | 0       | 90                        |\n| Nutrient D | 6       | 2.5     | 10      | 14                        |\n\nThe prices of grain A, B, and C are $41, $36, and $96, respectively.",
        "formulation": "# Variables:\nTo determine the optimal amounts of grain A, B, and C to feed the sheep, let's denote the number of pounds of grain A as A, the number of pounds of grain B as B, and the number of pounds of grain C as C.\n```Variables\nA // pounds of grain A\nB // pounds of grain B\nC // pounds of grain C\nA, B, C >= 0 // non-negative variables\n```\n\n# Objective Function:\nWe want to minimize the cost of raising the sheep, so the objective function is the sum of the cost of each grain multiplied by the respective amount of grain used. The cost of grain A is $41 per pound * A pounds, the cost of grain B is $36 per pound * B pounds, and the cost of grain C is $96 per pound * C pounds. Therefore, the objective function is 41A + 36B + 96C.\n```Objective Function\nMinimize: 41A + 36B + 96C\n```\n\n# Constraints:\nTo ensure that the sheep receive at least the minimum daily requirement of each nutrient, we need to set up the following constraints:\n- The minimum daily requirement of nutrient A is 110, which is satisfied if 20A + 30B + 70C is greater than or equal to 110.\n- The minimum daily requirement of nutrient B is 18, which is satisfied if 10A + 10B is greater than or equal to 18.\n- The minimum daily requirement of nutrient C is 90, which is satisfied if 50A + 30B is greater than or equal to 90.\n- The minimum daily requirement of nutrient D is 14, which is satisfied if 6A + 2.5B + 10C is greater than or equal to 14.\n```Constraints\n20A + 30B + 70C >= 110 // minimum daily requirement of nutrient A\n10A + 10B >= 18 // minimum daily requirement of nutrient B\n50A + 30B >= 90 // minimum daily requirement of nutrient C\n6A + 2.5B + 10C >= 14 // minimum daily requirement of nutrient D\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nA = LpVariable(\"GrainA\", lowBound=0, cat='Continuous') # pounds of grain A\nB = LpVariable(\"GrainB\", lowBound=0, cat='Continuous') # pounds of grain B\nC = LpVariable(\"GrainC\", lowBound=0, cat='Continuous') # pounds of grain C\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SheepDietMinimization\", LpMinimize)\n\n# Define the objective function\nobjective = 41 * A + 36 * B + 96 * C\nproblem += objective # minimize the cost of grains\n\n# Define the constraints\nproblem += 20 * A + 30 * B + 70 * C >= 110 # minimum daily requirement of nutrient A\nproblem += 10 * A + 10 * B >= 18 # minimum daily requirement of nutrient B\nproblem += 50 * A + 30 * B >= 90 # minimum daily requirement of nutrient C\nproblem += 6 * A + 2.5 * B + 10 * C >= 14 # minimum daily requirement of nutrient D\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The amount of grain A to feed the sheep:\", A.value())\nprint(\"The amount of grain B to feed the sheep:\", B.value())\nprint(\"The amount of grain C to feed the sheep:\", C.value())\nprint(\"The minimum cost:\", value(problem.objective))\n",
        "results": {
            "The amount of grain A to feed the sheep": "0.59533074",
            "The amount of grain B to feed the sheep": "2.0077821",
            "The amount of grain C to feed the sheep": "0.54085603",
            "The minimum cost": "148.61089482"
        },
        "type": "linear-table",
        "index": 218,
        "length": 1417,
        "var_num": 3
    },
    {
        "question": "Find two positive numbers whose product is 750 and for which the sum of one and 10 times the other is a minimum.",
        "scenario": "## Define Variables:\nFind two positive numbers.\n// variables: {\"first number\": \"x\", \"second number\": \"y\"}, where x, y >= 0\n\n## Define Objective Function:\nWe want to minimize the sum of one number and 10 times the other number.\n// Minimize: x + 10y\n\n## Generate Constraint-1:\nThe product of the two numbers is 750.\n// x*y = 750",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"CONTINUOUS\", name=\"x\") # first number\ny = model.addVar(vtype=\"CONTINUOUS\", name=\"y\") # second number\n\n# Define objective function\nmodel.setObjective(x + 10*y, \"minimize\")\n\n# Add constraints\nmodel.addCons(x*y == 750)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The first number:\", model.getVal(x))\n    print(\"The second number:\", model.getVal(y))\n    print(\"The minimized sum: \", model.getVal(x + 10*y))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The first number": "86.60253927502986",
            "The second number": "8.660254148185787",
            "The minimized sum": "173.20508075688772"
        },
        "type": "nonlinear-notable",
        "index": 219,
        "length": 112,
        "var_num": 2
    },
    {
        "question": "Dorian Auto is considering manufacturing three types of autos: compact, midsize, and large. The resources required for, and the profits yielded by, each type of car are shown in Table:  steel required (1.5tons, 3tons, 5tons), labor required (30 hours, 40 hours, 25 hours), Profit yielded ($) (2,000, 3,000, 4,000). Currently, 10,000 tons of steel and 120,000 hours of labor are available. For production of a type of car to be economically feasible, at least 1,000 cars of that type must be produced. Maximize Dorian's profit.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for compact, midsize, and large cars that adhere to the constraints given. Let's denote the number of compact cars as C, the number of midsize cars as M, and the number of large cars as L.\n```Variables\nC //number of compact cars to produce \nM //number of midsize cars to produce\nL //number of large cars to produce\nC, M, L >= 0 and they are integers //non-negative and integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function (profit) is given by the sum of the profits from each type of car. The profit from compact cars is $2,000 per car * C cars. The profit from midsize cars is $3,000 per car * M cars. The profit from large cars is $4,000 per car * L cars. Therefore, the objective function is 2000C + 3000M + 4000L.\n```Objective Function\nMaximize: 2000C + 3000M + 4000L\n```\n\n# Constraints:\nWe have several constraints to consider. First, we need to ensure that the resources required for each type of car do not exceed the available resources. The steel required for compact cars is 1.5 tons per car * C cars, for midsize cars is 3 tons per car * M cars, and for large cars is 5 tons per car * L cars. The labor required for compact cars is 30 hours per car * C cars, for midsize cars is 40 hours per car * M cars, and for large cars is 25 hours per car * L cars. \nAdditionally, we need to ensure that at least 1,000 cars of each type are produced.\nTherefore, the constraints for available steel and labor are:\n```Constraints\n1.5C + 3M + 5L <= 10000 //available steel\n30C + 40M + 25L <= 120000 //available labor\nC >= 1000 //minimum number of compact cars produced\nM >= 1000 //minimum number of midsize cars produced\nL >= 1000 //minimum number of large cars produced\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nC = LpVariable(\"CompactCars\", lowBound=1000, cat='Integer') # number of compact cars\nM = LpVariable(\"MidsizeCars\", lowBound=1000, cat='Integer') # number of midsize cars\nL = LpVariable(\"LargeCars\", lowBound=1000, cat='Integer') # number of large cars\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DorianAutoProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 2000 * C + 3000 * M + 4000 * L\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 1.5 * C + 3 * M + 5 * L <= 10000 # available steel\nproblem += 30 * C + 40 * M + 25 * L <= 120000 # available labor\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of compact cars to produce:\", C.value())\nprint(\"The number of midsize cars to produce:\", M.value())\nprint(\"The number of large cars to produce:\", L.value())\nprint(\"The maximum profit:\", objective.value())\n",
        "results": {
            "The number of compact cars to produce": "1333.0",
            "The number of midsize cars to produce": "1000.0",
            "The number of large cars to produce": "1000.0",
            "The maximum profit": "9666000.0"
        },
        "type": "linear-table",
        "index": 220,
        "length": 526,
        "var_num": 3
    },
    {
        "question": "A man is trapped in a swamp at the location: (3/4,0). The rescue team must stay as close to him as possible so that they can pass a rope to him. Note that the rescue team cannot enter the swamp, so the range of its motion is constrained by a curve y >= x^2, and x >= 0. Find the BEST LOCATION of the length of the rope required to rescue him.",
        "scenario": "## Define Variables:\nA man is trapped in a swamp at the location: (3/4,0). The rescue team must stay as close to him as possible so that they can pass a rope to him.\n// variables: {\"x-coordinate of the rescue team\": \"x\", \"y-coordinate of the rescue team\": \"y\"}, where x, y are real numbers\n\n## Define Objective Function:\nFind the BEST LOCATION of the length of the rope required to rescue him.\n// The length of the rope required to rescue him is the Euclidean distance between the rescue team and him, which is sqrt((x - 3/4)^2 + y^2).\n// So, the objective function is: Minimize sqrt((x - 3/4)^2 + y^2)\n\n## Generate Constraint-1:\nNote that the rescue team cannot enter the swamp, so the range of its motion is constrained by a curve y >= x^2, and x >= 0.\n// y >= x^2, x >= 0",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"CONTINUOUS\", name=\"x\") # x-coordinate of the rescue team\ny = model.addVar(vtype=\"CONTINUOUS\", name=\"y\") # y-coordinate of the rescue team\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nmodel.addCons(obj == ((x - 3/4)**2 + y**2)**0.5)\n\n# Add constraints\nmodel.addCons(y >= x**2)\nmodel.addCons(x >= 0)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The x cordinate of the best location:\", model.getVal(x))\n    print(\"The y cordinate of the best location:\", model.getVal(y))\n    print(\"The length of the rope required to rescue him: \", model.getVal(obj))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The x cordinate of the best location": "0.4998083998257366",
            "The y cordinate of the best location": "0.24980810512807078",
            "The length of the rope required to rescue him": "0.35355235026576626"
        },
        "type": "nonlinear-notable",
        "index": 221,
        "length": 342,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA logistics company operates five different types of trucks: TruckA, TruckB, TruckC, TruckD, and TruckE. The company needs to determine how many of each type of truck to deploy for the next month to optimize its operations. Each type of truck has different fuel efficiency, maintenance costs, and cargo capacity.\n// variables: {\"number of TruckA\": \"TruckA\", \"number of TruckB\": \"TruckB\", \"number of TruckC\": \"TruckC\", \"number of TruckD\": \"TruckD\", \"number of TruckE\": \"TruckE\"}, where TruckA, TruckB, TruckC, TruckD, TruckE >= 0 & all are integers\n\n## Define Objective Function:\nFor TruckA, the fuel cost per kilometer is $2, maintenance cost per month is $1000, and cargo capacity is 10 tons.\nFor TruckB, the fuel cost per kilometer is $3, maintenance cost per month is $1500, and cargo capacity is 15 tons.\nFor TruckC, the fuel cost per kilometer is $4, maintenance cost per month is $2000, and cargo capacity is 20 tons.\nFor TruckD, the fuel cost per kilometer is $5, maintenance cost per month is $2500, and cargo capacity is 25 tons.\nFor TruckE, the fuel cost per kilometer is $6, maintenance cost per month is $3000, and cargo capacity is 30 tons.\nEach truck needs to run 2000 kilometers every moth. The company aims to minimize the total cost per ton-kilometer (defined as the sum of the monthly maintenance costs and fuel costs per kilometer, divided by the total cargo capacity in tons).\n// Total cost for TruckA: Cost_TruckA = (2 * 2000 + 1000) * TruckA\n// Total cost for TruckB: Cost_TruckB = (3 * 2000 + 1500) * TruckB\n// Total cost for TruckC: Cost_TruckC = (4 * 2000 + 2000) * TruckC\n// Total cost for TruckD: Cost_TruckD = (5 * 2000 + 2500) * TruckD\n// Total cost for TruckE: Cost_TruckE = (6 * 2000 + 3000) * TruckE\n// So, the objective function is: Minimize ((Cost_TruckA + Cost_TruckB + Cost_TruckC + Cost_TruckD + Cost_TruckE) / (10 * TruckA + 15 * TruckB + 20 * TruckC + 25 * TruckD + 30 * TruckE))\n\n## Generate Constraint-1:\nThe company has a budget of $100,000 for maintenance costs next month.\n// 1000 * TruckA + 1500 * TruckB + 2000 * TruckC + 2500 * TruckD + 3000 * TruckE <= 100,000\n\n## Generate Constraint-2:\nThe company needs to transport at least 500 tons of cargo next month.\n// 10 * TruckA + 15 * TruckB + 20 * TruckC + 25 * TruckD + 30 * TruckE >= 500\n\n## Generate Constraint-3:\nDue to licensing restrictions, the company can operate at most 30 trucks in total.\n// TruckA + TruckB + TruckC + TruckD + TruckE <= 30",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nTruckA = model.addVar(vtype=\"INTEGER\", name=\"TruckA\") # number of TruckA\nmodel.addCons(TruckA >= 0)\nTruckB = model.addVar(vtype=\"INTEGER\", name=\"TruckB\") # number of TruckB\nmodel.addCons(TruckB >= 0)\nTruckC = model.addVar(vtype=\"INTEGER\", name=\"TruckC\") # number of TruckC\nmodel.addCons(TruckC >= 0)\nTruckD = model.addVar(vtype=\"INTEGER\", name=\"TruckD\") # number of TruckD\nmodel.addCons(TruckD >= 0)\nTruckE = model.addVar(vtype=\"INTEGER\", name=\"TruckE\") # number of TruckE\nmodel.addCons(TruckE >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nCost_TruckA = (2 * 2000 + 1000) * TruckA\nCost_TruckB = (3 * 2000 + 1500) * TruckB\nCost_TruckC = (4 * 2000 + 2000) * TruckC\nCost_TruckD = (5 * 2000 + 2500) * TruckD\nCost_TruckE = (6 * 2000 + 3000) * TruckE\nCargo_Capacity = 10 * TruckA + 15 * TruckB + 20 * TruckC + 25 * TruckD + 30 * TruckE\nmodel.addCons(obj * Cargo_Capacity == Cost_TruckA + Cost_TruckB + Cost_TruckC + Cost_TruckD + Cost_TruckE)\n\n# Add constraints\nmodel.addCons(1000 * TruckA + 1500 * TruckB + 2000 * TruckC + 2500 * TruckD + 3000 * TruckE <= 100000)\nmodel.addCons(10 * TruckA + 15 * TruckB + 20 * TruckC + 25 * TruckD + 30 * TruckE >= 500)\nmodel.addCons(TruckA + TruckB + TruckC + TruckD + TruckE <= 30)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Total Cost per Ton-Kilometer: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Total Cost per Ton-Kilometer": "500.0"
        },
        "question": "A logistics company operates five different types of trucks: TruckA, TruckB, TruckC, TruckD, and TruckE. The company needs to determine how many of each type of truck to deploy for the next month to optimize its operations. Each type of truck has different fuel efficiency, maintenance costs, and cargo capacity. For TruckB, the fuel cost per kilometer is $3, maintenance cost per month is $1500, and cargo capacity is 15 tons. For TruckC, the fuel cost per kilometer is $4, maintenance cost per month is $2000, and cargo capacity is 20 tons. For TruckD, the fuel cost per kilometer is $5, maintenance cost per month is $2500, and cargo capacity is 25 tons. For TruckE, the fuel cost per kilometer is $6, maintenance cost per month is $3000, and cargo capacity is 30 tons. Each truck needs to run 2000 kilometers every moth. The company aims to minimize the total cost per ton-kilometer (defined as the sum of the monthly maintenance costs and fuel costs per kilometer, divided by the total cargo capacity in tons). The company has a budget of $100,000 for maintenance costs next month. The company needs to transport at least 500 tons of cargo next month. Due to licensing restrictions, the company can operate at most 30 trucks in total. For TruckA, the fuel cost per kilometer is $2, maintenance cost per month is $1000, and cargo capacity is 10 tons.",
        "type": "nonlinear-notable",
        "index": 222,
        "length": 1354,
        "var_num": 5
    },
    {
        "scenario": "## Define Variables:\nA bakery has 5 different ovens for baking cakes. The owner needs to assign workers to each oven.\n// variables: {\"number of workers on oven 1\": \"O1\", \"number of workers on oven 2\": \"O2\", \"number of workers on oven 3\": \"O3\", \"number of workers on oven 4\": \"O4\", \"number of workers on oven 5\": \"O5\"}, where O1, O2, O3, O4, O5 >= 0 & O1, O2, O3, O4, O5 are integers\n\n## Define Objective Function:\nThe bakery produces 2 types of cakes in the 5 ovens. \nOn oven 1, each worker produces 15 units of cake 1 and 20 units of cake 2 during a hour. \nOn oven 2, each worker produces 20 units of cake 1 and 25 units of cake 2 during a hour. \nOn oven 3, each worker produces 25 units of cake 1 and 30 units of cake 2 during a hour. \nOn oven 4, each worker produces 30 units of cake 1 and 35 units of cake 2 during a hour.\nOn oven 5, each worker produces 35 units of cake 1 and 40 units of cake 2 during a hour.\nThe bakery needs to produce at least 200 units of cake 1 and at least 300 units of cake 2. The five ovens can only be opened or closed at the same time. Please determine the minimum production time to meet the daily demand.\n// The production time for cake 1: T1 = 200 / (15 * O1 + 20 * O2 + 25 * O3 + 30 * O4 + 35 * O5)\n// The production time for cake 2: T2 = 300 / (20 * O1 + 25 * O2 + 30 * O3 + 35 * O4 + 40 * O5)\n// So, the objective function is: Minimize max(T1, T2)\n\n## Generate Constraint-1:\nThere are total 40 workers available.\n// O1 + O2 + O3 + O4 + O5 <= 40\n\n## Generate Constraint-2:\nEach oven can be utilized by up to 15 workers at a time.\n// O1 <= 15; O2 <= 15; O3 <= 15; O4 <= 15; O5 <= 15",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nO1 = model.addVar(vtype=\"INTEGER\", name=\"O1\") # number of workers on oven 1\nmodel.addCons(O1 >= 0)\nO2 = model.addVar(vtype=\"INTEGER\", name=\"O2\") # number of workers on oven 2\nmodel.addCons(O2 >= 0)\nO3 = model.addVar(vtype=\"INTEGER\", name=\"O3\") # number of workers on oven 3\nmodel.addCons(O3 >= 0)\nO4 = model.addVar(vtype=\"INTEGER\", name=\"O4\") # number of workers on oven 4\nmodel.addCons(O4 >= 0)\nO5 = model.addVar(vtype=\"INTEGER\", name=\"O5\") # number of workers on oven 5\nmodel.addCons(O5 >= 0)\n\n# Define objective function\n# Since the objective function is not linear, we need to linearize it\nT1 = model.addVar(vtype=\"CONTINUOUS\", name=\"T1\") # production time for cake 1\nT2 = model.addVar(vtype=\"CONTINUOUS\", name=\"T2\") # production time for cake 2\nmax_time = model.addVar(vtype=\"CONTINUOUS\", name=\"max_time\") # max of T1 and T2\nmodel.setObjective(max_time, \"minimize\")\n\n# Constraints for T1 and T2\nmodel.addCons(T1 >= 200 / (15 * O1 + 20 * O2 + 25 * O3 + 30 * O4 + 35 * O5))\nmodel.addCons(T2 >= 300 / (20 * O1 + 25 * O2 + 30 * O3 + 35 * O4 + 40 * O5))\n\n# Constraint to set max_time to be the maximum of T1 and T2\nmodel.addCons(max_time >= T1)\nmodel.addCons(max_time >= T2)\n\n# Add constraints\nmodel.addCons(O1 + O2 + O3 + O4 + O5 <= 40)\nmodel.addCons(O1 <= 15)\nmodel.addCons(O2 <= 15)\nmodel.addCons(O3 <= 15)\nmodel.addCons(O4 <= 15)\nmodel.addCons(O5 <= 15)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Workers on Oven 1: \", model.getVal(O1))\n    print(\"Number of Workers on Oven 2: \", model.getVal(O2))\n    print(\"Number of Workers on Oven 3: \", model.getVal(O3))\n    print(\"Number of Workers on Oven 4: \", model.getVal(O4))\n    print(\"Number of Workers on Oven 5: \", model.getVal(O5))\n    print(\"Minimum Production Time: \", model.getVal(max_time))\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Workers on Oven 1": "0.0",
            "Number of Workers on Oven 2": "0.0",
            "Number of Workers on Oven 3": "10.0",
            "Number of Workers on Oven 4": "15.0",
            "Number of Workers on Oven 5": "15.0",
            "Minimum Production Time": "0.21052631578947364"
        },
        "question": "A bakery has 5 different ovens for baking cakes. The owner needs to assign workers to each oven. On oven 1, each worker produces 15 units of cake 1 and 20 units of cake 2 during a hour. On oven 2, each worker produces 20 units of cake 1 and 25 units of cake 2 during a hour. On oven 3, each worker produces 25 units of cake 1 and 30 units of cake 2 during a hour. On oven 4, each worker produces 30 units of cake 1 and 35 units of cake 2 during a hour. On oven 5, each worker produces 35 units of cake 1 and 40 units of cake 2 during a hour. The bakery needs to produce at least 200 units of cake 1 and at least 300 units of cake 2. The five ovens can only be opened or closed at the same time. Please determine the minimum production time to meet the daily demand. There are total 40 workers available. Each oven can be utilized by up to 15 workers at a time. The bakery produces 2 types of cakes in the 5 ovens.",
        "type": "nonlinear-notable",
        "index": 223,
        "length": 913,
        "var_num": 5
    },
    {
        "question": "A car company makes two types of cars, a race car and a regular car. Two different teams produce each of these cars. The race car team can make at most 3 race cars per day while the regular car team can make at most 5 regular cars per day. Both cars need to go through a safety check, and in a day at most 6 cars of either type can be safety checked. If the profit per race car is $20000 and the profit per regular car is $10000, how many of each should the company make to maximize their profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of race cars produced per day\", \"name\": \"x\"}, {\"description\": \"number of regular cars produced per day\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total profit per day\", \"function\": \"20000x + 10000y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"production capacity of race car team\", \"function\": \"x <= 3\"}, {\"description\": \"production capacity of regular car team\", \"function\": \"y <= 5\"}, {\"description\": \"safety check capacity\", \"function\": \"x + y <= 6\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_race_cars = LpVariable(\"NumRaceCars\", lowBound=0, cat='Integer') # number of race cars produced per day\nnum_regular_cars = LpVariable(\"NumRegularCars\", lowBound=0, cat='Integer') # number of regular cars produced per day\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CarCompanyProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 20000 * num_race_cars + 10000 * num_regular_cars\nproblem += objective # maximize the total profit per day\n\n# Define the constraints\nproblem += num_race_cars <= 3 # production capacity of race car team\nproblem += num_regular_cars <= 5 # production capacity of regular car team\nproblem += num_race_cars + num_regular_cars <= 6 # safety check capacity\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of race cars produced per day:\", num_race_cars.value())\nprint(\"The number of regular cars produced per day:\", num_regular_cars.value())\nprint(\"The total profit per day:\", objective.value())\n",
        "results": {
            "The number of race cars produced per day": "3.0",
            "The number of regular cars produced per day": "3.0",
            "The total profit per day": "90000.0"
        },
        "type": "linear-notable",
        "index": 224,
        "length": 496,
        "var_num": 2
    },
    {
        "question": "Suppose you have 30 feet of fencing and want to fence in a rectangular garden next to a house. You want the largest possible garden, so you decide to use one wall of the house as a border and use the fencing for the other three sides. What should the dimensions of the rectangle be?",
        "scenario": "## Define Variables:\nYou want to fence in a rectangular garden next to a house.\n// variables: {\"length of the rectangle\": \"L\", \"width of the rectangle\": \"W\"}, where L, W >= 0\n\n## Define Objective Function:\nYou want the largest possible garden, what should be the length and width of the rectangle?\n// The area of the rectangle is given by the product of the length and the width. Therefore, the objective function is: Maximize L * W\n\n## Generate Constraint-1:\nSuppose you have 30 feet of fencing. You decide to use one wall of the house as a border and use the fencing for the other three sides.\n// L + 2W <= 30",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nL = model.addVar(vtype=\"CONTINUOUS\", name=\"L\") # length of the rectangle\nW = model.addVar(vtype=\"CONTINUOUS\", name=\"W\") # width of the rectangle\n\n# Define objective function\nobj = model.addVar(vtype=\"CONTINUOUS\", name=\"obj\") # area of the rectangle\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == L * W)\n\n# Add constraints\nmodel.addCons(L + 2*W <= 30)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The length of the rectangle:\", model.getVal(L))\n    print(\"The width of the rectangle:\", model.getVal(W))\n    print(\"The area of the garden: \", model.getVal(L * W))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The length of the rectangle": "15.00000",
            "The width of the rectangle": "7.50000",
            "The area of the garden": "112.50000"
        },
        "type": "nonlinear-notable",
        "index": 225,
        "length": 282,
        "var_num": 2
    },
    {
        "question": "Western Pulp (WP) produces recycled paperboard for box manufacturers by combining four grades of recycled paper stock. Each grade of stock has a different strength, color, and texture. The strength, color, and texture of the paperboard are approximately a weighted average of those characteristics of the paper inputs. The table gives the characteristics of the paper stocks and their cost per ton. Paper Grade, Strength, Color, Texture, Cost/Ton are [1, 8, 9, 8 $150], [2, 6, 7, 5, $110], [3, 5, 5, 6, $90] and [4, 3, 4, 5, $50]. WP has received an order for 500 tons of paperboard with a strength rating of at least 7, a color of at least 5, and texture of at least 6. WP would like to determine the least costly mix required to produce this paperboard.",
        "formulation": "# Define Variables:\nTo determine the least costly mix required to produce the paperboard, we need to find the quantities of each paper stock to use. Let's denote the quantity of paper stock 1 as X1, the quantity of paper stock 2 as X2, the quantity of paper stock 3 as X3, and the quantity of paper stock 4 as X4.\n```Variables\nX1 //quantity of paper stock 1\nX2 //quantity of paper stock 2\nX3 //quantity of paper stock 3\nX4 //quantity of paper stock 4\nX1, X2, X3, X4 >= 0 and they are integers\n```\n\n# Objective Function:\nWe want to minimize the total cost of paper stock, so the objective function is the sum of the cost of each paper stock multiplied by its quantity. The cost of paper stock 1 is $150 per ton * X1 tons. The cost of paper stock 2 is $110 per ton * X2 tons. The cost of paper stock 3 is $90 per ton * X3 tons. The cost of paper stock 4 is $50 per ton * X4 tons. Therefore, the objective function is 150X1 + 110X2 + 90X3 + 50X4.\n```Objective Function\nMinimize: 150X1 + 110X2 + 90X3 + 50X4\n```\n\n# Constraints:\n- The total quantity of paper stock used should be equal to 500 tons.\n- The strength of the paperboard should be at least 7.\n- The color of the paperboard should be at least 5.\n- The texture of the paperboard should be at least 6.\n```Constraints\nX1 + X2 + X3 + X4 = 500 //total quantity of paper stock\n8X1 + 6X2 + 5X3 + 3X4 >= 7 //strength constraint\n9X1 + 7X2 + 5X3 + 4X4 >= 5 //color constraint\n8X1 + 5X2 + 6X3 + 3X4 >= 6 //texture constraint\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nX1 = LpVariable(\"X1\", lowBound=0, cat='Integer')\nX2 = LpVariable(\"X2\", lowBound=0, cat='Integer')\nX3 = LpVariable(\"X3\", lowBound=0, cat='Integer')\nX4 = LpVariable(\"X4\", lowBound=0, cat='Integer')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"WesternPulpMix\", LpMinimize)\n\n# Define the objective function\nobjective = 150 * X1 + 110 * X2 + 90 * X3 + 50 * X4\nproblem += objective\n\n# Define the constraints\nproblem += X1 + X2 + X3 + X4 == 500\nproblem += 8 * X1 + 6 * X2 + 5 * X3 + 3 * X4 >= 7 * (X1 + X2 + X3 + X4)\nproblem += 9 * X1 + 7 * X2 + 5 * X3 + 4 * X4 >= 5 * (X1 + X2 + X3 + X4)\nproblem += 8 * X1 + 5 * X2 + 6 * X3 + 5 * X4 >= 6 * (X1 + X2 + X3 + X4)\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The quantity of paper stock 1:\", X1.value())\nprint(\"The quantity of paper stock 2:\", X2.value())\nprint(\"The quantity of paper stock 3:\", X3.value())\nprint(\"The quantity of paper stock 4:\", X4.value())\nprint(\"The minimum cost:\", objective.value())\n",
        "results": {
            "The quantity of paper stock 1": "400.0",
            "The quantity of paper stock 2": "0.0",
            "The quantity of paper stock 3": "0.0",
            "The quantity of paper stock 4": "100.0",
            "The minimum cost": "65000.0"
        },
        "type": "linear-table",
        "index": 226,
        "length": 755,
        "var_num": 4
    },
    {
        "scenario": "## Define Variables:\nA bakery produces 4 types of cakes: chocolate, vanilla, strawberry, and lemon. The bakery has 3 ovens and needs to schedule the baking times (hour) for each type of cake. The operating time of the oven can only be set in increments of one hour.\n// variables: {\"baking time for chocolate cake\": \"Tc\", \"baking time for vanilla cake\": \"Tv\", \"baking time for strawberry cake\": \"Ts\", \"baking time for lemon cake\": \"Tl\"}, where Tc, Tv, Ts, Tl >= 0 & Tc, Tv, Ts, Tl are integers\n\n## Define Objective Function:\nThe bakery aims to maximize its daily revenue from selling cakes. The revenue from each type of cake is proportional to the square of its baking time (hour). Specifically, the revenue from chocolate cake is 5 * Tc^2, from vanilla cake is 4 * Tv^2, from strawberry cake is 3 * Ts^2, and from lemon cake is 2 * Tl^2. \n// The objective function is: Maximize (5 * Tc^2 + 4 * Tv^2 + 3 * Ts^2 + 2 * Tl^2)\n## Generate Constraint-1:\nThe bakery must also ensure that the total baking time for all cakes does not exceed 24 hours.\n// Tc + Tv + Ts + Tl <= 24\n\n## Generate Constraint-2:\nEach oven can only bake one type of cake at a time, and the bakery must ensure that each type of cake is baked at least once.\n// Tc >= 1; Tv >= 1; Ts >= 1; Tl >= 1\n\n## Generate Constraint-3:\nThe bakery has a limited supply of ingredients, which allows for a maximum of 10 hours of baking for chocolate cake, 8 hours for vanilla cake, 6 hours for strawberry cake, and 4 hours for lemon cake.\n// Tc <= 10; Tv <= 8; Ts <= 6; Tl <= 4",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nTc = model.addVar(vtype=\"I\", name=\"Tc\") # baking time for chocolate cake\nmodel.addCons(Tc >= 0)\nTv = model.addVar(vtype=\"I\", name=\"Tv\") # baking time for vanilla cake\nmodel.addCons(Tv >= 0)\nTs = model.addVar(vtype=\"I\", name=\"Ts\") # baking time for strawberry cake\nmodel.addCons(Ts >= 0)\nTl = model.addVar(vtype=\"I\", name=\"Tl\") # baking time for lemon cake\nmodel.addCons(Tl >= 0)\n\n# Define objective function\nobj = model.addVar(\"obj\")\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == 5 * Tc**2 + 4 * Tv**2 + 3 * Ts**2 + 2 * Tl**2)\n\n# Add constraints\nmodel.addCons(Tc + Tv + Ts + Tl <= 24)\nmodel.addCons(Tc >= 1)\nmodel.addCons(Tv >= 1)\nmodel.addCons(Ts >= 1)\nmodel.addCons(Tl >= 1)\nmodel.addCons(Tc <= 10)\nmodel.addCons(Tv <= 8)\nmodel.addCons(Ts <= 6)\nmodel.addCons(Tl <= 4)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Baking time for Chocolate cake: \", model.getVal(Tc))\n    print(\"Baking time for Vanilla cake: \", model.getVal(Tv))\n    print(\"Baking time for Strawberry cake: \", model.getVal(Ts))\n    print(\"Baking time for Lemon cake: \", model.getVal(Tl))\n    print(\"Total Revenue: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Baking time for Chocolate cake": "10.0",
            "Baking time for Vanilla cake": "8.00",
            "Baking time for Strawberry cake": "5.000",
            "Baking time for Lemon cake": "1.0",
            "Total Revenue": "833.0"
        },
        "question": "A bakery produces 4 types of cakes: chocolate, vanilla, strawberry, and lemon. The bakery has 3 ovens and needs to schedule the baking times (hour) for each type of cake. The operating time of the oven can only be set in increments of one hour. The bakery aims to maximize its daily revenue from selling cakes, where the revenue from each type of cake is proportional to the square of its baking time (hour). Specifically, the revenue from chocolate cake is 5 * Tc^2, from vanilla cake is 4 * Tv^2, from strawberry cake is 3 * Ts^2, and from lemon cake is 2 * Tl^2.\n\n| Cake Type | Revenue per Hour (Revenue = Constant * Time^2) |\n|-----------|------------------------------------------------|\n| Chocolate | 5 * Tc^2                                       |\n| Vanilla   | 4 * Tv^2                                       |\n| Strawberry| 3 * Ts^2                                       |\n| Lemon     | 2 * Tl^2                                       |\n\nThe bakery must also ensure that the total baking time for all cakes does not exceed 24 hours. Each oven can only bake one type of cake at a time, and the bakery must ensure that each type of cake is baked at least once. The bakery has a limited supply of ingredients, which allows for a maximum of 10 hours of baking for chocolate cake, 8 hours for vanilla cake, 6 hours for strawberry cake, and 4 hours for lemon cake.\n",
        "type": "nonlinear-table",
        "index": 227,
        "length": 1366,
        "var_num": 4
    },
    {
        "scenario": "## Define Variables:\nA tech company is planning to launch five new software products: AppX, AppY, AppZ, AppW, and AppV. They need to decide how many development teams to allocate to each product for the upcoming quarter.\n// variables: {\"number of development teams for AppX\": \"AppXTeams\", \"number of development teams for AppY\": \"AppYTeams\", \"number of development teams for AppZ\": \"AppZTeams\", \"number of development teams for AppW\": \"AppWTeams\", \"number of development teams for AppV\": \"AppVTeams\"}, where AppXTeams, AppYTeams, AppZTeams, AppWTeams, AppVTeams >= 0 & AppXTeams, AppYTeams, AppZTeams, AppWTeams, AppVTeams are integers\n\n## Define Objective Function:\nFor product APPX, the Estimated Revenue per Team is $100,000, the Development Cost per Team is $60,000, and the Marketing Cost per Team is $20,000. \nFor product APPY, the Estimated Revenue per Team is $150,000, the Development Cost per Team is $80,000, and the Marketing Cost per Team is $30,000. \nFor product APPZ, the Estimated Revenue per Team is $200,000, the Development Cost per Team is $100,000, and the Marketing Cost per Team is $40,000.\nFor product APPW, the Estimated Revenue per Team is $120,000, the Development Cost per Team is $70,000, and the Marketing Cost per Team is $25,000.\nFor product APPV, the Estimated Revenue per Team is $180,000, the Development Cost per Team is $90,000, and the Marketing Cost per Team is $35,000.\nThe company wants to maximize the average net profit per team.\n// Total net profit for APPX: Profit_APPX = (100,000 - 60,000 - 20,000) * AppXTeams\n// Total net profit for APPY: Profit_APPY = (150,000 - 80,000 - 30,000) * AppYTeams\n// Total net profit for APPZ: Profit_APPZ = (200,000 - 100,000 - 40,000) * AppZTeams\n// Total net profit for APPW: Profit_APPW = (120,000 - 70,000 - 25,000) * AppWTeams\n// Total net profit for APPV: Profit_APPV = (180,000 - 90,000 - 35,000) * AppVTeams\n// So, the objective function is: Maximize (Profit_APPX + Profit_APPY + Profit_APPZ + Profit_APPW + Profit_APPV) / (AppXTeams + AppYTeams + AppZTeams + AppWTeams + AppVTeams)\n\n## Generate Constraint-1:\nThe company has a total of 30 development teams available for the quarter.\n// AppXTeams + AppYTeams + AppZTeams + AppWTeams + AppVTeams <= 30\n\n## Generate Constraint-2:\nDue to market research, the company knows that AppX must have at least twice as many development teams as AppY.\n// AppXTeams >= 2 * AppYTeams\n\n## Generate Constraint-3:\nThe company has a budget of $2,500,000 for marketing costs for the quarter.\n// 20,000 * AppXTeams + 30,000 * AppYTeams + 40,000 * AppZTeams + 25,000 * AppWTeams + 35,000 * AppVTeams <= 2,500,000\n\n## Generate Constraint-4:\nThe company wants to ensure that each product has at least one team working on it.\n// AppXTeams >= 1; AppYTeams >= 1; AppZTeams >= 1; AppWTeams >= 1; AppVTeams >= 1",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nAppXTeams = model.addVar(vtype=\"INTEGER\", name=\"AppXTeams\") # number of development teams for AppX\nmodel.addCons(AppXTeams >= 0)\nAppYTeams = model.addVar(vtype=\"INTEGER\", name=\"AppYTeams\") # number of development teams for AppY\nmodel.addCons(AppYTeams >= 0)\nAppZTeams = model.addVar(vtype=\"INTEGER\", name=\"AppZTeams\") # number of development teams for AppZ\nmodel.addCons(AppZTeams >= 0)\nAppWTeams = model.addVar(vtype=\"INTEGER\", name=\"AppWTeams\") # number of development teams for AppW\nmodel.addCons(AppWTeams >= 0)\nAppVTeams = model.addVar(vtype=\"INTEGER\", name=\"AppVTeams\") # number of development teams for AppV\nmodel.addCons(AppVTeams >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj * (AppXTeams + AppYTeams + AppZTeams + AppWTeams + AppVTeams) == ((100000 - 60000 - 20000) * AppXTeams + (150000 - 80000 - 30000) * AppYTeams + (200000 - 100000 - 40000) * AppZTeams + (120000 - 70000 - 25000) * AppWTeams + (180000 - 90000 - 35000) * AppVTeams))\n\n# Add constraints\nmodel.addCons(AppXTeams + AppYTeams + AppZTeams + AppWTeams + AppVTeams <= 30)\nmodel.addCons(AppXTeams >= 2 * AppYTeams)\nmodel.addCons(20000 * AppXTeams + 30000 * AppYTeams + 40000 * AppZTeams + 25000 * AppWTeams + 35000 * AppVTeams <= 2500000)\nmodel.addCons(AppXTeams >= 1)\nmodel.addCons(AppYTeams >= 1)\nmodel.addCons(AppZTeams >= 1)\nmodel.addCons(AppWTeams >= 1)\nmodel.addCons(AppVTeams >= 1)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of AppX Teams: \", model.getVal(AppXTeams))\n    print(\"Number of AppY Teams: \", model.getVal(AppYTeams))\n    print(\"Number of AppZ Teams: \", model.getVal(AppZTeams))\n    print(\"Number of AppW Teams: \", model.getVal(AppWTeams))\n    print(\"Number of AppV Teams: \", model.getVal(AppVTeams))\n    print(\"Average Net Profit per Team: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of AppX Teams": "2.0",
            "Number of AppY Teams": "1.0",
            "Number of AppZ Teams": "25.0",
            "Number of AppW Teams": "1.0",
            "Number of AppV Teams": "1.0",
            "Average Net Profit per Team": "55333.33333333333"
        },
        "question": "A tech company is planning to launch five new software products: AppX, AppY, AppZ, AppW, and AppV. They need to decide how many development teams to allocate to each product for the upcoming quarter. The Estimated Revenue per Team, Development Cost per Team, and Marketing Cost per Team for each product are given in the following Table.\n\n| Product | Estimated Revenue per Team | Development Cost per Team | Marketing Cost per Team |\n|---------|----------------------------|---------------------------|-------------------------|\n| AppX    | $100,000                   | $60,000                   | $20,000                 |\n| AppY    | $150,000                   | $80,000                   | $30,000                 |\n| AppZ    | $200,000                   | $100,000                  | $40,000                 |\n| AppW    | $120,000                   | $70,000                   | $25,000                 |\n| AppV    | $180,000                   | $90,000                   | $35,000                 |\n\nThe company has a total of 30 development teams available for the quarter. Due to market research, the company knows that AppX must have at least twice as many development teams as AppY. The company has a budget of $2,500,000 for marketing costs for the quarter. The company wants to ensure that each product has at least one team working on it. The company wants to maximize the average net profit per team.\n",
        "type": "nonlinear-table",
        "index": 228,
        "length": 1413,
        "var_num": 5
    },
    {
        "question": "You are making cylindrical containers to contain a certain volume of liquid. The volume of the cylinder is 12 cubic inches. Suppose that the top and bottom are made of a material that is 3 times as expensive (cost per unit area) as the material used for the lateral side of the cylinder. Find the shape of the cylinder that minimizes the cost of making the containers.",
        "scenario": "## Define Variables:\nYou are making cylindrical containers to contain a certain volume of liquid.\n// variables: {\"radius of the cylinder\": \"r\", \"height of the cylinder\": \"h\"}, where r, h >= 0\n\n## Define Objective Function:\nSuppose that the top and bottom are made of a material that is 3 times as expensive (cost per unit area) as the material used for the lateral side of the cylinder. Find the shape of the cylinder that minimizes the cost of making the containers.\n// The area of the top and bottom of the cylinder together is 2\u03c0r^2, and the area of the lateral side is 2\u03c0rh.\n// Suppose that the lateral side material costs $1 per square unit, then the top and bottom material costs $3 per square unit. So The total cost of the material is 3(2\u03c0r^2) + 2\u03c0rh.\n// Therefore, the objective function is: Minimize 3(2\u03c0r^2) + 2\u03c0rh\n\n## Generate Constraint-1:\nThe volume of the cylinder is 12 cubic inches.\n// The volume of the cylinder is given by the formula \u03c0r^2h, and it is given that the volume is 12. \n// Therefore, the constraint is \u03c0r^2h = 12.",
        "code": "from pyscipopt import Model\nimport math\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nr = model.addVar(vtype=\"CONTINUOUS\", name=\"r\") # radius of the cylinder\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the cylinder\n\n# Define objective function\ncost = model.addVar('cost')\nmodel.setObjective(cost, \"minimize\")\nmodel.addCons(cost == 3*(2*math.pi*r**2) + 2*math.pi*r*h)\n\n# Add constraints\nmodel.addCons(math.pi*r**2*h == 12)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The radius of the cylinder that minimizes the cost: \", model.getVal(r))\n    print(\"The height of the cylinder that minimizes the cost: \", model.getVal(h))\n    print(\"The minimum cost of making the container: \", model.getVal(cost))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The radius of the cylinder that minimizes the cost": "0.8602135589215862",
            "The height of the cylinder that minimizes the cost": "5.162009398241112",
            "The minimum cost of making the container": "41.84810349780642"
        },
        "type": "nonlinear-notable",
        "index": 229,
        "length": 368,
        "var_num": 2
    },
    {
        "question": "A teddy bear company produces three different colored bears: black, white, and brown. These bears are made in two different factories. Running factory 1 for 1 hour costs $300 and produces 5 black teddy bears, 6 white teddy bears, and 3 brown ones. Running factory 2 for 1 hour costs $600 and produces 10 black teddy bears and 10 white teddy bears. (but no brown ones). To meet children's demand, at least 20 black teddy bears, 5 white teddy bears, and 15 brown teddy bears must be made daily. Given this information, develop a linear programming problem assuming the teddy bear company wants to minimize the cost of production.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nhours_factory_1 = LpVariable(\"HoursFactory1\", lowBound=0, cat='Continuous') # hours factory 1 runs\nhours_factory_2 = LpVariable(\"HoursFactory2\", lowBound=0, cat='Continuous') # hours factory 2 runs\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"TeddyBearProduction\", LpMinimize)\n\n# Define the objective function\nobjective = 300 * hours_factory_1 + 600 * hours_factory_2\nproblem += objective # minimize the cost of production\n\n# Define the constraints\nproblem += 5 * hours_factory_1 + 10 * hours_factory_2 >= 20 # at least 20 black teddy bears\nproblem += 6 * hours_factory_1 + 10 * hours_factory_2 >= 5  # at least 5 white teddy bears\nproblem += 3 * hours_factory_1 >= 15                        # at least 15 brown teddy bears\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Hours to run factory 1:\", hours_factory_1.value())\nprint(\"Hours to run factory 2:\", hours_factory_2.value())\nprint(\"The total cost of production:\", objective.value())",
        "results": {
            "Hours to run factory 1": "5.0",
            "Hours to run factory 2": "0.0",
            "The total cost of production": "1500.0"
        },
        "formulation": "minimize 300x+600y\nSubject to: \n5x+10y >= 20\n6x+10y >= 5\n3x >= 15 (end)",
        "type": "linear-notable",
        "index": 230,
        "length": 627,
        "var_num": 2
    },
    {
        "question": "A navy ship is stocking food onto their submarine and their staff can eat either a salad or fruit bowl for their fibre and vitamin intake. The nutritionist in charge of this voyage needs to ensure that their staff gets at least 90 units of vitamin and 110 units of fibre each. Each salad contains 7 units of vitamins and 12 units of fibre. Each fruit bowl contains 15 units of vitamin and 3 units of fibre. In addition, since fruit bowls take longer to prepare, at most 30% of their meals should be fruit bowls. If each salad contains 2 units of potassium and each fruit bowl contains 8 units of potassium, how many of each should they prepare for each staff to maximize their potassium intake?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_salads = LpVariable(\"NumSalads\", lowBound=0, cat='Integer') # number of salads\nnum_fruit_bowls = LpVariable(\"NumFruitBowls\", lowBound=0, cat='Integer') # number of fruit bowls\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizePotassiumIntake\", LpMaximize)\n\n# Define the objective function\nobjective = 2 * num_salads + 8 * num_fruit_bowls\nproblem += objective # maximize the total potassium intake\n\n# Define the constraints\nproblem += 7 * num_salads + 15 * num_fruit_bowls >= 90 # vitamin requirement\nproblem += 12 * num_salads + 3 * num_fruit_bowls >= 110 # fibre requirement\nproblem += num_fruit_bowls <= (num_salads + num_fruit_bowls) * 0.3 # fruit bowls limit\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of salads:\", num_salads.value())\nprint(\"The number of fruit bowls:\", num_fruit_bowls.value())\nprint(\"The total potassium intake:\", objective.value())",
        "results": {
            "The number of salads": "0.0",
            "The number of fruit bowls": "0.0",
            "The total potassium intake": "0.0"
        },
        "formulation": "maximize 2x+8y\nSubject to: \n15y+7x >= 90\n12x+3y >= 110\ny <= 0.3(x+y) (end)",
        "type": "linear-notable",
        "index": 231,
        "length": 694,
        "var_num": 2
    },
    {
        "question": "Find the area of the largest rectangle that fits inside a semicircle of radius 10 (one side of the rectangle is along the diameter of the semicircle).",
        "scenario": "## Define Variables:\nFind the area of the largest rectangle that fits inside a semicircle.\n// variables: {\"width of the rectangle\": \"w\", \"height of the rectangle\": \"h\"}, where w, h >= 0\n\n## Define Objective Function:\nPlease provide the area and the shape of the rectangle that maximizes the area.\n// The area of the rectangle is given by the product of the width and the height.\n// Therefore, the objective function is: Maximize w * h\n\n## Generate Constraint-1:\nOne side of the rectangle is along the diameter of the semicircle. The radius of the semicircle is 10.\n// the height of the rectangle cannot exceed the radius, and the width of the rectangle cannot exceed the diameter. Therefore, the constraints are w <= 10 and h <= 20.\n// The center of the semicircle should lie on the center of the height of the rectangle. Therefore, (h/2)^2 + w^2 <= 10^2\n// So the constraints are: w <= 10, h <= 20, (h/2)^2 + w^2 <= 10^2",
        "code": "from pyscipopt import Model\nimport math\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nw = model.addVar(vtype=\"CONTINUOUS\", name=\"w\") # width of the rectangle\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the rectangle\n\n# Define objective function\nobj = model.addVar(vtype=\"CONTINUOUS\", name=\"obj\")\nmodel.addCons(obj == w * h)\nmodel.setObjective(obj, \"maximize\")\n\n# Add constraints\nmodel.addCons(w <= 10)\nmodel.addCons(h <= 20)\nmodel.addCons((h/2)**2 + w**2 <= 10**2)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The width of the rectangle: \", model.getVal(w))\n    print(\"The height of the rectangle: \", model.getVal(h))\n    print(\"The maximum area of the rectangle: \", model.getVal(w * h))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The width of the rectangle": "7.07106783679653",
            "The height of the rectangle": "14.142135701147744",
            "The maximum area of the rectangle": "100.000000"
        },
        "type": "nonlinear-notable",
        "index": 232,
        "length": 150,
        "var_num": 2
    },
    {
        "question": "Euing Gas produces two types of gasoline (gas 1 and gas 2) from two types of oil (oil 1 and oil 2). Each gallon of gas 1 must contain at least 50 percent oil 1, and each gallon of gas 2 must contain at least 60 percent oil 1. Each gallon of gas 1 can be sold for $12, and each gallon of gas 2 can be sold for $14. Currently, 500 gallons of oil 1 and 1,000 gallons of oil 2 are available. As many as 1,500 more gallons of oil 1 can be purchased at the prices shown in the following Table. Maximize Euing's profits (revenues - purchasing costs).\n\nTable (Purchasing prices for additional gallons of oil 1):\n| Additional Gallons of Oil 1 | Price per Gallon |\n| --------------------------- | ---------------- |\n| First 500                   | $25              |\n| Next 500                    | $20              |\n| Next 500                    | $15              |",
        "formulation": "# Variables:\nWe need to determine the optimal amounts of oil and gas to maximize profits. Let's denote the following variables:\n```Variables\nx1 // amount of oil 1 purchased\nx11 // amount of oil 1 used to produce gas 1\nx12 // amount of oil 1 used to produce gas 2\nx21 // amount of oil 2 used to produce gas 1\nx22 // amount of oil 2 used to produce gas 2\nx1, x11, x12, x21, x22 >= 0\n```\n\n# Objective Function:\nWe want to maximize profits, which is the difference between the total revenue and the purchasing costs. The total revenue is the sum of the revenue from gas 1 and gas 2, which is 12x11 + 14x12 + 12x21 + 14x22. \nThe purchasing costs depend on the amount of oil 1 purchased. \nIf x1 is less than or equal to 500, the purchasing cost is 25x1. \nIf x1 is between 500 and 1000, the purchasing cost is 20(x1-500) + 500 * 25 = 20x1 + 2500 \nIf x1 is between 1000 and 1500, the purchasing cost is 15(x1-1000) + 500 * 20 + 500 * 25 = 15x1 + 7500\nTherefore, the objective function is:\n```Objective Function\nMaximize: 12x11 + 14x12 + 12x21 + 14x22 - \\left\\{\n        25x1 (0 <= x1 <= 500), \\\n    20x1 + 2500 (500 <= x1 <= 1000), \\\n    15x1 + 7500 (1000 <= x1 <= 1500)  \n\right\n.}\n```\n\n# Constraints:\nEach gallon of gas 1 must contain at least 50% oil 1, so the constraint on oil 1 usage for gas 1 is 0.\nSo, x11 / (x11 + x21) >= 0.5, which is equivalent to 0.5x11 - 0.5x21 >= 0.\nEach gallon of gas 2 must contain at least 60% oil 1, so the constraint on oil 1 usage for gas 2 is 0.\nSo, x12 / (x12 + x22) >= 0.6, which is equivalent to 0.4x12 - 0.6x22 >= 0.\nThe amount of oil 1 used to produce gas 1 and gas 2 cannot exceed the amount of oil 1 purchased, so the constraint on oil 1 usage is x11 + x12 <= x1 + 500.\nThe amount of oil 2 used to produce gas 1 and gas 2 cannot exceed the amount of oil 2 available, so the constraint on oil 2 usage is x21 + x22 <= 1000.\nThe amount of oil 1 purchased cannot exceed 1500 gallons, so the upper bound constraint on oil 1 purchased is x1 <= 1500.\n```Constraints\n0.5x11 - 0.5x21 >= 0\n0.4x12 - 0.6x22 >= 0\nx11 + x12 <= x1 + 500\nx21 + x22 <= 1000\nx1 <= 1500\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx1 = LpVariable(\"x1\", lowBound=0, cat='Continuous') # amount of oil 1 purchased\nx11 = LpVariable(\"x11\", lowBound=0, cat='Continuous') # amount of oil 1 used to produce gas 1\nx12 = LpVariable(\"x12\", lowBound=0, cat='Continuous') # amount of oil 1 used to produce gas 2\nx21 = LpVariable(\"x21\", lowBound=0, cat='Continuous') # amount of oil 2 used to produce gas 1\nx22 = LpVariable(\"x22\", lowBound=0, cat='Continuous') # amount of oil 2 used to produce gas 2\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"EuingGasProfitMaximization\", LpMaximize)\n\n# Define the objective function\n# We need to handle the piecewise linear cost function for purchasing oil 1\ncosts = (25 * x1, 20 * x1 + 2500, 15 * x1 + 7500)\nbreakpoints = (0, 500, 1000)\npurchase_cost = lpSum([costs[i] if breakpoints[i] <= x1 <= breakpoints[i+1] else 0 for i in range(len(breakpoints)-1)])\nrevenue = 12 * x11 + 14 * x12 + 12 * x21 + 14 * x22\nproblem += revenue - purchase_cost\n\n# Define the constraints\nproblem += 0.5 * x11 - 0.5 * x21 >= 0 # at least 50% oil 1 in gas 1\nproblem += 0.4 * x12 - 0.6 * x22 >= 0 # at least 60% oil 1 in gas 2\nproblem += x11 + x12 <= x1 + 500 # oil 1 usage\nproblem += x21 + x22 <= 1000 # oil 2 usage\nproblem += x1 <= 1500 # oil 1 purchase limit\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The amount of oil 1 purchased:\", x1.value())\nprint(\"The amount of oil 1 used to produce gas 1:\", x11.value())\nprint(\"The amount of oil 1 used to produce gas 2:\", x12.value())\nprint(\"The amount of oil 2 used to produce gas 1:\", x21.value())\nprint(\"The amount of oil 2 used to produce gas 2:\", x22.value())\nprint(\"The maximum profit:\", problem.objective.value())\n",
        "results": {
            "The amount of oil 1 purchased": "0.0",
            "The amount of oil 1 used to produce gas 1": "500.0",
            "The amount of oil 1 used to produce gas 2": "-0.0",
            "The amount of oil 2 used to produce gas 1": "500.0",
            "The amount of oil 2 used to produce gas 2": "0.0",
            "The maximum profit": "9500.0"
        },
        "type": "linear-table",
        "index": 233,
        "length": 858,
        "var_num": 5
    },
    {
        "scenario": "## Define Variables:\nA logistics company is managing the distribution of three types of goods: GoodsX, GoodsY, and GoodsZ. The company needs to decide how many trucks to allocate for each type of good to optimize delivery efficiency and minimize costs. Additionally, the company can invest in route optimization software to reduce travel time and fuel consumption, which affects the cost and efficiency of each delivery.\n// variables: {\"number of trucks for GoodsX\": \"TrucksX\", \"number of trucks for GoodsY\": \"TrucksY\", \"number of trucks for GoodsZ\": \"TrucksZ\", \"investment in route optimization for GoodsX\": \"OptimizationX\", \"investment in route optimization for GoodsY\": \"OptimizationY\", \"investment in route optimization for GoodsZ\": \"OptimizationZ\"}, where TrucksX, TrucksY, TrucksZ >= 0 & TrucksX, TrucksY, TrucksZ are integers, and OptimizationX, OptimizationY, OptimizationZ are continuous.\n\n## Define Objective Function:\nThe reduction in delivery costs is linearly proportional to the amount of investment in route optimization software for each type of good.\nThe initial cost per truck for GoodsX is $1,000, but with optimization, the cost decreases by $10 for every $100 invested in optimization. \nThe initial cost per truck for GoodsY is $1,200, and with optimization, the cost decreases by $12 for every $100 invested in optimization. \nThe initial cost per truck for GoodsZ is $1,500, and with optimization, the cost decreases by $15 for every $100 invested in optimization. \nThe company aims to minimize the total delivery cost for all goods.\n// Total cost for GoodsX: CostX = (1000 - 0.1 * OptimizationX) * TrucksX\n// Total cost for GoodsY: CostY = (1200 - 0.12 * OptimizationY) * TrucksY\n// Total cost for GoodsZ: CostZ = (1500 - 0.15 * OptimizationZ) * TrucksZ\n// So, the objective function is: Minimize (CostX + CostY + CostZ)\n\n## Generate Constraint-1:\nThe company has a total of 50 trucks available for allocation.\n// TrucksX + TrucksY + TrucksZ <= 50\n\n## Generate Constraint-2:\nThe budget for route optimization software is $10,000.\n// OptimizationX + OptimizationY + OptimizationZ <= 10000\n\n## Generate Constraint-3:\nDue to contractual obligations, the company must allocate at least 10 trucks for GoodsX and 15 trucks for GoodsY.\n// TrucksX >= 10; TrucksY >= 15\n\n## Generate Constraint-4:\nThe company wants to ensure that the total investment in optimization does not exceed the total cost savings from using the software.\n// 0.1 * OptimizationX * TrucksX + 0.12 * OptimizationY * TrucksY + 0.15 * OptimizationZ * TrucksZ <= OptimizationX + OptimizationY + OptimizationZ",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nTrucksX = model.addVar(vtype=\"INTEGER\", name=\"TrucksX\") # number of trucks for GoodsX\nmodel.addCons(TrucksX >= 0)\nTrucksY = model.addVar(vtype=\"INTEGER\", name=\"TrucksY\") # number of trucks for GoodsY\nmodel.addCons(TrucksY >= 0)\nTrucksZ = model.addVar(vtype=\"INTEGER\", name=\"TrucksZ\") # number of trucks for GoodsZ\nmodel.addCons(TrucksZ >= 0)\nOptimizationX = model.addVar(name=\"OptimizationX\") # investment in route optimization for GoodsX\nmodel.addCons(OptimizationX >= 0)\nOptimizationY = model.addVar(name=\"OptimizationY\") # investment in route optimization for GoodsY\nmodel.addCons(OptimizationY >= 0)\nOptimizationZ = model.addVar(name=\"OptimizationZ\") # investment in route optimization for GoodsZ\nmodel.addCons(OptimizationZ >= 0)\n\n# Define objective function\nCostX = (1000 - 0.1 * OptimizationX) * TrucksX\nCostY = (1200 - 0.12 * OptimizationY) * TrucksY\nCostZ = (1500 - 0.15 * OptimizationZ) * TrucksZ\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nmodel.addCons(obj == CostX + CostY + CostZ)\n\n# Add constraints\nmodel.addCons(TrucksX + TrucksY + TrucksZ <= 50)\nmodel.addCons(OptimizationX + OptimizationY + OptimizationZ <= 10000)\nmodel.addCons(TrucksX >= 10)\nmodel.addCons(TrucksY >= 15)\nmodel.addCons(0.1 * OptimizationX * TrucksX + 0.12 * OptimizationY * TrucksY + 0.15 * OptimizationZ * TrucksZ <= OptimizationX + OptimizationY + OptimizationZ)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Trucks for GoodsX: \", model.getVal(TrucksX))\n    print(\"Number of Trucks for GoodsY: \", model.getVal(TrucksY))\n    print(\"Number of Trucks for GoodsZ: \", model.getVal(TrucksZ))\n    print(\"Investment in Optimization for GoodsX: \", model.getVal(OptimizationX))\n    print(\"Investment in Optimization for GoodsY: \", model.getVal(OptimizationY))\n    print(\"Investment in Optimization for GoodsZ: \", model.getVal(OptimizationZ))\n    print(\"Total Cost: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Trucks for GoodsX": "10.0",
            "Number of Trucks for GoodsY": "15.0",
            "Number of Trucks for GoodsZ": "0.0",
            "Investment in Optimization for GoodsX": "10000.0",
            "Investment in Optimization for GoodsY": "0.0",
            "Investment in Optimization for GoodsZ": "0.0",
            "Total Cost": "18000.0"
        },
        "question": "A logistics company is managing the distribution of three types of goods: GoodsX, GoodsY, and GoodsZ. The company needs to decide how many trucks to allocate for each type of good to optimize delivery efficiency and minimize costs. Additionally, the company can invest in route optimization software to reduce travel time and fuel consumption, which affects the cost and efficiency of each delivery. The initial cost per truck for GoodsX is $1,000, but with optimization, the cost decreases by $10 for every $100 invested in optimization. The initial cost per truck for GoodsY is $1,200, and with optimization, the cost decreases by $12 for every $100 invested in optimization. The initial cost per truck for GoodsZ is $1,500, and with optimization, the cost decreases by $15 for every $100 invested in optimization. The company aims to minimize the total delivery cost for all goods. The company has a total of 50 trucks available for allocation. The budget for route optimization software is $10,000. Due to contractual obligations, the company must allocate at least 10 trucks for GoodsX and 15 trucks for GoodsY. The company wants to ensure that the total investment in optimization does not exceed the total cost savings from using the software. The reduction in delivery costs is linearly proportional to the amount of investment in route optimization software for each type of good.",
        "type": "nonlinear-notable",
        "index": 234,
        "length": 1389,
        "var_num": 6
    },
    {
        "question": "Each month, a video-game store owner can spend at most $30000 on consoles and discs. A console costs the store owner $300 and a disc costs $30. Each console is sold for a profit of $200 while each disc is sold for a profit of $30. The store owner estimates that a minimum of 20 but at most 50 consoles are sold each month. He also estimates that the number of discs sold is at most five times the number of consoles sold. How many of each, consoles and discs, should be sold in order to maximize the profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of consoles sold\", \"name\": \"x\"}, {\"description\": \"number of discs sold\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit from selling consoles and discs\", \"function\": \"200x + 30y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"budget constraint\", \"function\": \"300x + 30y <= 30000\"}, {\"description\": \"minimum number of consoles sold\", \"function\": \"x >= 20\"}, {\"description\": \"maximum number of consoles sold\", \"function\": \"x <= 50\"}, {\"description\": \"maximum number of discs sold related to consoles sold\", \"function\": \"y <= 5x\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_consoles_sold = LpVariable(\"NumConsolesSold\", lowBound=20, upBound=50, cat='Integer') # number of consoles sold\nnum_discs_sold = LpVariable(\"NumDiscsSold\", lowBound=0, cat='Integer') # number of discs sold\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"VideoGameStoreProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 200 * num_consoles_sold + 30 * num_discs_sold\nproblem += objective # maximize the profit from selling consoles and discs\n\n# Define the constraints\nproblem += 300 * num_consoles_sold + 30 * num_discs_sold <= 30000 # budget constraint\nproblem += num_discs_sold <= 5 * num_consoles_sold # the number of discs sold is at most five times the number of consoles sold\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of consoles sold:\", num_consoles_sold.value())\nprint(\"The number of discs sold:\", num_discs_sold.value())\nprint(\"Maximum profit:\", objective.value())\n",
        "results": {
            "The number of consoles sold": "50.0",
            "The number of discs sold": "250.0",
            "Maximum profit": "17500.0"
        },
        "type": "linear-notable",
        "index": 235,
        "length": 507,
        "var_num": 2
    },
    {
        "question": "Comp-Max Computers assembles computers and computer equipment. It is about to start production of three new types of computers, called model X, Y, and Z, respectively. Each type will require assembly time, inspection time, and storage space. The availability of each of these resources is limited. Specifically, available assembly time is 400 hours, available inspection time is 300 hours, and available storage space is 500 cubic feet (about 14.2 m\u00b3). The amount of each resource required for the different products and the profit per unit is reported in the table below. Due to some prior agreements with customers, Comp-Max must produce at least 12 model X computers. In addition, management requires that the fraction of total production made up of model Z computers must not exceed 25%. Help the manager determine the quantity of each model to produce in order to maximize profit.\n\nTable (Resource requirements and profit per unit for each computer model):\n| Computer Model | Assembly Time (hours) | Inspection Time (hours) | Storage Space (cubic feet) | Profit per Unit ($) |\n| -------------- | --------------------- | ----------------------- | -------------------------- | ------------------- |\n| Model X        | 1                     | 2                       | 3                          | 100                 |\n| Model Y        | 2                     | 3                       | 4                          | 125                 |\n| Model Z        | 3                     | 4                       | 5                          | 200                 |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for model X, Y, and Z that adhere to the constraints given. Let's denote the number of model X computers as X, the number of model Y computers as Y, and the number of model Z computers as Z.\n```Variables\nX //number of model X computers to produce \nY //number of model Y computers to produce\nZ //number of model Z computers to produce\nX, Y, Z >= 0 and they are integers //non-negative integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function (profit) is given by the sum of the profit from each model. The profit from model X is $100 per unit * X units, the profit from model Y is $125 per unit * Y units, and the profit from model Z is $200 per unit * Z units. Therefore, the objective function is 100X + 125Y + 200Z.\n```Objective Function\nMaximize: 100X + 125Y + 200Z\n```\n\n# Constraints:\nWe have several constraints that limit the availability of resources and the production quantities of each model.\n```Constraints\n1X + 2Y + 3Z <= 400 //available assembly time\n2X + 3Y + 4Z <= 300 //available inspection time\n3X + 4Y + 5Z <= 500 //available storage space\nX >= 12 //minimum number of model X computers\nZ <= 0.25(X + Y + Z) //maximum number of model Z computers\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nX = LpVariable(\"X\", lowBound=12, cat='Integer') # number of model X computers to produce\nY = LpVariable(\"Y\", lowBound=0, cat='Integer') # number of model Y computers to produce\nZ = LpVariable(\"Z\", lowBound=0, cat='Integer') # number of model Z computers to produce\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CompMaxComputers\", LpMaximize)\n\n# Define the objective function\nobjective = 100*X + 125*Y + 200*Z\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 1*X + 2*Y + 3*Z <= 400 # available assembly time\nproblem += 2*X + 3*Y + 4*Z <= 300 # available inspection time\nproblem += 3*X + 4*Y + 5*Z <= 500 # available storage space\nproblem += X >= 12 # minimum number of model X computers\nproblem += Z <= 0.25 * (X + Y + Z) # maximum number of model Z computers\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of model X computers to produce:\", X.value())\nprint(\"The number of model Y computers to produce:\", Y.value())\nprint(\"The number of model Z computers to produce:\", Z.value())\nprint(\"The maximum profit:\", value(problem.objective))\n",
        "results": {
            "The number of model X computers to produce": "150.0",
            "The number of model Y computers to produce": "0.0",
            "The number of model Z computers to produce": "0.0",
            "The maximum profit": "15000.0"
        },
        "type": "linear-table",
        "index": 236,
        "length": 1561,
        "var_num": 3
    },
    {
        "question": "A farmer has 200 acres of land on which he must process hay using either a windrower or hay harvester. For each acre of land, the windrower can process 10 kg of hay while the hay harvester can process 8 kg of hay. Per acre, the windrower produces 5 kg of methane gas and requires 2 kg of fuel. On the other hand, the hay harvester produces 3 kg of methane gas per acre and requires 1 kg of fuel. There are 300 kg of fuel available and the farmer can produce at most 800 kg of methane gas. For how many acres should each machine be used to maximize the amount of hay processed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nacres_windrower = LpVariable(\"AcresWindrower\", lowBound=0) # acres for windrower\nacres_harvester = LpVariable(\"AcresHarvester\", lowBound=0) # acres for harvester\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"HayProcessing\", LpMaximize)\n\n# Define the objective function\nobjective = 10 * acres_windrower + 8 * acres_harvester\nproblem += objective # maximize the amount of hay processed\n\n# Define the constraints\nproblem += acres_windrower + acres_harvester <= 200 # total acreage must not exceed 200\nproblem += 2 * acres_windrower + acres_harvester <= 300 # the fuel consumed should not exceed the available fuel \nproblem += 5 * acres_windrower + 3 * acres_harvester <= 800 # the methane gas produced must be at most 800 kg\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The acres processed by windrower:\", acres_windrower.value())\nprint(\"The acres processed by harvester:\", acres_harvester.value())\nprint(\"The amount of hay processed:\", objective.value())",
        "results": {
            "The acres processed by windrower": "100.0",
            "The acres processed by harvester": "100.0",
            "The amount of hay processed": "1800.0"
        },
        "formulation": "maximize 10x+8y\nSubject to: \nx+y <= 200\n2x+1y <= 300\n5x+3y <= 800 (end)",
        "type": "linear-notable",
        "index": 237,
        "length": 576,
        "var_num": 2
    },
    {
        "question": "An engineering school has a bridge building competition where students must build as many beam bridges and truss bridges as they can using Popsicle sticks and glue. A beam bridge requires 30 Popsicle sticks and 5 units of glue while a truss bridge requires 50 Popsicle sticks and 8 units of glue. Each team has at most 600 Popsicle sticks and 100 units of glue. In addition, each team can build at most 5 truss bridges and the number of beam bridges must be larger than the number of truss bridges. If a beam bridge can hold 40 grams and a truss bridge can hold 60 grams, how many of each bridge should a team build to maximize the total mass that can be supported?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_beam_bridges = LpVariable(\"NumBeamBridges\", lowBound=0, cat='Integer') # number of beam bridges\nnum_truss_bridges = LpVariable(\"NumTrussBridges\", lowBound=0, cat='Integer') # number of truss bridges\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BridgeBuildingCompetition\", LpMaximize)\n\n# Define the objective function\nobjective = 40 * num_beam_bridges + 60 * num_truss_bridges\nproblem += objective # maximize the total mass that can be supported\n\n# Define the constraints\nproblem += 30 * num_beam_bridges + 50 * num_truss_bridges <= 600 # at most 600 Popsicle sticks\nproblem += 5 * num_beam_bridges + 8 * num_truss_bridges <= 100 # at most 100 units of glue\nproblem += num_truss_bridges <= 5 # at most 5 truss bridges\nproblem += num_beam_bridges >= num_truss_bridges +1 # beam bridges must be more than the number of truss bridges\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of beam bridges:\", num_beam_bridges.value())\nprint(\"The number of truss bridges:\", num_truss_bridges.value())\nprint(\"The total mass that can be supported:\", objective.value())",
        "results": {
            "The number of beam bridges": "20.0",
            "The number of truss bridges": "0.0",
            "The total mass that can be supported": "800.0"
        },
        "formulation": "maximize 40x+60y\nSubject to: \n30x+50y <= 600\n5x+8y <= 100\ny <= 5\nx >= y (end)",
        "type": "linear-notable",
        "index": 238,
        "length": 665,
        "var_num": 2
    },
    {
        "question": "Let us suppose that we want to put four items in a knapsack that can hold up to 12 kg. The weight and the value associated with each of the items are listed below: for the item 1, 2, 3 and 4, the weights and the values are (3, 15), (6, 25), (5, 12) and (5, 10). We need to decide which items to put in so as to maximize the total value of the knapsack.",
        "formulation": "# Define Variables:\nFirst, we need to determine whether each item is put into the knapsack. Let's denote the decision variables as follows:\n```\nVariables\nx1 //whether item 1 is put into the knapsack\nx2 //whether item 2 is put into the knapsack\nx3 //whether item 3 is put into the knapsack\nx4 //whether item 4 is put into the knapsack\nx1, x2, x3, x4 = 0 or 1 // binary variables\n```\n\n# Objective Function:\nWe want to maximize the total value of the knapsack, so the objective function is given by the sum of the values of the items that are put into the knapsack. The total value is 15x1 + 25x2 + 12x3 + 10x4.\n```\nObjective Function\nMaximize: 15x1 + 25x2 + 12x3 + 10x4\n```\n\n# Constraints:\nThe maximum weight the knapsack can hold is 12 kg, so the total weight of the items put into the knapsack should not exceed 12 kg. The weight constraint is given by 3x1 + 6x2 + 5x3 + 5x4 <= 12.\n```\nConstraints\n3x1 + 6x2 + 5x3 + 5x4 <= 12\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx1 = LpVariable(\"x1\", cat='Binary') # whether item 1 is put into the knapsack\nx2 = LpVariable(\"x2\", cat='Binary') # whether item 2 is put into the knapsack\nx3 = LpVariable(\"x3\", cat='Binary') # whether item 3 is put into the knapsack\nx4 = LpVariable(\"x4\", cat='Binary') # whether item 4 is put into the knapsack\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"KnapsackProblem\", LpMaximize)\n\n# Define the objective function\nobjective = 15*x1 + 25*x2 + 12*x3 + 10*x4\nproblem += objective # maximize the total value of the knapsack\n\n# Define the constraints\nproblem += 3*x1 + 6*x2 + 5*x3 + 5*x4 <= 12 # the total weight should not exceed 12 kg\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The decision to put item 1 in the knapsack:\", x1.value())\nprint(\"The decision to put item 2 in the knapsack:\", x2.value())\nprint(\"The decision to put item 3 in the knapsack:\", x3.value())\nprint(\"The decision to put item 4 in the knapsack:\", x4.value())\nprint(\"The maximum total value of the knapsack:\", objective.value())\n",
        "results": {
            "The decision to put item 1 in the knapsack": "1.0",
            "The decision to put item 2 in the knapsack": "1.0",
            "The decision to put item 3 in the knapsack": "0.0",
            "The decision to put item 4 in the knapsack": "0.0",
            "The maximum total value of the knapsack": "40.0"
        },
        "type": "linear-notable",
        "index": 239,
        "length": 352,
        "var_num": 4
    },
    {
        "question": "Brooks City has three consolidated high schools, each with a capacity of 1,200 students. The school board has partitioned the city into five busing districts-north, south, east, west, and central-each with different high school student populations. The three schools are located in the central, west, and south districts. Some students must be bused outside their districts, and the school board wants to minimize the total bus distance traveled by these students. The average distances from each district to the three schools and the total student population in each district are as follows: Distance (miles) District Central School, West School, South School, Student Population North 8 11 14 700 South 12 9 0 300 East 9 16 10 900 West 8 0 9 600 Central 0 8 12 500 The school board wants to determine the number of students to bus from each district to each school to minimize the total busing miles traveled.",
        "formulation": "# Variables:\nTo determine the number of students to bus from each district to each school, we need to define the following variables:\n```Variables\nx1 // Number of students from the North district to the central school\nx2 // Number of students from the North district to the west school\nx3 // Number of students from the North district to the south school\nx4 // Number of students from the East district to the central school\nx5 // Number of students from the East district to the west school\nx6 // Number of students from the East district to the south school\nx7 // Number of students from the Central district to the central school\nx8 // Number of students from the Central district to the west school\nx9 // Number of students from the Central district to the south school\nx10 // Number of students from the South district to the central school\nx11 // Number of students from the South district to the west school\nx12 // Number of students from the South district to the south school\nx13 // Number of students from the West district to the central school\nx14 // Number of students from the West district to the west school\nx1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14 >= 0 and they are integers\n```\n\n# Objective:\nThe objective is to minimize the total distance traveled by students being bused from different districts to different schools. The total distance traveled is the sum of the distances for each district-school combination, multiplied by the number of students being bused for that combination. Therefore, the objective function is:\n```Objective\nMinimize: 8x1 + 11x2 + 14x3 + 12x11 + 9x12 + 9x4 + 16x5 + 10x6 + 8x7 + 9x9 + 8x8 + 12x10\n```\n\n# Constraints:\nWe have the following constraints:\n- The total student population in the North district should be equal to 700: x1 + x2 + x3 = 700\n- The total student population in the South district should be equal to 300: x11 + x12 + x4 = 300\n- The total student population in the East district should be equal to 900: x5 + x6 + x7 = 900\n- The total student population in the West district should be equal to 600: x8 + x9 + x10 = 600\n- The number of students bused to the central school from all districts should not exceed the capacity of the central school (1200): x7 + x8 + x11 + x12 + x1 <= 1200\n- The number of students bused to the west school from all districts should not exceed the capacity of the west school (1200): x2 + x8 + x12 + x13 + x3 <= 1200\n- The number of students bused to the south school from all districts should not exceed the capacity of the south school (1200): x3 + x9 + x13 + x14 + x4 <= 1200\n```Constraints\nx1 + x2 + x3 = 700\nx11 + x12 + x4 = 300\nx5 + x6 + x7 = 900\nx8 + x9 + x10 = 600\nx7 + x8 + x11 + x12 + x1 <= 1200\nx2 + x8 + x12 + x13 + x3 <= 1200\nx3 + x9 + x13 + x14 + x4 <= 1200\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx1 = LpVariable(\"x1\", lowBound=0, cat='Integer')\nx2 = LpVariable(\"x2\", lowBound=0, cat='Integer')\nx3 = LpVariable(\"x3\", lowBound=0, cat='Integer')\nx4 = LpVariable(\"x4\", lowBound=0, cat='Integer')\nx5 = LpVariable(\"x5\", lowBound=0, cat='Integer')\nx6 = LpVariable(\"x6\", lowBound=0, cat='Integer')\nx7 = LpVariable(\"x7\", lowBound=0, cat='Integer')\nx8 = LpVariable(\"x8\", lowBound=0, cat='Integer')\nx9 = LpVariable(\"x9\", lowBound=0, cat='Integer')\nx10 = LpVariable(\"x10\", lowBound=0, cat='Integer')\nx11 = LpVariable(\"x11\", lowBound=0, cat='Integer')\nx12 = LpVariable(\"x12\", lowBound=0, cat='Integer')\nx13 = LpVariable(\"x13\", lowBound=0, cat='Integer')\nx14 = LpVariable(\"x14\", lowBound=0, cat='Integer')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimizeBusingMiles\", LpMinimize)\n\n# Define the objective function\nobjective = 8*x1 + 11*x2 + 14*x3 + 12*x11 + 9*x12 + 9*x4 + 16*x5 + 10*x6 + 8*x7 + 9*x9 + 8*x8 + 12*x10\nproblem += objective\n\n# Define the constraints\nproblem += x1 + x2 + x3 == 700\nproblem += x11 + x12 + x4 == 300\nproblem += x5 + x6 + x7 == 900\nproblem += x8 + x9 + x10 == 600\nproblem += x7 + x8 + x11 + x12 + x1 <= 1200\nproblem += x2 + x8 + x12 + x13 + x3 <= 1200\nproblem += x3 + x9 + x13 + x14 + x4 <= 1200\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of students from each district to each school:\")\nprint(\"North to Central:\", x1.value())\nprint(\"North to West:\", x2.value())\nprint(\"North to South:\", x3.value())\nprint(\"East to Central:\", x4.value())\nprint(\"East to West:\", x5.value())\nprint(\"East to South:\", x6.value())\nprint(\"Central to Central:\", x7.value())\nprint(\"Central to West:\", x8.value())\nprint(\"Central to South:\", x9.value())\nprint(\"South to Central:\", x10.value())\nprint(\"South to West:\", x11.value())\nprint(\"South to South:\", x12.value())\nprint(\"West to Central:\", x13.value())\nprint(\"West to West:\", x14.value())\nprint(\"Total busing miles traveled:\", objective.value())\n",
        "results": {
            "The number of students from North to Central": "700.0",
            "The number of students from North to West": "0.0",
            "The number of students from North to South": "0.0",
            "The number of students from East to Central": "300.0",
            "The number of students from East to West": "0.0",
            "The number of students from East to South": "400.0",
            "The number of students from Central to Central": "500.0",
            "The number of students from Central to West": "0.0",
            "The number of students from Central to South": "600.0",
            "The number of students from South to Central": "0.0",
            "The number of students from South to West": "0.0",
            "The number of students from South to South": "0.0",
            "The number of students from West to Central": "0.0",
            "The number of students from West to West": "0.0",
            "Total busing miles traveled": "21700.0"
        },
        "type": "linear-notable",
        "index": 240,
        "length": 911,
        "var_num": 15
    },
    {
        "question": "A repairman fixes washing machines and freezers. Each washing machine takes 30 minutes of inspection and 90 minutes of fixing time. Each freezer takes 20 minutes of inspection and 125 minutes of fixing time. The repairman has 5000 minutes available for inspection and 20000 minutes available in his schedule. If each washing machine repaired earns him $250 and each freezer repaired earns his $375, how many of each appliance should he fix to maximize his earnings?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_washing_machines = LpVariable(\"NumWashingMachines\", lowBound=0, cat='Integer') # number of washing machines\nnum_freezers = LpVariable(\"NumFreezers\", lowBound=0, cat='Integer') # number of freezers\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ApplianceRepair\", LpMaximize)\n\n# Define the objective function\nobjective = 250 * num_washing_machines + 375 * num_freezers\nproblem += objective # maximize the total earnings\n\n# Define the constraints\nproblem += 30 * num_washing_machines + 20 * num_freezers <= 5000 # the inspection time must not exceed 5000 minutes\nproblem += 90 * num_washing_machines + 125 * num_freezers <= 20000 # the fixing time must not exceed 20000 minutes\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of washing machines:\", num_washing_machines.value())\nprint(\"The number of freezers:\", num_freezers.value())\nprint(\"Total earnings:\", objective.value())",
        "results": {
            "The number of washing machines": "0.0",
            "The number of freezers": "160.0",
            "Total earnings": "60000.0"
        },
        "formulation": "maximize 250y+375x\nSubject to: \n30y+20x <= 5000\n90y+125x <= 20000 (end)",
        "type": "linear-notable",
        "index": 241,
        "length": 465,
        "var_num": 2
    },
    {
        "question": "You want to make cylindrical containers. The volume of the container is at least 100 cubic inches. The side is made from a rectangular piece of material, and this can be done with no material wasted. However, the top and bottom are cut from squares of side 2r, so that 2*((2*r)^2) = 8 * r^2 of material is needed (rather than 2 * \u03c0 * r^2, which is the total area of the top and bottom). Find the dimensions of the container using the least amount of material.",
        "scenario": "## Define Variables:\nYou want to make cylindrical containers.\n// variables: {\"radius of the cylinder\": \"r\", \"height of the cylinder\": \"h\"}, where r, h >= 0\n\n## Define Objective Function:\nThe side is made from a rectangular piece of material, and this can be done with no material wasted. However, the top and bottom are cut from squares of side 2r, so that 2*((2*r)^2) = 8 * r^2 of material is needed (rather than 2 * \u03c0 * r^2, which is the total area of the top and bottom). Find the dimensions of the container using the least amount of material.\n// The total amount of material needed is 8r^2 + 2\u03c0rh. \n// Therefore, the objective function is: Minimize 8r^2 + 2\u03c0rh\n\n## Generate Constraint-1:\nThe volume of the container is at least 100 cubic inches.\n// The volume of the cylinder is given by the formula \u03c0r^2h, and it is given that the volume is at least 100. Therefore, the constraint is \u03c0r^2h >= 100",
        "code": "from pyscipopt import Model\nimport math\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nr = model.addVar(vtype=\"CONTINUOUS\", name=\"r\") # radius of the cylinder\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the cylinder\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nmodel.addCons(obj == 8*r**2 + 2*math.pi*r*h)\n\n# Add constraints\nmodel.addCons(math.pi*r**2*h >= 100)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The radius of the cylinder: \", model.getVal(r))\n    print(\"The height of the cylinder: \", model.getVal(h))\n    print(\"The minimum amount of material needed: \", model.getVal(obj))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The radius of the cylinder": "2.32074837747842",
            "The height of the cylinder": "5.910088887087799",
            "The minimum amount of material needed": "129.26608058453235"
        },
        "type": "nonlinear-notable",
        "index": 242,
        "length": 459,
        "var_num": 2
    },
    {
        "question": "In a science fair, there are two types of tables that can be used to display the children\u2019s science experiments. At the circular tables, 4 poster boards and 5 participants can fit around the table to cater to 8 guests. At the rectangular tables, 4 poster boards and 4 participants can fit around the table to cater to 12 guests. However, each circular table takes up 15 units of space while each rectangular table takes up 20 units of space. The science fair has must be able to fit at least 500 participants and 300 poster boards. If the science fair has available 1900 units of space, how many of each type of table should be set up to maximize the number of catered guests?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_circular_tables = LpVariable(\"NumCircularTables\", lowBound=0, cat='Integer') # number of circular tables\nnum_rectangular_tables = LpVariable(\"NumRectangularTables\", lowBound=0, cat='Integer') # number of rectangular tables\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ScienceFairTableAllocation\", LpMaximize)\n\n# Define the objective function\nobjective = 8 * num_circular_tables + 12 * num_rectangular_tables\nproblem += objective # maximize the total number of catered guests\n\n# Define the constraints\nproblem += num_circular_tables * 5 + num_rectangular_tables * 4 >= 500 # must be able to fit at least 500 participants\nproblem += num_circular_tables * 4 + num_rectangular_tables * 4 >= 300 # must be able to fit at least 300 poster boards\nproblem += num_circular_tables * 15 + num_rectangular_tables * 20 <= 1900 # total space used by tables cannot exceed 1900 units\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of circular tables:\", num_circular_tables.value())\nprint(\"The number of rectangular tables:\", num_rectangular_tables.value())\nprint(\"The total number of catered guests:\", objective.value())",
        "results": {
            "The number of circular tables": "60.0",
            "The number of rectangular tables": "50.0",
            "The total number of catered guests": "1080.0"
        },
        "formulation": "maximize 8x+12y\nSubject to: \n4x+4y >= 300\n5x+4y >= 500\n15x+20y <= 1900 (end)",
        "type": "linear-table",
        "index": 243,
        "length": 676,
        "var_num": 2
    },
    {
        "question": "You have 100 feet of fence to make a rectangular play area alongside the wall of your house. The wall of the house bounds one side. What is the largest size possible (in square feet) for the play area?",
        "scenario": "## Define Variables:\nYou need to construct a rectangular play area alongside the wall of your house.\n// variables: {\"length of the play area\": \"L\", \"width of the play area\": \"W\"}, where L, W >= 0\n\n## Define Objective Function:\nPlease find the dimensions of the play area that maximize the area.\n// The area of the play area is given by the product of the length and the width. Therefore, the objective function is: Maximize L * W\n\n## Generate Constraint-1:\nYou have 100 feet of fence. The wall of the house bounds one side.\n// The length of the play area and the two widths of the play area must sum to 100. The length of the play area is L, and the two widths are 2W. Therefore, the constraint is L + 2W <= 100",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nL = model.addVar(vtype=\"CONTINUOUS\", name=\"L\") # length of the play area\nW = model.addVar(vtype=\"CONTINUOUS\", name=\"W\") # width of the play area\n\n# Define objective function\nobj = model.addVar(vtype=\"C\", name=\"obj\")\nmodel.addCons(obj == L * W)\nmodel.setObjective(obj, \"maximize\")\n\n# Add constraints\nmodel.addCons(L + 2*W <= 100)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The length of the play area:\", model.getVal(L))\n    print(\"The width of the play area:\", model.getVal(W))\n    print(\"The maximum area of the play area: \", model.getVal(L * W))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The length of the play area": "50.000",
            "The width of the play area": "25.000",
            "The maximum area of the play area": "1250.00"
        },
        "type": "nonlinear-notable",
        "index": 244,
        "length": 201,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA manufacturing company is planning to produce four different types of products: ProductA, ProductB, ProductC, and ProductD. They need to decide how many units of each product to produce in the next month to optimize their profits.\n// variables: {\"number of units of ProductA\": \"UnitsA\", \"number of units of ProductB\": \"UnitsB\", \"number of units of ProductC\": \"UnitsC\", \"number of units of ProductD\": \"UnitsD\"}, where UnitsA, UnitsB, UnitsC, UnitsD >= 0 & UnitsA, UnitsB, UnitsC, UnitsD are integers\n\n## Define Objective Function:\nThe initial profit per unit for ProductA is $50, but it decreases by $1 for each additional unit of ProductA produced beyond the first 100 units. The initial profit per unit for ProductB is $70, but it decreases by $0.5 for each unit of ProductA produced. The initial profit per unit for ProductC is $60, but it increases by $0.2 for each unit of ProductB produced. The initial profit per unit for ProductD is $80, but it decreases by $0.1 for each unit of ProductC produced. The company wants to maximize the total profit.\n// Total profit for ProductA: Profit_A = min(50 - (UnitsA - 100), 50) * UnitsA\n// Total profit for ProductB: Profit_B = (70 - 0.5 * UnitsA) * UnitsB\n// Total profit for ProductC: Profit_C = (60 + 0.2 * UnitsB) * UnitsC\n// Total profit for ProductD: Profit_D = (80 - 0.1 * UnitsC) * UnitsD\n// So, the objective function is: Maximize (Profit_A + Profit_B + Profit_C + Profit_D)\n\n## Generate Constraint-1:\nThe company has a total production capacity of 500 units for the month.\n// UnitsA + UnitsB + UnitsC + UnitsD <= 500\n\n## Generate Constraint-2:\nDue to raw material availability, the production of ProductB cannot exceed twice the production of ProductA.\n// UnitsB <= 2 * UnitsA\n\n## Generate Constraint-3:\nThe company has a budget of $20,000 for raw materials for the month. The cost of raw materials for ProductA is $20 per unit, for ProductB is $30 per unit, for ProductC is $25 per unit, and for ProductD is $40 per unit.\n// 20 * UnitsA + 30 * UnitsB + 25 * UnitsC + 40 * UnitsD <= 20,000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nUnitsA1 = model.addVar(vtype=\"INTEGER\", name=\"UnitsA1\", lb=0, ub=100)\nUnitsA2 = model.addVar(vtype=\"INTEGER\", name=\"UnitsA2\", lb=100, ub=500)\nUnitsA1_b = model.addVar(vtype=\"B\", name=\"UnitsA1_b\")\nUnitsA2_b = model.addVar(vtype=\"B\", name=\"UnitsA2_b\")\nmodel.addCons(UnitsA1_b + UnitsA2_b == 1)\nUnitsA = UnitsA1 * UnitsA1_b + UnitsA2 * UnitsA2_b\n\nUnitsB = model.addVar(vtype=\"INTEGER\", name=\"UnitsB\") # number of units of ProductB\nmodel.addCons(UnitsB >= 0)\nUnitsC = model.addVar(vtype=\"INTEGER\", name=\"UnitsC\") # number of units of ProductC\nmodel.addCons(UnitsC >= 0)\nUnitsD = model.addVar(vtype=\"INTEGER\", name=\"UnitsD\") # number of units of ProductD\nmodel.addCons(UnitsD >= 0)\n\n# Define objective function\n\"\"\"\n// Total profit for ProductA: Profit_A = min(50 - (UnitsA - 100), 50) * UnitsA\n// Total profit for ProductB: Profit_B = (70 - 0.5 * UnitsA) * UnitsB\n// Total profit for ProductC: Profit_C = (60 + 0.2 * UnitsB) * UnitsC\n// Total profit for ProductD: Profit_D = (80 - 0.1 * UnitsC) * UnitsD\n\"\"\"\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nProfit_A = 50 * UnitsA1 * UnitsA1_b + (50 - (UnitsA2 - 100)) * UnitsA2 * UnitsA2_b\nProfit_B = (70 - 0.5 * UnitsA) * UnitsB\nProfit_C = (60 + 0.2 * UnitsB) * UnitsC\nProfit_D = (80 - 0.1 * UnitsC) * UnitsD\nmodel.addCons(obj == Profit_A + Profit_B + Profit_C + Profit_D)\n\n# Add constraints\nmodel.addCons(UnitsA + UnitsB + UnitsC + UnitsD <= 500)\nmodel.addCons(UnitsB <= 2 * UnitsA)\nmodel.addCons(20 * UnitsA + 30 * UnitsB + 25 * UnitsC + 40 * UnitsD <= 20000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Units of ProductA: \", model.getVal(UnitsA1) * model.getVal(UnitsA1_b) + model.getVal(UnitsA2) * model.getVal(UnitsA2_b))\n    print(\"Number of Units of ProductB: \", model.getVal(UnitsB))\n    print(\"Number of Units of ProductC: \", model.getVal(UnitsC))\n    print(\"Number of Units of ProductD: \", model.getVal(UnitsD))\n    print(\"Total Profit: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Units of ProductA": "0.0",
            "Number of Units of ProductB": "0.0",
            "Number of Units of ProductC": "0.0",
            "Number of Units of ProductD": "500.0",
            "Total Profit": "40000.0"
        },
        "question": "A manufacturing company is planning to produce four different types of products: ProductA, ProductB, ProductC, and ProductD. They need to decide how many units of each product to produce in the next month to optimize their profits. The company has a total production capacity of 500 units for the month. Due to raw material availability, the production of ProductB cannot exceed twice the production of ProductA. The company has a budget of $20,000 for raw materials for the month. The cost of raw materials for ProductA is $20 per unit, for ProductB is $30 per unit, for ProductC is $25 per unit, and for ProductD is $40 per unit. The initial profit per unit for ProductA is $50, but it decreases by $1 for each additional unit of ProductA produced beyond the first 100 units. The initial profit per unit for ProductB is $70, but it decreases by $0.5 for each unit of ProductA produced. The initial profit per unit for ProductC is $60, but it increases by $0.2 for each unit of ProductB produced. The initial profit per unit for ProductD is $80, but it decreases by $0.1 for each unit of ProductC produced. The company wants to maximize the total profit.",
        "type": "nonlinear-notable",
        "index": 245,
        "length": 1155,
        "var_num": 4
    },
    {
        "question": "A tourism company can buy sedans or buses to add to their fleet of vehicles to increase their capacity for more tourists. A sedan can seat 50 tourists per day but results in 10 units of pollution. A bus can seat 250 tourists per day but results in 40 units of pollution. The city has limited this tourism company to producing at most 800 units of pollutants per day. To make a profit, this tourism company must take care of at least 4600 customers per day. Planning to make a profit, how many sedans and how many buses should this tourism company purchase to decrease the total number of vehicles needed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_sedans = LpVariable(\"NumSedans\", lowBound=0, cat='Integer') # number of sedans\nnum_buses = LpVariable(\"NumBuses\", lowBound=0, cat='Integer') # number of buses\n\n# Define the question as a minimum problem\nproblem = LpProblem(\"TourismCompanyFleet\", LpMinimize)\n\n# Define the objective function\nobjective = num_sedans + num_buses\nproblem += objective # minimize the total number of vehicles\n\n# Define the constraints\nproblem += 10 * num_sedans + 40 * num_buses <= 800 # pollutants produced per day must be at most 800 units\nproblem += 50 * num_sedans + 250 * num_buses >= 4600 # must take care of at least 4600 customers per day\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of sedans to purchase:\", num_sedans.value())\nprint(\"The number of buses to purchase:\", num_buses.value())\nprint(\"The total number of vehicles:\", objective.value())",
        "results": {
            "The number of sedans to purchase": "0.0",
            "The number of buses to purchase": "19.0",
            "The total number of vehicles": "19.0"
        },
        "formulation": "minimize x+y\nSubject to: \n10x+40y <= 800\n250y+50x >= 4600 (end)",
        "type": "linear-notable",
        "index": 246,
        "length": 604,
        "var_num": 2
    },
    {
        "question": "A toy store hires seasonal and full-time volunteers to deliver gifts and gives them points for service. A seasonal volunteer can deliver 5 gifts and gets 2 points. A full-time volunteer can deliver 8 gifts and gets 5 points. The store can only give out 200 points. In addition, a maximum of 30% of the volunteers can be seasonal and at least 10 must be full-time. How many of each volunteer is needed to maximize the total number of gifts that can be delivered?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_seasonal_volunteers = LpVariable(\"NumSeasonalVolunteers\", lowBound=0, cat='Integer') # number of seasonal volunteers\nnum_fulltime_volunteers = LpVariable(\"NumFullTimeVolunteers\", lowBound=10, cat='Integer') # number of full-time volunteers\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ToyStoreDelivery\", LpMaximize)\n\n# Define the objective function\nobjective = 5 * num_seasonal_volunteers + 8 * num_fulltime_volunteers\nproblem += objective # maximize the total number of gifts delivered\n\n# Define the constraints\nproblem += 2 * num_seasonal_volunteers + 5 * num_fulltime_volunteers <= 200 # the store can only give out 200 points\nproblem += num_seasonal_volunteers <= 0.3 * (num_seasonal_volunteers + num_fulltime_volunteers) # a maximum of 30% of the volunteers can be seasonal\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of seasonal volunteers:\", num_seasonal_volunteers.value())\nprint(\"The number of full-time volunteers:\", num_fulltime_volunteers.value())\nprint(\"The total number of gifts delivered:\", objective.value())",
        "results": {
            "The number of seasonal volunteers": "14.0",
            "The number of full-time volunteers": "34.0",
            "The total number of gifts delivered": "342.0"
        },
        "formulation": "maximize 5x+8y\nSubject to: \n2x+5y <= 200\nx <= 0.3(x+y)\ny >= 10 (end)",
        "type": "linear-notable",
        "index": 247,
        "length": 461,
        "var_num": 2
    },
    {
        "question": "Lisa can invest in NFTs and crypto-currency up to $5000. Each dollar invested in NFTs yields $0.30 profit, and each dollar invested in a crypto-currency yields $0.40 profit. A minimum of 25% of all money invested must be in NFTs, and at least $2300 must be in crypto-currency. How can Lisa maximize her profit?",
        "formulation": "{\"variable\": [{\"description\": \"dollars invested in NFTs\", \"name\": \"x\"}, {\"description\": \"dollars invested in crypto-currency\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total profit\", \"function\": \"0.30x + 0.40y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"total investment constraint\", \"function\": \"x + y <= 5000\"}, {\"description\": \"NFT investment constraint\", \"function\": \"x >= 0.25(x + y)\"}, {\"description\": \"crypto-currency investment constraint\", \"function\": \"y >= 2300\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"dollars_in_NFTs\", lowBound=0, cat='Continuous') # dollars invested in NFTs\ny = LpVariable(\"dollars_in_crypto\", lowBound=0, cat='Continuous') # dollars invested in crypto-currency\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 0.30 * x + 0.40 * y\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += x + y <= 5000 # total investment constraint\nproblem += x >= 0.25 * (x + y) # NFT investment constraint, converted to x >= 0.25x + 0.25y => x - 0.25x >= 0.25y => 0.75x >= 0.25y\nproblem += y >= 2300 # crypto-currency investment constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Dollars invested in NFTs:\", x.value())\nprint(\"Dollars invested in crypto-currency:\", y.value())\nprint(\"Total profit:\", objective.value())\n",
        "results": {
            "Dollars invested in NFTs": "1250.0",
            "Dollars invested in crypto-currency": "3750.0",
            "Total profit": "1875.0"
        },
        "type": "linear-notable",
        "index": 248,
        "length": 310,
        "var_num": 2
    },
    {
        "question": "A woman eats cashews and almonds to get her calorie and protein intake. A serving of almonds contains 200 calories and 20 grams of protein. A serving of cashews contains 300 calories and 25 grams of protein. The woman decides to eat at least twice as many servings of almonds as cashews. Furthermore, a serving of almonds contains 15 grams of fat while a serving of cashews contains 12 grams of fat. If the woman needs to consume at least 10000 calories and 800 grams of protein this week, how many servings of each should she eat to minimize her fat intake?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_servings_almonds = LpVariable(\"NumServingsAlmonds\", lowBound=0, cat='Integer') # number of servings of almonds\nnum_servings_cashews = LpVariable(\"NumServingsCashews\", lowBound=0, cat='Integer') # number of servings of cashews\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DietOptimization\", LpMinimize)\n\n# Define the objective function\nobjective = 15 * num_servings_almonds + 12 * num_servings_cashews\nproblem += objective # minimize the total fat intake\n\n# Define the constraints\nproblem += 200 * num_servings_almonds + 300 * num_servings_cashews >= 10000 # at least 10000 calories\nproblem += 20 * num_servings_almonds + 25 * num_servings_cashews >= 800 # at least 800 grams of protein\nproblem += num_servings_almonds >= 2 * num_servings_cashews # at least twice as many servings of almonds as cashews\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of servings of almonds:\", num_servings_almonds.value())\nprint(\"The number of servings of cashews:\", num_servings_cashews.value())\nprint(\"The total fat intake:\", objective.value())",
        "results": {
            "The number of servings of almonds": "29.0",
            "The number of servings of cashews": "14.0",
            "The total fat intake": "603.0"
        },
        "formulation": "minimize 15y+12x\nSubject to: \n200y+300x >= 10000\n20y+25x >= 800\ny >= 2x (end)",
        "type": "linear-notable",
        "index": 249,
        "length": 558,
        "var_num": 2
    },
    {
        "question": "Both coconut oil and lavender need to be added to a body wash. One unit of coconut oil takes 0.7 minutes to be effective while one unit of lavender takes 0.9 minutes to be effective. The body wash must contain at least 300 units of coconut oil and at most 550 units of both ingredients. Since too much coconut oil can make the body wash too oily, there can be at most thrice the amount of coconut oil as lavenders in the body wash. How many units of each should be added to the body wash to minimize the total amount of time it takes for the mixture to be effective? (Note: one must be added before the other)",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\ncoconut_oil_units = LpVariable(\"CoconutOilUnits\", lowBound=300, cat='Continuous') # at least 300 units of coconut oil\nlavender_units = LpVariable(\"LavenderUnits\", lowBound=0, cat='Continuous') # no lower bound given for lavender\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BodyWashOptimization\", LpMinimize)\n\n# Define the objective function\nobjective = 0.7 * coconut_oil_units + 0.9 * lavender_units\nproblem += objective # minimize the total effective time\n\n# Define the constraints\nproblem += coconut_oil_units + lavender_units <= 550 # at most 550 units of both ingredients\nproblem += coconut_oil_units <= 3 * lavender_units # at most thrice the amount of coconut oil as lavender\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of coconut oil units:\", coconut_oil_units.value())\nprint(\"The number of lavender units:\", lavender_units.value())\nprint(\"The minimum effective time:\", objective.value())",
        "results": {
            "The number of coconut oil units": "300.0",
            "The number of lavender units": "100.0",
            "The minimum effective time": "300.0"
        },
        "formulation": "minimize 0.7x+0.9y\nSubject to: \nx >= 300\nx+y <= 550\nx <= 3y (end)",
        "type": "linear-notable",
        "index": 250,
        "length": 609,
        "var_num": 2
    },
    {
        "question": "A chocolate maker has contracted to operate a small candy counter in a fashionable store, offering a limited selection of candy mixes and individual one-pound boxes of cashews, raisins, caramels, and chocolates. The counter will offer a regular mix (equal parts of cashews, raisins, caramels, and chocolates), a deluxe mix (one-half cashews and one-half chocolates), and individual one-pound boxes of each candy type. All candies are made fresh at the counter, but storage space for supplies is limited. Bins are available with the capacities shown in the following table. Additionally, to maintain a good image and encourage purchases, at least 20 boxes of each type of product must be made each day. Leftover boxes are donated to a nearby nursing home. The profit per box for each item is also provided in the table. Determine the optimal values of the decision variables and the maximum profit.\n\nTable (Ingredient Capacity and Profit per Box):\n| Ingredient | Capacity (pounds per day) | Regular Mix Profit | Deluxe Mix Profit | Individual Box Profit |\n|------------|---------------------------|--------------------|-------------------|-----------------------|\n| Cashews    | 120                       | $0.80              | $0.90             | $0.70                 |\n| Raisins    | 200                       | $0.80              | -                 | $0.60                 |\n| Caramels   | 100                       | $0.80              | -                 | $0.50                 |\n| Chocolates | 160                       | $0.80              | $0.90             | $0.75                 |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal number of boxes for each type of candy that adheres to the constraints given. Let's denote the number of boxes of regular mix as R, the number of boxes of deluxe as D, the number of boxes of cashews as C, the number of boxes of raisins as R, the number of boxes of caramels as C, and the number of boxes of chocolates as C.\n```Variables\nReg // number of boxes of regular mix\nDel // number of boxes of deluxe\nCas // number of boxes of cashews\nRais // number of boxes of raisins\nCar // number of boxes of caramels\nChoc // number of boxes of chocolates\nReg, Del, Cas, Rais, Car, Choc >= 0 and they are integers // non-negative and integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function (profit) is given by summing the profit from each type of candy. The profit per box for each type of candy is given as follows:\n- Regular mix: $0.80\n- Deluxe: $0.90\n- Cashews: $0.70\n- Raisins: $0.60\n- Caramels: $0.50\n- Chocolates: $0.75\n\nTherefore, the objective function is:\n```Objective Function\nMaximize: 0.80Reg + 0.90Del + 0.70Cas + 0.60Rais + 0.50Car + 0.75Choc\n```\n\n# Constraints:\nWe need to consider the following constraints:\n- Maximum capacity of cashews: The total weight of cashews used in the regular mix, deluxe, and individual cashew boxes should not exceed 120 pounds.\n- Maximum capacity of raisins: The total weight of raisins used in the regular mix and individual raisin boxes should not exceed 200 pounds.\n- Maximum capacity of caramels: The total weight of caramels used in the regular mix and individual caramel boxes should not exceed 100 pounds.\n- Maximum capacity of chocolates: The total weight of chocolates used in the regular mix, deluxe, and individual chocolate boxes should not exceed 160 pounds.\n- Minimum number of boxes for each type of candy: At least 20 boxes of each type of candy should be made each day.\n\nTherefore, the constraints are:\n```Constraints\n0.25Reg + 0.5Del + Cas <= 120 // maximum capacity of cashews\n0.25Reg + Rais <= 200 // maximum capacity of raisins\n0.25Reg + Car <= 100 // maximum capacity of caramels\n0.25Reg + 0.5Del + Choc <= 160 // maximum capacity of chocolates\nReg >= 20 // minimum boxes of regular mix\nDel >= 20 // minimum boxes of deluxe\nCas >= 20 // minimum boxes of cashews\nRais >= 20 // minimum boxes of raisins\nCar >= 20 // minimum boxes of caramels\nChoc >= 20 // minimum boxes of chocolates\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nReg = LpVariable(\"Regular\", lowBound=20, cat='Integer') # number of boxes of regular mix\nDel = LpVariable(\"Deluxe\", lowBound=20, cat='Integer') # number of boxes of deluxe\nCas = LpVariable(\"Cashews\", lowBound=20, cat='Integer') # number of boxes of cashews\nRais = LpVariable(\"Raisins\", lowBound=20, cat='Integer') # number of boxes of raisins\nCar = LpVariable(\"Caramels\", lowBound=20, cat='Integer') # number of boxes of caramels\nChoc = LpVariable(\"Chocolates\", lowBound=20, cat='Integer') # number of boxes of chocolates\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CandyCounterProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 0.80*Reg + 0.90*Del + 0.70*Cas + 0.60*Rais + 0.50*Car + 0.75*Choc\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 0.25*Reg + 0.5*Del + Cas <= 120 # maximum capacity of cashews\nproblem += 0.25*Reg + Rais <= 200 # maximum capacity of raisins\nproblem += 0.25*Reg + Car <= 100 # maximum capacity of caramels\nproblem += 0.25*Reg + 0.5*Del + Choc <= 160 # maximum capacity of chocolates\nproblem += Reg >= 20 # minimum boxes of regular mix\nproblem += Del >= 20 # minimum boxes of deluxe\nproblem += Cas >= 20 # minimum boxes of cashews\nproblem += Rais >= 20 # minimum boxes of raisins\nproblem += Car >= 20 # minimum boxes of caramels\nproblem += Choc >= 20 # minimum boxes of chocolates\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of regular mix boxes:\", Reg.value())\nprint(\"The number of deluxe mix boxes:\", Del.value())\nprint(\"The number of cashew boxes:\", Cas.value())\nprint(\"The number of raisin boxes:\", Rais.value())\nprint(\"The number of caramel boxes:\", Car.value())\nprint(\"The number of chocolate boxes:\", Choc.value())\nprint(\"The maximum profit:\", value(problem.objective))\n",
        "results": {
            "The number of regular mix boxes": "320.0",
            "The number of deluxe mix boxes": "40.0",
            "The number of cashew boxes": "20.0",
            "The number of raisin boxes": "120.0",
            "The number of caramel boxes": "20.0",
            "The number of chocolate boxes": "60.0",
            "The maximum profit": "433.0"
        },
        "type": "linear-table",
        "index": 251,
        "length": 1594,
        "var_num": 6
    },
    {
        "question": "A mine sends ore to the surface in small and large wagons. A small wagon hold 20 units of ore while a large wagon holds 50 units of ore. To avoid taking up too much space on the ramps, the number of small wagons must be at least twice as much as the number or large wagons. In addition, at least 10 large wagons must be used. If 2000 units of ore need to taken to the surface, minimize the total number of wagons needed.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_small_wagons = LpVariable(\"NumSmallWagons\", lowBound=0, cat='Integer') # number of small wagons\nnum_large_wagons = LpVariable(\"NumLargeWagons\", lowBound=10, cat='Integer') # number of large wagons\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimizeWagons\", LpMinimize)\n\n# Define the objective function\nobjective = num_small_wagons + num_large_wagons\nproblem += objective # minimize the total number of wagons needed\n\n# Define the constraints\nproblem += 20 * num_small_wagons + 50 * num_large_wagons >= 2000 # at least 2000 units of ore must be transported\nproblem += num_small_wagons >= 2 * num_large_wagons # number of small wagons must be at least twice the number of large wagons\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of small wagons:\", num_small_wagons.value())\nprint(\"The number of large wagons:\", num_large_wagons.value())\nprint(\"The total number of wagons needed:\", objective.value())",
        "results": {
            "The number of small wagons": "45.0",
            "The number of large wagons": "22.0",
            "The total number of wagons needed": "67.0"
        },
        "formulation": "minimize x+y\nSubject to: \nx >= 2y\ny >= 10\n20x+50y >= 2000 (end)",
        "type": "linear-notable",
        "index": 252,
        "length": 420,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA manufacturing company is planning to produce four different types of products: ProductA, ProductB, ProductC, and ProductD. They need to decide how many units of each product to produce in the next month to optimize their profits.\n// variables: {\"number of units of ProductA\": \"UnitsA\", \"number of units of ProductB\": \"UnitsB\", \"number of units of ProductC\": \"UnitsC\", \"number of units of ProductD\": \"UnitsD\"}, where UnitsA, UnitsB, UnitsC, UnitsD >= 0 & UnitsA, UnitsB, UnitsC, UnitsD are integers\n\n## Define Objective Function:\nThe initial profit per unit for ProductA is $50, but it decreases by $1 for each additional unit of ProductA produced beyond the first 100 units. The initial profit per unit for ProductB is $70, but it decreases by $0.5 for each unit of ProductA produced. The initial profit per unit for ProductC is $60, but it increases by $0.2 for each unit of ProductB produced. The initial profit per unit for ProductD is $80, but it decreases by $0.1 for each unit of ProductC produced. The company wants to maximize the total profit.\n// Total profit for ProductA: Profit_A = min(50 - (UnitsA - 100), 50) * UnitsA\n// Total profit for ProductB: Profit_B = (70 - 0.5 * UnitsA) * UnitsB\n// Total profit for ProductC: Profit_C = (60 + 0.2 * UnitsB) * UnitsC\n// Total profit for ProductD: Profit_D = (80 - 0.1 * UnitsC) * UnitsD\n// So, the objective function is: Maximize (Profit_A + Profit_B + Profit_C + Profit_D)\n\n## Generate Constraint-1:\nThe company has a total production capacity of 500 units for the month.\n// UnitsA + UnitsB + UnitsC + UnitsD <= 500\n\n## Generate Constraint-2:\nDue to raw material availability, the production of ProductB cannot exceed twice the production of ProductA.\n// UnitsB <= 2 * UnitsA\n\n## Generate Constraint-3:\nThe company has a budget of $20,000 for raw materials for the month. The cost of raw materials for ProductA is $20 per unit, for ProductB is $30 per unit, for ProductC is $25 per unit, and for ProductD is $40 per unit.\n// 20 * UnitsA + 30 * UnitsB + 25 * UnitsC + 40 * UnitsD <= 20,000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nUnitsA1 = model.addVar(vtype=\"INTEGER\", name=\"UnitsA1\", lb=0, ub=100)\nUnitsA2 = model.addVar(vtype=\"INTEGER\", name=\"UnitsA2\", lb=100, ub=500)\nUnitsA1_b = model.addVar(vtype=\"B\", name=\"UnitsA1_b\")\nUnitsA2_b = model.addVar(vtype=\"B\", name=\"UnitsA2_b\")\nmodel.addCons(UnitsA1_b + UnitsA2_b == 1)\nUnitsA = UnitsA1 * UnitsA1_b + UnitsA2 * UnitsA2_b\n\nUnitsB = model.addVar(vtype=\"INTEGER\", name=\"UnitsB\") # number of units of ProductB\nmodel.addCons(UnitsB >= 0)\nUnitsC = model.addVar(vtype=\"INTEGER\", name=\"UnitsC\") # number of units of ProductC\nmodel.addCons(UnitsC >= 0)\nUnitsD = model.addVar(vtype=\"INTEGER\", name=\"UnitsD\") # number of units of ProductD\nmodel.addCons(UnitsD >= 0)\n\n# Define objective function\n\"\"\"\n// Total profit for ProductA: Profit_A = min(50 - (UnitsA - 100), 50) * UnitsA\n// Total profit for ProductB: Profit_B = (70 - 0.5 * UnitsA) * UnitsB\n// Total profit for ProductC: Profit_C = (60 + 0.2 * UnitsB) * UnitsC\n// Total profit for ProductD: Profit_D = (80 - 0.1 * UnitsC) * UnitsD\n\"\"\"\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nProfit_A = 50 * UnitsA1 * UnitsA1_b + (50 - (UnitsA2 - 100)) * UnitsA2 * UnitsA2_b\nProfit_B = (70 - 0.5 * UnitsA) * UnitsB\nProfit_C = (60 + 0.2 * UnitsB) * UnitsC\nProfit_D = (80 - 0.1 * UnitsC) * UnitsD\nmodel.addCons(obj == Profit_A + Profit_B + Profit_C + Profit_D)\n\n# Add constraints\nmodel.addCons(UnitsA + UnitsB + UnitsC + UnitsD <= 500)\nmodel.addCons(UnitsB <= 2 * UnitsA)\nmodel.addCons(20 * UnitsA + 30 * UnitsB + 25 * UnitsC + 40 * UnitsD <= 20000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Units of ProductA: \", model.getVal(UnitsA1) * model.getVal(UnitsA1_b) + model.getVal(UnitsA2) * model.getVal(UnitsA2_b))\n    print(\"Number of Units of ProductB: \", model.getVal(UnitsB))\n    print(\"Number of Units of ProductC: \", model.getVal(UnitsC))\n    print(\"Number of Units of ProductD: \", model.getVal(UnitsD))\n    print(\"Total Profit: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Units of ProductA": "0.0",
            "Number of Units of ProductB": "0.0",
            "Number of Units of ProductC": "0.0",
            "Number of Units of ProductD": "500.0",
            "Total Profit": "40000.0"
        },
        "question": "A manufacturing company is planning to produce four different types of products: ProductA, ProductB, ProductC, and ProductD. They need to decide how many units of each product to produce in the next month to optimize their profits. The profit per unit for each product varies based on the production of other products, as detailed in the following Table.\n\n| Product | Initial Profit per Unit | Profit Adjustment | Raw Material Cost per Unit |\n|---------|-------------------------|-------------------|----------------------------|\n| ProductA | $50                     | -$1 per unit beyond 100 units of ProductA | $20 |\n| ProductB | $70                     | -$0.5 per unit of ProductA | $30 |\n| ProductC | $60                     | +$0.2 per unit of ProductB | $25 |\n| ProductD | $80                     | -$0.1 per unit of ProductC | $40 |\n\nThe company has a total production capacity of 500 units for the month. Due to raw material availability, the production of ProductB cannot exceed twice the production of ProductA. The company has a budget of $20,000 for raw materials for the month. The company wants to maximize the total profit, which is calculated as follows:\n- Total profit for ProductA: Profit_A = min(50 - (UnitsA - 100), 50) * UnitsA\n- Total profit for ProductB: Profit_B = (70 - 0.5 * UnitsA) * UnitsB\n- Total profit for ProductC: Profit_C = (60 + 0.2 * UnitsB) * UnitsC\n- Total profit for ProductD: Profit_D = (80 - 0.1 * UnitsC) * UnitsD\nThe objective function is: Maximize (Profit_A + Profit_B + Profit_C + Profit_D).\n",
        "type": "nonlinear-table",
        "index": 253,
        "length": 1537,
        "var_num": 4
    },
    {
        "question": "A honey farmer sells his honey in glass and plastic jars. A glass jar can hold 250 ml of honey while a plastic jar can hold 300 ml of honey. Since glass jars are more expensive, at least twice as many plastic jars must be filled as glass jars. However, at least 20 glass jars should be filled. If the farmer has 20000 ml of honey, how many jars of each should be filled to maximize the total number of bottles filled?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_glass_jars = LpVariable(\"NumGlassJars\", lowBound=20, cat='Integer') # number of glass jars\nnum_plastic_jars = LpVariable(\"NumPlasticJars\", lowBound=0, cat='Integer') # number of plastic jars\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"HoneyBottleFilling\", LpMaximize)\n\n# Define the objective function\nobjective = num_glass_jars + num_plastic_jars\nproblem += objective # maximize the total number of bottles filled\n\n# Define the constraints\nproblem += 250 * num_glass_jars + 300 * num_plastic_jars <= 20000 # the total volume of honey must not exceed 20000 ml\nproblem += num_plastic_jars >= 2 * num_glass_jars # plastic jars filled must be at least twice as many as glass jars\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of glass jars:\", num_glass_jars.value())\nprint(\"The number of plastic jars:\", num_plastic_jars.value())\nprint(\"The total number of jars filled:\", objective.value())",
        "results": {
            "The number of glass jars": "23.0",
            "The number of plastic jars": "47.0",
            "The total number of jars filled": "70.0"
        },
        "formulation": "maximize x+y\nSubject to: \ny >= 2x\nx >= 20\n250x+300y <= 20000 (end)",
        "type": "linear-notable",
        "index": 254,
        "length": 417,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA logistics company is managing the distribution of three types of goods: GoodsX, GoodsY, and GoodsZ. The company needs to determine the number of trucks allocated to each type of goods and the number of trips per truck for each type of goods will make in the upcoming month. For ease of management, the number of trips per truck is the same for all trucks of the same type of goods. Additionally, the company wants to invest in fuel-efficient upgrades of trucks for each type of goods, which will reduce fuel costs per trip.\n// variables: {\"number of trucks for GoodsX\": \"TrucksX\", \"number of trucks for GoodsY\": \"TrucksY\", \"number of trucks for GoodsZ\": \"TrucksZ\", \"number of trips per truck for GoodsX\": \"TripsX\", \"number of trips per truck for GoodsY\": \"TripsY\", \"number of trips per truck for GoodsZ\": \"TripsZ\", \"investment in fuel efficiency for GoodX\": \"FuelEfficiencyX\", \"investment in fuel efficiency for GoodY\": \"FuelEfficiencyY\", \"investment in fuel efficiency for GoodZ\": \"FuelEfficiencyZ\"}, where TrucksX, TrucksY, TrucksZ, TripsX, TripsY, TripsZ, FuelEfficiencyX, FuelEfficiencyY, FuelEfficiencyZ >= 0 & TrucksX, TrucksY, TrucksZ, TripsX, TripsY, TripsZ are integers, and FuelEfficiencyX, FuelEfficiencyY, FuelEfficiencyZ are continuous.\n\n## Define Objective Function:\nThe fuel cost per trip for each type of goods decreases by $10 for every $10,000 invested in fuel efficiency upgrades for that type of goods. The initial fuel cost per trip for GoodsX is $200, for GoodsY is $250, and for GoodsZ is $300. The revenue generated per trip is $500 for GoodsX, $600 for GoodsY, and $700 for GoodsZ. The company aims to maximize the total profit from all goods.\n// Total profit for GoodsX: ProfitX = (500 - 200 + 0.001 * FuelEfficiencyX) * TrucksX * TripsX\n// Total profit for GoodsY: ProfitY = (600 - 250 + 0.001 * FuelEfficiencyY) * TrucksY * TripsY\n// Total profit for GoodsZ: ProfitZ = (700 - 300 + 0.001 * FuelEfficiencyZ) * TrucksZ * TripsZ\n// So, the objective function is: Maximize (ProfitX + ProfitY + ProfitZ)\n\n## Generate Constraint-1:\nThe company has a total of 50 trucks available for the month.\n// TrucksX + TrucksY + TrucksZ <= 50\n\n## Generate Constraint-2:\nThe total investment in fuel efficiency upgrades cannot exceed $60,000.\n// FuelEfficiencyX + FuelEfficiencyY + FuelEfficiencyZ <= 60000\n\n## Generate Constraint-3:\nDue to operational constraints, each truck can make no more than 20 trips in the month.\n// TripsX <= 20; TripsY <= 20; TripsZ <= 20\n\n## Generate Constraint-4:\nThe company must ensure that at least 10 trucks are allocated to GoodsX and 15 trucks to GoodsY.\n// TrucksX >= 10; TrucksY >= 15",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nTrucksX = model.addVar(vtype=\"INTEGER\", name=\"TrucksX\") # number of trucks for GoodsX\nmodel.addCons(TrucksX >= 0)\nTrucksY = model.addVar(vtype=\"INTEGER\", name=\"TrucksY\") # number of trucks for GoodsY\nmodel.addCons(TrucksY >= 0)\nTrucksZ = model.addVar(vtype=\"INTEGER\", name=\"TrucksZ\") # number of trucks for GoodsZ\nmodel.addCons(TrucksZ >= 0)\nTripsX = model.addVar(vtype=\"INTEGER\", name=\"TripsX\") # number of trips per truck for GoodsX\nmodel.addCons(TripsX >= 0)\nTripsY = model.addVar(vtype=\"INTEGER\", name=\"TripsY\") # number of trips per truck for GoodsY\nmodel.addCons(TripsY >= 0)\nTripsZ = model.addVar(vtype=\"INTEGER\", name=\"TripsZ\") # number of trips per truck for GoodsZ\nmodel.addCons(TripsZ >= 0)\nFuelEfficiencyX = model.addVar(vtype=\"CONTINUOUS\", name=\"FuelEfficiencyX\") # investment in fuel efficiency for GoodsX\nmodel.addCons(FuelEfficiencyX >= 0)\nFuelEfficiencyY = model.addVar(vtype=\"CONTINUOUS\", name=\"FuelEfficiencyY\") # investment in fuel efficiency for GoodsY\nmodel.addCons(FuelEfficiencyY >= 0)\nFuelEfficiencyZ = model.addVar(vtype=\"CONTINUOUS\", name=\"FuelEfficiencyZ\") # investment in fuel efficiency for GoodsZ\nmodel.addCons(FuelEfficiencyZ >= 0)\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == (500 - 200 + 0.001 * FuelEfficiencyX) * TrucksX * TripsX + (600 - 250 + 0.001 * FuelEfficiencyY) * TrucksY * TripsY + (700 - 300 + 0.001 * FuelEfficiencyZ) * TrucksZ * TripsZ)\n\n# Add constraints\nmodel.addCons(TrucksX + TrucksY + TrucksZ <= 50)\nmodel.addCons(FuelEfficiencyX + FuelEfficiencyY + FuelEfficiencyZ <= 60000)\nmodel.addCons(TripsX <= 20)\nmodel.addCons(TripsY <= 20)\nmodel.addCons(TripsZ <= 20)\nmodel.addCons(TrucksX >= 10)\nmodel.addCons(TrucksY >= 15)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Trucks for GoodsX: \", model.getVal(TrucksX))\n    print(\"Number of Trucks for GoodsY: \", model.getVal(TrucksY))\n    print(\"Number of Trucks for GoodsZ: \", model.getVal(TrucksZ))\n    print(\"Number of Trips per Truck for GoodsX: \", model.getVal(TripsX))\n    print(\"Number of Trips per Truck for GoodsY: \", model.getVal(TripsY))\n    print(\"Number of Trips per Truck for GoodsZ: \", model.getVal(TripsZ))\n    print(\"Investment in Fuel Efficiency for GoodsX: \", model.getVal(FuelEfficiencyX))\n    print(\"Investment in Fuel Efficiency for GoodsY: \", model.getVal(FuelEfficiencyY))\n    print(\"Investment in Fuel Efficiency for GoodsZ: \", model.getVal(FuelEfficiencyZ))\n    print(\"Total Profit: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Trucks for GoodsX": "10.0",
            "Number of Trucks for GoodsY": "15.0",
            "Number of Trucks for GoodsZ": "25.0",
            "Number of Trips per Truck for GoodsX": "20.0",
            "Number of Trips per Truck for GoodsY": "20.0",
            "Number of Trips per Truck for GoodsZ": "20.0",
            "Investment in Fuel Efficiency for GoodsX": "0.0",
            "Investment in Fuel Efficiency for GoodsY": "0.0",
            "Investment in Fuel Efficiency for GoodsZ": "60000.0",
            "Total Profit": "395000.0"
        },
        "question": "A logistics company is managing the distribution of three types of goods: GoodsX, GoodsY, and GoodsZ. The company needs to determine the number of trucks allocated to each type of goods and the number of trips per truck for each type of goods will make in the upcoming month. For ease of management, the number of trips per truck is the same for all trucks of the same type of goods. Additionally, the company wants to invest in fuel-efficient upgrades of trucks for each type of goods, which will reduce fuel costs per trip. The initial fuel cost per trip, revenue generated per trip, and the effect of fuel efficiency investment for each type of goods are given in the following Table.\n\n| Goods | Initial Fuel Cost per Trip | Revenue per Trip | Fuel Efficiency Investment Effect |\n|-------|---------------------------|------------------|----------------------------------|\n| GoodsX | $200                      | $500             | $10 reduction per $10,000 invested |\n| GoodsY | $250                      | $600             | $10 reduction per $10,000 invested |\n| GoodsZ | $300                      | $700             | $10 reduction per $10,000 invested |\n\nThe company has a total of 50 trucks available for the month. The total investment in fuel efficiency upgrades cannot exceed $60,000. Due to operational constraints, each truck can make no more than 20 trips in the month. The company must ensure that at least 10 trucks are allocated to GoodsX and 15 trucks to GoodsY. The company aims to maximize the total profit from all goods.\n",
        "type": "nonlinear-table",
        "index": 255,
        "length": 1541,
        "var_num": 9
    },
    {
        "question": "Gandhi Cloth Company is capable of manufacturing three types of clothing: shirts, shorts, and pants. The manufacture of each type of clothing requires that Gandhi have the appropriate type of machinery available. The machinery needed to manufacture each type of clothing must be rented at the following rates: shirt machinery, $200 per week; shorts machinery, $150 per week; pants machinery, $100 per week. The manufacture of each type of clothing also requires the amounts of cloth and labor shown in Table 2. Clothing type, labor hours, Cloth: (Shirt 3, 4), (shorts, 2, 3), (pants, 6, 4). Each week, 150 hours of labor and 160 sq yd of cloth are available. The variable unit cost and selling price for each type of clothing are shown in Table 3. Revenue and Cost Information, Clothing type, sales price, variable (Shirt 12, 6), (shorts, 8, 4), (pants, 15, 8). Maximize Gandhi's weekly profits.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for shirts, shorts, and pants, as well as the number of machinery rented for each type. Let's denote the number of shirts produced each week as S, the number of shorts produced each week as SH, and the number of pants produced each week as P. Additionally, let's denote the number of shirt machineries rented as SM, the number of shorts machineries rented as SHM, and the number of pants machineries rented as PM.\n```Variables\nS // number of shirts produced each week\nSH // number of shorts produced each week\nP // number of pants produced each week\nS, SH, P >= 0 and they are integers // non-negative integer variables\nSM // whether the shirt machinery should be rented\nSHM // whether the shorts machinery should be rented\nPM // whether the pants machinery should be rented \nSM, SHM, PM = 0 or 1 // binary variables\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function (profit) is given by subtracting the total cost from the total revenue. \nThe total revenue is the sum of the revenue from shirts, shorts, and pants, which is 12S + 8SH + 15P.\nThe total cost is the sum of the cost of the machineries rented and the cost of the units produced. The cost of the shirt machinery is $200 per week * SM, the cost of the shorts machinery is $150 per week * SHM, and the cost of the pants machinery is $100 per week * PM. \nThe cost of the units produced is the sum of the cost of the shirts, shorts, and pants, which is 6S + 4SH + 8P.\nSo the total cost is 200SM + 150SHM + 100PM + 6S + 4SH + 8P.\nTherefore, the objective function is given by:\n12S + 8SH + 15P - 200SM - 150SHM - 100PM - 6S - 4SH - 8P = 6S + 4SH + 7P - 200SM - 150SHM - 100PM\n```Objective Function\nMaximize: 6S + 4SH + 7P - 200SM - 150SHM - 100PM\n```\n\n# Constraints:\nThe labor hours constraint states that the total labor hours used for shirts, shorts, and pants production should not exceed the available labor hours of 150 hours per week. This can be expressed as:\n3S + 2SH + 6P <= 150\n\nThe cloth constraint states that the total amount of cloth used for shirts, shorts, and pants production should not exceed the available cloth of 160 sq yd per week. This can be expressed as:\n4S + 3SH + 4P <= 160\n\n```Constraints\n3S + 2SH + 6P <= 150\n4S + 3SH + 4P <= 160\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nS = LpVariable(\"Shirts\", lowBound=0, cat='Integer')\nSH = LpVariable(\"Shorts\", lowBound=0, cat='Integer')\nP = LpVariable(\"Pants\", lowBound=0, cat='Integer')\nSM = LpVariable(\"ShirtMachinery\", cat='Binary')\nSHM = LpVariable(\"ShortsMachinery\", cat='Binary')\nPM = LpVariable(\"PantsMachinery\", cat='Binary')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"GandhiClothCompanyProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 6*S + 4*SH + 7*P - 200*SM - 150*SHM - 100*PM\nproblem += objective\n\n# Define the constraints\nproblem += 3*S + 2*SH + 6*P <= 150\nproblem += 4*S + 3*SH + 4*P <= 160\nproblem += S <= 1000*SM  # Ensures that if S > 0, then SM must be 1 (machinery rented)\nproblem += SH <= 1000*SHM  # Ensures that if SH > 0, then SHM must be 1 (machinery rented)\nproblem += P <= 1000*PM  # Ensures that if P > 0, then PM must be 1 (machinery rented)\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of shirts produced each week:\", S.value())\nprint(\"The number of shorts produced each week:\", SH.value())\nprint(\"The number of pants produced each week:\", P.value())\nprint(\"Shirt machinery rented:\", SM.value())\nprint(\"Shorts machinery rented:\", SHM.value())\nprint(\"Pants machinery rented:\", PM.value())\nprint(\"The maximum weekly profit:\", objective.value())\n",
        "results": {
            "The number of shirts produced each week": "0.0",
            "The number of shorts produced each week": "0.0",
            "The number of pants produced each week": "25.0",
            "Shirt machinery rented": "0.0",
            "Shorts machinery rented": "0.0",
            "Pants machinery rented": "1.0",
            "The maximum weekly profit": "75.0"
        },
        "type": "linear-table",
        "index": 256,
        "length": 895,
        "var_num": 6
    },
    {
        "question": "A clinic employs nurses and pharmacists to deliver shots to patients. A nurse works 5 hours per shift while a pharmacist works 7 hours per shift. Nurses are paid $250 per shift while pharmacists are paid $300 per shift. Currently, the clinic needs 200 hours of healthcare labor to meet needs. If the firm has a budget of $9000, how many of each healthcare worker should be scheduled to minimize the total number of workers?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_nurses = LpVariable(\"NumNurses\", lowBound=0, cat='Integer') # number of nurses\nnum_pharmacists = LpVariable(\"NumPharmacists\", lowBound=0, cat='Integer') # number of pharmacists\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"HealthcareStaffing\", LpMinimize)\n\n# Define the objective function\nobjective = num_nurses + num_pharmacists\nproblem += objective # minimize the total number of workers\n\n# Define the constraints\nproblem += 5 * num_nurses + 7 * num_pharmacists >= 200 # the total work hours must meet the healthcare labor needs\nproblem += 250 * num_nurses + 300 * num_pharmacists <= 9000 # the cost must be within the budget\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of nurses:\", num_nurses.value())\nprint(\"The number of pharmacists:\", num_pharmacists.value())\nprint(\"The total number of workers:\", objective.value())",
        "results": {
            "The number of nurses": "0.0",
            "The number of pharmacists": "29.0",
            "The total number of workers": "29.0"
        },
        "formulation": "minimize x+y\nSubject to: \n5x+7y >= 200\n250x+300y <= 9000 (end)",
        "type": "linear-notable",
        "index": 257,
        "length": 423,
        "var_num": 2
    },
    {
        "question": "A strata-management company is looking into purchasing two types of air conditioners, a low-power and a high-power model. A low-powered air conditioner can cool down 12 housing units and uses 150 units of electricity every day. A high-power model can cool down 17 housing units and uses 250 units of electricity every day. Since the low-powered model is not good for the aesthetics, the strata decided to limit the number of low-powered models to only 30% and at least 7 high-powered models must be used. If the apartment needs to condition at least 250 housing units and has 8000 units of electricity available, how many of each air conditioner should the strata company buy to minimize the total number of air conditioners?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_low_power_AC = LpVariable(\"NumLowPowerAC\", lowBound=0, cat='Integer') # number of low power air conditioners\nnum_high_power_AC = LpVariable(\"NumHighPowerAC\", lowBound=0, cat='Integer') # number of high power air conditioners\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"AirConditionerProblem\", LpMinimize)\n\n# Define the objective function\nobjective = num_low_power_AC + num_high_power_AC\nproblem += objective # minimize the total number of air conditioners\n\n# Define the constraints\nproblem += 12 * num_low_power_AC + 17 * num_high_power_AC >= 250 # the number of housing units to cool down\nproblem += 150 * num_low_power_AC + 250 * num_high_power_AC <= 8000 # electricity limit\nproblem += num_low_power_AC <= 0.3 * (num_low_power_AC + num_high_power_AC) # low-power ACs must be less than or equal to 30% of total ACs\nproblem += num_high_power_AC >= 7 # at least 7 high power air conditioners\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of low power air conditioners:\", num_low_power_AC.value())\nprint(\"The number of high power air conditioners:\", num_high_power_AC.value())\nprint(\"The total number of air conditioners:\", objective.value())",
        "results": {
            "The number of low power air conditioners": "0",
            "The number of high power air conditioners": "15",
            "The total number of air conditioners": "15"
        },
        "formulation": "minimize x+y\nSubject to: \ny >= 7\n12x+17y >= 250\n250y+150x <= 8000\nx <= 0.3(x+y) (end)",
        "type": "linear-notable",
        "index": 258,
        "length": 725,
        "var_num": 2
    },
    {
        "question": "We want to construct a cylindrical can with a bottom but no top that will have a volume of 30 cm^3. Determine the dimensions of the can that will minimize the amount of material needed to construct the can.",
        "scenario": "## Define Variables:\nWe want to construct a cylindrical can with a bottom but no top.\n// variables: {\"radius of the can\": \"r\", \"height of the can\": \"h\"}, where r, h >= 0\n\n## Define Objective Function:\nWe want to minimize the amount of material needed to construct the can.\n// The surface area of the can is 2\u03c0rh + \u03c0r^2. Therefore, the objective function is: Minimize 2\u03c0rh + \u03c0r^2\n\n## Generate Constraint-1:\nThe volume of the can must be 30 cm^3.\n// \u03c0r^2h = 30",
        "code": "from pyscipopt import Model\nimport math\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nr = model.addVar(vtype=\"CONTINUOUS\", name=\"r\") # radius of the can\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the can\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nmodel.addCons(obj == 2*math.pi*r*h + math.pi*r**2)\n\n# Add constraints\nmodel.addCons(math.pi*r**2*h == 30)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The radius of the can:\", model.getVal(r))\n    print(\"The height of the can:\", model.getVal(h))\n    print(\"The minimum amount of material needed: \", model.getVal(obj))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The radius of the can": "2.1217681343696215",
            "The height of the can": "2.1211702341905765",
            "The minimum amount of material needed": "42.42143626839228"
        },
        "type": "nonlinear-notable",
        "index": 259,
        "length": 206,
        "var_num": 2
    },
    {
        "question": "We have 45 square meters of material to build a box with a square base and no top. Determine the dimensions of the box that will maximize the enclosed volume.",
        "scenario": "## Define Variables:\nWe need to build a box with a square base and no top.\n// variables: {\"length of the side of the square base\": \"x\", \"height of the box\": \"h\"}, where x, h >= 0\n\n## Define Objective Function:\nWe want to maximize the volume of the box.\n// Maximize: x^2 * h\n\n## Generate Constraint-1:\nWe have 45 square meters of material.\n// The area of the material used to build the box is the sum of the area of the base and the area of the four sides. The area of the base is x^2, and the area of the four sides is 4*x*h.\n// So, the constraint is x^2 + 4*x*h <= 45",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"CONTINUOUS\", name=\"x\", lb=0, ub=45) # length of the side of the square base\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\", lb=0, ub=45) # height of the box\n\n# Define objective function\nobj = model.addVar(vtype=\"CONTINUOUS\", name=\"obj\")\nmodel.addCons(obj == x**2 * h)\nmodel.setObjective(obj, \"maximize\")\n\n# Add constraints\nmodel.addCons(x**2 + 4*x*h <= 45)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The length of the side of the square base:\", model.getVal(x))\n    print(\"The height of the box:\", model.getVal(h))\n    print(\"The maximum volume of the box: \", model.getVal(x**2 * h))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The length of the side of the square base": "3.8731189014374054",
            "The height of the box": "1.9363561362963377",
            "The maximum volume of the box": "29.047375266161364"
        },
        "type": "nonlinear-notable",
        "index": 260,
        "length": 158,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA bakery produces five types of cakes: C1, C2, C3, C4, and C5. They need to determine the quantities of each cake to produce.\n// variables: {\"quantity of C1\": \"C1\", \"quantity of C2\": \"C2\", \"quantity of C3\": \"C3\", \"quantity of C4\": \"C4\", \"quantity of C5\": \"C5\"}, where C1, C2, C3, C4, C5 >= 0 and C1, C2, C3, C4, C5 are integers.\n\n## Define Objective Function:\nFor C1, the revenue per unit is $30, the production time per unit is 1 hour, and the ingredient cost per unit is $10. \nFor C2, the revenue per unit is $40, the production time per unit is 2 hours, and the ingredient cost per unit is $15. \nFor C3, the revenue per unit is $50, the production time per unit is 3 hours, and the ingredient cost per unit is $20.\nFor C4, the revenue per unit is $60, the production time per unit is 4 hours, and the ingredient cost per unit is $25.\nFor C5, the revenue per unit is $70, the production time per unit is 5 hours, and the ingredient cost per unit is $30.\nThe bakery has a limited production line and can only produce one cake at a time. The bakery wants to maximize the profit efficiency (profit per hour of production time).\n// Profit_C1 = 30 * C1 - 10 * C1\n// Profit_C2 = 40 * C2 - 15 * C2\n// Profit_C3 = 50 * C3 - 20 * C3\n// Profit_C4 = 60 * C4 - 25 * C4\n// Profit_C5 = 70 * C5 - 30 * C5\n// So, the objective function is: Maximize (Profit_C1 + Profit_C2 + Profit_C3 + Profit_C4 + Profit_C5) / (1 * C1 + 2 * C2 + 3 * C3 + 4 * C4 + 5 * C5)\n\n## Generate Constraint-1:\nThe bakery has a limited production time of 80 hours.\n// 1 * C1 + 2 * C2 + 3 * C3 + 4 * C4 + 5 * C5 <= 80\n\n## Generate Constraint-2:\nThe bakery has a budget of $3000 for ingredient costs.\n// 10 * C1 + 15 * C2 + 20 * C3 + 25 * C4 + 30 * C5 <= 3000\n\n## Generate Constraint-3:\nThe bakery has a production capacity of 200 units in terms of the number of units it can produce. Due to market demand, the bakery must produce at least 40 units in total.\n// C1 + C2 + C3 + C4 + C5 <= 200\n// C1 + C2 + C3 + C4 + C5 >= 40",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nC1 = model.addVar(vtype=\"INTEGER\", name=\"C1\") # quantity of C1\nmodel.addCons(C1 >= 0)\nC2 = model.addVar(vtype=\"INTEGER\", name=\"C2\") # quantity of C2\nmodel.addCons(C2 >= 0)\nC3 = model.addVar(vtype=\"INTEGER\", name=\"C3\") # quantity of C3\nmodel.addCons(C3 >= 0)\nC4 = model.addVar(vtype=\"INTEGER\", name=\"C4\") # quantity of C4\nmodel.addCons(C4 >= 0)\nC5 = model.addVar(vtype=\"INTEGER\", name=\"C5\") # quantity of C5\nmodel.addCons(C5 >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == (30 * C1 - 10 * C1 + 40 * C2 - 15 * C2 + 50 * C3 - 20 * C3 + 60 * C4 - 25 * C4 + 70 * C5 - 30 * C5) / (1 * C1 + 2 * C2 + 3 * C3 + 4 * C4 + 5 * C5))\n\n# Add constraints\nmodel.addCons(1 * C1 + 2 * C2 + 3 * C3 + 4 * C4 + 5 * C5 <= 80)\nmodel.addCons(10 * C1 + 15 * C2 + 20 * C3 + 25 * C4 + 30 * C5 <= 3000)\nmodel.addCons(C1 + C2 + C3 + C4 + C5 <= 200)\nmodel.addCons(C1 + C2 + C3 + C4 + C5 >= 40)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Quantity of C1: \", model.getVal(C1))\n    print(\"Quantity of C2: \", model.getVal(C2))\n    print(\"Quantity of C3: \", model.getVal(C3))\n    print(\"Quantity of C4: \", model.getVal(C4))\n    print(\"Quantity of C5: \", model.getVal(C5))\n    print(\"Profit Efficiency: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Quantity of C1": "40.0",
            "Quantity of C2": "0.0",
            "Quantity of C3": "0.0",
            "Quantity of C4": "0.0",
            "Quantity of C5": "0.0",
            "Profit Efficiency": "20.000000000"
        },
        "question": "A bakery produces five types of cakes: C1, C2, C3, C4, and C5. They need to determine the quantities of each cake to produce. The revenue per unit, production time per unit, and ingredient cost per unit for each cake are given in the following Table.\n\n| Cake | Revenue per Unit | Production Time per Unit | Ingredient Cost per Unit |\n|------|------------------|--------------------------|--------------------------|\n| C1   | $30              | 1 hour                   | $10                      |\n| C2   | $40              | 2 hours                  | $15                      |\n| C3   | $50              | 3 hours                  | $20                      |\n| C4   | $60              | 4 hours                  | $25                      |\n| C5   | $70              | 5 hours                  | $30                      |\n\nThe bakery has a limited production time of 80 hours. The bakery has a budget of $3000 for ingredient costs. The bakery has a production capacity of 200 units in terms of the number of units it can produce. Due to market demand, the bakery must produce at least 40 units in total. The bakery has a limited production line and can only produce one cake at a time. The bakery wants to maximize the profit efficiency (profit per hour of production time).\n",
        "type": "nonlinear-table",
        "index": 261,
        "length": 1278,
        "var_num": 5
    },
    {
        "question": "Wilson Creek Farm has 200 acres of land available for planting. The owner is considering planting three crops: corn, soybeans, and wheat. The production yield, water requirements, and labor requirements for a salable crop are given here. The owner expects to have only 35,000 gallons of water available per week to use for the crops, and during the growing season he will only have 8000 person-hours of labor available. The expected profit per bushel of each crop is $1.00 for corn, $1.60 for soybeans, and $3.00 for wheat. The owner can use any mix of crops (i.e., he can plant the same crop on all 200 acres or he can plant all three crops in different proportions). Find the profit-maximizing planting strategy. \nHere is the data for the problem:\nCrop: Corn, Soybeans, Wheat \nBushels/Acre Produced: 300 200 80 \nWater Required (gal/acre/week): 200 150 125 \nPerson-Hours Labor Required/Acre: 35 40 30",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal planting strategy for corn, soybeans, and wheat. Let's denote the number of acres planting corn as C, the number of acres planting soybeans as S, and the number of acres planting wheat as W.\n```Variables\nC // acres planting corn\nS // acres planting soybeans\nW // acres planting wheat\nC, S, W >= 0 // non-negative variables\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function (profit of planting strategy) is given by the sum of the profit from each crop. The profit from planting corn is $1.00 per bushel * 300 bushels/acre * C acres. The profit from planting soybeans is $1.60 per bushel * 200 bushels/acre * S acres. The profit from planting wheat is $3.00 per bushel * 80 bushels/acre * W acres. Therefore, the objective function is 1.00 * 300 * C + 1.60 * 200 * S + 3.00 * 80 * W = 300C + 320S + 240W.\n```Objective Function\nMaximize: 300C + 320S + 240W\n```\n\n# Constraints:\nWe have several constraints that need to be considered:\n1. Available acres: The total number of acres planting corn, soybeans, and wheat cannot exceed the available 200 acres.\n2. Available gallons of water: The total water required for planting corn, soybeans, and wheat cannot exceed the available 35,000 gallons per week. The water required for planting corn is 200 gallons/acre/week * C acres, the water required for planting soybeans is 150 gallons/acre/week * S acres, and the water required for planting wheat is 125 gallons/acre/week * W acres.\n3. Available person-hours of labor: The total labor required for planting corn, soybeans, and wheat cannot exceed the available 8,000 person-hours. The labor required for planting corn is 35 person-hours/acre * C acres, the labor required for planting soybeans is 40 person-hours/acre * S acres, and the labor required for planting wheat is 30 person-hours/acre * W acres.\n```Constraints\nC + S + W <= 200 // Available acres\n200C + 150S + 125W <= 35000 // Available gallons of water\n35C + 40S + 30W <= 8000 // Available person-hours of labor\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nC = LpVariable(\"Corn\", lowBound=0, cat='Continuous') # acres planting corn\nS = LpVariable(\"Soybeans\", lowBound=0, cat='Continuous') # acres planting soybeans\nW = LpVariable(\"Wheat\", lowBound=0, cat='Continuous') # acres planting wheat\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 300 * C + 320 * S + 240 * W\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += C + S + W <= 200 # Available acres\nproblem += 200 * C + 150 * S + 125 * W <= 35000 # Available gallons of water\nproblem += 35 * C + 40 * S + 30 * W <= 8000 # Available person-hours of labor\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Acres of Corn to plant:\", C.value())\nprint(\"Acres of Soybeans to plant:\", S.value())\nprint(\"Acres of Wheat to plant:\", W.value())\nprint(\"Maximum Profit:\", value(problem.objective))\n",
        "results": {
            "Acres of Corn to plant": "0",
            "Acres of Soybeans to plant": "200.0",
            "Acres of Wheat to plant": "0.0",
            "Maximum Profit": "64000.0"
        },
        "type": "linear-notable",
        "index": 262,
        "length": 901,
        "var_num": 3
    },
    {
        "question": "A candy store mixes regular candy and sour candy to prepare two products, regular mix and sour surprise mix. Each kilogram of the regular mix contains 0.8 kg of regular candy and 0.2 kg of sour candy. The profit per kilogram of the regular mix is $3. Each kilogram of the sour surprise mix contains 0.1 kg of regular candy and 0.9 kg of sour candy. The profit per kilogram of the sour surprise mix is $5. The candy store has 80 kg of regular candy and 60 kg of sour candy available. How many kilograms of each type of candy mix should be created to maximize profits?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nkg_regular_mix = LpVariable(\"KgRegularMix\", lowBound=0, cat='Continuous') # kilogram of the regular mix\nkg_sour_mix = LpVariable(\"KgSourMix\", lowBound=0, cat='Continuous') # kilogram of the sour surprise mix\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CandyProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 3 * kg_regular_mix + 5 * kg_sour_mix\nproblem += objective # maximize the profit\n\n# Define the constraints\nproblem += 0.8 * kg_regular_mix + 0.1 * kg_sour_mix <= 80 # amount of regular candy available\nproblem += 0.2 * kg_regular_mix + 0.9 * kg_sour_mix <= 60 # amount of sour candy available\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The amount of regular mix:\", kg_regular_mix.value(), \"kg\")\nprint(\"The amount of sour surprise mix:\", kg_sour_mix.value(), \"kg\")\nprint(\"The profit:\", objective.value(), \"$\")",
        "results": {
            "The amount of regular mix": "94.285714",
            "The amount of sour surprise mix": "45.714286",
            "The profit": "511.42857200000003"
        },
        "formulation": "maximize 3x+5y\nSubject to: \n0.8x+0.1y <= 80\n0.2x+0.9y <= 60 (end)",
        "type": "linear-notable",
        "index": 263,
        "length": 566,
        "var_num": 2
    },
    {
        "question": "An Indian restaurant makes goat and chicken curry. Each bowl of goat curry requires 3 units of goat meat and 6 units of the curry base. Each bowl of chicken curry requires 5 units of chicken meat and 5 units of the curry base. The restaurant has available 1500 units of goat meat and 2000 units of chicken meat. At least 25% of the bowls made must be chicken curry. Since goat curry is more popular, the number of goat curry bowls must be larger than the number of chicken curry bowls. How many of each type of curry bowl should be made to minimize the total amount of curry base used?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_goat_curry = LpVariable(\"NumGoatCurry\", lowBound=0, cat='Integer') # number of goat curry bowls\nnum_chicken_curry = LpVariable(\"NumChickenCurry\", lowBound=0, cat='Integer') # number of chicken curry bowls\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CurryBaseMinimization\", LpMinimize)\n\n# Define the objective function\nobjective = 6 * num_goat_curry + 5 * num_chicken_curry\nproblem += objective # minimize the total amount of curry base used\n\n# Define the constraints\nproblem += 3 * num_goat_curry <= 1500 # goat meat constraint\nproblem += 5 * num_chicken_curry <= 2000 # chicken meat constraint\nproblem += num_chicken_curry >= 0.25 * (num_goat_curry + num_chicken_curry) # at least 25% chicken curry bowls\nproblem += num_goat_curry >= num_chicken_curry + 1 # more goat curry bowls than chicken curry bowls\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of goat curry bowls:\", num_goat_curry.value())\nprint(\"The number of chicken curry bowls:\", num_chicken_curry.value())\nprint(\"The total amount of curry base used:\", objective.value())",
        "results": {
            "The number of goat curry bowls": "2.0",
            "The number of chicken curry bowls": "1.0",
            "The total amount of curry base used": "17.0"
        },
        "formulation": "minimize 6x+5y\nSubject to: \n3x <= 1500\n5y <= 2000\ny >= 0.25(x+y)\nx >= y (end)",
        "type": "linear-notable",
        "index": 264,
        "length": 585,
        "var_num": 2
    },
    {
        "question": "In order to make carbon dioxide, wood is burned using two processes, with a catalyst and without a catalyst. The process with a catalyst requires 10 units of wood and 20 units of oxygen to make 15 units of carbon dioxide. The process without a catalyst requires 15 units of wood and 12 units of oxygen to make 18 units of carbon dioxide. There are 300 units of wood and 300 units of oxygen available. How many of each process should be used to maximize the amount of carbon dioxide produced?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nprocess_with_catalyst = LpVariable(\"ProcessWithCatalyst\", lowBound=0, cat='Integer') # number of process with catalyst\nprocess_without_catalyst = LpVariable(\"ProcessWithoutCatalyst\", lowBound=0, cat='Integer') # number of process without catalyst\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CarbonDioxideProduction\", LpMaximize)\n\n# Define the objective function\nobjective = 15 * process_with_catalyst + 18 * process_without_catalyst\nproblem += objective # maximize the total amount of carbon dioxide produced\n\n# Define the constraints\nproblem += 10 * process_with_catalyst + 15 * process_without_catalyst <= 300 # wood availability constraint\nproblem += 20 * process_with_catalyst + 12 * process_without_catalyst <= 300 # oxygen availability constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of processes with a catalyst:\", process_with_catalyst.value())\nprint(\"The number of processes without a catalyst:\", process_without_catalyst.value())\nprint(\"The total amount of carbon dioxide produced:\", objective.value())",
        "results": {
            "The number of processes with a catalyst": "3.0",
            "The number of processes without a catalyst": "18.0",
            "The total amount of carbon dioxide produced": "369.0"
        },
        "formulation": "maximize 15x+18y\nSubject to: \n10x+15y <= 300\n20x+12y <= 300 (end)",
        "type": "linear-notable",
        "index": 265,
        "length": 491,
        "var_num": 2
    },
    {
        "question": "A chair produced by Elm Furniture yields a profit of $43, while every dresser yields a $52 profit. Each week, 17 gallons of stain and 11 lengths of oak wood are available. Each chair requires 1.4 gallons of stain and 2 lengths of oak wood, while each dresser requires 1.1 gallons of stain and 3 lengths of oak wood. Determine the maximum profit.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_chairs = LpVariable(\"NumChairs\", lowBound=0, cat='Integer') # number of chairs\nnum_dressers = LpVariable(\"NumDressers\", lowBound=0, cat='Integer') # number of dressers\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ElmFurnitureProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 43 * num_chairs + 52 * num_dressers\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 1.4 * num_chairs + 1.1 * num_dressers <= 17 # stain constraint\nproblem += 2 * num_chairs + 3 * num_dressers <= 11 # oak wood constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of chairs:\", num_chairs.value())\nprint(\"The number of dressers:\", num_dressers.value())\nprint(\"The maximum profit:\", objective.value())",
        "results": {
            "The number of chairs": "4.0",
            "The number of dressers": "1.0",
            "The maximum profit": "224.0"
        },
        "formulation": "maximize 43x+52y\nSubject to: \n1.4x+1.1y <= 17\n2x+3y <= 11 (end)",
        "type": "linear-notable",
        "index": 266,
        "length": 345,
        "var_num": 2
    },
    {
        "question": "Now we need to create a cylindrical metal jar with a metal shell. The volume of the jar must be at least 1000 cubic centimeters. The cost of the metal is $10 per square centimeter. Find the dimensions that will minimize the cost of the metal to manufacture the jar.",
        "scenario": "## Define Variables:\nNow we need to create a cylindrical metal jar with a metal shell.\n// variables: {\"radius of the cylindrical jar\": \"r\", \"height of the cylindrical jar\": \"h\"}, where r, h >= 0\n\n## Define Objective Function:\nThe cost of the metal is $10 per square meter. Find the dimensions that will minimize the cost of the metal to manufacture the jar.\n// The surface area of the cylindrical jar is the sum of the area of the two circular ends and the lateral surface area. The area of each circular end is \u03c0r^2, and the lateral surface area is 2\u03c0rh.\n// So, the surface area of the cylindrical jar is 2\u03c0r^2 + 2\u03c0rh, and the cost of the metal is 10 * (2\u03c0r^2 + 2\u03c0rh).\n// So, the objective function is: Minimize 10 * (2\u03c0r^2 + 2\u03c0rh)\n\n## Generate Constraint-1:\nThe volume of the jar must be at least 1000 cubic centimeters.\n// \u03c0r^2h >= 1000",
        "code": "from pyscipopt import Model\nimport math\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nr = model.addVar(vtype=\"CONTINUOUS\", name=\"r\") # radius of the cylindrical jar\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the cylindrical jar\n\n# Define objective function\ncost = model.addVar('cost')\nmodel.setObjective(cost, \"minimize\")\nmodel.addCons(cost == 10 * (2 * math.pi * r**2 + 2 * math.pi * r * h))\n\n# Add constraints\nmodel.addCons(math.pi * r**2 * h >= 1000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The radius of the best cylindrical jar:\", model.getVal(r))\n    print(\"The height of the best cylindrical jar:\", model.getVal(h))\n    print(\"The minimum cost of the metal to manufacture the jar: \", model.getVal(cost))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The radius of the best cylindrical jar": "5.419260699767075",
            "The height of the best cylindrical jar": "10.838521399534402",
            "The minimum cost of the metal to manufacture the jar": "5535.810442610608"
        },
        "type": "nonlinear-notable",
        "index": 267,
        "length": 265,
        "var_num": 2
    },
    {
        "question": "A farmer has 140 hectares available to grow tomatoes and potatoes. She prefers to plant more tomatoes than potatoes, but the soil and weather conditions allow her to grow at most twice the amount of tomatoes to that of potatoes. In addition, she must grow at least 20 hectares of tomatoes and at least 30 hectares of potatoes to meet community demands. If the profit per hectare of tomatoes is $350 and the profit per hectare of potatoes is $600, how many hectares of each crop should she plant to maximize profit? What is this profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_hectares_tomatoes = LpVariable(\"NumHectaresTomatoes\", lowBound=20, cat='Continuous') # hectares of tomatoes\nnum_hectares_potatoes = LpVariable(\"NumHectaresPotatoes\", lowBound=30, cat='Continuous') # hectares of potatoes\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FarmingProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 350 * num_hectares_tomatoes + 600 * num_hectares_potatoes\nproblem += objective # maximize the profit\n\n# Define the constraints\nproblem += num_hectares_tomatoes + num_hectares_potatoes <= 140 # total hectares cannot exceed 140\nproblem += num_hectares_tomatoes <= 2 * num_hectares_potatoes # at most twice the amount of tomatoes to that of potatoes\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of hectares for tomatoes:\", num_hectares_tomatoes.value())\nprint(\"The number of hectares for potatoes:\", num_hectares_potatoes.value())\nprint(\"The maximum profit is:\", objective.value())",
        "results": {
            "The number of hectares for tomatoes": "20.0",
            "The number of hectares for potatoes": "120.0",
            "The maximum profit is": "79000.0"
        },
        "formulation": "maximize 350x+600y\nSubject to: \nx+y <= 140\nx <= 2y\nx >= 20\ny >= 30 (end)",
        "type": "linear-notable",
        "index": 268,
        "length": 535,
        "var_num": 2
    },
    {
        "question": "John has a 300 acre berry farm on which to plant blueberries and raspberries. John has $10000 to spend on watering and 575 days worth of labor available. For each acre of blueberries, 6 days worth of labor and $22 in watering costs is required. For each acre of raspberries, 3 days worth of labor and $25 in watering costs is required. The profit per acre of blueberries is $56 and the profit per acre of raspberries is $75. Formulate an LP problem in order to maximize profit.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_blueberries = LpVariable(\"NumBlueberries\", lowBound=0, cat='Integer') # number of blueberry acres\nnum_raspberries = LpVariable(\"NumRaspberries\", lowBound=0, cat='Integer') # number of raspberry acres\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BerryFarmProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 56 * num_blueberries + 75 * num_raspberries\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += num_blueberries + num_raspberries <= 300 # the total acres cannot exceed 300\nproblem += 22 * num_blueberries + 25 * num_raspberries <= 10000 # the total watering cost cannot exceed $10000\nproblem += 6 * num_blueberries + 3 * num_raspberries <= 575 # the total labor days cannot exceed 575\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of blueberry acres:\", num_blueberries.value())\nprint(\"The number of raspberry acres:\", num_raspberries.value())\nprint(\"The total profit:\", objective.value())",
        "results": {
            "The number of blueberry acres": "0.0",
            "The number of raspberry acres": "191.0",
            "The total profit": "14325.0"
        },
        "formulation": "maximize 56x+75y\nSubject to: \nx+y <= 300\n22x+25y <= 10000\n6x+3y <= 575 (end)",
        "type": "linear-notable",
        "index": 269,
        "length": 477,
        "var_num": 2
    },
    {
        "question": "You can run at a speed of 6 mph and swim at a speed of 3 mph and are located on the shore, 4 miles east of an island that is 1 mile north of the shoreline. How far should you run west to minimize the time needed to reach the island?",
        "scenario": "## Define Variables:\nYou can run at a speed of 6 mph and swim at a speed of 3 mph to reach an island. The island is located 1 mile north of the shoreline and 4 miles east of your location on the shore.\n// variables: {\"distance to run west\": \"x\"}, where 0 <= x <= 4\n\n## Define Objective Function:\nHow far should you run west to minimize the time needed to reach the island?\n// The total time needed to reach the island is the sum of the time to run and the time to swim. \n// The time to run is the distance to run divided by the running speed, which is x/6. \n// The time to swim is the distance to swim divided by the swimming speed. \n// The distance to swim is the hypotenuse of a right triangle with sides of lengths 1 mile (the north-south distance to the island) and (4-x) miles (the east-west distance to the island), which is sqrt((4-x)^2 + 1) miles. \n// Therefore, the time to swim is sqrt((4-x)^2 + 1)/3. \n// So the objective function is: x/6 + sqrt((4-x)^2 + 1)/3",
        "code": "from pyscipopt import Model\nimport math\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"CONTINUOUS\", name=\"x\", lb=0, ub=4)  # distance to run west\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nmodel.addCons(obj == x/6 +((4-x)**2 + 1)**0.5/3)\n\n# Add constraints\n# No additional constraints needed as x is already bounded by 0 and 4\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The distance to run west to minimize the time needed to reach the island:\", model.getVal(x))\n    print(\"The minimum time needed to reach the island: \", model.getVal(obj))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The distance to run west to minimize the time needed to reach the island": "3.4233312989000892",
            "The minimum time needed to reach the island": "0.9553413988436567"
        },
        "type": "nonlinear-notable",
        "index": 270,
        "length": 232,
        "var_num": 1
    },
    {
        "question": "Mr. Roberts want to invest in the telecom and healthcare industries. He has $100000 to invest. He has decided that the amount invested in telecom be at least three times as much as the amount invested in healthcare. But the money invested in telecom must be at most $70000. If investments in telecom earn 3% and investments in healthcare earn 1%, how much should Mr. Roberts invest in each to maximize profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\namount_telecom = LpVariable(\"AmountTelecom\", lowBound=0, upBound=70000) # amount invested in telecom\namount_healthcare = LpVariable(\"AmountHealthcare\", lowBound=0) # amount invested in healthcare\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"InvestmentMaxProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 0.03 * amount_telecom + 0.01 * amount_healthcare\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += amount_telecom + amount_healthcare <= 100000 # total investment must be at most $100000\nproblem += amount_telecom >= 3 * amount_healthcare # investment in telecom must be three times the investment in healthcare\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Amount invested in telecom:\", amount_telecom.value())\nprint(\"Amount invested in healthcare:\", amount_healthcare.value())\nprint(\"Total profit:\", objective.value())",
        "results": {
            "Amount invested in telecom": "70000.0",
            "Amount invested in healthcare": "23333.333",
            "Total profit": "2333.33333"
        },
        "formulation": "maximize 3%x+1%y\nSubject to: \nx+y <= 100000\nx >= 3y\nx <= 70000 (end)",
        "type": "linear-notable",
        "index": 271,
        "length": 409,
        "var_num": 2
    },
    {
        "question": "You need to buy cabinets to store your seasonings and spices. A small cabinet takes 4 sq ft of space and costs $70. A large cabinet takes 8 sq ft and costs $120. You have 200 sq ft of space available in your kitchen and a budget of $1400. If the small cabinet can hold 30 seasonings and spices and a large cabinet can hold 40 seasonings and spices, how many of each should you buy to maximize the number of seasonings and spices you can store.",
        "formulation": "{\"variable\": [{\"description\": \"number of small cabinets\", \"name\": \"x\"}, {\"description\": \"number of large cabinets\", \"name\": \"y\"}], \"objective\": [{\"description\": \"number of seasonings and spices stored\", \"function\": \"30x + 40y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"budget constraint\", \"function\": \"70x + 120y <= 1400\"}, {\"description\": \"space constraint\", \"function\": \"4x + 8y <= 200\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_small_cabinets = LpVariable(\"NumSmallCabinets\", lowBound=0, cat='Integer') # number of small cabinets\nnum_large_cabinets = LpVariable(\"NumLargeCabinets\", lowBound=0, cat='Integer') # number of large cabinets\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CabinetStorage\", LpMaximize)\n\n# Define the objective function\nobjective = 30 * num_small_cabinets + 40 * num_large_cabinets\nproblem += objective # maximize the number of seasonings and spices stored\n\n# Define the constraints\nproblem += 70 * num_small_cabinets + 120 * num_large_cabinets <= 1400 # budget constraint\nproblem += 4 * num_small_cabinets + 8 * num_large_cabinets <= 200 # space constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of small cabinets:\", num_small_cabinets.value())\nprint(\"The number of large cabinets:\", num_large_cabinets.value())\nprint(\"The number of seasonings and spices stored:\", objective.value())\n",
        "results": {
            "The number of small cabinets": "20.0",
            "The number of large cabinets": "0.0",
            "The number of seasonings and spices stored": "600.0"
        },
        "type": "linear-notable",
        "index": 272,
        "length": 443,
        "var_num": 2
    },
    {
        "question": "Both chemical A and chemical B need to be added to a mixer for making bread. One unit of chemical A takes 30 seconds to be effective while one unit of chemical B takes 45 seconds to be effective. Because chemical A can be dangerous, there has to be at most a third as much chemical A as chemical B in the mixer. If there has to be at least 300 units of chemical A in the mixer and at least 1500 units of total chemicals in the mixer, how many units of each should be added to minimize the total time it takes for the mixed bread to be ready?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nchemical_A = LpVariable(\"ChemicalA\", lowBound=300, cat='Continuous') # units of chemical A\nchemical_B = LpVariable(\"ChemicalB\", lowBound=0, cat='Continuous') # units of chemical B\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BreadMixer\", LpMinimize)\n\n# Define the objective function\nobjective = 30 * chemical_A + 45 * chemical_B\nproblem += objective # minimize the total time it takes for the mixed bread to be ready\n\n# Define the constraints\nproblem += chemical_A <= (1/3) * chemical_B # chemical A has to be at most a third as much as chemical B\nproblem += chemical_A + chemical_B >= 1500 # at least 1500 units of total chemicals in the mixer\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The units of chemical A:\", chemical_A.value())\nprint(\"The units of chemical B:\", chemical_B.value())\nprint(\"The total time it takes for the mixed bread to be ready:\", objective.value())",
        "results": {
            "The units of chemical A": "375.0",
            "The units of chemical B": "1125.0",
            "The total time it takes for the mixed bread to be ready": "61875.0"
        },
        "formulation": "minimize 30x+45y\nSubject to: \nx <= 3y\nx >= 300\nx+y >= 1500 (end)",
        "type": "linear-notable",
        "index": 273,
        "length": 541,
        "var_num": 2
    },
    {
        "question": "A farmer on an island sends corn to the main land either by ferry or light rail. Each ferry trip can take 20 boxes of corn while each light rail trip can take 15 boxes of corn. Since ferry trips are slow, the number of light rail trip has to be at least 4 times the number of ferry trips. If the farmer wants to send at least 500 boxes of corn, minimize the total number of trips of either type needed.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_ferry_trips = LpVariable(\"NumFerryTrips\", lowBound=0, cat='Integer') # number of ferry trips\nnum_light_rail_trips = LpVariable(\"NumLightRailTrips\", lowBound=0, cat='Integer') # number of light rail trips\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CornTransport\", LpMinimize)\n\n# Define the objective function\nobjective = num_ferry_trips + num_light_rail_trips\nproblem += objective # minimize the total number of trips\n\n# Define the constraints\nproblem += 20 * num_ferry_trips + 15 * num_light_rail_trips >= 500 # at least 500 boxes of corn must be sent\nproblem += num_light_rail_trips >= 4 * num_ferry_trips # light rail trip has to be at least 4 times the ferry trips\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of ferry trips:\", num_ferry_trips.value())\nprint(\"The number of light rail trips:\", num_light_rail_trips.value())\nprint(\"The total number of trips:\", objective.value())",
        "results": {
            "The number of ferry trips": "6.0",
            "The number of light rail trips": "26.0",
            "The total number of trips": "32.0"
        },
        "formulation": "minimize x+y\nSubject to: \ny >= 4x\n20x+15y >= 500 (end)",
        "type": "linear-notable",
        "index": 274,
        "length": 402,
        "var_num": 2
    },
    {
        "question": "An electronics factory manufactures two calculators: solar calculators and finance calculators, using silicon, plastic, and steel. To make a solar calculator, 5 grams of silicon, 4 grams of plastic, and 2 grams of steel are needed. The profit per solar calculator is $12. To make a finance calculator, 3 grams of silicon, 5 grams of plastic, and 3 grams of steel are needed. The profit per finance calculator is $9. Even though the company can sell as many calculators as it produces, there is only 150 grams of silicon, 150 grams of plastic, and 70 grams of steel available. Formulate an LP to maximize profit.",
        "formulation": "{\"variable\": [{\"description\": \"number of solar calculators produced\", \"name\": \"x\"}, {\"description\": \"number of finance calculators produced\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total profit\", \"function\": \"12x + 9y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"silicon constraint\", \"function\": \"5x + 3y <= 150\"}, {\"description\": \"plastic constraint\", \"function\": \"4x + 5y <= 150\"}, {\"description\": \"steel constraint\", \"function\": \"2x + 3y <= 70\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"SolarCalculators\", lowBound=0, cat='Integer') # number of solar calculators produced\ny = LpVariable(\"FinanceCalculators\", lowBound=0, cat='Integer') # number of finance calculators produced\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 12 * x + 9 * y\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 5 * x + 3 * y <= 150 # silicon constraint\nproblem += 4 * x + 5 * y <= 150 # plastic constraint\nproblem += 2 * x + 3 * y <= 70 # steel constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of solar calculators produced:\", x.value())\nprint(\"The number of finance calculators produced:\", y.value())\nprint(\"The maximum profit:\", objective.value())\n",
        "results": {
            "The number of solar calculators produced": "27.0",
            "The number of finance calculators produced": "5.0",
            "The maximum profit": "369.0"
        },
        "type": "linear-notable",
        "index": 275,
        "length": 611,
        "var_num": 2
    },
    {
        "question": "A manufacturer can sell product 1 at a profit of $2/unit and product 2 at a profit of $5/unit. The amount of raw material required to manufacture each product and the setup costs for production are detailed in the following Table. A total of 120 units of raw material are available. Maximize profits.\n\nTable (Raw material required for manufacturing and setup costs):\n| Product Type | Raw Material Required (units per product unit) | Setup Cost (if produced) |\n| ------------ | --------------------------------------------- | ------------------------ |\n| Product 1    | 3                                             | $10                      |\n| Product 2    | 6                                             | $20                      |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for product 1 and product 2 that adhere to the constraints given. Let's denote the number of units of product 1 as P1 and the number of units of product 2 as P2.\nWe also need to define boolean variables to represent whether each product is produced or not. Let's denote the boolean variable for product 1 as B1 and the boolean variable for product 2 as B2.\n```Variables\nP1 //number of units of product 1 to produce\nP2 //number of units of product 2 to produce\nP1, P2 >= 0 and they are integers //non-negative integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit from selling product 1 and product 2. The profit from selling product 1 is $2\nunit and the profit from selling product 2 is $5/unit, which can be written as: 2P1 + 5P2.\nWe also need to subtract the setup costs for each product. The setup cost for product 1 is $10 and the setup\ncost for product 2 is $20, which can be written as: -10B1 - 20B2.\n```Objective\nMaximize: 2P1 + 5P2 - 10 * min(P1, 1) - 20 * min(P2, 1)\n```\n\n# Constraints:\nWe need to make sure that we have enough raw material to produce the desired quantities of product 1 and\nproduct 2. We need 3 units of raw material to produce 1 unit of product 1 and 6 units of raw material to\nproduce 1 unit of product 2. We have a total of 120 units of raw material available, which can be written as:\n3P1 + 6P2 <= 120.\n```Constraints\n3P1 + 6P2 <= 120 //A total of 120 units of raw material are available\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nP1 = LpVariable(\"Product1\", lowBound=0, cat='Integer') # number of units of product 1 to produce\nP2 = LpVariable(\"Product2\", lowBound=0, cat='Integer') # number of units of product 2 to produce\nB1 = LpVariable(\"Boolean1\", cat='Binary') # boolean variable for product 1\nB2 = LpVariable(\"Boolean2\", cat='Binary') # boolean variable for product 2\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ManufacturerProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 2 * P1 + 5 * P2 - 10 * B1 - 20 * B2\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 3 * P1 + 6 * P2 <= 120 # raw material constraint\nproblem += P1 - 1000000 * B1 <= 0 # linking constraint for product 1\nproblem += P2 - 1000000 * B2 <= 0 # linking constraint for product 2\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of units of product 1 to produce:\", P1.value())\nprint(\"The number of units of product 2 to produce:\", P2.value())\nprint(\"The total profit:\", objective.value())\n",
        "results": {
            "The number of units of product 1 to produce": "0.0",
            "The number of units of product 2 to produce": "20.0",
            "The total profit": "80.0"
        },
        "type": "linear-table",
        "index": 276,
        "length": 735,
        "var_num": 3
    },
    {
        "question": "There are two processes, process A and process B, to plate a coin with gold. Process A requires 3 units of gold, 2 wires, and can plate 5 coins. Process B requires 5 units of gold, 3 wires, and can plate 7 coins. There are 500 units of gold and 300 wires available. How many processes of each type should be run to maximize the total number of coins that can be plated?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_process_A = LpVariable(\"NumProcessA\", lowBound=0, cat='Integer') # number of Process A\nnum_process_B = LpVariable(\"NumProcessB\", lowBound=0, cat='Integer') # number of Process B\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizePlatedCoins\", LpMaximize)\n\n# Define the objective function\nobjective = 5 * num_process_A + 7 * num_process_B\nproblem += objective # maximize the total number of coins that can be plated\n\n# Define the constraints\nproblem += 3 * num_process_A + 5 * num_process_B <= 500 # the units of gold used must be at most 500\nproblem += 2 * num_process_A + 3 * num_process_B <= 300 # the wires used must be at most 300\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of Process A:\", num_process_A.value())\nprint(\"The number of Process B:\", num_process_B.value())\nprint(\"The total number of coins that can be plated:\", objective.value())",
        "results": {
            "The number of Process A": "150.0",
            "The number of Process B": "0.0",
            "The total number of coins that can be plated": "750.0"
        },
        "formulation": "maximize 5x+7y\nSubject to: \n3x+5y <= 500\n2x+3y <= 300 (end)",
        "type": "linear-notable",
        "index": 277,
        "length": 369,
        "var_num": 2
    },
    {
        "question": "Dorian Auto is considering manufacturing three types of autos: compact, midsize, and large. The resources required for, and the profits yielded by, each type of car are shown in Table:  steel required (1.5tons, 3tons, 5tons), labor required (30 hours, 40 hours, 25 hours), Profit yielded ($) (2,000, 3,000, 4,000). Currently, 10,000 tons of steel and 120,000 hours of labor are available. For production of a type of car to be economically feasible, at least 1,000 cars of that type must be produced. Formulate an LP to maximize Dorian's profit.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for compact, midsize, and large cars that adhere to the constraints given. Let's denote the number of compact cars as C, the number of midsize cars as M, and the number of large cars as L.\n```Variables\nC //number of compact cars to produce \nM //number of midsize cars to produce\nL //number of large cars to produce\nC, M, L >= 0 and they are integers //non-negative and integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function (profit) is given by the sum of the profits from each type of car. The profit from compact cars is $2,000 per car * C cars. The profit from midsize cars is $3,000 per car * M cars. The profit from large cars is $4,000 per car * L cars. Therefore, the objective function is 2000C + 3000M + 4000L.\n```Objective Function\nMaximize: 2000C + 3000M + 4000L\n```\n\n# Constraints:\nWe have several constraints to consider. First, we need to ensure that the resources required for each type of car do not exceed the available resources. The steel required for compact cars is 1.5 tons per car * C cars, for midsize cars is 3 tons per car * M cars, and for large cars is 5 tons per car * L cars. The labor required for compact cars is 30 hours per car * C cars, for midsize cars is 40 hours per car * M cars, and for large cars is 25 hours per car * L cars. \nAdditionally, we need to ensure that at least 1,000 cars of each type are produced.\nTherefore, the constraints for available steel and labor are:\n```Constraints\n1.5C + 3M + 5L <= 10000 //available steel\n30C + 40M + 25L <= 120000 //available labor\nC >= 1000 //minimum number of compact cars produced\nM >= 1000 //minimum number of midsize cars produced\nL >= 1000 //minimum number of large cars produced\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nC = LpVariable(\"CompactCars\", lowBound=1000, cat='Integer') # number of compact cars\nM = LpVariable(\"MidsizeCars\", lowBound=1000, cat='Integer') # number of midsize cars\nL = LpVariable(\"LargeCars\", lowBound=1000, cat='Integer') # number of large cars\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DorianAutoProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 2000 * C + 3000 * M + 4000 * L\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 1.5 * C + 3 * M + 5 * L <= 10000 # available steel\nproblem += 30 * C + 40 * M + 25 * L <= 120000 # available labor\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of compact cars to produce:\", C.value())\nprint(\"The number of midsize cars to produce:\", M.value())\nprint(\"The number of large cars to produce:\", L.value())\nprint(\"The maximum profit:\", objective.value())\n",
        "results": {
            "The number of compact cars to produce": "1333.0",
            "The number of midsize cars to produce": "1000.0",
            "The number of large cars to produce": "1000.0",
            "The maximum profit": "9666000.0"
        },
        "type": "linear-table",
        "index": 278,
        "length": 545,
        "var_num": 3
    },
    {
        "question": "A banana company sells their bananas in small and large crates. A small crate can hold 20 bananas while a large crate can hole 50 bananas. Since large crates are more manageable, the number of large crates must be at least 1.5 times the number of small crates. However, at least 5 small crates should be used. If the company has available 500 bananas, how many of each crate should the company use to maximize the total number of crates produced?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_small_crates = LpVariable(\"NumSmallCrates\", lowBound=0, cat='Integer') # number of small crates\nnum_large_crates = LpVariable(\"NumLargeCrates\", lowBound=0, cat='Integer') # number of large crates\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BananaCrates\", LpMaximize)\n\n# Define the objective function\nobjective = num_small_crates + num_large_crates\nproblem += objective # maximize the total number of crates produced\n\n# Define the constraints\nproblem += 20 * num_small_crates + 50 * num_large_crates <= 500 # number of bananas used cannot exceed the available amount\nproblem += num_large_crates >= 1.5 * num_small_crates # the number of large crates should be at least 1.5 times the small crates\nproblem += num_small_crates >= 5 # at least 5 small crates should be used\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of small crates:\", num_small_crates.value())\nprint(\"The number of large crates:\", num_large_crates.value())\nprint(\"The total number of crates produced:\", objective.value())",
        "results": {
            "The number of small crates": "5",
            "The number of large crates": "8",
            "The total number of crates produced": "13"
        },
        "formulation": "maximize x+y\nSubject to: \ny >= 2x\nx >= 5\n20x+50y <= 500 (end)",
        "type": "linear-notable",
        "index": 279,
        "length": 446,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA renewable energy company is planning to install three types of solar power plants: large-scale, medium-scale, and small-scale. The company needs to decide how many of each type of plant to build and how much capital to invest in each type of plant. The efficiency of energy production varies by plant size, and the cost of installation also differs.\n// variables: {\"number of large-scale plants\": \"LargePlants\", \"number of medium-scale plants\": \"MediumPlants\", \"number of small-scale plants\": \"SmallPlants\", \"capital investment per large-scale plant\": \"CapitalLarge\", \"capital investment per medium-scale plant\": \"CapitalMedium\", \"capital investment per small-scale plant\": \"CapitalSmall\"}, where LargePlants, MediumPlants, SmallPlants, CapitalLarge, CapitalMedium, CapitalSmall >= 0 and LargePlants, MediumPlants, SmallPlants are integers, and CapitalLarge, CapitalMedium, CapitalSmall are continuous.\n\n## Define Objective Function:\nThe daily energy output of each type of plant is proportional to the capital invested in that plant. The large-scale plants have an efficiency of 1000 kWh per day per $60,000 invested, the medium-scale plants have an efficiency of 700 kWh per day per $50,000 invested, and the small-scale plants have an efficiency of 500 kWh per day per $30,000 invested. The company wants to maximize the total daily energy output.\n// Energy_Large = 1000 * LargePlants * CapitalLarge / 60,000\n// Energy_Medium = 700 * MediumPlants * CapitalMedium / 50,000\n// Energy_Small = 500 * SmallPlants * CapitalSmall / 30,000\n// So, the objective function is: Maximize (Energy_Large + Energy_Medium + Energy_Small)\n\n## Generate Constraint-1:\nThe company has a total capital budget of $1,000,000 for investment in solar plants.\n// LargePlants * CapitalLarge + MediumPlants * CapitalMedium + SmallPlants * CapitalSmall <= 1,000,000\n\n## Generate Constraint-2:\nDue to zoning regulations, the company can only build a maximum of 5 large-scale plants.\n// LargePlants <= 5\n\n## Generate Constraint-3:\nThe total number of plants (regardless of size) must not exceed 20.\n// LargePlants + MediumPlants + SmallPlants <= 20",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nLargePlants = model.addVar(vtype=\"INTEGER\", name=\"LargePlants\") # number of large-scale plants\nmodel.addCons(LargePlants >= 0)\nMediumPlants = model.addVar(vtype=\"INTEGER\", name=\"MediumPlants\") # number of medium-scale plants\nmodel.addCons(MediumPlants >= 0)\nSmallPlants = model.addVar(vtype=\"INTEGER\", name=\"SmallPlants\") # number of small-scale plants\nmodel.addCons(SmallPlants >= 0)\nCapitalLarge = model.addVar(vtype=\"CONTINUOUS\", name=\"CapitalLarge\") # capital investment per large-scale plant\nmodel.addCons(CapitalLarge >= 0)\nCapitalMedium = model.addVar(vtype=\"CONTINUOUS\", name=\"CapitalMedium\") # capital investment per medium-scale plant\nmodel.addCons(CapitalMedium >= 0)\nCapitalSmall = model.addVar(vtype=\"CONTINUOUS\", name=\"CapitalSmall\") # capital investment per small-scale plant\nmodel.addCons(CapitalSmall >= 0)\n\n# Define objective function\nEnergy_Large = 1000 * LargePlants * CapitalLarge / 60000\nEnergy_Medium = 700 * MediumPlants * CapitalMedium / 50000\nEnergy_Small = 500 * SmallPlants * CapitalSmall / 30000\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == Energy_Large + Energy_Medium + Energy_Small)\n\n# Add constraints\nmodel.addCons(LargePlants * CapitalLarge + MediumPlants * CapitalMedium + SmallPlants * CapitalSmall <= 1000000)\nmodel.addCons(LargePlants <= 5)\nmodel.addCons(LargePlants + MediumPlants + SmallPlants <= 20)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Total Daily Energy Output: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Total Daily Energy Output": "16666.666666666668"
        },
        "question": "A renewable energy company is planning to install three types of solar power plants: large-scale, medium-scale, and small-scale. The company needs to decide how many of each type of plant to build and how much capital to invest in each type of plant. The efficiency of energy production varies by plant size, and the cost of installation also differs. The company has a total capital budget of $1,000,000 for investment in solar plants. Due to zoning regulations, the company can only build a maximum of 5 large-scale plants. The total number of plants (regardless of size) must not exceed 20. The daily energy output of each type of plant is proportional to the capital invested in that plant. The large-scale plants have an efficiency of 1000 kWh per day per $60,000 invested, the medium-scale plants have an efficiency of 700 kWh per day per $50,000 invested, and the small-scale plants have an efficiency of 500 kWh per day per $30,000 invested. The company wants to maximize the total daily energy output.",
        "type": "nonlinear-notable",
        "index": 280,
        "length": 1010,
        "var_num": 6
    },
    {
        "question": "A bank can build small and large branches to serve their customers. A small branch can serve 50 customers per day and requires 10 bank tellers. A large branch can serve 100 customers per day and requires 15 bank tellers. The bank has available 200 bank tellers and needs to be able to serve at least 1200 customers per day. How many of each branch size should they build to minimize the total number of branches needed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_small_branches = LpVariable(\"NumSmallBranches\", lowBound=0, cat='Integer') # number of small branches\nnum_large_branches = LpVariable(\"NumLargeBranches\", lowBound=0, cat='Integer') # number of large branches\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BankBranches\", LpMinimize)\n\n# Define the objective function\nobjective = num_small_branches + num_large_branches\nproblem += objective # minimize the total number of branches\n\n# Define the constraints\nproblem += 50 * num_small_branches + 100 * num_large_branches >= 1200 # must be able to serve at least 1200 customers\nproblem += 10 * num_small_branches + 15 * num_large_branches <= 200 # the total number of tellers needed can't exceed available ones\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of small branches:\", num_small_branches.value())\nprint(\"The number of large branches:\", num_large_branches.value())\nprint(\"The total number of branches:\", objective.value())",
        "results": {
            "The number of small branches": "0.0",
            "The number of large branches": "12.0",
            "The total number of branches": "12.0"
        },
        "formulation": "minimize x+y\nSubject to: \n10x+15y <= 200\n50x+100y >= 1200 (end)",
        "type": "linear-notable",
        "index": 281,
        "length": 419,
        "var_num": 2
    },
    {
        "question": "A milk tea shop owner would like to sell two different milk teas: black milk tea and matcha milk tea. Each contains both milk and honey. A bottle of black milk tea contains 600 grams of milk and 10 grams of honey, whereas a bottle of matcha milk tea contains 525 grams of milk and 5 grams of honey. The profit from each bottle of black milk tea sold is $7.5 and the profit from each bottle of matcha milk tea sold is $5. If his total production must not exceed his available stock of 30000 grams of milk and 500 grams of honey, how many bottles of each type of milk tea should be made to maximize profits?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_black_tea = LpVariable(\"NumBlackTea\", lowBound=0, cat='Integer') # number of black milk tea\nnum_matcha_tea = LpVariable(\"NumMatchaTea\", lowBound=0, cat='Integer') # number of matcha milk tea\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MilkTeaProduction\", LpMaximize)\n\n# Define the objective function\nobjective = 7.5 * num_black_tea + 5 * num_matcha_tea\nproblem += objective # maximize the profit\n\n# Define the constraints\nproblem += 600 * num_black_tea + 525 * num_matcha_tea <= 30000 # total milk used must not exceed available stock\nproblem += 10 * num_black_tea + 5 * num_matcha_tea <= 500 # total honey used must not exceed available stock\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of black milk tea bottles:\", num_black_tea.value())\nprint(\"The number of matcha milk tea bottles:\", num_matcha_tea.value())\nprint(\"The maximum profit:\", objective.value())",
        "results": {
            "The number of black milk tea bottles": "50.0",
            "The number of matcha milk tea bottles": "0.0",
            "The maximum profit": "375.0"
        },
        "formulation": "maximize 5y+7.5x\nSubject to: \n600x+525y <= 30000\n10x+5y <= 500 (end)",
        "type": "linear-notable",
        "index": 282,
        "length": 605,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA city is planning to build three types of public facilities: parks, libraries, and sports centers. The city council needs to decide how many of each type of facility to build and how many staff members to allocate to each facility. The goal is to maximize the overall utility of these facilities to the citizens.\n// variables: {\"number of parks\": \"Parks\", \"number of libraries\": \"Libraries\", \"number of sports centers\": \"SportsCenters\", \"number of staff members per park\": \"StaffPerPark\", \"number of staff members per library\": \"StaffPerLibrary\", \"number of staff members per sports center\": \"StaffPerSportsCenter\"}, where Parks, Libraries, SportsCenters, StaffPerPark, StaffPerLibrary, StaffPerSportsCenter >= 0 and Parks, Libraries, SportsCenters, StaffPerPark, StaffPerLibrary, StaffPerSportsCenter are integers.\n\n## Define Objective Function:\nThe utility of a park is calculated as 100 times the number of staff members per park.\nThe utility of a library is calculated as 150 times the number of staff members per library.\nThe utility of a sports center is calculated as 200 times the number of staff members per sports center.\nThe city council wants to maximize the total utility of all facilities.\n// Utility_Parks = 100 * Parks * StaffPerPark\n// Utility_Libraries = 150 * Libraries * StaffPerLibrary\n// Utility_SportsCenters = 200 * SportsCenters * StaffPerSportsCenter\n// So, the objective function is: Maximize (Utility_Parks + Utility_Libraries + Utility_SportsCenters)\n\n## Generate Constraint-1:\nThe city has a budget of $10,000 to spend on staffing for these facilities.\n// Parks * StaffPerPark + Libraries * StaffPerLibrary + SportsCenters * StaffPerSportsCenter <= 10000\n\n## Generate Constraint-2:\nThe total number of facilities cannot exceed 50 due to zoning regulations.\n// Parks + Libraries + SportsCenters <= 50\n\n## Generate Constraint-3:\nThe city has a maximum of 200 staff members available for allocation.\n// Parks * StaffPerPark + Libraries * StaffPerLibrary + SportsCenters * StaffPerSportsCenter <= 200",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nParks = model.addVar(vtype=\"INTEGER\", name=\"Parks\")  # number of parks\nmodel.addCons(Parks >= 0)\nLibraries = model.addVar(vtype=\"INTEGER\", name=\"Libraries\")  # number of libraries\nmodel.addCons(Libraries >= 0)\nSportsCenters = model.addVar(vtype=\"INTEGER\", name=\"SportsCenters\")  # number of sports centers\nmodel.addCons(SportsCenters >= 0)\nStaffPerPark = model.addVar(vtype=\"INTEGER\", name=\"StaffPerPark\")  # number of staff members per park\nmodel.addCons(StaffPerPark >= 0)\nStaffPerLibrary = model.addVar(vtype=\"INTEGER\", name=\"StaffPerLibrary\")  # number of staff members per library\nmodel.addCons(StaffPerLibrary >= 0)\nStaffPerSportsCenter = model.addVar(vtype=\"INTEGER\", name=\"StaffPerSportsCenter\")  # number of staff members per sports center\nmodel.addCons(StaffPerSportsCenter >= 0)\n\n# Define objective function\nUtility_Parks = 100 * Parks * StaffPerPark\nUtility_Libraries = 150 * Libraries * StaffPerLibrary\nUtility_SportsCenters = 200 * SportsCenters * StaffPerSportsCenter\nobj = model.addVar(name=\"obj\")\nmodel.addCons(obj == Utility_Parks + Utility_Libraries + Utility_SportsCenters)\nmodel.setObjective(obj, \"maximize\")\n\n# Add constraints\nmodel.addCons(Parks * StaffPerPark + Libraries * StaffPerLibrary + SportsCenters * StaffPerSportsCenter <= 10000)\nmodel.addCons(Parks + Libraries + SportsCenters <= 50)\nmodel.addCons(Parks * StaffPerPark + Libraries * StaffPerLibrary + SportsCenters * StaffPerSportsCenter <= 200)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Total Utility: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Total Utility": "40000.0"
        },
        "question": "A city is planning to build three types of public facilities: parks, libraries, and sports centers. The city council needs to decide how many of each type of facility to build and how many staff members to allocate to each facility. The goal is to maximize the overall utility of these facilities to the citizens. The utility of a library is calculated as 150 times the number of staff members per library. The utility of a sports center is calculated as 200 times the number of staff members per sports center. The city council wants to maximize the total utility of all facilities. The city has a budget of $10,000 to spend on staffing for these facilities. The total number of facilities cannot exceed 50 due to zoning regulations. The city has a maximum of 200 staff members available for allocation. The utility of a park is calculated as 100 times the number of staff members per park.",
        "type": "nonlinear-notable",
        "index": 283,
        "length": 891,
        "var_num": 6
    },
    {
        "question": "A man  only eats vegetable and fruits. A serving of vegetables contains 2 units of vitamins and 3 units of minerals. A serving of fruit contains 4 units of vitamins and 1 unit of minerals. He wants to eat at least 20 units of vitamins and 30 units of minerals. If vegetables cost $3 per serving and fruits cost $5 per serving, how many servings of each should he eat to minimize his cost?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_vegetables = LpVariable(\"NumVegetables\", lowBound=0, cat='Continuous') # number of vegetables servings\nnum_fruits = LpVariable(\"NumFruits\", lowBound=0, cat='Continuous') # number of fruit servings\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinCostDiet\", LpMinimize)\n\n# Define the objective function\nobjective = 3 * num_vegetables + 5 * num_fruits\nproblem += objective # minimize the total cost\n\n# Define the constraints\nproblem += 2 * num_vegetables + 4 * num_fruits >= 20 # he needs at least 20 units of vitamins\nproblem += 3 * num_vegetables + num_fruits >= 30 # he needs at least 30 units of minerals\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of vegetable servings:\", num_vegetables.value())\nprint(\"The number of fruit servings:\", num_fruits.value())\nprint(\"The total cost:\", objective.value())",
        "results": {
            "The number of vegetable servings": "10.0",
            "The number of fruit servings": "0.0",
            "The total cost": "30.0"
        },
        "formulation": "minimize 3x+5y\nSubject to: \n2x+4y >= 20\n3x+1y >= 30 (end)",
        "type": "linear-table",
        "index": 284,
        "length": 388,
        "var_num": 2
    },
    {
        "question": "A school is organizing a field trip to a science center and wants to hire small buses and large buses. A small bus can carry 20 students while a large bus can carry 50 students.  The school needs to provide transportation for at least 500 students.  In addition, since the parking lot is rather small, a maximum of 20% of the buses can be large buses. How many of each type of bus should be hired to minimize the total number of buses?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_small_buses = LpVariable(\"NumSmallBuses\", lowBound=0, cat='Integer') # number of small buses\nnum_large_buses = LpVariable(\"NumLargeBuses\", lowBound=0, cat='Integer') # number of large buses\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SchoolBusOptimization\", LpMinimize)\n\n# Define the objective function\nobjective = num_small_buses + num_large_buses\nproblem += objective # minimize the total number of buses\n\n# Define the constraints\nproblem += 20 * num_small_buses + 50 * num_large_buses >= 500 # at least 500 students must be transported\nproblem += num_large_buses <= 0.20 * (num_small_buses + num_large_buses) # max 20% of buses can be large buses\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of small buses:\", num_small_buses.value())\nprint(\"The number of large buses:\", num_large_buses.value())\nprint(\"The total number of buses:\", objective.value())",
        "results": {
            "The number of small buses": "16.0",
            "The number of large buses": "4.0",
            "The total number of buses": "20.0"
        },
        "formulation": "minimize x+y\nSubject to: \n20x+50y >= 500\ny <= 0.2(x+y) (end)",
        "type": "linear-notable",
        "index": 285,
        "length": 435,
        "var_num": 2
    },
    {
        "question": "A drug company is making pain killers and sleeping pills using two processes, process 1 and process 2. Process 1 produces 35 units of pain killers and 12 units of sleeping pills per hour. Process 2 produces 50 units of pain killers and 30 units of sleeping pills per hour. Process 1 requires 50 units of preliminary material while process 2 requires 60 units of preliminary material. The drug company has available 2000 units of preliminary material and must make at least 1200 units of pain killers and 1200 units of sleeping pills. How many of each process should be run to minimize the total time needed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_process_1 = LpVariable(\"NumProcess1\", lowBound=0, cat='Continuous') # number of hours to run process 1\nnum_process_2 = LpVariable(\"NumProcess2\", lowBound=0, cat='Continuous') # number of hours to run process 2\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DrugManufacturing\", LpMinimize)\n\n# Define the objective function\nobjective = num_process_1 + num_process_2\nproblem += objective # minimize the total time\n\n# Define the constraints\nproblem += 50 * num_process_1 + 60 * num_process_2 <= 2000 # preliminary material limit\nproblem += 35 * num_process_1 + 50 * num_process_2 >= 1200 # pain killers requirement\nproblem += 12 * num_process_1 + 30 * num_process_2 >= 1200 # sleeping pills requirement\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of hours to run process 1:\", num_process_1.value())\nprint(\"The number of hours to run process 2:\", num_process_2.value())\nprint(\"The total time:\", objective.value())",
        "results": {
            "The number of hours to run process 1": "0.0",
            "The number of hours to run process 2": "40.0",
            "The total time": "40.0"
        },
        "formulation": "minimize x+y\nSubject to: \n50x+60y <= 2000\n35x+50y >= 1200\n12x+30y >= 1200 (end)",
        "type": "linear-notable",
        "index": 286,
        "length": 607,
        "var_num": 2
    },
    {
        "question": "A market owner wants to start a jam business. He can either sell one unit of jam to customers in a set of small packets or jugs. A set of small packets can hold 1000 ml of jam while a jug can hold 1250 ml of jam. Since a set of small packets are more expensive to make, at least three times as many jugs must be used than sets of small packets. On the other hand, at least 3 sets of small packets should be filled. If the market owner has 65000 ml of jam, how many sets of small packets or jugs should be selected to maximize the total number of units that he can sell to his customers?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_small_packets = LpVariable(\"NumSmallPackets\", lowBound=0, cat='Integer') # number of small packets\nnum_jugs = LpVariable(\"NumJugs\", lowBound=0, cat='Integer') # number of jugs\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"JamBusiness\", LpMaximize)\n\n# Define the objective function\nobjective = num_small_packets + num_jugs\nproblem += objective # maximize the total number of units that can be sold\n\n# Define the constraints\nproblem += 1000 * num_small_packets + 1250 * num_jugs <= 65000 # the total volume of jam must be at most 65000 ml\nproblem += num_jugs >= 3 * num_small_packets # at least three times as many jugs should be used than sets of small packets\nproblem += num_small_packets >= 3 # at least 3 sets of small packets should be filled\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of small packets:\", num_small_packets.value())\nprint(\"The number of jugs:\", num_jugs.value())\nprint(\"The total number of units that can be sold:\", objective.value())",
        "results": {
            "The number of small packets": "13.0",
            "The number of jugs": "41.0",
            "The total number of units that can be sold": "54.0"
        },
        "formulation": "maximize \nSubject to: \ny >= 3x\nx >= 35\n1000x+1250y <= 65000 (end)",
        "type": "linear-notable",
        "index": 287,
        "length": 586,
        "var_num": 2
    },
    {
        "question": "A candy company is making peach flavored candy and cherry flavored candy. Each pack of peach flavored candy requires 3 units of peach flavoring and 5 units of special syrup. Each pack of cherry flavored candy requires 5 units of cherry flavoring and 4 units of special syrup. The company has available 3000 units of peach flavoring and 4000 units of cherry flavoring. Peach candy is much more popular and thus the number of peach candy packs must be larger than the number of cherry candy packs. In addition, at least 30% of the pack must be cherry flavored. How many of each should be made to minimize the total amount of special syrup used?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_peach_candy = LpVariable(\"NumPeachCandy\", lowBound=0, cat='Integer')  # number of peach candy packs\nnum_cherry_candy = LpVariable(\"NumCherryCandy\", lowBound=0, cat='Integer')  # number of cherry candy packs\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CandyCompany\", LpMinimize)\n\n# Define the objective function\nobjective = 5 * num_peach_candy + 4 * num_cherry_candy\nproblem += objective  # minimize the total amount of special syrup used\n\n# Define the constraints\nproblem += 3 * num_peach_candy <= 3000  # peach flavoring constraint\nproblem += 5 * num_cherry_candy <= 4000  # cherry flavoring constraint\nproblem += num_peach_candy >= num_cherry_candy  # peach candy packs must be larger than cherry candy packs\nproblem += num_cherry_candy >= (num_peach_candy + num_cherry_candy) * 0.30  # at least 30% of the packs must be cherry flavored\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of peach candy packs:\", num_peach_candy.value())\nprint(\"The number of cherry candy packs:\", num_cherry_candy.value())\nprint(\"The total amount of special syrup used:\", objective.value())",
        "results": {
            "The number of peach candy packs": "0.0",
            "The number of cherry candy packs": "0.0",
            "The total amount of special syrup used": "0.0"
        },
        "formulation": "minimize 5x+4y\nSubject to: \n3x <= 3000\n5y <= 4000\nx >= y\ny >= 0.3(x+y) (end)",
        "type": "linear-notable",
        "index": 288,
        "length": 642,
        "var_num": 2
    },
    {
        "question": "The number of employees needed in a post office varies depending on the day of the week, as shown in the following Table. Employees work five consecutive days and have the next two days off. It becomes necessary to organize groups of employees to work in different shifts, so that the number of employees required is satisfied every day of the week. The objective is to employ the minimum number of workers.\n\nTable (The number of employees needed each day of the week):\n| Day of the Week | Number of Employees Needed |\n| --------------- | -------------------------- |\n| Monday          | 15                         |\n| Tuesday         | 13                         |\n| Wednesday       | 15                         |\n| Thursday        | 18                         |\n| Friday          | 14                         |\n| Saturday        | 16                         |\n| Sunday          | 10                         |",
        "formulation": "# Variables:\nWe need to determine the number of employees who start working on each day of the week. We denote the number of employees who start working on Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, and Sunday by x1, x2, x3, x4, x5, x6, and x7, respectively. We need to determine the values of these variables. As the number of employees who start working on each day of the week is a non-negative integer.\n```Variables\nx_i >= 0 and they are integers, i = 1, 2, 3, 4, 5, 6, 7 // non-negative integer variables\n```\n\n# Objective Function:\nWe want to employ the minimum number of workers, so the objective function is the sum of the number of employees whose working shift starts on each day of the week.\n```Objective Function\nMinimize: x1 + x2 + x3 + x4 + x5 + x6 + x7\n```\n\n# Constraints:\nWe need to ensure that the minimum number of employees required for each day of the week is satisfied.\nAs employees work five consecutive days and have the next two days off, for each day, the number of the employees who work on that day is the sum of the number of employees whose working shift starts on that day and the previous four days. \nFor example, the number of employees who work on Monday is the sum of the number of employees whose working shift starts on Thursday, Friday, Saturday, Sunday, and Monday. So, the number of employees who work on Monday is x1 + x2 + x3 + x4 + x5.\n```Constraints\nx1 + x2 + x3 + x4 + x5 >= 15 // minimum number of employees required on Monday\nx2 + x3 + x4 + x5 + x6 >= 13 // minimum number of employees required on Tuesday\nx3 + x4 + x5 + x6 + x7 >= 15 // minimum number of employees required on Wednesday\nx4 + x5 + x6 + x7 + x1 >= 18 // minimum number of employees required on Thursday\nx5 + x6 + x7 + x1 + x2 >= 14 // minimum number of employees required on Friday\nx6 + x7 + x1 + x2 + x3 >= 16 // minimum number of employees required on Saturday\nx7 + x1 + x2 + x3 + x4 >= 10 // minimum number of employees required on Sunday\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx1 = LpVariable(\"x1\", lowBound=0, cat='Integer')\nx2 = LpVariable(\"x2\", lowBound=0, cat='Integer')\nx3 = LpVariable(\"x3\", lowBound=0, cat='Integer')\nx4 = LpVariable(\"x4\", lowBound=0, cat='Integer')\nx5 = LpVariable(\"x5\", lowBound=0, cat='Integer')\nx6 = LpVariable(\"x6\", lowBound=0, cat='Integer')\nx7 = LpVariable(\"x7\", lowBound=0, cat='Integer')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimumEmployees\", LpMinimize)\n\n# Define the objective function\nproblem += x1 + x2 + x3 + x4 + x5 + x6 + x7\n\n# Define the constraints\nproblem += x1 + x2 + x3 + x4 + x5 >= 15\nproblem += x2 + x3 + x4 + x5 + x6 >= 13\nproblem += x3 + x4 + x5 + x6 + x7 >= 15\nproblem += x4 + x5 + x6 + x7 + x1 >= 18\nproblem += x5 + x6 + x7 + x1 + x2 >= 14\nproblem += x6 + x7 + x1 + x2 + x3 >= 16\nproblem += x7 + x1 + x2 + x3 + x4 >= 10\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The minimum number of workers needed is:\", value(problem.objective))\nprint(\"Number of workers starting on Monday:\", x1.value())\nprint(\"Number of workers starting on Tuesday:\", x2.value())\nprint(\"Number of workers starting on Wednesday:\", x3.value())\nprint(\"Number of workers starting on Thursday:\", x4.value())\nprint(\"Number of workers starting on Friday:\", x5.value())\nprint(\"Number of workers starting on Saturday:\", x6.value())\nprint(\"Number of workers starting on Sunday:\", x7.value())\n",
        "results": {
            "The minimum number of workers needed is": "22.0",
            "Number of workers starting on Monday": "7.0",
            "Number of workers starting on Tuesday": "0.0",
            "Number of workers starting on Wednesday": "4.0",
            "Number of workers starting on Thursday": "0.0",
            "Number of workers starting on Friday": "4.0",
            "Number of workers starting on Saturday": "5.0",
            "Number of workers starting on Sunday": "2.0"
        },
        "type": "linear-table",
        "index": 289,
        "length": 910,
        "var_num": 7
    },
    {
        "question": "A bakery bakes bagels and croissants. A batch of bagels can be made using 2 hours of oven time and 0.25 hours of pastry chef time. A batch of croissants is more complicated, so while they take 1 hour of oven time, they take 2 hours of pastry chef time. In a day, the bakery has at most 70 hours available for the oven and 32 pastry chef hours available. Using all the available capacity, what is the maximum profit the bakery can generate assuming the profit per batch is $20 and $40 respectively for a batch of bagels and a batch of croissants.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_bagels = LpVariable(\"NumBagels\", lowBound=0, cat='Integer') # number of batches of bagels\nnum_croissants = LpVariable(\"NumCroissants\", lowBound=0, cat='Integer') # number of batches of croissants\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BakeryProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 20 * num_bagels + 40 * num_croissants\nproblem += objective # maximize the profit\n\n# Define the constraints\nproblem += 2 * num_bagels + num_croissants <= 70 # the oven time should be at most 70 hours\nproblem += 0.25 * num_bagels + 2 * num_croissants <= 32 # the pastry chef time should be at most 32 hours\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of batches of bagels:\", num_bagels.value())\nprint(\"The number of batches of croissants:\", num_croissants.value())\nprint(\"The maximum profit is: $\", objective.value())",
        "results": {
            "The number of batches of bagels": "29.0",
            "The number of batches of croissants": "12.0",
            "The maximum profit is": "1060.0"
        },
        "formulation": "maximize 20x+40y\nSubject to: \n2x+1y <= 70\n0.25x+2y <= 32 (end)",
        "type": "linear-notable",
        "index": 290,
        "length": 545,
        "var_num": 2
    },
    {
        "question": "Out of a stock of three electronic components A,B and C given as 200, 120 and 150 respectively, it is required to produce two types of circuits. Circuit type 1 requires 20 resistors,10 transistors and 10 capacitors, while printed circuit type 2 requires 10 resistors, 20 transistors and 30 capacitors. If a type 1 circuit sells at Gh.5 cedis each and type 2 circuit at Gh.12 cedis each. Advice management about how many of each type should be made to get the maximum financial returns algebraically.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for type 1 and type 2 circuits that adhere to the constraints given. Let's denote the number of type 1 circuits as x and the number of type 2 circuits as y.\n```Variables\nx //number of type 1 circuits to produce \ny //number of type 2 circuits to produce\nx, y >= 0 and they are integers //non-negative integer variables\n```\n\n# Objective Function:\nWe want to maximize the financial returns from the production of the circuits. The profit from the production of type 1 circuits is Gh.5 per circuit and Gh.12 per circuit for type 2 circuits. The objective function is therefore:\n```Objective\nMaximize: 5x + 12y\n```\n\n# Constraints:\n```Constraints\n20x + 10y <= 200 //maximum number of resistors\n10x + 20y <= 120 //maximum number of transistors\n10x + 30y <= 150 //maximum number of capacitors\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"x\", lowBound=0, cat='Integer') # number of type 1 circuits to produce\ny = LpVariable(\"y\", lowBound=0, cat='Integer') # number of type 2 circuits to produce\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeFinancialReturns\", LpMaximize)\n\n# Define the objective function\nproblem += 5 * x + 12 * y\n\n# Define the constraints\nproblem += 20 * x + 10 * y <= 200 # maximum number of resistors\nproblem += 10 * x + 20 * y <= 120 # maximum number of transistors\nproblem += 10 * x + 30 * y <= 150 # maximum number of capacitors\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of type 1 circuits to produce:\", x.value())\nprint(\"The number of type 2 circuits to produce:\", y.value())\nprint(\"The maximum financial returns:\", value(problem.objective))\n",
        "results": {
            "The number of type 1 circuits to produce": "6.0",
            "The number of type 2 circuits to produce": "3.0",
            "The maximum financial returns": "66.0"
        },
        "type": "linear-notable",
        "index": 291,
        "length": 499,
        "var_num": 2
    },
    {
        "question": "Forest Paper makes two types of products: graph paper and music paper. Each type of paper requires the use of two machines, a printing machine and a scanning machine. It takes 3 minutes on the printing machine and 5.5 minutes on the scanning machine to make a ream of graph paper. On the other hand, it takes 1.5 minutes on the printing machine and 3 minutes on the scanning machine to make a ream of music paper. Each machine is available for a maximum of 350 minutes per day. The company sells a package of graph paper at a profit of $4 and a package of music paper at a profit of $2.5. The company can sell all the paper it makes. How many reams of each type should the company produce in a day in order to maximize profit? What is that profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_graph_paper = LpVariable(\"NumGraphPaper\", lowBound=0, cat='Integer') # number of reams of graph paper\nnum_music_paper = LpVariable(\"NumMusicPaper\", lowBound=0, cat='Integer') # number of reams of music paper\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ForestPaperProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 4 * num_graph_paper + 2.5 * num_music_paper\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 3 * num_graph_paper + 1.5 * num_music_paper <= 350 # the printing machine can be used at most 350 minutes\nproblem += 5.5 * num_graph_paper + 3 * num_music_paper <= 350 # the scanning machine can be used at most 350 minutes\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of reams of graph paper:\", num_graph_paper.value())\nprint(\"The number of reams of music paper:\", num_music_paper.value())\nprint(\"The maximum profit:\", objective.value())",
        "results": {
            "The number of reams of graph paper": "2.0",
            "The number of reams of music paper": "113.0",
            "The maximum profit": "290.5"
        },
        "formulation": "maximize 4x+2.5y\nSubject to: \n3x+1.5y <= 350\n5.5x+3y <= 350 (end)",
        "type": "linear-notable",
        "index": 292,
        "length": 747,
        "var_num": 2
    },
    {
        "question": "A travelling salesman only eats ramen and fries. Each pack of ramen contains 400 calories, 20 grams of protein, and 100 mg of sodium. Each pack of fries contains 300 calories, 10 grams of protein, and 75 mg of sodium. Since fries are easier to eat while driving, at most 30% of his meals can be ramen. The salesman wants to ensure he eats at least 3000 calories and 80 grams of protein. How many of each should he eat to minimize his sodium intake?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_ramen = LpVariable(\"NumRamen\", lowBound=0, cat='Integer') # number of ramen packs\nnum_fries = LpVariable(\"NumFries\", lowBound=0, cat='Integer') # number of fries packs\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimizeSodiumIntake\", LpMinimize)\n\n# Define the objective function\nobjective = 100 * num_ramen + 75 * num_fries\nproblem += objective # minimize the total sodium intake\n\n# Define the constraints\nproblem += 400 * num_ramen + 300 * num_fries >= 3000 # at least 3000 calories\nproblem += 20 * num_ramen + 10 * num_fries >= 80 # at least 80 grams of protein\nproblem += num_ramen <= 0.3 * (num_ramen + num_fries) # at most 30% of his meals can be ramen\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of ramen packs:\", num_ramen.value())\nprint(\"The number of fries packs:\", num_fries.value())\nprint(\"The total sodium intake:\", objective.value())",
        "results": {
            "The number of ramen packs": "0",
            "The number of fries packs": "10",
            "The total sodium intake": "150.0"
        },
        "formulation": "minimize 100x+75y\nSubject to: \nx <= 0.3(x+y)\n400x+300y >= 3000\n20x+10y >= 80 (end)",
        "type": "linear-notable",
        "index": 293,
        "length": 448,
        "var_num": 2
    },
    {
        "question": "A makeup company hand fills perfume and cologne bottles. Each perfume bottle takes 2 minutes to fill and each cologne bottle takes 2.5 minutes to fill. The company must fill at least 60 perfume bottles and at least 40 cologne bottles. The company has 700 minutes available. If the profit per perfume bottle is $50 and the profit per cologne bottle is $60, how many of each should be filled in order to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of perfume bottles filled\", \"name\": \"x\"}, {\"description\": \"number of cologne bottles filled\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total profit\", \"function\": \"50x + 60y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"time constraint\", \"function\": \"2x + 2.5y <= 700\"}, {\"description\": \"minimum number of perfume bottles\", \"function\": \"x >= 60\"}, {\"description\": \"minimum number of cologne bottles\", \"function\": \"y >= 40\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"PerfumeBottles\", lowBound=60, cat='Integer') # number of perfume bottles filled\ny = LpVariable(\"CologneBottles\", lowBound=40, cat='Integer') # number of cologne bottles filled\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 50 * x + 60 * y\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 2 * x + 2.5 * y <= 700 # time constraint\n# Minimum requirements are already considered in the lower bounds of the variables\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of perfume bottles filled:\", x.value())\nprint(\"The number of cologne bottles filled:\", y.value())\nprint(\"Total profit:\", objective.value())\n",
        "results": {
            "The number of perfume bottles filled": "300.0",
            "The number of cologne bottles filled": "40.0",
            "Total profit": "17400.0"
        },
        "type": "linear-notable",
        "index": 294,
        "length": 418,
        "var_num": 2
    },
    {
        "question": "A food manufacturer wishes to mix pork and chicken to create sausages. The mixture needs to contain at least 10 units of protein and 15 units of fat. Pork costs $40 per kg and chicken costs $50 per kg. Per kilogram, pork contains 2 units of protein and 4 units of fat. Per kilogram, chicken contains 3 units of protein and 2 units of fat. Determine the minimum cost of the mixture.",
        "formulation": "{\"variable\": [{\"description\": \"amount of pork in kg\", \"name\": \"x\"}, {\"description\": \"amount of chicken in kg\", \"name\": \"y\"}], \"objective\": [{\"description\": \"cost of mixture\", \"function\": \"40x + 50y\", \"sense\": \"Minimize\"}], \"constraint\": [{\"description\": \"protein requirement\", \"function\": \"2x + 3y >= 10\"}, {\"description\": \"fat requirement\", \"function\": \"4x + 2y >= 15\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\namount_of_pork = LpVariable(\"AmountOfPork\", lowBound=0, cat='Continuous') # amount of pork in kg\namount_of_chicken = LpVariable(\"AmountOfChicken\", lowBound=0, cat='Continuous') # amount of chicken in kg\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SausageMix\", LpMinimize)\n\n# Define the objective function\nobjective = 40 * amount_of_pork + 50 * amount_of_chicken\nproblem += objective # minimize the cost of the mixture\n\n# Define the constraints\nproblem += 2 * amount_of_pork + 3 * amount_of_chicken >= 10 # protein requirement\nproblem += 4 * amount_of_pork + 2 * amount_of_chicken >= 15 # fat requirement\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The amount of pork in kg:\", amount_of_pork.value())\nprint(\"The amount of chicken in kg:\", amount_of_chicken.value())\nprint(\"The minimum cost of the mixture:\", objective.value())\n",
        "results": {
            "The amount of pork in kg": "3.125",
            "The amount of chicken in kg": "1.25",
            "The minimum cost of the mixture": "187.5"
        },
        "type": "linear-notable",
        "index": 295,
        "length": 381,
        "var_num": 2
    },
    {
        "question": "There is only 3000 grams of black tea available to make earl grey and English breakfast teabags. Each earl grey teabag requires 25 grams of black tea while each English breakfast teabag requires 20 grams of black tea. Due to demand, at least 4 times the amount of earl grey teabags are needed than English breakfast. However, at least 20 English breakfast teabags need to be made. If the profit per earl grey teabag is $0.30 and the profit per English breakfast teabag is $0.25, how many of each should be made to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of earl grey teabags\", \"name\": \"x\"}, {\"description\": \"number of English breakfast teabags\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total profit\", \"function\": \"0.30x + 0.25y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"black tea supply constraint\", \"function\": \"25x + 20y <= 3000\"}, {\"description\": \"earl grey demand constraint\", \"function\": \"x >= 4y\"}, {\"description\": \"English breakfast demand constraint\", \"function\": \"y >= 20\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_earl_grey_teabags = LpVariable(\"NumEarlGreyTeabags\", lowBound=0, cat='Integer') # number of earl grey teabags\nnum_english_breakfast_teabags = LpVariable(\"NumEnglishBreakfastTeabags\", lowBound=20, cat='Integer') # number of English breakfast teabags\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"TeabagProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 0.30 * num_earl_grey_teabags + 0.25 * num_english_breakfast_teabags\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 25 * num_earl_grey_teabags + 20 * num_english_breakfast_teabags <= 3000 # black tea supply constraint\nproblem += num_earl_grey_teabags >= 4 * num_english_breakfast_teabags # earl grey demand constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of earl grey teabags:\", num_earl_grey_teabags.value())\nprint(\"The number of English breakfast teabags:\", num_english_breakfast_teabags.value())\nprint(\"The total profit:\", objective.value())\n",
        "results": {
            "The number of earl grey teabags": "100.0",
            "The number of English breakfast teabags": "25.0",
            "The total profit": "36.25"
        },
        "type": "linear-notable",
        "index": 296,
        "length": 530,
        "var_num": 2
    },
    {
        "question": "Find the dimensions of the closed cylinder volume V = 16\u03c0 that has the least amount of surface area.",
        "scenario": "## Define Variables:\nThere is a closed cylinder. The volume of the cylinder is 16\u03c0.\n// variables: {\"radius of the cylinder\": \"r\", \"height of the cylinder\": \"h\"}, where r, h >= 0\n\n## Define Objective Function:\nFind the dimensions of the cylinder that has the least amount of surface area.\n// The surface area of the cylinder is given by the formula 2\u03c0rh + 2\u03c0r^2.\n// Therefore, the objective function is: Minimize 2\u03c0rh + 2\u03c0r^2\n\n## Generate Constraint-1:\nThe volume of the cylinder is 16\u03c0.\n// The volume of the cylinder is given by the formula \u03c0r^2h, and it is given that the volume is 16\u03c0. Therefore, the constraint is \u03c0r^2h = 16\u03c0.\n// r^2h = 16",
        "code": "from pyscipopt import Model\nimport math\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nr = model.addVar(vtype=\"CONTINUOUS\", name=\"r\") # radius of the cylinder\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the cylinder\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nmodel.addCons(obj == 2*math.pi*r*h + 2*math.pi*r**2)\n\n# Add constraints\nmodel.addCons(r**2*h == 16)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The radius of the cylinder: \", model.getVal(r))\n    print(\"The height of the cylinder: \", model.getVal(h))\n    print(\"The surface area of the cylinder: \", model.getVal(obj))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The radius of the cylinder": "2.0",
            "The height of the cylinder": "4.0",
            "The surface area of the cylinder": "75.39822"
        },
        "type": "nonlinear-notable",
        "index": 297,
        "length": 100,
        "var_num": 2
    },
    {
        "question": "We want to build a box. The base length of the box should be 6 times the base width. The volume of the box should be at least 20 cubic inches. The cost of the material of the sides is $3 per square inch, and the cost of the top and bottom is $15 per square inch. Determine the dimensions of the box that will minimize the cost.",
        "scenario": "## Define Variables:\nWe want to build a box.\n// variables: {\"width of the box\": \"w\", \"length of the box\": \"l\", \"height of the box\": \"h\"}, where w, l, h >= 0\n\n## Define Objective Function:\nThe cost of the material of the sides is $3 per square inch, and the cost of the top and bottom is $15 per square inch. Determine the dimensions of the box that will minimize the cost.\n// The area of the sides is 2(w + l) * h, and the area of the top and bottom is 2*w*l.\n// So, the cost of the box is 3 * 2(w + l) * h + 15 * 2 * w * l = 6wh + 6lh + 30wl.\n// So, the objective function is: Minimize 6wh + 6lh + 30wl\n\n## Generate Constraint-1:\nThe base length of the box should be 6 times the base width.\n// l = 6w\n\n## Generate Constraint-2:\nThe volume of the box should be at least 20 cubic inches.\n// w * l * h >= 20",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nw = model.addVar(vtype=\"CONTINUOUS\", name=\"w\", lb=0, ub=100) # width of the box\nl = model.addVar(vtype=\"CONTINUOUS\", name=\"l\", lb=0, ub=100) # length of the box\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\", lb=0, ub=100) # height of the box\n\n# Define objective function\nobj = model.addVar(vtype=\"CONTINUOUS\", name=\"obj\")\nmodel.addCons(obj == 6*w*h + 6*l*h + 30*w*l)\nmodel.setObjective(obj, \"minimize\")\n\n# Add constraints\nmodel.addCons(l == 6*w) # Constraint-1: l = 6w\nmodel.addCons(w*l*h >= 20) # Constraint-2: w * l * h >= 20\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The width of the box:\", model.getVal(w))\n    print(\"The length of the box:\", model.getVal(l))\n    print(\"The height of the box:\", model.getVal(h))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The width of the box": "0.7298570641141041",
            "The length of the box": "4.3791423846846245",
            "The height of the box": "6.257532217155436",
            "The minimum surface area of the box:": "287.7028115678059"
        },
        "type": "nonlinear-notable",
        "index": 298,
        "length": 327,
        "var_num": 3
    },
    {
        "question": "A clinical firm has two factories, a northern factory and a western factory, where they make expensive anti-itch injections and topical cream. Every hour, the northern factory makes 800 g of anti-itch injections and 700 g of topical cream. Every hour, the western factory makes 650 g of anti-itch injections and 750 g of topical cream. The northern factory requires 40 units of plastic per hour while the western factory requires 35 units of plastic to manufacture the packaging. The clinical firm has available 60,000 units of plastic. Further, they must make at least 800,000 g of anti-itch injections and 700,000 g of topical cream. How many hours should each factory be run to minimize the total time needed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_north_hours = LpVariable(\"NumNorthHours\", lowBound=0) # number of hours the northern factory runs\nnum_west_hours = LpVariable(\"NumWestHours\", lowBound=0) # number of hours the western factory runs\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ClinicalFactoryOperation\", LpMinimize)\n\n# Define the objective function\nobjective = num_north_hours + num_west_hours\nproblem += objective # minimize the total hours\n\n# Define the constraints\nproblem += 40 * num_north_hours + 35 * num_west_hours <= 60000 # must not exceed the plastic units\nproblem += 800 * num_north_hours + 650 * num_west_hours >= 800000 # minimum requirement for anti-itch injections\nproblem += 700 * num_north_hours + 750 * num_west_hours >= 700000 # minimum requirement for topical cream\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of hours the northern factory should run:\", num_north_hours.value())\nprint(\"The number of hours the western factory should run:\", num_west_hours.value())\nprint(\"The total time needed:\", objective.value())",
        "results": {
            "The number of hours the northern factory should run": "1000.0",
            "The number of hours the western factory should run": "0.0",
            "The total time needed": "1000.0"
        },
        "formulation": "minimize x+y\nSubject to: \n800x+650y >= 800000\n700x+750y >= 700000\n40x+35y <= 60000 (end)",
        "type": "linear-notable",
        "index": 299,
        "length": 712,
        "var_num": 2
    },
    {
        "question": "A landscape architect plans to enclose a 3000 square foot rectangular region in a botanical garden. She plans to use shrubs costing $25 per foot along three sides and fencing costing $10 per foot along the fourth side. What dimensions of the rectangular region will result in the least possible cost?",
        "scenario": "## Define Variables:\nA landscape architect plans to enclose a rectangular region in a botanical garden. \n// variables: {\"length of the rectangle\": \"L\", \"width of the rectangle\": \"W\"}, where L, W >= 0\n\n## Define Objective Function:\nShe will use shrubs costing $25 per foot along three sides and fencing costing $10 per foot along the fourth side. What dimensions of the rectangular region will result in the least possible cost?\n// The cost of the shrubs is $25 per foot along three sides, and the cost of the fencing is $10 per foot along the fourth side. The cost of the shrubs is 25 * (L + 2W), and the cost of the fencing is 10 * L.\n// So, the objective function is: Minimize 25 * (L + 2W) + 10 * L\n\n## Generate Constraint-1:\nThe area of the rectangular region should be 3000 square feet.\n// L * W = 3000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nL = model.addVar(vtype=\"CONTINUOUS\", name=\"L\") # length of the rectangle\nW = model.addVar(vtype=\"CONTINUOUS\", name=\"W\") # width of the rectangle\n\n# Define objective function\nmodel.setObjective(25 * (L + 2*W) + 10 * L, \"minimize\")\n\n# Add constraints\nmodel.addCons(L * W == 3000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The length of the rectangle:\", model.getVal(L))\n    print(\"The width of the rectangle:\", model.getVal(W))\n    print(\"The least possible cost: \", model.getVal(25 * (L + 2*W) + 10 * L))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The length of the rectangle": "65.46536707079798",
            "The width of the rectangle": "45.8257569495582",
            "The least possible cost": "4582.57569495584"
        },
        "type": "nonlinear-notable",
        "index": 300,
        "length": 300,
        "var_num": 2
    },
    {
        "question": "A company is deciding where to promote their product. Some options include z-tube, soorchle engine, and wassa advertisements. The cost for each option and the number of viewers they each attract is given. On z-tube, each ad costs $1000 and attracts 400,000 viewers. On soorchle, each ad costs $200 and attracts 5,000 viewers. On wassa, each ad costs $100 and attracts 3,000 viewers. Soorchle limits the number of advertisements from a single company to fifteen. Moreover, in order to balance the advertising among the three types of media, at most a third of the total number of advertisements should occur on wassa. And at least 5% should occur on z-tube. The weekly advertising budget is $10000. How many advertisements should be run in each of the three types of media to maximize the total audience?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_ztube_ads = LpVariable(\"NumZtubeAds\", lowBound=0, cat='Integer') # number of z-tube ads\nnum_soorchle_ads = LpVariable(\"NumSoorchleAds\", lowBound=0, upBound=15, cat='Integer') # number of soorchle ads\nnum_wassa_ads = LpVariable(\"NumWassaAds\", lowBound=0, cat='Integer') # number of wassa ads\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"AdvertisementOptimization\", LpMaximize)\n\n# Define the objective function\nobjective = 400000 * num_ztube_ads + 5000 * num_soorchle_ads + 3000 * num_wassa_ads\nproblem += objective # maximize the total number of viewers\n\n# Define the constraints\nproblem += 1000 * num_ztube_ads + 200 * num_soorchle_ads + 100 * num_wassa_ads <= 10000 # the cost must be within the budget of $10,000\ntotal_ads = num_ztube_ads + num_soorchle_ads + num_wassa_ads\nproblem += num_wassa_ads <= total_ads / 3 # at most a third of ads should occur on wassa\nproblem += num_ztube_ads >= total_ads / 20 # at least 5% of ads should occur on z-tube\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of z-tube ads:\", num_ztube_ads.value())\nprint(\"The number of soorchle ads:\", num_soorchle_ads.value())\nprint(\"The number of wassa ads:\", num_wassa_ads.value())\nprint(\"The total audience:\", objective.value())",
        "results": {
            "The number of z-tube ads": "10.0",
            "The number of soorchle ads": "0.0",
            "The number of wassa ads": "0.0",
            "The total audience": "4000000.0"
        },
        "formulation": "maximize 400,000x+5,000y+3,000z\nSubject to: \ny <= fifteen\nz <= 3(x+y+z)\nx >= 5(x+y+z)\n1000x+200y+100z <= 10000 (end)",
        "type": "linear-notable",
        "index": 301,
        "length": 803,
        "var_num": 3
    },
    {
        "question": "You need to construct a rectangular garden. You want to enclose a garden with three sides of fencing and the house as the fourth side. You have 100 feet of fencing material. Determine the dimensions that will maximize the area of the garden.",
        "scenario": "## Define Variables:\nYou need to construct a rectangular garden.\n// variables: {\"length of the garden\": \"L\", \"width of the garden\": \"W\"}, where L, W >= 0\n\n## Define Objective Function:\nYou want to maximize the area of the garden.\n// The area of the garden is given by the product of the length and the width. Therefore, the objective function is: Maximize L * W\n\n## Generate Constraint-1:\nYou want to enclose a garden with three sides of fencing and the house as the fourth side. You have 100 feet of fencing material.\n// L + 2W <= 100",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nL = model.addVar(vtype=\"CONTINUOUS\", name=\"L\") # length of the garden\nW = model.addVar(vtype=\"CONTINUOUS\", name=\"W\") # width of the garden\n\n# Define objective function\nobj = model.addVar(vtype=\"CONTINUOUS\", name=\"obj\")\nmodel.addCons(obj == L * W)\nmodel.setObjective(obj, \"maximize\")\n\n# Add constraints\nmodel.addCons(L + 2*W <= 100)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The length of the garden:\", model.getVal(L))\n    print(\"The width of the garden:\", model.getVal(W))\n    print(\"The area of the garden: \", model.getVal(L * W))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The length of the garden": "50.0000",
            "The width of the garden": "25.00000",
            "The area of the garden": "1250.00"
        },
        "type": "nonlinear-notable",
        "index": 302,
        "length": 241,
        "var_num": 2
    },
    {
        "question": "A young boy is trying to grow taller by drinking milk and eating vegetables. He wants to get a minimum of 100 units of calcium and 50 units of iron per day. A glass of milk costs $1 and contains 40 units of calcium and 25 units of iron. A plate of vegetables costs $2 and contains 15 units of calcium and 30 units of iron. How many of each should he consume to minimize his cost?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_glasses_milk = LpVariable(\"NumGlassesMilk\", lowBound=0, cat='Integer') # number of glasses of milk\nnum_plates_vegetables = LpVariable(\"NumPlatesVegetables\", lowBound=0, cat='Integer') # number of plates of vegetables\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CostMinimization\", LpMinimize)\n\n# Define the objective function\nobjective = num_glasses_milk + 2 * num_plates_vegetables\nproblem += objective # minimize the total cost\n\n# Define the constraints\nproblem += 40 * num_glasses_milk + 15 * num_plates_vegetables >= 100 # get at least 100 units of calcium per day\nproblem += 25 * num_glasses_milk + 30 * num_plates_vegetables >= 50 # get at least 50 units of iron per day\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of glasses of milk:\", num_glasses_milk.value())\nprint(\"The number of plates of vegetables:\", num_plates_vegetables.value())\nprint(\"Total cost:\", objective.value())",
        "results": {
            "The number of glasses of milk": "3.0",
            "The number of plates of vegetables": "0.0",
            "Total cost": "3.0"
        },
        "formulation": "minimize 1x+2y\nSubject to: \n40x+15y >= 100\n25x+30y >= 50 (end)",
        "type": "linear-table",
        "index": 303,
        "length": 379,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA bakery has 5 different ovens for baking cakes. The owner needs to assign workers to each oven.\n// variables: {\"number of workers on oven 1\": \"O1\", \"number of workers on oven 2\": \"O2\", \"number of workers on oven 3\": \"O3\", \"number of workers on oven 4\": \"O4\", \"number of workers on oven 5\": \"O5\"}, where O1, O2, O3, O4, O5 >= 0 & O1, O2, O3, O4, O5 are integers\n\n## Define Objective Function:\nThe bakery produces 2 types of cakes in the 5 ovens. \nOn oven 1, each worker produces 15 units of cake 1 and 20 units of cake 2 during a hour. \nOn oven 2, each worker produces 20 units of cake 1 and 25 units of cake 2 during a hour. \nOn oven 3, each worker produces 25 units of cake 1 and 30 units of cake 2 during a hour. \nOn oven 4, each worker produces 30 units of cake 1 and 35 units of cake 2 during a hour.\nOn oven 5, each worker produces 35 units of cake 1 and 40 units of cake 2 during a hour.\nThe bakery needs to produce at least 200 units of cake 1 and at least 300 units of cake 2. The five ovens can only be opened or closed at the same time. Please determine the minimum production time to meet the daily demand.\n// The production time for cake 1: T1 = 200 / (15 * O1 + 20 * O2 + 25 * O3 + 30 * O4 + 35 * O5)\n// The production time for cake 2: T2 = 300 / (20 * O1 + 25 * O2 + 30 * O3 + 35 * O4 + 40 * O5)\n// So, the objective function is: Minimize max(T1, T2)\n\n## Generate Constraint-1:\nThere are total 40 workers available.\n// O1 + O2 + O3 + O4 + O5 <= 40\n\n## Generate Constraint-2:\nEach oven can be utilized by up to 15 workers at a time.\n// O1 <= 15; O2 <= 15; O3 <= 15; O4 <= 15; O5 <= 15",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nO1 = model.addVar(vtype=\"INTEGER\", name=\"O1\") # number of workers on oven 1\nmodel.addCons(O1 >= 0)\nO2 = model.addVar(vtype=\"INTEGER\", name=\"O2\") # number of workers on oven 2\nmodel.addCons(O2 >= 0)\nO3 = model.addVar(vtype=\"INTEGER\", name=\"O3\") # number of workers on oven 3\nmodel.addCons(O3 >= 0)\nO4 = model.addVar(vtype=\"INTEGER\", name=\"O4\") # number of workers on oven 4\nmodel.addCons(O4 >= 0)\nO5 = model.addVar(vtype=\"INTEGER\", name=\"O5\") # number of workers on oven 5\nmodel.addCons(O5 >= 0)\n\n# Define objective function\n# Since the objective function is not linear, we need to linearize it\nT1 = model.addVar(vtype=\"CONTINUOUS\", name=\"T1\") # production time for cake 1\nT2 = model.addVar(vtype=\"CONTINUOUS\", name=\"T2\") # production time for cake 2\nmax_time = model.addVar(vtype=\"CONTINUOUS\", name=\"max_time\") # max of T1 and T2\nmodel.setObjective(max_time, \"minimize\")\n\n# Constraints for T1 and T2\nmodel.addCons(T1 >= 200 / (15 * O1 + 20 * O2 + 25 * O3 + 30 * O4 + 35 * O5))\nmodel.addCons(T2 >= 300 / (20 * O1 + 25 * O2 + 30 * O3 + 35 * O4 + 40 * O5))\n\n# Constraint to set max_time to be the maximum of T1 and T2\nmodel.addCons(max_time >= T1)\nmodel.addCons(max_time >= T2)\n\n# Add constraints\nmodel.addCons(O1 + O2 + O3 + O4 + O5 <= 40)\nmodel.addCons(O1 <= 15)\nmodel.addCons(O2 <= 15)\nmodel.addCons(O3 <= 15)\nmodel.addCons(O4 <= 15)\nmodel.addCons(O5 <= 15)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Workers on Oven 1: \", model.getVal(O1))\n    print(\"Number of Workers on Oven 2: \", model.getVal(O2))\n    print(\"Number of Workers on Oven 3: \", model.getVal(O3))\n    print(\"Number of Workers on Oven 4: \", model.getVal(O4))\n    print(\"Number of Workers on Oven 5: \", model.getVal(O5))\n    print(\"Minimum Production Time: \", model.getVal(max_time))\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Workers on Oven 1": "0.0",
            "Number of Workers on Oven 2": "0.0",
            "Number of Workers on Oven 3": "10.0",
            "Number of Workers on Oven 4": "15.0",
            "Number of Workers on Oven 5": "15.0",
            "Minimum Production Time": "0.21052631578947364"
        },
        "question": "A bakery has 5 different ovens for baking cakes. The owner needs to assign workers to each oven. The bakery produces 2 types of cakes in the 5 ovens. The production rates for each type of cake per worker per hour on each oven are given in the following Table.\n\n| Oven | Cake 1 Production Rate | Cake 2 Production Rate |\n|------|------------------------|------------------------|\n| 1    | 15 units               | 20 units               |\n| 2    | 20 units               | 25 units               |\n| 3    | 25 units               | 30 units               |\n| 4    | 30 units               | 35 units               |\n| 5    | 35 units               | 40 units               |\n\nThe bakery needs to produce at least 200 units of cake 1 and at least 300 units of cake 2. The five ovens can only be opened or closed at the same time. The bakery has a total of 40 workers available. Each oven can be utilized by up to 15 workers at a time. The objective is to determine the minimum production time to meet the daily demand, which is defined as the maximum of the production times required for each type of cake.\n",
        "type": "nonlinear-table",
        "index": 304,
        "length": 1104,
        "var_num": 5
    },
    {
        "question": "An investor has $70,000 to divide among several instruments. Municipal bonds have an 8.5% return, CDs a 5% return, t-bills a 6.5% return, and growth stock 13%. The following guidelines have been established: 1. No more than 20% in municipal bonds.  2. Investment in CDs should not exceed the other three alternatives.  3. At least 30% invested in t-bills and CDs.  4. More should be invested in CDs and t-bills than in municipal bonds and growth stocks by a ratio of 1.2 to 1  5. All $70,000 should be invested. to maximize the profit.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal investment amounts for municipal bonds, CDs, treasury bills, and growth stocks. Let's denote the amount invested in municipal bonds as M, the amount invested in CDs as C, the amount invested in treasury bills as T, and the amount invested in growth stocks as G.\n```Variables\nM // amount invested in municipal bonds\nC // amount invested in CDs\nT // amount invested in treasury bills\nG // amount invested in growth stocks\nM, C, T, G >= 0\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function (profit) is given by the sum of the returns from each investment. The return from municipal bonds is 8.5% of the amount invested in municipal bonds, which is 0.085M. The return from CDs is 5% of the amount invested in CDs, which is 0.05C. The return from treasury bills is 6.5% of the amount invested in treasury bills, which is 0.065T. The return from growth stocks is 13% of the amount invested in growth stocks, which is 0.13G. Therefore, the objective function is 0.085M + 0.05C + 0.065T + 0.13G.\n```Objective Function\nMaximize: 0.085M + 0.05C + 0.065T + 0.13G\n```\n\n# Constraints:\n1. No more than 20% in municipal bonds: M <= 0.2 * (M + C + T + G)\n2. Investment in CDs should not exceed the other three alternatives: C <= M + T + G\n3. At least 30% invested in treasury bills and CDs: T + C >= 0.3 * (M + C + T + G)\n4. More should be invested in CDs and treasury bills than in municipal bonds and growth stocks by a ratio of 1.2 to 1: (C + T) / (M + G) >= 1.2, which is equivalent to C + T - 1.2M - 1.2G >= 0\n5. All $70,000 should be invested: M + C + T + G = 70000\nSubstituting the equation M + C + T + G = 70000 into the first four constraints, we get the following constraints:\n1. M <= 0.2 * 70000 = 14000\n2.  C <= M + T + G\n3. T + C >= 0.3 * 70000 = 21000\n4. C + T - 1.2M - 1.2G >= 0\nSo the constraints are as follows:\n```Constraints\nM <= 14000\nC <= M + T + G\nT + C >= 21000\nC + T - 1.2M - 1.2G >= 0\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nM = LpVariable(\"MunicipalBonds\", lowBound=0, cat='Continuous')\nC = LpVariable(\"CDs\", lowBound=0, cat='Continuous')\nT = LpVariable(\"TBills\", lowBound=0, cat='Continuous')\nG = LpVariable(\"GrowthStocks\", lowBound=0, cat='Continuous')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"InvestmentPortfolio\", LpMaximize)\n\n# Define the objective function\nobjective = 0.085 * M + 0.05 * C + 0.065 * T + 0.13 * G\nproblem += objective\n\n# Define the constraints\nproblem += M <= 14000\nproblem += C <= M + T + G\nproblem += T + C >= 21000\nproblem += C + T - 1.2 * M - 1.2 * G >= 0\nproblem += M + C + T + G == 70000\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Amount to invest in Municipal Bonds:\", M.value())\nprint(\"Amount to invest in CDs:\", C.value())\nprint(\"Amount to invest in T-Bills:\", T.value())\nprint(\"Amount to invest in Growth Stocks:\", G.value())\nprint(\"Total Profit:\", value(problem.objective))\n",
        "results": {
            "Amount to invest in Municipal Bonds": "0.0",
            "Amount to invest in CDs": "0.0",
            "Amount to invest in T-Bills": "38181.818",
            "Amount to invest in Growth Stocks": "31818.182",
            "Total Profit": "6618.1818299999995"
        },
        "type": "linear-notable",
        "index": 305,
        "length": 535,
        "var_num": 4
    },
    {
        "question": "A landscaper has 100 square feet of grass land in a customer\u2019s backyard where they need to cut grass using either a heavy-duty yard machine or a gas lawn mower. For each square foot of land, the heavy-duty yard machine requires 2 seconds while the gas lawn mower takes 5 seconds. Per square foot, the heavy-duty yard machine produces 12 units of pollution and requires 3 units of fuel. Conversely, the gas lawn mower generates 10 units of pollution for each square foot and requires 2 units of fuel. There are 450 units of fuel available and the landscaper can produce no more than 2000 units of pollution. For how many square feet should each machine be used to minimize the time required to cut this customer\u2019s backyard?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nsqft_heavy_duty = LpVariable(\"sqft_heavy_duty\", lowBound=0, cat='Continuous') # square feet for heavy-duty yard machine\nsqft_gas_lawn = LpVariable(\"sqft_gas_lawn\", lowBound=0, cat='Continuous') # square feet for gas lawn mower\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"LandscapingMinimizeTime\", LpMinimize)\n\n# Define the objective function\nobjective = 2 * sqft_heavy_duty + 5 * sqft_gas_lawn\nproblem += objective # minimize the total time required\n\n# Define the constraints\nproblem += 12 * sqft_heavy_duty + 10 * sqft_gas_lawn <= 2000 # pollution constraint\nproblem += 3 * sqft_heavy_duty + 2 * sqft_gas_lawn <= 450 # fuel constraint\nproblem += sqft_heavy_duty + sqft_gas_lawn == 100 # total square feet of land\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Square feet for heavy-duty yard machine:\", sqft_heavy_duty.value())\nprint(\"Square feet for gas lawn mower:\", sqft_gas_lawn.value())\nprint(\"Total time required (seconds):\", objective.value())",
        "results": {
            "Square feet for heavy-duty yard machine": "100.0",
            "Square feet for gas lawn mower": "0.0",
            "Total time required (seconds)": "200.0"
        },
        "formulation": "minimize 5y+2x\nSubject to: \n2y+3x <= 450\n12x+10y <= 2000\nx+y <= 100 (end)",
        "type": "linear-notable",
        "index": 306,
        "length": 722,
        "var_num": 2
    },
    {
        "question": "A meat factory makes burgers and hot-dogs. Each burger requires 3 units of meat and 2 unit of binding agent. Each hot-dog requires 2 units of meat and 1 unit of binding agent. The factory has 2000 units of meat and 1800 units of binding agent available. If the revenue per burger made is $0.30 and the revenue per hot-dog made is $0.20, how many of each should be made to maximize revenue?",
        "formulation": "{\"variable\": [{\"description\": \"number of burgers made\", \"name\": \"x\"}, {\"description\": \"number of hot-dogs made\", \"name\": \"y\"}], \"objective\": [{\"description\": \"revenue from burgers and hot-dogs\", \"function\": \"0.3x + 0.2y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"meat constraint\", \"function\": \"3x + 2y <= 2000\"}, {\"description\": \"binding agent constraint\", \"function\": \"2x + y <= 1800\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_burgers = LpVariable(\"NumBurgers\", lowBound=0, cat='Integer') # number of burgers made\nnum_hotdogs = LpVariable(\"NumHotDogs\", lowBound=0, cat='Integer') # number of hot-dogs made\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MeatFactoryRevenue\", LpMaximize)\n\n# Define the objective function\nobjective = 0.3 * num_burgers + 0.2 * num_hotdogs\nproblem += objective # maximize the total revenue\n\n# Define the constraints\nproblem += 3 * num_burgers + 2 * num_hotdogs <= 2000 # meat constraint\nproblem += 2 * num_burgers + num_hotdogs <= 1800 # binding agent constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of burgers made:\", num_burgers.value())\nprint(\"The number of hot-dogs made:\", num_hotdogs.value())\nprint(\"The total revenue:\", objective.value())\n",
        "results": {
            "The number of burgers made": "0.0",
            "The number of hot-dogs made": "1000.0",
            "The total revenue": "200.0"
        },
        "type": "linear-notable",
        "index": 307,
        "length": 389,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA manufacturing company is planning to produce four types of products: ProductA, ProductB, ProductC, and ProductD. They need to decide how many units of each product to produce in the next month to optimize their profit.\n// variables: {\"number of units of ProductA\": \"ProductAUnits\", \"number of units of ProductB\": \"ProductBUnts\", \"number of units of ProductC\": \"ProductCUnits\", \"number of units of ProductD\": \"ProductDUnits\"}, where ProductAUnits, ProductBUnts, ProductCUnits, ProductDUnits >= 0 & ProductAUnits, ProductBUnts, ProductCUnits, ProductDUnits are integers\n\n## Define Objective Function:\nThe profit per unit for ProductA is $50, for ProductB is $70, for ProductC is $90, and for ProductD is $110. However, the production cost per unit increases non-linearly with the number of units produced due to economies of scale. Specifically, the production cost per unit for ProductA is $30 + (ProductAUnits^2)/1000, for ProductB is $40 + (ProductBUnts^2)/1000, for ProductC is $50 + (ProductCUnits^2)/1000, and for ProductD is $60 + (ProductDUnits^2)/1000. The company wants to maximize the total net profit.\n// Total net profit for ProductA: Profit_ProductA = (50 - (30 + (ProductAUnits^2)/1000)) * ProductAUnits\n// Total net profit for ProductB: Profit_ProductB = (70 - (40 + (ProductBUnts^2)/1000)) * ProductBUnts\n// Total net profit for ProductC: Profit_ProductC = (90 - (50 + (ProductCUnits^2)/1000)) * ProductCUnits\n// Total net profit for ProductD: Profit_ProductD = (110 - (60 + (ProductDUnits^2)/1000)) * ProductDUnits\n// So, the objective function is: Maximize (Profit_ProductA + Profit_ProductB + Profit_ProductC + Profit_ProductD)\n\n## Generate Constraint-1:\nThe company has a total production capacity of 1000 units for the month.\n// ProductAUnits + ProductBUnts + ProductCUnits + ProductDUnits <= 1000\n\n## Generate Constraint-2:\nDue to market demand, the company must produce at least 100 units of ProductA and no more than 200 units.\n// ProductAUnits >= 100; ProductAUnits <= 200\n\n## Generate Constraint-3:\nThe company has a budget of $50,000 for production costs for the month.\n// (30 + (ProductAUnits^2)/1000) * ProductAUnits + (40 + (ProductBUnts^2)/1000) * ProductBUnts + (50 + (ProductCUnits^2)/1000) * ProductCUnits + (60 + (ProductDUnits^2)/1000) * ProductDUnits <= 50,000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nProductAUnits = model.addVar(vtype=\"INTEGER\", name=\"ProductAUnits\") # number of units of ProductA\nmodel.addCons(ProductAUnits >= 0)\nProductBUnts = model.addVar(vtype=\"INTEGER\", name=\"ProductBUnts\") # number of units of ProductB\nmodel.addCons(ProductBUnts >= 0)\nProductCUnits = model.addVar(vtype=\"INTEGER\", name=\"ProductCUnits\") # number of units of ProductC\nmodel.addCons(ProductCUnits >= 0)\nProductDUnits = model.addVar(vtype=\"INTEGER\", name=\"ProductDUnits\") # number of units of ProductD\nmodel.addCons(ProductDUnits >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == ((50 - (30 + (ProductAUnits**2)/1000)) * ProductAUnits) + ((70 - (40 + (ProductBUnts**2)/1000)) * ProductBUnts) + ((90 - (50 + (ProductCUnits**2)/1000)) * ProductCUnits) + ((110 - (60 + (ProductDUnits**2)/1000)) * ProductDUnits))\n\n# Add constraints\nmodel.addCons(ProductAUnits + ProductBUnts + ProductCUnits + ProductDUnits <= 1000)\nmodel.addCons(ProductAUnits >= 100)\nmodel.addCons(ProductAUnits <= 200)\nmodel.addCons(((30 + (ProductAUnits**2)/1000) * ProductAUnits) + ((40 + (ProductBUnts**2)/1000) * ProductBUnts) + ((50 + (ProductCUnits**2)/1000) * ProductCUnits) + ((60 + (ProductDUnits**2)/1000) * ProductDUnits) <= 50000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Total Net Profit: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Total Net Profit": "10382.436"
        },
        "question": "A manufacturing company is planning to produce four types of products: ProductA, ProductB, ProductC, and ProductD. They need to decide how many units of each product to produce in the next month to optimize their profit. The company has a total production capacity of 1000 units for the month. Due to market demand, the company must produce at least 100 units of ProductA and no more than 200 units. The company has a budget of $50,000 for production costs for the month. The profit per unit for ProductA is $50, for ProductB is $70, for ProductC is $90, and for ProductD is $110. However, the production cost per unit increases non-linearly with the number of units produced due to economies of scale. Specifically, the production cost per unit for ProductA is $30 + (ProductAUnits^2)/1000, for ProductB is $40 + (ProductBUnts^2)/1000, for ProductC is $50 + (ProductCUnits^2)/1000, and for ProductD is $60 + (ProductDUnits^2)/1000. The company wants to maximize the total net profit.",
        "type": "nonlinear-notable",
        "index": 308,
        "length": 984,
        "var_num": 4
    },
    {
        "question": "Glueco produces three types of glue on two different production lines. Each line can be utilized by up to seven workers at a time. Workers are paid $500 per week on production line 1, and $900 per week on production line 2. A week of production costs $1,000 to set up production line 1 and $2,000 to set up production line 2. During a week on a production line, each worker produces the number of units of glue shown in the following Table. Each week, at least 120 units of glue 1, at least 150 units of glue 2, and at least 200 units of glue 3 must be produced. Minimize the total cost of meeting weekly demands.\n\nTable (The number of units of glue produced by each worker on each production line during a week):\n| Glue Type | Production Line 1 | Production Line 2 |\n| ---------- | ----------------- | ----------------- |\n| Glue 1     | 20                | 50                |\n| Glue 2     | 30                | 35                |\n| Glue 3     | 40                | 45                |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal number of workers working on each production line. Let's denote the number of workers working on production line 1 as x and the number of workers working on production line 2 as y.\n```Variables\nx // number of workers working on production line 1\ny // number of workers working on production line 2\nx, y >= 0 and they are integers // non-negativity integer variables\n```\n\n# Objective Function:\nWe want to minimize the total cost of meeting weekly demands. The total cost consists of the cost of workers' salaries and the setup cost for each production line. The cost of workers' salaries is $500 per week for production line 1 and $900 per week for production line 2. The setup cost for production line 1 is $1,000 and the setup cost for production line 2 is $2,000. Therefore, the objective function is given by the sum of these costs: 500x + 900y + 1000 + 2000.\n```Objective Function\nMinimize: 500x + 900y + 3000\n```\n\n# Constraints:\nWe have several constraints that need to be satisfied:\n- The minimum number of units of glue 1, glue 2, and glue 3 that must be produced each week: 20x + 50y >= 120, 30x + 35y >= 150, and 40x + 45y >= 200.\n- The number of workers working on each production line cannot exceed 7: x <= 7 and y <= 7.\n- Non-negativity constraint: x, y >= 0.\n```Constraints\n20x + 50y >= 120 // minimum number of glue 1\n30x + 35y >= 150 // minimum number of glue 2\n40x + 45y >= 200 // minimum number of glue 3\nx <= 7 // maximum number of workers on production line 1\ny <= 7 // maximum number of workers on production line 2\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"WorkersOnLine1\", lowBound=0, upBound=7, cat='Integer') # number of workers on production line 1\ny = LpVariable(\"WorkersOnLine2\", lowBound=0, upBound=7, cat='Integer') # number of workers on production line 2\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimizeProductionCost\", LpMinimize)\n\n# Define the objective function\nobjective = 500 * x + 900 * y + 3000\nproblem += objective # minimize the total cost\n\n# Define the constraints\nproblem += 20 * x + 50 * y >= 120 # minimum number of glue 1\nproblem += 30 * x + 35 * y >= 150 # minimum number of glue 2\nproblem += 40 * x + 45 * y >= 200 # minimum number of glue 3\nproblem += x <= 7 # maximum number of workers on production line 1\nproblem += y <= 7 # maximum number of workers on production line 2\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of workers on production line 1:\", x.value())\nprint(\"The number of workers on production line 2:\", y.value())\nprint(\"The total cost:\", objective.value())\n",
        "results": {
            "The number of workers on production line 1": "4.0",
            "The number of workers on production line 2": "1.0",
            "The total cost": "5900.0"
        },
        "type": "linear-table",
        "index": 309,
        "length": 987,
        "var_num": 2
    },
    {
        "question": "A pizza palace is going to purchase pizza ovens. There are two models available. Model A can make 10 pizzas per cycle, requires 80 grams of fuel per cycle, and costs $10000. Model B can make 8 pizzas per cycle, requires 70 grams of fuel per cycle, and costs $8000. The pizza palace must make at least 100 pizzas per cycle and use at most 1000 grams of fuel per cycle. How many of each model pizza oven should they purchase to minimize costs?",
        "formulation": "{\"variable\": [{\"description\": \"number of Model A ovens\", \"name\": \"x\"}, {\"description\": \"number of Model B ovens\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total cost\", \"function\": \"10000x + 8000y\", \"sense\": \"Minimize\"}], \"constraint\": [{\"description\": \"pizza production constraint\", \"function\": \"10x + 8y >= 100\"}, {\"description\": \"fuel usage constraint\", \"function\": \"80x + 70y <= 1000\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_model_A_ovens = LpVariable(\"NumModelAOvens\", lowBound=0, cat='Integer') # number of Model A ovens\nnum_model_B_ovens = LpVariable(\"NumModelBOvens\", lowBound=0, cat='Integer') # number of Model B ovens\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"PizzaPalaceOvenPurchase\", LpMinimize)\n\n# Define the objective function\nobjective = 10000 * num_model_A_ovens + 8000 * num_model_B_ovens\nproblem += objective # minimize the total cost\n\n# Define the constraints\nproblem += 10 * num_model_A_ovens + 8 * num_model_B_ovens >= 100 # pizza production constraint\nproblem += 80 * num_model_A_ovens + 70 * num_model_B_ovens <= 1000 # fuel usage constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of Model A ovens to purchase:\", num_model_A_ovens.value())\nprint(\"The number of Model B ovens to purchase:\", num_model_B_ovens.value())\nprint(\"Total cost:\", objective.value())\n",
        "results": {
            "The number of Model A ovens to purchase": "10.0",
            "The number of Model B ovens to purchase": "0.0",
            "Total cost": "100000.0"
        },
        "type": "linear-notable",
        "index": 310,
        "length": 441,
        "var_num": 2
    },
    {
        "question": "We need to build a box with a square base and no top. We have 45 square meters of material. We want to maximize the volume of the box. Determine the dimensions of the box that will maximize the enclosed volume.",
        "scenario": "## Define Variables:\nWe need to build a box with a square base and no top.\n// variables: {\"length of the side of the square base\": \"x\", \"height of the box\": \"h\"}, where x, h >= 0\n\n## Define Objective Function:\nWe want to maximize the volume of the box.\n// Maximize: x^2 * h\n\n## Generate Constraint-1:\nWe have 45 square meters of material.\n// The area of the material used to build the box is the sum of the area of the base and the area of the four sides. The area of the base is x^2, and the area of the four sides is 4*x*h.\n// So, the constraint is x^2 + 4*x*h <= 45",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"CONTINUOUS\", name=\"x\", lb=0, ub=45) # length of the side of the square base\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\", lb=0, ub=45) # height of the box\n\n# Define objective function\nobj = model.addVar(vtype=\"CONTINUOUS\", name=\"obj\")\nmodel.addCons(obj == x**2 * h)\nmodel.setObjective(obj, \"maximize\")\n\n# Add constraints\nmodel.addCons(x**2 + 4*x*h <= 45)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The length of the side of the square base:\", model.getVal(x))\n    print(\"The height of the box:\", model.getVal(h))\n    print(\"The maximum volume of the box: \", model.getVal(x**2 * h))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The length of the side of the square base": "3.8731189014374054",
            "The height of the box": "1.9363561362963377",
            "The maximum volume of the box": "29.047375266161364"
        },
        "type": "nonlinear-notable",
        "index": 311,
        "length": 210,
        "var_num": 2
    },
    {
        "question": "Two paints of different quality, cheap and expensive, have quality ratings of 50 and 90, respectively. The cheap paint costs $0.30 per liter while the expensive paint costs $1.50 per liter. In order to paint his fence, John wants to use a mix of paint with a quality of at least 80. This ensures that the paint on the fence will withstand a few storms. What blend of the two paints should he mix in order to minimize his cost? [Hint: Let x be the fraction of each liter that is cheap paint and y be the fraction that is expensive paint.]",
        "formulation": "{\"variable\": [{\"description\": \"fraction of each liter that is cheap paint\", \"name\": \"x\"}, {\"description\": \"fraction of each liter that is expensive paint\", \"name\": \"y\"}], \"objective\": [{\"description\": \"cost of the paint\", \"function\": \"0.30x + 1.50y\", \"sense\": \"Minimize\"}], \"constraint\": [{\"description\": \"quality constraint\", \"function\": \"50x + 90y >= 80\"}, {\"description\": \"mixing constraint\", \"function\": \"x + y = 1\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"CheapPaintFraction\", lowBound=0, cat='Continuous') # fraction of each liter that is cheap paint\ny = LpVariable(\"ExpensivePaintFraction\", lowBound=0, cat='Continuous') # fraction of each liter that is expensive paint\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimizePaintCost\", LpMinimize)\n\n# Define the objective function\nobjective = 0.30 * x + 1.50 * y\nproblem += objective # minimize the cost of paint\n\n# Define the constraints\nproblem += 50 * x + 90 * y >= 80 # quality constraint\nproblem += x + y == 1 # mixing constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The fraction of each liter that is cheap paint:\", x.value())\nprint(\"The fraction of each liter that is expensive paint:\", y.value())\nprint(\"The minimized cost:\", objective.value())\n",
        "results": {
            "The fraction of each liter that is cheap paint": "0.25",
            "The fraction of each liter that is expensive paint": "0.75",
            "The minimized cost": "1.2"
        },
        "type": "linear-notable",
        "index": 312,
        "length": 537,
        "var_num": 2
    },
    {
        "question": "A fire department employs regular and emergency fire fighters. A regular fire fighter works 10 hours per shift and earns $300. An emergency fire fighter works 6 hours per shift and earns $100. Due to wildfires in the region, the fire department needs at least 300 hours of fire fighter time. If the fire department has a budget of $7000, how many of each should the fire department hire to minimize the total number of fire fighters?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_regular_ff = LpVariable(\"NumRegularFireFighters\", lowBound=0, cat='Integer') # number of regular fire fighters\nnum_emergency_ff = LpVariable(\"NumEmergencyFireFighters\", lowBound=0, cat='Integer') # number of emergency fire fighters\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FireFightersProblem\", LpMinimize)\n\n# Define the objective function\nobjective = num_regular_ff + num_emergency_ff\nproblem += objective # minimize the total number of fire fighters\n\n# Define the constraints\nproblem += 10 * num_regular_ff + 6 * num_emergency_ff >= 300 # the total firefighting hours must be at least 300\nproblem += 300 * num_regular_ff + 100 * num_emergency_ff <= 7000 # the total cost must be at most $7000\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of regular fire fighters:\", num_regular_ff.value())\nprint(\"The number of emergency fire fighters:\", num_emergency_ff.value())\nprint(\"The total number of fire fighters:\", objective.value())",
        "results": {
            "The number of regular fire fighters": "15.0",
            "The number of emergency fire fighters": "25.0",
            "The total number of fire fighters": "40.0"
        },
        "formulation": "minimize x+y\nSubject to: \n10x+6y >= 300\n300x+100y <= 7000 (end)",
        "type": "linear-notable",
        "index": 313,
        "length": 433,
        "var_num": 2
    },
    {
        "question": "A window consists of a rectangular piece of clear glass with a semicircular piece of colored glass on top; the colored glass transmits only  1/2 as much light per unit area as the the clear glass. If the distance from top to bottom (across both the rectangle and the semicircle) is 2 meters and the window may be no more than 1.5 meters wide, find the dimensions of the rectangular portion of the window that lets through the most light.",
        "scenario": "## Define Variables:\nYou need to build a window, which is consists of a rectangular piece of clear glass with a semicircular piece of colored glass on top.\n// variables: {\"width of the rectangle\": \"w\", \"height of the rectangle\": \"h\"}, where w, h >= 0\n\n## Define Objective Function:\nThe colored glass transmits only 1/2 as much light per unit area as the clear glass.  Find the dimensions of the rectangular portion of the window that lets through the most light.\n// The area of the clear glass is w * h, and the area of the semicircular colored glass is 1/2 * \u03c0 * (w/2)^2. \n// Assume the clear glass transmits 1 unit of light per unit area, then the colored glass transmits 1/2 unit of light per unit area.\n// Therefore, the objective function is: Maximize w * h + 1/2 * \u03c0 * (w/2)^2\n\n## Generate Constraint-1:\nThe distance from top to bottom (across both the rectangle and the semicircle) shoule be at most 2 meters.\n// The height of the rectangle is h, and the radius of the semicircle is w/2. \n// Therefore, the constraint is h + w/2 <= 2\n\n## Generate Constraint-2:\nThe window should be no more than 1.5 meters wide.\n// w <= 1.5",
        "code": "from pyscipopt import Model\nimport math\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nw = model.addVar(vtype=\"CONTINUOUS\", name=\"w\") # width of the rectangle\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the rectangle\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == w * h + 0.5 * math.pi * (w/2)**2)\n\n# Add constraints\nmodel.addCons(h + w/2 <= 2)\nmodel.addCons(w <= 1.5)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The width of the rectangle:\", model.getVal(w))\n    print(\"The height of the rectangle:\", model.getVal(h))\n    print(\"The maximum light transmitted: \", model.getVal(obj))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The width of the rectangle": "1.50000",
            "The height of the rectangle": "1.25000",
            "The maximum light transmitted": "2.758572988826752"
        },
        "type": "nonlinear-notable",
        "index": 314,
        "length": 437,
        "var_num": 2
    },
    {
        "question": "An international goods exporter uses ships and planes to transport goods. A ship can take 40 containers worth of goods and uses 500 liters of fuel per trip. A plane can take 20 containers worth of goods and uses 300 liters of fuel per trip. The company needs to transport at least 500 containers worth of goods. In addition, there can be at most 10 plane trips made and a minimum of 50% of the trips made must be by ship. How many of each trip should be made to minimize the total amount of fuel consumed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_ship_trips = LpVariable(\"NumShipTrips\", lowBound=0, cat='Integer') # number of ship trips\nnum_plane_trips = LpVariable(\"NumPlaneTrips\", lowBound=0, upBound=10, cat='Integer') # number of plane trips\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"GoodsTransport\", LpMinimize)\n\n# Define the objective function\nobjective = 500 * num_ship_trips + 300 * num_plane_trips\nproblem += objective # minimize the total amount of fuel consumed\n\n# Define the constraints\nproblem += 40 * num_ship_trips + 20 * num_plane_trips >= 500 # at least 500 containers of goods must be transported\nproblem += num_ship_trips >= (num_ship_trips + num_plane_trips) * 0.5 # at least half of the trips must be by ship\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of ship trips:\", num_ship_trips.value())\nprint(\"The number of plane trips:\", num_plane_trips.value())\nprint(\"Total fuel consumed (liters):\", objective.value())",
        "results": {
            "The number of ship trips": "12.0",
            "The number of plane trips": "1.0",
            "Total fuel consumed (liters)": "6300.0"
        },
        "formulation": "minimize 500x+300y\nSubject to: \n40x+20y >= 500\ny <= 10\nx >= 0.5(x+y) (end)",
        "type": "linear-notable",
        "index": 315,
        "length": 505,
        "var_num": 2
    },
    {
        "question": "Due to an accident, at least 550 locals must be moved across a lake. They can either be transported over the lake by a kayak or a motorboat. Kayaks can transport 4 people every trip and motorboats can transport 5 people every trip. Kayaks take 5 minutes per trip whereas motorboats take 3 minutes per trip. Due to the limited number of motorboats available to the locals, there can be at most 25 motorboat trips and at least 75% of the trips should be by kayak. How many of each transportation method should be used to minimize the total amount of time needed to transport all the locals?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_kayak_trips = LpVariable(\"NumKayakTrips\", lowBound=0, cat='Integer') # number of kayak trips\nnum_motorboat_trips = LpVariable(\"NumMotorboatTrips\", lowBound=0, upBound=25, cat='Integer') # number of motorboat trips\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"LakeTransport\", LpMinimize)\n\n# Define the objective function\nobjective = 5 * num_kayak_trips + 3 * num_motorboat_trips\nproblem += objective # minimize the total amount of time\n\n# Define the constraints\nproblem += 4 * num_kayak_trips + 5 * num_motorboat_trips >= 550 # transport at least 550 locals\nproblem += num_kayak_trips >= 0.75 * (num_kayak_trips + num_motorboat_trips) # at least 75% trips by kayak\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of kayak trips:\", num_kayak_trips.value())\nprint(\"The number of motorboat trips:\", num_motorboat_trips.value())\nprint(\"The total time needed to transport all the locals:\", objective.value())",
        "results": {
            "The number of kayak trips": "107.0",
            "The number of motorboat trips": "25.0",
            "The total time needed to transport all the locals": "610.0"
        },
        "formulation": "minimize 5z+3y\nSubject to: \n4z+5y >= 550\ny <= 25\nz >= 0.75(z+y+z) (end)",
        "type": "linear-notable",
        "index": 316,
        "length": 588,
        "var_num": 2
    },
    {
        "question": "A gem factory has two drills, a high intensity one and a low intensity one. Each day, the high intensity drill can process 50 gems and requires 50 units of water to dissipate heat. Each day, the low intensity drill can process 30 gems and requires 20 units of water to dissipate heat. Each day the factory must process 800 gems and they have available 700 units of water. Since the high intensity drill produces a lot of noise pollution, at most 40% of the drills can be high intensity ones. Further, at least 10 should be low intensity drills. How many of each drill should be used to minimize the total number of drills needed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_high_intensity_drills = LpVariable(\"NumHighIntensityDrills\", lowBound=0, cat='Integer') # number of high intensity drills\nnum_low_intensity_drills = LpVariable(\"NumLowIntensityDrills\", lowBound=10, cat='Integer') # number of low intensity drills\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"GemProcessing\", LpMinimize)\n\n# Define the objective function\nobjective = num_high_intensity_drills + num_low_intensity_drills\nproblem += objective # minimize the total number of drills used\n\n# Define the constraints\nproblem += 50 * num_high_intensity_drills + 30 * num_low_intensity_drills >= 800 # must process at least 800 gems per day\nproblem += 50 * num_high_intensity_drills + 20 * num_low_intensity_drills <= 700 # cannot use more than 700 units of water per day\nproblem += num_high_intensity_drills <= (0.4) * (num_high_intensity_drills + num_low_intensity_drills) # at most 40% drills can be high intensity ones\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of high intensity drills:\", num_high_intensity_drills.value())\nprint(\"The number of low intensity drills:\", num_low_intensity_drills.value())\nprint(\"Total number of drills needed:\", objective.value())",
        "results": {
            "The number of high intensity drills": "7.0",
            "The number of low intensity drills": "15.0",
            "Total number of drills needed": "22.0"
        },
        "formulation": "minimize x+y\nSubject to: \n50x+30y >= 800\n50x+20y <= 700\nx <= 0.4(x+y)\ny >= 10 (end)",
        "type": "linear-notable",
        "index": 317,
        "length": 629,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA manufacturing company produces three types of electronic devices: smartphones, tablets, and laptops. The company has four different production lines, each with varying efficiency and capacity.\n// variables: {\\\"workers on production line 1\\\": \\\"P1\\\", \\\"workers on production line 2\\\": \\\"P2\\\", \\\"workers on production line 3\\\": \\\"P3\\\", \\\"workers on production line 4\\\": \\\"P4\\\"}, where P1, P2, P3, P4 >= 0 & P1, P2, P3, P4 are integers\n\n## Define Objective Function:\nEach production line has different productivity rates for each device. \nOn production line 1, each worker produces 10 smartphones, 5 tablets, and 3 laptops per hour. \nOn production line 2, each worker produces 8 smartphones, 6 tablets, and 4 laptops per hour. \nOn production line 3, each worker produces 6 smartphones, 7 tablets, and 5 laptops per hour. \nOn production line 4, each worker produces 5 smartphones, 8 tablets, and 6 laptops per hour.\nThe company needs to produce at least 1000 smartphones, 800 tablets, and 600 laptops daily. The production lines can only be operated or shut down at the same time. Determine the minimum number of hours needed to meet the daily demand.\n// The production time for smartphones: T1 = 1000 / (10 * P1 + 8 * P2 + 6 * P3 + 5 * P4)\n// The production time for tablets: T2 = 800 / (5 * P1 + 6 * P2 + 7 * P3 + 8 * P4)\n// The production time for laptops: T3 = 600 / (3 * P1 + 4 * P2 + 5 * P3 + 6 * P4)\n// So, the objective function is: Minimize max(T1, T2, T3)\n\n## Generate Constraint-1:\nThere are a total of 50 workers available.\n// P1 + P2 + P3 + P4 <= 50\n\n## Generate Constraint-2:\nEach production line can be staffed by up to 20 workers at a time.\n// P1 <= 20; P2 <= 20; P3 <= 20; P4 <= 20\n\n## Generate Constraint-3:\nThe company wants to ensure that at least one production line is fully staffed (20 workers) if it is operational.\n// (P1 == 20) + (P2 == 20) + (P3 == 20) + (P4 == 20) >= 1",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nP1 = model.addVar(vtype=\"INTEGER\", name=\"P1\") # workers on production line 1\nmodel.addCons(P1 >= 0)\nP2 = model.addVar(vtype=\"INTEGER\", name=\"P2\") # workers on production line 2\nmodel.addCons(P2 >= 0)\nP3 = model.addVar(vtype=\"INTEGER\", name=\"P3\") # workers on production line 3\nmodel.addCons(P3 >= 0)\nP4 = model.addVar(vtype=\"INTEGER\", name=\"P4\") # workers on production line 4\nmodel.addCons(P4 >= 0)\n\n# Define objective function\n# Since the objective function is not linear, we use a big-M method to linearize it\nMaxTime = model.addVar(name=\"MaxTime\") # maximum of T1, T2, T3\nmodel.setObjective(MaxTime, \"minimize\")\nmodel.addCons(MaxTime >= 1000 / (10 * P1 + 8 * P2 + 6 * P3 + 5 * P4))\nmodel.addCons(MaxTime >= 800 / (5 * P1 + 6 * P2 + 7 * P3 + 8 * P4))\nmodel.addCons(MaxTime >= 600 / (3 * P1 + 4 * P2 + 5 * P3 + 6 * P4))\n\n# Add constraints\nmodel.addCons(P1 + P2 + P3 + P4 <= 50)\nmodel.addCons(P1 <= 20)\nmodel.addCons(P2 <= 20)\nmodel.addCons(P3 <= 20)\nmodel.addCons(P4 <= 20)\n\n# Additional constraints for fully staffing a line if operational\n#\u3000The company wants to ensure that at least one production line is fully staffed (20 workers) if it is operational.\nif_P1 = model.addVar(vtype=\"B\", name=\"if_P1\")\nif_P2 = model.addVar(vtype=\"B\", name=\"if_P2\")\nif_P3 = model.addVar(vtype=\"B\", name=\"if_P3\")\nif_P4 = model.addVar(vtype=\"B\", name=\"if_P4\")\nmodel.addCons(P1 * if_P1 == 20 * if_P1)\nmodel.addCons(P2 * if_P2 == 20 * if_P2)\nmodel.addCons(P3 * if_P3 == 20 * if_P3)\nmodel.addCons(P4 * if_P4 == 20 * if_P4)\nmodel.addCons(if_P1 + if_P2 + if_P3 + if_P4 >= 1)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Workers on Production Line 1: \", model.getVal(P1))\n    print(\"Workers on Production Line 2: \", model.getVal(P2))\n    print(\"Workers on Production Line 3: \", model.getVal(P3))\n    print(\"Workers on Production Line 4: \", model.getVal(P4))\n    print(\"Minimum Production Time: \", model.getVal(MaxTime))\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Workers on Production Line 1": "20.0",
            "Workers on Production Line 2": "6.0",
            "Workers on Production Line 3": "4.0",
            "Workers on Production Line 4": "20.0",
            "Minimum Production Time": "2.688172043010753"
        },
        "question": "A manufacturing company produces three types of electronic devices: smartphones, tablets, and laptops. The company has four different production lines, each with varying efficiency and capacity. The productivity rates for each device on each production line are given in the following Table.\n\n| Production Line | Smartphones per Worker per Hour | Tablets per Worker per Hour | Laptops per Worker per Hour |\n|-----------------|--------------------------------|------------------------------|-----------------------------|\n| 1               | 10                             | 5                            | 3                           |\n| 2               | 8                              | 6                            | 4                           |\n| 3               | 6                              | 7                            | 5                           |\n| 4               | 5                              | 8                            | 6                           |\n\nThe company needs to produce at least 1000 smartphones, 800 tablets, and 600 laptops daily. The production lines can only be operated or shut down at the same time. Determine the minimum number of hours needed to meet the daily demand. The company has a total of 50 workers available. Each production line can be staffed by up to 20 workers at a time. The company wants to ensure that at least one production line is fully staffed (20 workers) if it is operational.\n",
        "type": "nonlinear-table",
        "index": 318,
        "length": 1443,
        "var_num": 4
    },
    {
        "question": "A mail delivery service in an island village delivers mail by regular and speed boats. A regular boat can carry 20 pieces of mail per trip and uses 10 liters of gas. A speed boat can carry 30 pieces of mail per trip and uses 20 liters of gas. There can be at most 20 regular boat trips. Since customers want their mail as fast as possible, at least 50% of the trips must be made by speed boats. If the service needs to deliver 1000 pieces of mail, how many trips of each should be made to minimize the total amount of gas consumed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_regular_boat_trips = LpVariable(\"NumRegularBoatTrips\", lowBound=0, cat='Integer') # number of regular boat trips\nnum_speed_boat_trips = LpVariable(\"NumSpeedBoatTrips\", lowBound=0, cat='Integer') # number of speed boat trips\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MailDeliveryService\", LpMinimize)\n\n# Define the objective function\nobjective = 10 * num_regular_boat_trips + 20 * num_speed_boat_trips\nproblem += objective # minimize the total amount of gas consumed\n\n# Define the constraints\nproblem += 20 * num_regular_boat_trips + 30 * num_speed_boat_trips >= 1000 # at least 1000 pieces of mail must be delivered\nproblem += num_regular_boat_trips <= 20 # there can be at most 20 regular boat trips\nproblem += num_speed_boat_trips >= (num_regular_boat_trips + num_speed_boat_trips) * 0.5 # at least 50% of the trips must be by speed boats\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of regular boat trips:\", num_regular_boat_trips.value())\nprint(\"The number of speed boat trips:\", num_speed_boat_trips.value())\nprint(\"The total amount of gas consumed:\", objective.value())",
        "results": {
            "The number of regular boat trips": "20.0",
            "The number of speed boat trips": "20.0",
            "The total amount of gas consumed": "600.0"
        },
        "formulation": "minimize 10x+20y\nSubject to: \nx <= 20\ny >= 0.5(x+y)\n20x+30y >= 1000 (end)",
        "type": "linear-notable",
        "index": 319,
        "length": 531,
        "var_num": 2
    },
    {
        "question": "An autobody shop needs to purchase two types of car jacks, an automatic electric one, or a gas-powered one. The automatic electric one can process 5 cars every hour and uses 6 units of electricity whereas the gas-powered one can process 4 cars each hour using 7 units of gas. Since there is a limit to how many automatic electric ones there can be due to the limited number of power outlets, the shop must use less than 15 automatic electric ones. The shop can use at most 50 units of electricity and 80 units of gas. How many of each type of jack should the shop purchase to maximize the amount of cars processed every hour?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_auto_jacks = LpVariable(\"NumAutoJacks\", lowBound=0, upBound=15, cat='Integer') # number of automatic jacks\nnum_gas_jacks = LpVariable(\"NumGasJacks\", lowBound=0, cat='Integer') # number of gas jacks\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"AutoBodyShop\", LpMaximize)\n\n# Define the objective function\nobjective = 5 * num_auto_jacks + 4 * num_gas_jacks\nproblem += objective # maximize the number of cars processed every hour\n\n# Define the constraints\nproblem += 6 * num_auto_jacks <= 50 # electricity usage must not exceed 50 units\nproblem += 7 * num_gas_jacks <= 80 # gas usage must not exceed 80 units\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of automatic jacks:\", num_auto_jacks.value())\nprint(\"The number of gas jacks:\", num_gas_jacks.value())\nprint(\"The number of cars processed per hour:\", objective.value())",
        "results": {
            "The number of automatic jacks": "8.0",
            "The number of gas jacks": "11.0",
            "The number of cars processed per hour": "84.0"
        },
        "formulation": "maximize 4y+5x\nSubject to: \nx <= 15\n6x <= 50\n7y <= 80 (end)",
        "type": "linear-notable",
        "index": 320,
        "length": 625,
        "var_num": 2
    },
    {
        "question": "A company is considering opening warehouses in four cities: New York, Los Angeles, Chicago, and Atlanta. Each warehouse can ship 100 units per week. The weekly fixed cost of keeping each warehouse open is $400 for New York, $500 for Los Angeles, $300 for Chicago, and $150 for Atlanta. Region 1 of the country requires 80 units per week, region 2 requires 70 units per week, and region 3 requires 40 units per week. The costs (including production and shipping costs) of sending one unit from a warehouse to a region are shown in the following Table. We want to meet weekly demands at minimum cost, subject to the preceding information and the following restrictions: 1. If the New York warehouse is opened, then the Los Angeles warehouse must be opened. 2. At most two warehouses can be opened. 3. Either the Atlanta or the Los Angeles warehouse must be opened. Formulate an LP that can be used to minimize the weekly costs of meeting demand.\n\nTable (Costs of sending one unit from a warehouse to a region):\n| From / To ($) | Region 1 | Region 2 | Region 3 |\n| ------------- | -------- | -------- | -------- |\n| New York      | 20       | 40       | 50       |\n| Los Angeles   | 48       | 15       | 26       |\n| Chicago       | 26       | 35       | 18       |\n| Atlanta       | 24       | 50       | 35       |",
        "formulation": "# Define Variables:\nFirst, we need to determine which warehouses to open and how many units to supply from each warehouse to meet the weekly demands. Let's denote the decision variable for whether the warehouse in city I is selected for opening as yi, and the number of units supplied from region j as xij.\n```\nVariables:\nyi // whether the warehouse in city I is selected for opening the warehouse\nyi = 0 or 1 // binary variable\nxij // number of units supplied from region j\nxij >= 0 and is integer // non-negative integer variable\ni, j = 1, 2, 3, 4\n```\n\n# Objective Function:\nWe want to minimize the weekly costs of meeting demand, which includes the fixed costs of keeping each warehouse open and the costs of sending units from the warehouses to the regions. The fixed costs are $400 for New York, $500 for Los Angeles, $300 for Chicago, and $150 for Atlanta. The costs of sending one unit from a warehouse to a region are given in Table 3. \nSo the objective function is the sum of the fixed costs and the costs of sending units from the warehouses to the regions:\n```Objective Function\nMinimize: 400y1 + 500y2 + 300y3 + 150y4 + 20x11 + 40x12 + 50x13 + 48x21 + 15x22 + 26x23 + 26x31 + 35x32 + 18x33 + 24x41 + 50x42 + 35x43\n```\n\n# Constraints:\nWe need to consider the following restrictions:\n1. If the New York warehouse is opened, then the Los Angeles warehouse must be opened: y1 <= y2\n2. At most two warehouses can be opened: y1 + y2 + y3 + y4 <= 2\n3. Either the Atlanta or the Los Angeles warehouse must be opened: y2 + y4 >= 1\n4. Maximum shipping units per week of each warehouse: \n   - New York: x11 + x12 + x13 <= 100y1\n   - Los Angeles: x21 + x22 + x23 <= 100y2\n   - Chicago: x31 + x32 + x33 <= 100y3\n   - Atlanta: x41 + x42 + x43 <= 100y4\nTherefore, the Constraints are as follows:\n```Constraints\ny1 <= y2\ny1 + y2 + y3 + y4 <= 2\ny2 + y4 >= 1\nx11 + x12 + x13 <= 100y1\nx21 + x22 + x23 <= 100y2\nx31 + x32 + x33 <= 100y3\nx41 + x42 + x43 <= 100y4\ny1, y2, y3, y4 = 0 or 1\nxij >= 0\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\ny1 = LpVariable(\"NewYorkWarehouse\", 0, 1, LpBinary)\ny2 = LpVariable(\"LosAngelesWarehouse\", 0, 1, LpBinary)\ny3 = LpVariable(\"ChicagoWarehouse\", 0, 1, LpBinary)\ny4 = LpVariable(\"AtlantaWarehouse\", 0, 1, LpBinary)\nx11 = LpVariable(\"UnitsFromNewYorkToRegion1\", lowBound=0, cat='Integer')\nx12 = LpVariable(\"UnitsFromNewYorkToRegion2\", lowBound=0, cat='Integer')\nx13 = LpVariable(\"UnitsFromNewYorkToRegion3\", lowBound=0, cat='Integer')\nx21 = LpVariable(\"UnitsFromLosAngelesToRegion1\", lowBound=0, cat='Integer')\nx22 = LpVariable(\"UnitsFromLosAngelesToRegion2\", lowBound=0, cat='Integer')\nx23 = LpVariable(\"UnitsFromLosAngelesToRegion3\", lowBound=0, cat='Integer')\nx31 = LpVariable(\"UnitsFromChicagoToRegion1\", lowBound=0, cat='Integer')\nx32 = LpVariable(\"UnitsFromChicagoToRegion2\", lowBound=0, cat='Integer')\nx33 = LpVariable(\"UnitsFromChicagoToRegion3\", lowBound=0, cat='Integer')\nx41 = LpVariable(\"UnitsFromAtlantaToRegion1\", lowBound=0, cat='Integer')\nx42 = LpVariable(\"UnitsFromAtlantaToRegion2\", lowBound=0, cat='Integer')\nx43 = LpVariable(\"UnitsFromAtlantaToRegion3\", lowBound=0, cat='Integer')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"WarehouseLocation\", LpMinimize)\n\n# Define the objective function\nobjective = 400*y1 + 500*y2 + 300*y3 + 150*y4 + 20*x11 + 40*x12 + 50*x13 + 48*x21 + 15*x22 + 26*x23 + 26*x31 + 35*x32 + 18*x33 + 24*x41 + 50*x42 + 35*x43\nproblem += objective\n\n# Define the constraints\nproblem += y1 <= y2\nproblem += y1 + y2 + y3 + y4 <= 2\nproblem += y2 + y4 >= 1\nproblem += x11 + x12 + x13 <= 100*y1\nproblem += x21 + x22 + x23 <= 100*y2\nproblem += x31 + x32 + x33 <= 100*y3\nproblem += x41 + x42 + x43 <= 100*y4\nproblem += x11 + x21 + x31 + x41 == 80\nproblem += x12 + x22 + x32 + x42 == 70\nproblem += x13 + x23 + x33 + x43 == 40\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Status:\", LpStatus[status])\nprint(\"The weekly cost of meeting demand is: $\", value(problem.objective))\nprint(\"Open New York Warehouse:\", y1.value())\nprint(\"Open Los Angeles Warehouse:\", y2.value())\nprint(\"Open Chicago Warehouse:\", y3.value())\nprint(\"Open Atlanta Warehouse:\", y4.value())\nprint(\"Units from New York to Region 1:\", x11.value())\nprint(\"Units from New York to Region 2:\", x12.value())\nprint(\"Units from New York to Region 3:\", x13.value())\nprint(\"Units from Los Angeles to Region 1:\", x21.value())\nprint(\"Units from Los Angeles to Region 2:\", x22.value())\nprint(\"Units from Los Angeles to Region 3:\", x23.value())\nprint(\"Units from Chicago to Region 1:\", x31.value())\nprint(\"Units from Chicago to Region 2:\", x32.value())\nprint(\"Units from Chicago to Region 3:\", x33.value())\nprint(\"Units from Atlanta to Region 1:\", x41.value())\nprint(\"Units from Atlanta to Region 2:\", x42.value())\nprint(\"Units from Atlanta to Region 3:\", x43.value())\n",
        "results": {
            "The weekly cost of meeting demand is": "4750.0",
            "Open New York Warehouse": "0.0",
            "Open Los Angeles Warehouse": "1.0",
            "Open Chicago Warehouse": "0.0",
            "Open Atlanta Warehouse": "1.0",
            "Units from New York to Region 1": "0.0",
            "Units from New York to Region 2": "0.0",
            "Units from New York to Region 3": "0.0",
            "Units from Los Angeles to Region 1": "0.0",
            "Units from Los Angeles to Region 2": "70.0",
            "Units from Los Angeles to Region 3": "30.0",
            "Units from Chicago to Region 1": "0.0",
            "Units from Chicago to Region 2": "0.0",
            "Units from Chicago to Region 3": "0.0",
            "Units from Atlanta to Region 1": "80.0",
            "Units from Atlanta to Region 2": "0.0",
            "Units from Atlanta to Region 3": "10.0"
        },
        "type": "linear-table",
        "index": 321,
        "length": 1314,
        "var_num": 17
    },
    {
        "question": "Comp-Max Computers assembles computers and computer equipment. It is about to start production of three new types of computers, called model X, Y, and Z, respectively. Each type will require assembly time, inspection time, and storage space. The availability of each of these resources is limited. Specifically, available assembly time is 400 hours, available inspection time is 300 hours, and available storage space is 500 cubic feet (about 14.2 ms). The amount of each resource required for the different products is reported in the table below. For model X, assembly time is 1 hours, inspection time 2 hours, storage space 3 cubic feet. For model Y, assembly time is 2 hours, inspection time 3 hours, and storage space 4 cubic feet. For model Z, assembly time is 3 hours, inspection time 4 hours, and storage space 5 cubic feet. Model X earns a profit of $100 per unit, model Y earns a profit of $125 per unit, and model Z earns a profit of $200 per unit. Due to some prior agreements with customers, Comp-Max must produce at least 12 model X computers. In addition, management requires that the fraction of total production made up of model Z computers must not exceed 25%. Help the manager determine the quantity of each model to produce in order to maximize profit.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for model X, Y, and Z that adhere to the constraints given. Let's denote the number of model X computers as X, the number of model Y computers as Y, and the number of model Z computers as Z.\n```Variables\nX //number of model X computers to produce \nY //number of model Y computers to produce\nZ //number of model Z computers to produce\nX, Y, Z >= 0 and they are integers //non-negative integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function (profit) is given by the sum of the profit from each model. The profit from model X is $100 per unit * X units, the profit from model Y is $125 per unit * Y units, and the profit from model Z is $200 per unit * Z units. Therefore, the objective function is 100X + 125Y + 200Z.\n```Objective Function\nMaximize: 100X + 125Y + 200Z\n```\n\n# Constraints:\nWe have several constraints that limit the availability of resources and the production quantities of each model.\n```Constraints\n1X + 2Y + 3Z <= 400 //available assembly time\n2X + 3Y + 4Z <= 300 //available inspection time\n3X + 4Y + 5Z <= 500 //available storage space\nX >= 12 //minimum number of model X computers\nZ <= 0.25(X + Y + Z) //maximum number of model Z computers\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nX = LpVariable(\"X\", lowBound=12, cat='Integer') # number of model X computers to produce\nY = LpVariable(\"Y\", lowBound=0, cat='Integer') # number of model Y computers to produce\nZ = LpVariable(\"Z\", lowBound=0, cat='Integer') # number of model Z computers to produce\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CompMaxComputers\", LpMaximize)\n\n# Define the objective function\nobjective = 100*X + 125*Y + 200*Z\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 1*X + 2*Y + 3*Z <= 400 # available assembly time\nproblem += 2*X + 3*Y + 4*Z <= 300 # available inspection time\nproblem += 3*X + 4*Y + 5*Z <= 500 # available storage space\nproblem += X >= 12 # minimum number of model X computers\nproblem += Z <= 0.25 * (X + Y + Z) # maximum number of model Z computers\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of model X computers to produce:\", X.value())\nprint(\"The number of model Y computers to produce:\", Y.value())\nprint(\"The number of model Z computers to produce:\", Z.value())\nprint(\"The maximum profit:\", value(problem.objective))\n",
        "results": {
            "The number of model X computers to produce": "150.0",
            "The number of model Y computers to produce": "0.0",
            "The number of model Z computers to produce": "0.0",
            "The maximum profit": "15000.0"
        },
        "type": "linear-table",
        "index": 322,
        "length": 1272,
        "var_num": 3
    },
    {
        "question": "A municipality hires full-time and part-time staff to deliver mail. Part-time staff works 15 hours per week and gets paid 450 dollars whereas a full-time staff works 40 hours every week and gets paid 1280 dollars  for that week.  Since it is the week leading up to a holiday, planning ahead, the municipality needs 1000 hours of mail staff labor. The municipality has a budget of 31500 dollars for mail delivery for this season. How many of each type of staff should the municipality hire to decrease the total number of staff?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_full_time = LpVariable(\"NumFullTime\", lowBound=0, cat='Integer') # number of full-time staff\nnum_part_time = LpVariable(\"NumPartTime\", lowBound=0, cat='Integer') # number of part-time staff\n\n# Define the question as a minimum problem\nproblem = LpProblem(\"StaffingProblem\", LpMinimize)\n\n# Define the objective function\nobjective = num_full_time + num_part_time\nproblem += objective # minimize the total number of staff\n\n# Define the constraints\nproblem += 40 * num_full_time + 15 * num_part_time >= 1000 # at least 1000 hours of labor\nproblem += 1280 * num_full_time + 450 * num_part_time <= 31500 # budget does not exceed $31500\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of full-time staff to hire:\", num_full_time.value())\nprint(\"The number of part-time staff to hire:\", num_part_time.value())\nprint(\"The total number of staff hired:\", objective.value())",
        "results": {
            "The number of full-time staff to hire": "16.0",
            "The number of part-time staff to hire": "24.0",
            "The total number of staff hired": "40.0"
        },
        "formulation": "minimize x+y\nSubject to: \n40x+15y >= 1000\n450y+1280x <= 31500 (end)",
        "type": "linear-notable",
        "index": 323,
        "length": 527,
        "var_num": 2
    },
    {
        "question": "A farmer wants to mix his animal feeds, Feed A and Feed B, in such a way that the mixture will contain a minimum of 30 units of protein and 50 units of fat. Feed A costs $100 per kilogram and contains 10 units of protein and 8 units of fat. Feed B costs $80 per kilogram and contains 7 units of protein and 15 units of fat. Determine the minimum cost of the mixture.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nfeed_A = LpVariable(\"FeedA\", lowBound=0, cat='Continuous') # kilograms of Feed A\nfeed_B = LpVariable(\"FeedB\", lowBound=0, cat='Continuous') # kilograms of Feed B\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FeedMixing\", LpMinimize)\n\n# Define the objective function\nobjective = 100 * feed_A + 80 * feed_B\nproblem += objective # minimize the total cost\n\n# Define the constraints\nproblem += 10 * feed_A + 7 * feed_B >= 30 # protein constraint\nproblem += 8 * feed_A + 15 * feed_B >= 50 # fat constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The kilograms of Feed A in the mixture:\", feed_A.value())\nprint(\"The kilograms of Feed B in the mixture:\", feed_B.value())\nprint(\"The minimum cost of the mixture:\", objective.value())",
        "results": {
            "The kilograms of Feed A in the mixture": "1.0638298",
            "The kilograms of Feed B in the mixture": "2.7659574",
            "The minimum cost of the mixture": "327.65957199999997"
        },
        "formulation": "minimize 100x+80y\nSubject to: \n10x+7y >= 30\n8x+15y >= 50 (end)",
        "type": "linear-notable",
        "index": 324,
        "length": 366,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nGlueco has 5 different production lines for glue. He needs to assign workers to each production line.\n// variables: {\"number of workers on production line 1\": \"N1\", \"number of workers on production line 2\": \"N2\", \"number of workers on production line 3\": \"N3\", \"number of workers on production line 4\": \"N4\", \"number of workers on production line 5\": \"N5\"}, where N1, N2, N3, N4, N5 >= 0 & N1, N2, N3, N4, N5 are integers\n\n## Define Objective Function:\nGlueco produces 3 types of glue on the 5 production lines. \nOn production line 1, each worker produces 20 units of glue 1, 30 units of glue 2, and 40 units of glue 3 during a hour. \nOn production line 2, each worker produces 50 units of glue 1, 35 units of glue 2, and 45 units of glue 3 during a hour. \nOn production line 3, each worker produces 30 units of glue 1, 40 units of glue 2, and 50 units of glue 3 during a hour. \nOn production line 4, each worker produces 40 units of glue 1, 45 units of glue 2, and 50 units of glue 3 during a hour. \nOn production line 5, each worker produces 25 units of glue 1, 35 units of glue 2, and 45 units of glue 3 during a hour. \nNow, Glueco needs to produce at least 120 units of glue 1, at least 150 units of glue 2, and at least 200 units of glue 3. The five production lines can only be opened or closed at the same time. Please determine the minimum time to meet the weekly demand.\n// The production time for glue 1: T1 = 120 / (20 * N1 + 50 * N2 + 30 * N3 + 40 * N4 + 25 * N5)\n// The production time for glue 2: T2 = 150 / (30 * N1 + 35 * N2 + 40 * N3 + 45 * N4 + 35 * N5)\n// The production time for glue 3: T3 = 200 / (40 * N1 + 45 * N2 + 50 * N3 + 50 * N4 + 45 * N5)\n// So, the objective function is: Minimize max(T1, T2, T3)\n// Minimize max(120 / (20 * N1 + 50 * N2 + 30 * N3 + 40 * N4 + 25 * N5), 150 / (30 * N1 + 35 * N2 + 40 * N3 + 45 * N4 + 35 * N5), 200 / (40 * N1 + 45 * N2 + 50 * N3 + 50 * N4 + 45 * N5))\n\n## Generate Constraint-1:\nThere are total 80 workers available.\n// N1 + N2 + N3 + N4 + N5 <= 80\n\n## Generate Constraint-2:\nEach line can be utilized by up to 20 workers at a time.\n// N1 <= 20; N2 <= 20; N3 <= 20; N4 <= 20; N5 <= 20",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nN1 = model.addVar(vtype=\"INTEGER\", name=\"N1\") # number of workers on production line 1\nmodel.addCons(N1 >= 0)\nN2 = model.addVar(vtype=\"INTEGER\", name=\"N2\") # number of workers on production line 2\nmodel.addCons(N2 >= 0)\nN3 = model.addVar(vtype=\"INTEGER\", name=\"N3\") # number of workers on production line 3\nmodel.addCons(N3 >= 0)\nN4 = model.addVar(vtype=\"INTEGER\", name=\"N4\") # number of workers on production line 4\nmodel.addCons(N4 >= 0)\nN5 = model.addVar(vtype=\"INTEGER\", name=\"N5\") # number of workers on production line 5\nmodel.addCons(N5 >= 0)\n\n# Define objective function\n# Since the objective function is not linear, we need to introduce a new variable and constraints to linearize it\nT = model.addVar(name=\"T\")\nmodel.setObjective(T, \"minimize\")\nmodel.addCons(T >= 120 / (20 * N1 + 50 * N2 + 30 * N3 + 40 * N4 + 25 * N5))\nmodel.addCons(T >= 150 / (30 * N1 + 35 * N2 + 40 * N3 + 45 * N4 + 35 * N5))\nmodel.addCons(T >= 200 / (40 * N1 + 45 * N2 + 50 * N3 + 50 * N4 + 45 * N5))\n\n# Add constraints\nmodel.addCons(N1 + N2 + N3 + N4 + N5 <= 80)\nmodel.addCons(N1 <= 20)\nmodel.addCons(N2 <= 20)\nmodel.addCons(N3 <= 20)\nmodel.addCons(N4 <= 20)\nmodel.addCons(N5 <= 20)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Workers on Production Line 1: \", model.getVal(N1))\n    print(\"Number of Workers on Production Line 2: \", model.getVal(N2))\n    print(\"Number of Workers on Production Line 3: \", model.getVal(N3))\n    print(\"Number of Workers on Production Line 4: \", model.getVal(N4))\n    print(\"Number of Workers on Production Line 5: \", model.getVal(N5))\n    print(\"Minimum Time to Meet Weekly Demand: \", model.getVal(T))\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Workers on Production Line 1": "0.0",
            "Number of Workers on Production Line 2": "20.0",
            "Number of Workers on Production Line 3": "20.0",
            "Number of Workers on Production Line 4": "20.0",
            "Number of Workers on Production Line 5": "20.0",
            "Minimum Time to Meet Weekly Demand": "0.05263157894736842"
        },
        "question": "Glueco has 5 different production lines for glue. He needs to assign workers to each production line. On production line 1, each worker produces 20 units of glue 1, 30 units of glue 2, and 40 units of glue 3 during a hour. On production line 2, each worker produces 50 units of glue 1, 35 units of glue 2, and 45 units of glue 3 during a hour. On production line 3, each worker produces 30 units of glue 1, 40 units of glue 2, and 50 units of glue 3 during a hour. On production line 4, each worker produces 40 units of glue 1, 45 units of glue 2, and 50 units of glue 3 during a hour. On production line 5, each worker produces 25 units of glue 1, 35 units of glue 2, and 45 units of glue 3 during a hour. Now, Glueco needs to produce at least 120 units of glue 1, at least 150 units of glue 2, and at least 200 units of glue 3. The five production lines can only be opened or closed at the same time. Please determine the minimum time to meet the weekly demand. There are total 80 workers available. Each line can be utilized by up to 20 workers at a time. Glueco produces 3 types of glue on the 5 production lines.",
        "type": "nonlinear-notable",
        "index": 325,
        "length": 1117,
        "var_num": 5
    },
    {
        "scenario": "## Define Variables:\nA company plans to construct three types of production lines, each producing a certain type of product (Sugar, Flour, and Oil). For ease of management, the company decided to have the same number of workers on the same type of production line. The company needs to determine the number of production lines to construct for each product, and the number of workers to assign to each type of production line.\n// variables: {\"number of production lines for Sugar\": \"SugarLines\", \"number of production lines for Flour\": \"FlourLines\", \"number of production lines for Oil\": \"OilLines\", \"number of workers per production line for Sugar\": \"SugarWorkersPerLine\", \"number of workers per production line for Flour\": \"FlourWorkersPerLine\", \"number of workers per production line for Oil\": \"OilWorkersPerLine\"}, where SugarLines, FlourLines, OilLines, SugarWorkersPerLine, FlourWorkersPerLine, OilWorkersPerLine >= 0 and SugarLines, FlourLines, OilLines, SugarWorkersPerLine, FlourWorkersPerLine, OilWorkersPerLine are integers.\n\n## Define Objective Function:\nFor Sugar, the material cost per unit is $5, and the selling price per unit is $10, and production number per worker per day is 100 units.\nFor Flour, the material cost per unit is $7, and the selling price per unit is $15, and production number per worker per day is 80 units.\nFor Oil, the material cost per unit is $9, and the selling price per unit is $20, and production number per worker per day is 60 units.\nThe company wants to maximize the total profit per day.\n// Profit_Sugar = 100 * SugarLines * SugarWorkersPerLine * (10 - 5)\n// Profit_Flour = 80 * FlourLines * FlourWorkersPerLine * (15 - 7)\n// Profit_Oil = 60 * OilLines * OilWorkersPerLine * (20 - 9)\n// So, the objective function is: Maximize (Profit_Sugar + Profit_Flour + Profit_Oil)\n\n## Generate Constraint-1:\nThe company has a total of 100 workers available.\n// SugarLines * SugarWorkersPerLine + FlourLines * FlourWorkersPerLine + OilLines * OilWorkersPerLine <= 100\n\n## Generate Constraint-2:\nThe company has a budget of $5000 for material costs per day.\n// 5 * SugarLines * SugarWorkersPerLine + 7 * FlourLines * FlourWorkersPerLine + 9 * OilLines * OilWorkersPerLine <= 5000\n\n## Generate Constraint-3:\nThe company has a production capacity of 1000 units in terms of the number of units it can produce per day.\n// 100 * SugarLines * SugarWorkersPerLine + 80 * FlourLines * FlourWorkersPerLine + 60 * OilLines * OilWorkersPerLine <= 1000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nSugarLines = model.addVar(vtype=\"INTEGER\", name=\"SugarLines\") # number of production lines for Sugar\nmodel.addCons(SugarLines >= 0)\nFlourLines = model.addVar(vtype=\"INTEGER\", name=\"FlourLines\") # number of production lines for Flour\nmodel.addCons(FlourLines >= 0)\nOilLines = model.addVar(vtype=\"INTEGER\", name=\"OilLines\") # number of production lines for Oil\nmodel.addCons(OilLines >= 0)\nSugarWorkersPerLine = model.addVar(vtype=\"INTEGER\", name=\"SugarWorkersPerLine\") # number of workers per production line for Sugar\nmodel.addCons(SugarWorkersPerLine >= 0)\nFlourWorkersPerLine = model.addVar(vtype=\"INTEGER\", name=\"FlourWorkersPerLine\") # number of workers per production line for Flour\nmodel.addCons(FlourWorkersPerLine >= 0)\nOilWorkersPerLine = model.addVar(vtype=\"INTEGER\", name=\"OilWorkersPerLine\") # number of workers per production line for Oil\nmodel.addCons(OilWorkersPerLine >= 0)\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == 100 * SugarLines * SugarWorkersPerLine * (10 - 5) + 80 * FlourLines * FlourWorkersPerLine * (15 - 7) + 60 * OilLines * OilWorkersPerLine * (20 - 9))\n\n# Add constraints\nmodel.addCons(SugarLines * SugarWorkersPerLine + FlourLines * FlourWorkersPerLine + OilLines * OilWorkersPerLine <= 100)\nmodel.addCons(5 * SugarLines * SugarWorkersPerLine + 7 * FlourLines * FlourWorkersPerLine + 9 * OilLines * OilWorkersPerLine <= 5000)\nmodel.addCons(100 * SugarLines * SugarWorkersPerLine + 80 * FlourLines * FlourWorkersPerLine + 60 * OilLines * OilWorkersPerLine <= 1000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Sugar Lines: \", model.getVal(SugarLines))\n    print(\"Number of Flour Lines: \", model.getVal(FlourLines))\n    print(\"Number of Oil Lines: \", model.getVal(OilLines))\n    print(\"Number of Workers per Line for Sugar: \", model.getVal(SugarWorkersPerLine))\n    print(\"Number of Workers per Line for Flour: \", model.getVal(FlourWorkersPerLine))\n    print(\"Number of Workers per Line for Oil: \", model.getVal(OilWorkersPerLine))\n    print(\"Total Profit: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Sugar Lines": "0.0",
            "Number of Flour Lines": "0.0",
            "Number of Oil Lines": "4.0",
            "Number of Workers per Line for Sugar": "0.0",
            "Number of Workers per Line for Flour": "0.0",
            "Number of Workers per Line for Oil": "4.0",
            "Total Profit": "10560.0"
        },
        "question": "A company plans to construct three types of production lines, each producing a certain type of product (Sugar, Flour, and Oil). The company needs to determine the number of production lines to construct for each product, and the number of workers to assign to each type of production line. The material cost per unit, selling price per unit, and production number per worker per day for each product are given in the following Table.\n\n| Product | Material Cost per Unit | Selling Price per Unit | Production Number per Worker per Day |\n|---------|------------------------|------------------------|--------------------------------------|\n| Sugar   | 5$                     | 10$                    | 100 units                            |\n| Flour   | 7$                     | 15$                    | 80 units                             |\n| Oil     | 9$                     | 20$                    | 60 units                             |\n\nThe company wants to maximize the total profit per day. The company has a total of 100 workers available. The company has a budget of $5000 for material costs per day. The company has a production capacity of 1000 units in terms of the number of units it can produce per day.\n",
        "type": "nonlinear-table",
        "index": 326,
        "length": 1216,
        "var_num": 6
    },
    {
        "scenario": "## Define Variables:\nA farmer is planning to plant three types of crops: Wheat, Corn, and Soybeans. The farmer needs to decide how many acres to allocate to each crop, as well as how many hours of labor to invest in each crop per acre.\n// variables: {\"number of acres for Wheat\": \"WheatAcres\", \"number of acres for Corn\": \"CornAcres\", \"number of acres for Soybeans\": \"SoybeansAcres\", \"hours of labor per acre for Wheat\": \"WheatLaborPerAcre\", \"hours of labor per acre for Corn\": \"CornLaborPerAcre\", \"hours of labor per acre for Soybeans\": \"SoybeansLaborPerAcre\"}, where WheatAcres, CornAcres, SoybeansAcres, WheatLaborPerAcre, CornLaborPerAcre, SoybeansLaborPerAcre >= 0 and WheatAcres, CornAcres, SoybeansAcres are integers,  WheatLaborPerAcre, CornLaborPerAcre, SoybeansLaborPerAcre are continuous.\n\n## Define Objective Function:\nFor Wheat, the expected yield per acre is 500 kg, the price per kg is $0.20, and the labor cost per hour is $10.\nFor Corn, the expected yield per acre is 700 kg, the price per kg is $0.15, and the labor cost per hour is $12.\nFor Soybeans, the expected yield per acre is 400 kg, the price per kg is $0.25, and the labor cost per hour is $8.\nThe farmer wants to maximize the net profit per acre.\n// Profit_Wheat = WheatAcres * (0.20 * 500 - WheatLaborPerAcre * 10)\n// Profit_Corn = CornAcres * (0.15 * 700 - CornLaborPerAcre * 12)\n// Profit_Soybeans = SoybeansAcres * (0.25 * 400 - SoybeansLaborPerAcre * 8)\n// So, the objective function is: Maximize (Profit_Wheat + Profit_Corn + Profit_Soybeans)\n\n## Generate Constraint-1:\nThe farmer has a total of 100 acres available for planting.\n// WheatAcres + CornAcres + SoybeansAcres <= 100\n\n## Generate Constraint-2:\nThe farmer has a total of 500 hours of labor available.\n// WheatAcres * WheatLaborPerAcre + CornAcres * CornLaborPerAcre + SoybeansAcres * SoybeansLaborPerAcre <= 500\n\n## Generate Constraint-3:\nThe farmer wants to ensure at least 30 acres are dedicated to Wheat.\n// WheatAcres >= 30\n\n## Generate Constraint-4:\nThe hours of labor per acre for each crop should be at least 1.\n// WheatLaborPerAcre >= 1; CornLaborPerAcre >= 1; SoybeansLaborPerAcre >= 1",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nWheatAcres = model.addVar(vtype=\"INTEGER\", name=\"WheatAcres\") # number of acres for Wheat\nmodel.addCons(WheatAcres >= 0)\nCornAcres = model.addVar(vtype=\"INTEGER\", name=\"CornAcres\") # number of acres for Corn\nmodel.addCons(CornAcres >= 0)\nSoybeansAcres = model.addVar(vtype=\"INTEGER\", name=\"SoybeansAcres\") # number of acres for Soybeans\nmodel.addCons(SoybeansAcres >= 0)\nWheatLaborPerAcre = model.addVar(vtype=\"C\", name=\"WheatLaborPerAcre\") # hours of labor per acre for Wheat\nmodel.addCons(WheatLaborPerAcre >= 0)\nCornLaborPerAcre = model.addVar(vtype=\"C\", name=\"CornLaborPerAcre\") # hours of labor per acre for Corn\nmodel.addCons(CornLaborPerAcre >= 0)\nSoybeansLaborPerAcre = model.addVar(vtype=\"C\", name=\"SoybeansLaborPerAcre\") # hours of labor per acre for Soybeans\nmodel.addCons(SoybeansLaborPerAcre >= 0)\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == WheatAcres * (0.20 * 500 - WheatLaborPerAcre * 10) + CornAcres * (0.15 * 700 - CornLaborPerAcre * 12) + SoybeansAcres * (0.25 * 400 - SoybeansLaborPerAcre * 8))\n\n# Add constraints\nmodel.addCons(WheatAcres + CornAcres + SoybeansAcres <= 100)\nmodel.addCons(WheatAcres * WheatLaborPerAcre + CornAcres * CornLaborPerAcre + SoybeansAcres * SoybeansLaborPerAcre <= 500)\nmodel.addCons(WheatAcres >= 30)\nmodel.addCons(WheatLaborPerAcre >= 1)\nmodel.addCons(CornLaborPerAcre >= 1)\nmodel.addCons(SoybeansLaborPerAcre >= 1)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Wheat Acres: \", model.getVal(WheatAcres))\n    print(\"Number of Corn Acres: \", model.getVal(CornAcres))\n    print(\"Number of Soybeans Acres: \", model.getVal(SoybeansAcres))\n    print(\"Hours of Labor per Acre for Wheat: \", model.getVal(WheatLaborPerAcre))\n    print(\"Hours of Labor per Acre for Corn: \", model.getVal(CornLaborPerAcre))\n    print(\"Hours of Labor per Acre for Soybeans: \", model.getVal(SoybeansLaborPerAcre))\n    print(\"Total Profit: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Wheat Acres": "30.0",
            "Number of Corn Acres": "70.0",
            "Number of Soybeans Acres": "0.0",
            "Hours of Labor per Acre for Wheat": "1.0",
            "Hours of Labor per Acre for Corn": "1.0",
            "Hours of Labor per Acre for Soybeans": "1.0",
            "Total Profit": "9210.0"
        },
        "question": "A farmer is planning to plant three types of crops: Wheat, Corn, and Soybeans. The farmer needs to decide how many acres to allocate to each crop, as well as how many hours of labor to invest in each crop per acre. For Corn, the expected yield per acre is 700 kg, the price per kg is $0.15, and the labor cost per hour is $12. For Soybeans, the expected yield per acre is 400 kg, the price per kg is $0.25, and the labor cost per hour is $8. The farmer wants to maximize the net profit per acre. The farmer has a total of 100 acres available for planting. The farmer has a total of 500 hours of labor available. The farmer wants to ensure at least 30 acres are dedicated to Wheat. The hours of labor per acre for each crop should be at least 1. For Wheat, the expected yield per acre is 500 kg, the price per kg is $0.20, and the labor cost per hour is $10.",
        "type": "nonlinear-notable",
        "index": 327,
        "length": 857,
        "var_num": 6
    },
    {
        "question": "Dorian Auto is considering manufacturing three types of autos: compact, midsize, and large. The resources required for, and the profits yielded by, each type of car are shown in the following Table. Currently, 10,000 tons of steel and 120,000 hours of labor are available. For production of a type of car to be economically feasible, at least 1,000 cars of that type must be produced. Formulate an LP to maximize Dorian's profit.\n\nTable (Resources required and profits yielded for each type of car):\n| Auto Type | Steel Required (tons) | Labor Required (hours) | Profit Yielded ($) |\n|-----------|-----------------------|------------------------|--------------------|\n| Compact   | 1.5                   | 30                     | 2,000              |\n| Midsize   | 3                     | 40                     | 3,000              |\n| Large     | 5                     | 25                     | 4,000              |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for compact, midsize, and large cars that adhere to the constraints given. Let's denote the number of compact cars as C, the number of midsize cars as M, and the number of large cars as L.\n```Variables\nC //number of compact cars to produce \nM //number of midsize cars to produce\nL //number of large cars to produce\nC, M, L >= 0 and they are integers //non-negative and integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function (profit) is given by the sum of the profits from each type of car. The profit from compact cars is $2,000 per car * C cars. The profit from midsize cars is $3,000 per car * M cars. The profit from large cars is $4,000 per car * L cars. Therefore, the objective function is 2000C + 3000M + 4000L.\n```Objective Function\nMaximize: 2000C + 3000M + 4000L\n```\n\n# Constraints:\nWe have several constraints to consider. First, we need to ensure that the resources required for each type of car do not exceed the available resources. The steel required for compact cars is 1.5 tons per car * C cars, for midsize cars is 3 tons per car * M cars, and for large cars is 5 tons per car * L cars. The labor required for compact cars is 30 hours per car * C cars, for midsize cars is 40 hours per car * M cars, and for large cars is 25 hours per car * L cars. \nAdditionally, we need to ensure that at least 1,000 cars of each type are produced.\nTherefore, the constraints for available steel and labor are:\n```Constraints\n1.5C + 3M + 5L <= 10000 //available steel\n30C + 40M + 25L <= 120000 //available labor\nC >= 1000 //minimum number of compact cars produced\nM >= 1000 //minimum number of midsize cars produced\nL >= 1000 //minimum number of large cars produced\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nC = LpVariable(\"CompactCars\", lowBound=1000, cat='Integer') # number of compact cars\nM = LpVariable(\"MidsizeCars\", lowBound=1000, cat='Integer') # number of midsize cars\nL = LpVariable(\"LargeCars\", lowBound=1000, cat='Integer') # number of large cars\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DorianAutoProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 2000 * C + 3000 * M + 4000 * L\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 1.5 * C + 3 * M + 5 * L <= 10000 # available steel\nproblem += 30 * C + 40 * M + 25 * L <= 120000 # available labor\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of compact cars to produce:\", C.value())\nprint(\"The number of midsize cars to produce:\", M.value())\nprint(\"The number of large cars to produce:\", L.value())\nprint(\"The maximum profit:\", objective.value())\n",
        "results": {
            "The number of compact cars to produce": "1333.0",
            "The number of midsize cars to produce": "1000.0",
            "The number of large cars to produce": "1000.0",
            "The maximum profit": "9666000.0"
        },
        "type": "linear-table",
        "index": 328,
        "length": 919,
        "var_num": 3
    },
    {
        "question": "There is 1000 mg of gold available that is needed to make long and short cables. Long cables require 10 mg of gold while short cables require 7 mg of gold. Because of their compact size, at least 5 times the number of short cables are needed than the long cables. In addition, there needs to be at least 10 long cables made. If each long cable sold results in a $12 profit and each short cable sold results in a $5 profit, how many of each type of cable should be made to maximize profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_long_cables = LpVariable(\"NumLongCables\", lowBound=0, cat='Integer') # number of long cables\nnum_short_cables = LpVariable(\"NumShortCables\", lowBound=0, cat='Integer') # number of short cables\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CableProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 12 * num_long_cables + 5 * num_short_cables\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 10 * num_long_cables + 7 * num_short_cables <= 1000 # the total amount of gold cannot exceed 1000mg\nproblem += num_short_cables >= 5 * num_long_cables # at least 5 times the number of short cables are needed than the long cables\nproblem += num_long_cables >= 10 # at least 10 long cables are needed\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of long cables:\", num_long_cables.value())\nprint(\"The number of short cables:\", num_short_cables.value())\nprint(\"The maximum profit:\", objective.value())",
        "results": {
            "The number of long cables": "22.0",
            "The number of short cables": "111.0",
            "The maximum profit": "819.0"
        },
        "formulation": "maximize 12x+5y\nSubject to: \n10x+7y <= 1000\ny >= 5x\nx >= 10 (end)",
        "type": "linear-notable",
        "index": 329,
        "length": 488,
        "var_num": 2
    },
    {
        "question": "A pet store feeds their dogs by making a mixture from two bags. Bag A contains 3 units of protein and 4 units of calcium per bag. Bag B contains 4 units of protein and 2 units of calcium per bag. The mixture must contain at least 30 units of protein and 35 units of calcium. Bag A costs $3.50 per bag and Bag B costs $2.50 per bag. Formulate an LP to minimize the cost for the mixture.",
        "formulation": "{\"variable\": [{\"description\": \"number of bags from Bag A\", \"name\": \"x\"}, {\"description\": \"number of bags from Bag B\", \"name\": \"y\"}], \"objective\": [{\"description\": \"cost of the mixture\", \"function\": \"3.5x + 2.5y\", \"sense\": \"Minimize\"}], \"constraint\": [{\"description\": \"protein requirement\", \"function\": \"3x + 4y >= 30\"}, {\"description\": \"calcium requirement\", \"function\": \"4x + 2y >= 35\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_bags_A = LpVariable(\"NumBagsA\", lowBound=0, cat='Integer') # number of bags from Bag A\nnum_bags_B = LpVariable(\"NumBagsB\", lowBound=0, cat='Integer') # number of bags from Bag B\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"PetStoreCostMinimization\", LpMinimize)\n\n# Define the objective function\nobjective = 3.5 * num_bags_A + 2.5 * num_bags_B\nproblem += objective # minimize the total cost of the mixture\n\n# Define the constraints\nproblem += 3 * num_bags_A + 4 * num_bags_B >= 30 # protein requirement\nproblem += 4 * num_bags_A + 2 * num_bags_B >= 35 # calcium requirement\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of bags from Bag A:\", num_bags_A.value())\nprint(\"The number of bags from Bag B:\", num_bags_B.value())\nprint(\"The cost of the mixture:\", objective.value())\n",
        "results": {
            "The number of bags from Bag A": "8.0",
            "The number of bags from Bag B": "2",
            "The cost of the mixture": "33"
        },
        "type": "linear-notable",
        "index": 330,
        "length": 385,
        "var_num": 2
    },
    {
        "question": "Find the volume of the largest right circular cylinder that fits in a sphere of radius 1.",
        "scenario": "## Define Variables:\nYou need to find the largest volume of a circular cylinder inside a sphere.\n// variables: {\"radius of the cylinder\": \"r\", \"height of the cylinder\": \"h\"}, where r, h >= 0\n\n## Define Objective Function:\nPlease provide the volume, and the shape of the cylinder that will give the largest volume.\n// The volume of the cylinder is given by the formula V = \u03c0r^2h.\n// Therefore, the objective function is: Maximize V = \u03c0r^2h\n\n## Generate Constraint-1:\nThe radius of the sphere is 1.\n// The cylinder must fit inside the sphere, so the sum of the square of the radius and the square of half the height of the cylinder must be less than or equal to the square of the radius of the sphere. This can be represented as r^2 + (h/2)^2 <= 1^2.\n// r^2 + (h/2)^2 <= 1",
        "code": "from pyscipopt import Model\nimport math\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nr = model.addVar(vtype=\"CONTINUOUS\", name=\"r\") # radius of the cylinder\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the cylinder\n\n# Define objective function\nV = model.addVar('V')\nmodel.setObjective(V, \"maximize\")\nmodel.addCons(V == math.pi * r**2 * h)\n\n# Add constraints\nmodel.addCons(r**2 + (h/2)**2 <= 1)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The radius of the cylinder: \", model.getVal(r))\n    print(\"The height of the cylinder: \", model.getVal(h))\n    print(\"The maximum volume of the cylinder: \", model.getVal(V))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The radius of the cylinder": "0.8164061581550033",
            "The height of the cylinder": "1.1549566998694762",
            "The maximum volume of the cylinder": "2.418400326515517"
        },
        "type": "nonlinear-notable",
        "index": 331,
        "length": 89,
        "var_num": 2
    },
    {
        "question": "Sleep inducing medicine and anti-inflammatory medicine is found in two pills, pill A and pill B. One pill A contains 3 units of sleep inducing medicine and 5 units of anti-inflammatory medicine. One pill B contains 6 units of sleep-inducing medicine and 1 unit of anti-inflammatory medicine. The cost per pill for pill A is $4 and the cost per pill for pill B is $5. A patient must consume these two pills to get at least 40 units of sleep-inducing medicine and 50 units of anti-inflammatory medicine. Formulate a LP to minimize the cost for the patient.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_pill_A = LpVariable(\"NumPillA\", lowBound=0, cat='Integer') # number of pill A\nnum_pill_B = LpVariable(\"NumPillB\", lowBound=0, cat='Integer') # number of pill B\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"PillConsumption\", LpMinimize)\n\n# Define the objective function\nobjective = 4 * num_pill_A + 5 * num_pill_B\nproblem += objective # minimize the cost for the patient\n\n# Define the constraints\nproblem += 3 * num_pill_A + 6 * num_pill_B >= 40 # The patient must get at least 40 units of sleep-inducing medicine\nproblem += 5 * num_pill_A + num_pill_B >= 50 # The patient must get at least 50 units of anti-inflammatory medicine\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of pill A:\", num_pill_A.value())\nprint(\"The number of pill B:\", num_pill_B.value())\nprint(\"The total cost for the patient:\", objective.value())",
        "results": {
            "The number of pill A": "10.0",
            "The number of pill B": "2.0",
            "The total cost for the patient": "50.0"
        },
        "formulation": "minimize 4x+5y\nSubject to: \n3x+6y >= 40\n5x+1y >= 50 (end)",
        "type": "linear-notable",
        "index": 332,
        "length": 554,
        "var_num": 2
    },
    {
        "question": "A corn farmer sends his corn to the city by either tractor or car.  A tractor can carry 40 kg of corn while a car can carry 20 kg of corn. Since tractors are very slow, the number of cars used has to be at least twice the number of tractors used. If at least 500 kg of corn need to be sent to the city, minimize the total number of tractors and cars needed.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_tractors = LpVariable(\"NumTractors\", lowBound=0, cat='Integer') # number of tractors\nnum_cars = LpVariable(\"NumCars\", lowBound=0, cat='Integer') # number of cars\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CornTransport\", LpMinimize)\n\n# Define the objective function\nobjective = num_tractors + num_cars\nproblem += objective # minimize the total number of tractors and cars used\n\n# Define the constraints\nproblem += 40 * num_tractors + 20 * num_cars >= 500 # at least 500 kg of corn need to be sent\nproblem += num_cars >= 2 * num_tractors # number of cars has to be at least twice the number of tractors\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of tractors:\", num_tractors.value())\nprint(\"The number of cars:\", num_cars.value())\nprint(\"The total number of vehicles:\", objective.value())",
        "results": {
            "The number of tractors": "6.0",
            "The number of cars": "13.0",
            "The total number of vehicles": "19.0"
        },
        "formulation": "minimize x+y\nSubject to: \ny >= 2x\n40x+20y >= 500 (end)",
        "type": "linear-notable",
        "index": 333,
        "length": 357,
        "var_num": 2
    },
    {
        "question": "A water salesman collects water from a glacier and transports it in either small or large kegs. A small keg can hold 40 liters of water while a large keg can hold 100 liters of water. The salesman has available at most 30 small kegs and 10 large kegs. Since small kegs are easier to carry, at least twice as may small kegs must be used than large kegs. If he can transport at most 25 kegs total and at least 5 kegs must be large, how many of each should he use to maximize the total amount of glacial water he can transport?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_small_kegs = LpVariable(\"NumSmallKegs\", lowBound=0, cat='Integer') # number of small kegs\nnum_large_kegs = LpVariable(\"NumLargeKegs\", lowBound=5, cat='Integer') # number of large kegs\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"GlacialWaterTransport\", LpMaximize)\n\n# Define the objective function\nobjective = 40 * num_small_kegs + 100 * num_large_kegs\nproblem += objective # maximize the total liters of water transported\n\n# Define the constraints\nproblem += num_small_kegs <= 30 # at most 30 small kegs available\nproblem += num_large_kegs <= 10 # at most 10 large kegs available\nproblem += num_small_kegs >= 2 * num_large_kegs # at least twice as many small kegs must be used than large kegs\nproblem += num_small_kegs + num_large_kegs <= 25 # he can transport at most 25 kegs total\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of small kegs:\", num_small_kegs.value())\nprint(\"The number of large kegs:\", num_large_kegs.value())\nprint(\"The total liters of glacial water transported:\", objective.value())",
        "results": {
            "The number of small kegs": "17.0",
            "The number of large kegs": "8.0",
            "The total liters of glacial water transported": "1480.0"
        },
        "formulation": "maximize 40x+100y\nSubject to: \nx <= 30\ny <= 10\nx >= 2y\nx+y <= 25\ny >= 5 (end)",
        "type": "linear-notable",
        "index": 334,
        "length": 524,
        "var_num": 2
    },
    {
        "question": "Your Lego furniture company produces Tables and Chairs. You are given the starting inventory, selling price, and Bill of Materials for each product. Your task is to determine the optimal number of Tables and Chairs to build in order to maximize revenue, while adhering to the constraint that you must produce 4 chairs for every table. The following Table provides the details of the materials required and the revenue for each product. Large wood inventory is 300 and small wood inventory is 500. The goal is to calculate the revenue generated by your production plan, rounded to the nearest whole dollar.\n\nTable (Bill of Materials and Revenue):\n| Item       | Large Wood Required | Small Wood Required | Revenue per Item |\n|------------|---------------------|---------------------|------------------|\n| Table      | 3                   | 2                   | $35              |\n| Chair      | 1                   | 4                   | $29              |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for Tables and Chairs that adhere to the constraints given. Let's denote the number of tables as T and the number of chairs as C.\n```Variables\nT //number of tables to produce \nC //number of chairs to produce\nT, C >= 0 and they are integers //non-negative integer variables\n```\n\n# Objective Function:\nWe want to maximize the revenue generated by the production plan, so the objective function is given by the total revenue. \nThe total revenue is the sum of the revenue from Tables and Chairs, which is 35T + 29C.\nTherefore, the objective function is 35T + 29C.\n```Objective Function\nMaximize: 35T + 29C\n```\n\n# Constraints:\n```Constraints\n3T + C <= 300 //constraint on large wood inventory\n2T + 4C <= 500 //constraint on small wood inventory\n4T = C //constraint on ratio of chairs to tables\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nT = LpVariable(\"Tables\", lowBound=0, cat='Integer') # number of tables to produce\nC = LpVariable(\"Chairs\", lowBound=0, cat='Integer') # number of chairs to produce\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeRevenue\", LpMaximize)\n\n# Define the objective function\nobjective = 35 * T + 29 * C\nproblem += objective # maximize the total revenue\n\n# Define the constraints\nproblem += 3 * T + 1 * C <= 300 # constraint on large wood inventory\nproblem += 2 * T + 4 * C <= 500 # constraint on small wood inventory\nproblem += 4 * T == C # constraint on ratio of chairs to tables\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of tables to produce:\", T.value())\nprint(\"The number of chairs to produce:\", C.value())\nprint(\"The total revenue generated:\", round(objective.value()))\n",
        "results": {
            "The number of tables to produce": "27.0",
            "The number of chairs to produce": "108.0",
            "The total revenue generated": "4077"
        },
        "type": "linear-table",
        "index": 335,
        "length": 957,
        "var_num": 2
    },
    {
        "question": "An extremely large ski resort is looking into purchasing two types of ski lifts, a densely-seated one and a loosely-seated one. The densely-seated ski lift is able to bring 45 guests up the slopes every minute whereas the loosely-seated ski lift can transport 20 guests every minute.  The densely-seated ski lift uses 30 units of electricity and the loosely-seated lift uses 22 units of electricity. There must be at least five loosely-seated ski lifts because they move slower and are friendlier for beginners. The ski resort needs at least 1000 guests every minute to make a profit and has available 940 units of electricity. How many of each type of ski lifts should they plan to install to minimize the total number of ski lifts needed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_dense_lifts = LpVariable(\"NumDenseLifts\", lowBound=0, cat='Integer') # number of densely-seated ski lifts\nnum_loose_lifts = LpVariable(\"NumLooseLifts\", lowBound=0, cat='Integer') # number of loosely-seated ski lifts\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SkiResortLifts\", LpMinimize)\n\n# Define the objective function\nobjective = num_dense_lifts + num_loose_lifts\nproblem += objective # minimize the total number of ski lifts\n\n# Define the constraints\nproblem += 45 * num_dense_lifts + 20 * num_loose_lifts >= 1000 # At least 1000 guests need to be transported every minute\nproblem += 30 * num_dense_lifts + 22 * num_loose_lifts <= 940 # Available units of electricity constraint\nproblem += num_loose_lifts >= 5 # At least five loosely-seated ski lifts are needed\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of densely-seated ski lifts:\", num_dense_lifts.value())\nprint(\"The number of loosely-seated ski lifts:\", num_loose_lifts.value())\nprint(\"Total number of ski lifts:\", objective.value())",
        "results": {
            "The number of densely-seated ski lifts": "20.0",
            "The number of loosely-seated ski lifts": "5.0",
            "Total number of ski lifts": "25.0"
        },
        "formulation": "minimize x+y\nSubject to: \ny >= 5\n20y+45x >= 1000\n30x+22y <= 940 (end)",
        "type": "linear-notable",
        "index": 336,
        "length": 740,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA city is planning to install three types of renewable energy facilities: solar, wind, and hydro. The city needs to decide the number of each type of facility to build and the amount of land required for each facility. The goal is to maximize the total energy output while considering the available land and budget constraints.\n// variables: {\"number of solar facilities\": \"SolarFacilities\", \"number of wind facilities\": \"WindFacilities\", \"number of hydro facilities\": \"HydroFacilities\", \"land required per solar facility\": \"SolarLand\", \"land required per wind facility\": \"WindLand\", \"land required per hydro facility\": \"HydroLand\"}, where SolarFacilities, WindFacilities, HydroFacilities, SolarLand, WindLand, HydroLand >= 0 and SolarFacilities, WindFacilities, HydroFacilities, SolarLand, WindLand, HydroLand are integers.\n\n## Define Objective Function:\nThe energy output per solar facility is 500 kWh, per wind facility is 700 kWh, and per hydro facility is 1000 kWh. The city aims to maximize the total daily energy output from all facilities.\n// Energy_Solar = 500 * SolarFacilities\n// Energy_Wind = 700 * WindFacilities\n// Energy_Hydro = 1000 * HydroFacilities\n// So, the objective function is: Maximize (Energy_Solar + Energy_Wind + Energy_Hydro)\n\n## Generate Constraint-1:\nThe city has a total of 100 acres of land available for the installation of these facilities.\n// SolarFacilities * SolarLand + WindFacilities * WindLand + HydroFacilities * HydroLand <= 100\n\n## Generate Constraint-2:\nThe city has a budget of $1000,000 for the construction of these facilities. The cost per solar facility is $10,000, per wind facility is $15,000, and per hydro facility is $20,000.\n// 10000 * SolarFacilities + 15000 * WindFacilities + 20000 * HydroFacilities <= 1000000\n\n## Generate Constraint-3:\nThe city aims to have at least 10,000 kWh of energy output per day.\n// Energy_Solar + Energy_Wind + Energy_Hydro >= 10000\n\n## Generate Constraint-4:\nThe city wants to ensure that at least 100 facility is installed.\n// SolarFacilities + WindFacilities + HydroFacilities >= 100",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nSolarFacilities = model.addVar(vtype=\"INTEGER\", name=\"SolarFacilities\") # number of solar facilities\nmodel.addCons(SolarFacilities >= 0)\nWindFacilities = model.addVar(vtype=\"INTEGER\", name=\"WindFacilities\") # number of wind facilities\nmodel.addCons(WindFacilities >= 0)\nHydroFacilities = model.addVar(vtype=\"INTEGER\", name=\"HydroFacilities\") # number of hydro facilities\nmodel.addCons(HydroFacilities >= 0)\nSolarLand = model.addVar(vtype=\"INTEGER\", name=\"SolarLand\") # land required per solar facility\nmodel.addCons(SolarLand >= 0)\nWindLand = model.addVar(vtype=\"INTEGER\", name=\"WindLand\") # land required per wind facility\nmodel.addCons(WindLand >= 0)\nHydroLand = model.addVar(vtype=\"INTEGER\", name=\"HydroLand\") # land required per hydro facility\nmodel.addCons(HydroLand >= 0)\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == 500 * SolarFacilities + 700 * WindFacilities + 1000 * HydroFacilities)\n\n# Add constraints\nmodel.addCons(SolarFacilities * SolarLand + WindFacilities * WindLand + HydroFacilities * HydroLand <= 100)\nmodel.addCons(10000 * SolarFacilities + 15000 * WindFacilities + 20000 * HydroFacilities <= 1000000)\nmodel.addCons(500 * SolarFacilities + 700 * WindFacilities + 1000 * HydroFacilities >= 10000)\nmodel.addCons(SolarFacilities + WindFacilities + HydroFacilities >= 100)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Total daily Energy Output: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Total daily Energy Output": "50000.0"
        },
        "question": "A city is planning to install three types of renewable energy facilities: solar, wind, and hydro. The city needs to decide the number of each type of facility to build and the amount of land required for each facility. The goal is to maximize the total energy output while considering the available land and budget constraints. The energy output per facility and the cost per facility are given in the following Table.\n\n| Facility Type | Energy Output per Facility | Cost per Facility |\n|---------------|---------------------------|------------------|\n| Solar         | 500 kWh                   | $10,000          |\n| Wind          | 700 kWh                   | $15,000          |\n| Hydro         | 1000 kWh                  | $20,000          |\n\nThe city has a total of 100 acres of land available for the installation of these facilities. The city has a budget of $1000,000 for the construction of these facilities. The city aims to have at least 10,000 kWh of energy output per day. The city wants to ensure that at least 100 facility is installed.\n",
        "type": "nonlinear-table",
        "index": 337,
        "length": 1052,
        "var_num": 6
    },
    {
        "question": "Bob wants to design a diet consisting of protein bars and noodles. Assume that each serving of noodles costs $5 and contains 600 calories and 1.5 grams of protein. Assume that each serving of protein bar costs $2.5 and contains 250 calories and 5 grams of protein. He's interested in spending as little money as possible but he wants to ensure that his meals have at least 2000 calories and at least 16 grams of protein per day. Formulate a linear programming problem that will help minimize the cost of the diet.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_noodles = LpVariable(\"NumNoodles\", lowBound=0, cat='Integer') # number of noodles servings\nnum_protein_bars = LpVariable(\"NumProteinBars\", lowBound=0, cat='Integer') # number of protein bar servings\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DietCost\", LpMinimize)\n\n# Define the objective function\nobjective = 5 * num_noodles + 2.5 * num_protein_bars\nproblem += objective # minimize the cost of diet\n\n# Define the constraints\nproblem += 600 * num_noodles + 250 * num_protein_bars >= 2000 # the diet must have at least 2000 calories per day\nproblem += 1.5 * num_noodles + 5 * num_protein_bars >= 16 # the diet must have at least 16 grams of protein per day\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of noodles servings:\", num_noodles.value())\nprint(\"The number of protein bar servings:\", num_protein_bars.value())\nprint(\"The cost of the diet:\", objective.value())",
        "results": {
            "The number of noodles servings": "2.0",
            "The number of protein bar servings": "4.0",
            "The cost of the diet": "20.0"
        },
        "formulation": "minimize 5y+2.5x\nSubject to: \n600y+250x >= 2000\n1.5y+5x >= 16 (end)",
        "type": "linear-notable",
        "index": 338,
        "length": 513,
        "var_num": 2
    },
    {
        "question": "A toy store decides to deliver gifts using two shipping companies, a new one and an old one. The new company can deliver 50 gifts per trip while the old company can deliver 70 gifts per trip. The new company uses 30 liters of diesel per trip while the old company uses 40 liters of diesel per trip. The toy store needs to deliver at least 1000 gifts. There can be at most 15 trips made by the new company. In order to make sure that the old company does not go out of business, at least 40% of all trips must be made by the old company. How many trips should each company make to minimize the total amount of diesel used?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_new_company_trips = LpVariable(\"NumNewCompanyTrips\", lowBound=0, cat='Integer') # number of trips by the new company\nnum_old_company_trips = LpVariable(\"NumOldCompanyTrips\", lowBound=0, cat='Integer') # number of trips by the old company\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ToyStoreShipping\", LpMinimize)\n\n# Define the objective function\nobjective = 30 * num_new_company_trips + 40 * num_old_company_trips\nproblem += objective # minimize the total amount of diesel used\n\n# Define the constraints\nproblem += 50 * num_new_company_trips + 70 * num_old_company_trips >= 1000 # at least 1000 gifts should be delivered\nproblem += num_new_company_trips <= 15 # there can be at most 15 trips made by the new company\nproblem += num_old_company_trips >= (0.4 * (num_new_company_trips + num_old_company_trips)) # at least 40% of all trips should be made by the old company\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of trips by the new company:\", num_new_company_trips.value())\nprint(\"The number of trips by the old company:\", num_old_company_trips.value())\nprint(\"The total amount of diesel used:\", objective.value())",
        "results": {
            "The number of trips by the new company": "2.0",
            "The number of trips by the old company": "13.0",
            "The total amount of diesel used": "580.0"
        },
        "formulation": "minimize 30x+40y\nSubject to: \n50x+70y >= 1000\nx <= 15\ny >= 0.4(x+y) (end)",
        "type": "linear-notable",
        "index": 339,
        "length": 621,
        "var_num": 2
    },
    {
        "question": "Find the dimensions that will minimize the cost of the metal to manufacture a circular cylindrical can of volume, 1000 cubic centimeters. The cost of the metal is $10 per square centimeter.",
        "scenario": "## Define Variables:\nNow we need to create a cylindrical metal jar with a metal shell.\n// variables: {\"radius of the cylindrical jar\": \"r\", \"height of the cylindrical jar\": \"h\"}, where r, h >= 0\n\n## Define Objective Function:\nThe cost of the metal is $10 per square meter. Find the dimensions that will minimize the cost of the metal to manufacture the jar.\n// The surface area of the cylindrical jar is the sum of the area of the two circular ends and the lateral surface area. The area of each circular end is \u03c0r^2, and the lateral surface area is 2\u03c0rh.\n// So, the surface area of the cylindrical jar is 2\u03c0r^2 + 2\u03c0rh, and the cost of the metal is 10 * (2\u03c0r^2 + 2\u03c0rh).\n// So, the objective function is: Minimize 10 * (2\u03c0r^2 + 2\u03c0rh)\n\n## Generate Constraint-1:\nThe volume of the jar must be at least 1000 cubic centimeters.\n// \u03c0r^2h >= 1000",
        "code": "from pyscipopt import Model\nimport math\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nr = model.addVar(vtype=\"CONTINUOUS\", name=\"r\") # radius of the cylindrical jar\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the cylindrical jar\n\n# Define objective function\ncost = model.addVar('cost')\nmodel.setObjective(cost, \"minimize\")\nmodel.addCons(cost == 10 * (2 * math.pi * r**2 + 2 * math.pi * r * h))\n\n# Add constraints\nmodel.addCons(math.pi * r**2 * h >= 1000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The radius of the best cylindrical jar:\", model.getVal(r))\n    print(\"The height of the best cylindrical jar:\", model.getVal(h))\n    print(\"The minimum cost of the metal to manufacture the jar: \", model.getVal(cost))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The radius of the best cylindrical jar": "5.419260699767075",
            "The height of the best cylindrical jar": "10.838521399534402",
            "The minimum cost of the metal to manufacture the jar": "5535.810442610608"
        },
        "type": "nonlinear-notable",
        "index": 340,
        "length": 189,
        "var_num": 2
    },
    {
        "question": "A crepe store sells chocolate and peanut butter crepes. A chocolate crepe requires 3 units of chocolate spread and 6 units of crepe mix. A peanut butter crepe requires 4 units of peanut butter spread and 7 units of crepe mix. Recently, the peanut butter crepe has been more popular and therefore the number of peanut butter crepes made must exceed the number of chocolate crepes made. However at least 25% of the crepes made should be chocolate. The store has available 400 units of chocolate spread and 450 units of peanut butter spread. How many of each should the store make to minimize the total amount of crepe mix needed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_choc_crepes = LpVariable(\"NumChocCrepes\", lowBound=0, cat='Integer') # number of chocolate crepes\nnum_pb_crepes = LpVariable(\"NumPBCrepes\", lowBound=0, cat='Integer') # number of peanut butter crepes\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CrepeStore\", LpMinimize)\n\n# Define the objective function\nobjective = 6 * num_choc_crepes + 7 * num_pb_crepes\nproblem += objective # minimize the total amount of crepe mix needed\n\n# Define the constraints\nproblem += 3 * num_choc_crepes <= 400 # the amount of chocolate spread used must not exceed what is available\nproblem += 4 * num_pb_crepes <= 450 # the amount of peanut butter spread used must not exceed what is available\nproblem += num_pb_crepes >= num_choc_crepes + 1 # number of peanut butter crepes made must exceed the number of chocolate crepes\nproblem += num_choc_crepes >= (num_choc_crepes + num_pb_crepes) / 4 # at least 25% of the crepes made should be chocolate\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of chocolate crepes:\", num_choc_crepes.value())\nprint(\"The number of peanut butter crepes:\", num_pb_crepes.value())\nprint(\"The amount of crepe mix used:\", objective.value())",
        "results": {
            "The number of chocolate crepes": "1.0",
            "The number of peanut butter crepes": "2.0",
            "The amount of crepe mix used": "20.0"
        },
        "formulation": "minimize 6y+7x\nSubject to: \nx >= y\ny >= 0.25(x+y)\n3y <= 400\n4x <= 450 (end)",
        "type": "linear-notable",
        "index": 341,
        "length": 627,
        "var_num": 2
    },
    {
        "question": "You need to construct a an open-top box from a piece of cardboard. It should be done by removing a square from each corner of the cardboard and folding up the flaps on each side. The cardboard is 1 meter by 1/2 meter. Find the dimensions of the box with the maximum possible volume.",
        "scenario": "## Define Variables:\nYou need to construct an open-top box from a piece of cardboard. \n// variables: {\"height of the box\": \"h\", \"length of the bottom of the box\": \"L\", \"width of the bottom of the box\": \"W\"}, where h, L, W=0\n\n## Define Objective Function:\nFind the dimensions of the box with the maximum possible volume.\n// The volume of the box is given by the formula V = L * W * h. Therefore, the objective function is: Maximize V = L * W * h\n\n## Generate Constraint-1:\nIt should be done by removing a square from each corner of the cardboard and folding up the flaps on each side. The cardboard is 1 meter by 1/2 meter.\n// The height of the box h is the side length of the squares removed from the corners. So, the length of the bottom of the box is 1 - 2h, and the width of the bottom of the box is 1/2 - 2h.\n// Therefore, the constraints are: 1 - 2h >= 0, 1/2 - 2h >= 0, L = 1 - 2h, W = 1/2 - 2h",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the box\nL = model.addVar(vtype=\"CONTINUOUS\", name=\"L\") # length of the bottom of the box\nW = model.addVar(vtype=\"CONTINUOUS\", name=\"W\") # width of the bottom of the box\n\n# Define objective function\nV = model.addVar('V')\nmodel.setObjective(V, \"maximize\")\nmodel.addCons(V == L * W * h)\n\n# Add constraints\nmodel.addCons(1 - 2*h >= 0)\nmodel.addCons(1/2 - 2*h >= 0)\nmodel.addCons(L == 1 - 2*h)\nmodel.addCons(W == 1/2 - 2*h)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The height of the box:\", model.getVal(h))\n    print(\"The length of the bottom of the box:\", model.getVal(L))\n    print(\"The width of the bottom of the box:\", model.getVal(W))\n    print(\"The maximum volume of the box: \", model.getVal(V))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The height of the box": "0.10597616580787961",
            "The length of the bottom of the box": "0.7880476683842408",
            "The width of the bottom of the box": "0.2880476683842408",
            "The maximum volume of the box": "0.02405645428965656"
        },
        "type": "nonlinear-notable",
        "index": 342,
        "length": 282,
        "var_num": 3
    },
    {
        "scenario": "## Define Variables:\nA city is planning to build three types of public facilities: parks, libraries, and sports centers. The city council needs to decide how many of each type of facility to build and how many staff members to allocate to each facility. The goal is to maximize the overall utility of these facilities to the citizens.\n// variables: {\"number of parks\": \"Parks\", \"number of libraries\": \"Libraries\", \"number of sports centers\": \"SportsCenters\", \"number of staff members per park\": \"StaffPerPark\", \"number of staff members per library\": \"StaffPerLibrary\", \"number of staff members per sports center\": \"StaffPerSportsCenter\"}, where Parks, Libraries, SportsCenters, StaffPerPark, StaffPerLibrary, StaffPerSportsCenter >= 0 and Parks, Libraries, SportsCenters, StaffPerPark, StaffPerLibrary, StaffPerSportsCenter are integers.\n\n## Define Objective Function:\nThe utility of a park is calculated as 100 times the number of staff members per park.\nThe utility of a library is calculated as 150 times the number of staff members per library.\nThe utility of a sports center is calculated as 200 times the number of staff members per sports center.\nThe city council wants to maximize the total utility of all facilities.\n// Utility_Parks = 100 * Parks * StaffPerPark\n// Utility_Libraries = 150 * Libraries * StaffPerLibrary\n// Utility_SportsCenters = 200 * SportsCenters * StaffPerSportsCenter\n// So, the objective function is: Maximize (Utility_Parks + Utility_Libraries + Utility_SportsCenters)\n\n## Generate Constraint-1:\nThe city has a budget of $10,000 to spend on staffing for these facilities.\n// Parks * StaffPerPark + Libraries * StaffPerLibrary + SportsCenters * StaffPerSportsCenter <= 10000\n\n## Generate Constraint-2:\nThe total number of facilities cannot exceed 50 due to zoning regulations.\n// Parks + Libraries + SportsCenters <= 50\n\n## Generate Constraint-3:\nThe city has a maximum of 200 staff members available for allocation.\n// Parks * StaffPerPark + Libraries * StaffPerLibrary + SportsCenters * StaffPerSportsCenter <= 200",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nParks = model.addVar(vtype=\"INTEGER\", name=\"Parks\")  # number of parks\nmodel.addCons(Parks >= 0)\nLibraries = model.addVar(vtype=\"INTEGER\", name=\"Libraries\")  # number of libraries\nmodel.addCons(Libraries >= 0)\nSportsCenters = model.addVar(vtype=\"INTEGER\", name=\"SportsCenters\")  # number of sports centers\nmodel.addCons(SportsCenters >= 0)\nStaffPerPark = model.addVar(vtype=\"INTEGER\", name=\"StaffPerPark\")  # number of staff members per park\nmodel.addCons(StaffPerPark >= 0)\nStaffPerLibrary = model.addVar(vtype=\"INTEGER\", name=\"StaffPerLibrary\")  # number of staff members per library\nmodel.addCons(StaffPerLibrary >= 0)\nStaffPerSportsCenter = model.addVar(vtype=\"INTEGER\", name=\"StaffPerSportsCenter\")  # number of staff members per sports center\nmodel.addCons(StaffPerSportsCenter >= 0)\n\n# Define objective function\nUtility_Parks = 100 * Parks * StaffPerPark\nUtility_Libraries = 150 * Libraries * StaffPerLibrary\nUtility_SportsCenters = 200 * SportsCenters * StaffPerSportsCenter\nobj = model.addVar(name=\"obj\")\nmodel.addCons(obj == Utility_Parks + Utility_Libraries + Utility_SportsCenters)\nmodel.setObjective(obj, \"maximize\")\n\n# Add constraints\nmodel.addCons(Parks * StaffPerPark + Libraries * StaffPerLibrary + SportsCenters * StaffPerSportsCenter <= 10000)\nmodel.addCons(Parks + Libraries + SportsCenters <= 50)\nmodel.addCons(Parks * StaffPerPark + Libraries * StaffPerLibrary + SportsCenters * StaffPerSportsCenter <= 200)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Total Utility: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Total Utility": "40000.0"
        },
        "question": "A city is planning to build three types of public facilities: parks, libraries, and sports centers. The city council needs to decide how many of each type of facility to build and how many staff members to allocate to each facility. The goal is to maximize the overall utility of these facilities to the citizens. The utility of each type of facility is calculated based on the number of staff members allocated, as shown in the following Table.\n\n| Facility Type | Utility Calculation |\n|---------------|---------------------|\n| Parks         | 100 * Parks * StaffPerPark |\n| Libraries     | 150 * Libraries * StaffPerLibrary |\n| Sports Centers| 200 * SportsCenters * StaffPerSportsCenter |\n\nThe city has a budget of $10,000 to spend on staffing for these facilities. The total number of facilities cannot exceed 50 due to zoning regulations. The city has a maximum of 200 staff members available for allocation.\n",
        "type": "nonlinear-table",
        "index": 343,
        "length": 912,
        "var_num": 6
    },
    {
        "question": "The government is reworking the pipes to transport water to houses in the area. The water can be transported through wide pipes or narrow pipes. Wide pipes can transport 25 units of water per minute and narrow pipes can transport 15 units of water per minute. Due to logistics, the number of wide pipes can be at most a third the number of narrow pipes. If there needs to be at least 900 units of water transported every minute, and at least 5 wide pipes must be used, minimize the total number of pipes required.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_wide_pipes = LpVariable(\"NumWidePipes\", lowBound=5, cat='Integer') # number of wide pipes, at least 5\nnum_narrow_pipes = LpVariable(\"NumNarrowPipes\", lowBound=0, cat='Integer') # number of narrow pipes\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"WaterTransport\", LpMinimize)\n\n# Define the objective function\nobjective = num_wide_pipes + num_narrow_pipes\nproblem += objective # minimize the total number of pipes\n\n# Define the constraints\nproblem += 25 * num_wide_pipes + 15 * num_narrow_pipes >= 900 # at least 900 units of water transported every minute\nproblem += num_wide_pipes * 3 <= num_narrow_pipes # wide pipes at most a third the number of narrow pipes\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of wide pipes:\", num_wide_pipes.value())\nprint(\"The number of narrow pipes:\", num_narrow_pipes.value())\nprint(\"The total number of pipes:\", objective.value())",
        "results": {
            "The number of wide pipes": "13.0",
            "The number of narrow pipes": "39.0",
            "The total number of pipes": "52.0"
        },
        "formulation": "minimize x+y\nSubject to: \nx <= a3y\nx >= 5\n15y+25x >= 900 (end)",
        "type": "linear-notable",
        "index": 344,
        "length": 513,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA company specializes in blending tea and offers five different blends: Zen, Energy, Relax, Extra, and Premium. They need to determine the quantities of each blend to produce.\n// variables: {\"quantity of Zen blend\": \"Zen\", \"quantity of Energy blend\": \"Energy\", \"quantity of Relax blend\": \"Relax\", \"quantity of Extra blend\": \"Extra\", \"quantity of Premium blend\": \"Premium\"}, where Zen, Energy, Relax, Extra, Premium >= 0 and Zen, Energy, Relax, Extra, Premium are integers.\n\n## Define Objective Function:\nFor Zen, the initial profit per unit is $5. \nFor Energy, the initial profit per unit is $7. \nFor Relax, the initial profit per unit is $6.\nFor Extra, the initial profit per unit is $8.\nFor Premium, the initial profit per unit is $10.\nBecause of the scale effect, the profits of blends increase linearly according to the scale of production. When the production of each blend exceeds 50 units, the average profit per unit of the blend increases by $0.01. The company wants to maximize the total profit from selling the tea blends.\n// Profit_Zen = max(5 + 0.01 * (Zen - 50), 5) * Zen\n// Profit_Energy = max(7 + 0.01 * (Energy - 50), 7) * Energy\n// Profit_Relax = max(6 + 0.01 * (Relax - 50), 6) * Relax\n// Profit_Extra = max(8 + 0.01 * (Extra - 50), 8) * Extra\n// Profit_Premium = max(10 + 0.01 * (Premium - 50), 10) * Premium\n// So, the objective function is: Maximize Profit_Zen + Profit_Energy + Profit_Relax + Profit_Extra + Profit_Premium\n\n## Generate Constraint-1:\nFor Zen, the special tea leaves required per unit is 10 g. For Energy, the special tea leaves required per unit is 15 g. For Relax, the special tea leaves required per unit is 12 g. For Extra, the special tea leaves required per unit is 18 g. For Premium, the special tea leaves required per unit is 20 g.\nThe company has a limited supply of special tea leaves (1000 g), which are required for the production of each blend.\n// 10 * Zen + 15 * Energy + 12 * Relax + 18 * Extra + 20 * Premium <= 1000\n\n## Generate Constraint-2:\nThe market has a demand limit for each blend. For Zen, the demand limit is 200 units. For Energy, the demand limit is 250 units. For Relax, the demand limit is 300 units. For Extra, the demand limit is 150 units. For Premium, the demand limit is 100 units.\n// Zen <= 200; Energy <= 250; Relax <= 300; Extra <= 150; Premium <= 100\n\n## Generate Constraint-3:\nThe company has a production capacity of 650 units in terms of the number of units it can produce.\n// Zen + Energy + Relax + Extra + Premium <= 650",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\n\"\"\"\nProfit_Zen = max(5 + 0.01 * (Zen - 50), 5) * Zen\nProfit_Energy = max(7 + 0.01 * (Energy - 50), 7) * Energy\nProfit_Relax = max(6 + 0.01 * (Relax - 50), 6) * Relax\nProfit_Extra = max(8 + 0.01 * (Extra - 50), 8) * Extra\nProfit_Premium = max(10 + 0.01 * (Premium - 50), 10) * Premium\n\"\"\"\n\nZen1 = model.addVar(vtype=\"INTEGER\", name=\"Zen1\", lb=0, ub=50)\nZen2 = model.addVar(vtype=\"INTEGER\", name=\"Zen2\", lb=50, ub=200)\nZen_b1 = model.addVar(vtype=\"B\", name=\"Zen_b1\")\nZen_b2 = model.addVar(vtype=\"B\", name=\"Zen_b2\")\nmodel.addCons(Zen_b1 + Zen_b2 == 1)\n# model.addCons(Zen == Zen1*Zen_b1 + Zen2*Zen_b2)\nZen = Zen1*Zen_b1 + Zen2*Zen_b2\nProfit_Zen = 5 * Zen1 * Zen_b1 + (5 + 0.01 * (Zen2 - 50)) * Zen2 * Zen_b2\n\nEnergy1 = model.addVar(vtype=\"INTEGER\", name=\"Energy1\", lb=0, ub=50)\nEnergy2 = model.addVar(vtype=\"INTEGER\", name=\"Energy2\", lb=50, ub=250)\nEnergy_b1 = model.addVar(vtype=\"B\", name=\"Energy_b1\")\nEnergy_b2 = model.addVar(vtype=\"B\", name=\"Energy_b2\")\nmodel.addCons(Energy_b1 + Energy_b2 == 1)\n# model.addCons(Energy == Energy1*Energy_b1 + Energy2*Energy_b2)\nEnergy = Energy1*Energy_b1 + Energy2*Energy_b2\nProfit_Energy = 7 * Energy1 * Energy_b1 + (7 + 0.01 * (Energy2 - 50)) * Energy2 * Energy_b2\n\n\nRelax1 = model.addVar(vtype=\"INTEGER\", name=\"Relax1\", lb=0, ub=50)\nRelax2 = model.addVar(vtype=\"INTEGER\", name=\"Relax2\", lb=50, ub=300)\nRelax_b1 = model.addVar(vtype=\"B\", name=\"Relax_b1\")\nRelax_b2 = model.addVar(vtype=\"B\", name=\"Relax_b2\")\nmodel.addCons(Relax_b1 + Relax_b2 == 1)\n# model.addCons(Relax == Relax1*Relax_b1 + Relax2*Relax_b2)\nRelax = Relax1*Relax_b1 + Relax2*Relax_b2\nProfit_Relax = 6 * Relax1 * Relax_b1 + (6 + 0.01 * (Relax2 - 50)) * Relax2 * Relax_b2\n\nExtra1 = model.addVar(vtype=\"INTEGER\", name=\"Extra1\", lb=0, ub=50)\nExtra2 = model.addVar(vtype=\"INTEGER\", name=\"Extra2\", lb=50, ub=150)\nExtra_b1 = model.addVar(vtype=\"B\", name=\"Extra_b1\")\nExtra_b2 = model.addVar(vtype=\"B\", name=\"Extra_b2\")\nmodel.addCons(Extra_b1 + Extra_b2 == 1)\n# model.addCons(Extra == Extra1*Extra_b1 + Extra2*Extra_b2)\nExtra = Extra1*Extra_b1 + Extra2*Extra_b2\nProfit_Extra = 8 * Extra1 * Extra_b1 + (8 + 0.01 * (Extra2 - 50)) * Extra2 * Extra_b2\n\nPremium1 = model.addVar(vtype=\"INTEGER\", name=\"Premium1\", lb=0, ub=50)\nPremium2 = model.addVar(vtype=\"INTEGER\", name=\"Premium2\", lb=50, ub=100)\nPremium_b1 = model.addVar(vtype=\"B\", name=\"Premium_b1\")\nPremium_b2 = model.addVar(vtype=\"B\", name=\"Premium_b2\")\nmodel.addCons(Premium_b1 + Premium_b2 == 1)\n# model.addCons(Premium == Premium1*Premium_b1 + Premium2*Premium_b2)\nPremium = Premium1*Premium_b1 + Premium2*Premium_b2\nProfit_Premium = 10 * Premium1 * Premium_b1 + (10 + 0.01 * (Premium2 - 50)) * Premium2 * Premium_b2\n\nobj = model.addVar('obj')\nmodel.addCons(obj == Profit_Zen + Profit_Energy + Profit_Relax + Profit_Extra + Profit_Premium)\nmodel.setObjective(obj, \"maximize\")\n\n# Add constraints\nmodel.addCons(10 * Zen + 15 * Energy + 12 * Relax + 18 * Extra + 20 * Premium <= 1000)\nmodel.addCons(Zen + Energy + Relax + Extra + Premium <= 650)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nif model.getStatus() == \"optimal\":\n    print(\"Zen:\", model.getVal(Zen)*model.getVal(Zen_b1) + model.getVal(Zen)*model.getVal(Zen_b2))\n    print(\"Energy:\", model.getVal(Energy)*model.getVal(Energy_b1) + model.getVal(Energy)*model.getVal(Energy_b2))\n    print(\"Relax:\", model.getVal(Relax)*model.getVal(Relax_b1) + model.getVal(Relax)*model.getVal(Relax_b2))\n    print(\"Extra:\", model.getVal(Extra)*model.getVal(Extra_b1) + model.getVal(Extra)*model.getVal(Extra_b2))\n    print(\"Premium:\", model.getVal(Premium)*model.getVal(Premium_b1) + model.getVal(Premium)*model.getVal(Premium_b2))\n    print(\"Total Profit: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Zen": "100.0",
            "Energy": "0.0",
            "Relax": "0.0",
            "Extra": "0.0",
            "Premium": "0.0",
            "Total Profit": "550.0"
        },
        "question": "A company specializes in blending tea and offers five different blends: Zen, Energy, Relax, Extra, and Premium. They need to determine the quantities of each blend to produce. For Energy, the initial profit per unit is $7. For Relax, the initial profit per unit is $6. For Extra, the initial profit per unit is $8. For Premium, the initial profit per unit is $10. Because of the scale effect, the profits of blends increase linearly according to the scale of production. When the production of each blend exceeds 50 units, the average profit per unit of the blend increases by $0.01. The company wants to maximize the total profit from selling the tea blends. For Zen, the special tea leaves required per unit is 10 g. For Energy, the special tea leaves required per unit is 15 g. For Relax, the special tea leaves required per unit is 12 g. For Extra, the special tea leaves required per unit is 18 g. For Premium, the special tea leaves required per unit is 20 g. The company has a limited supply of special tea leaves (1000 g), which are required for the production of each blend. The market has a demand limit for each blend. For Zen, the demand limit is 200 units. For Energy, the demand limit is 250 units. For Relax, the demand limit is 300 units. For Extra, the demand limit is 150 units. For Premium, the demand limit is 100 units. The company has a production capacity of 650 units in terms of the number of units it can produce. For Zen, the initial profit per unit is $5.",
        "type": "nonlinear-notable",
        "index": 345,
        "length": 1483,
        "var_num": 5
    },
    {
        "question": "An office company makes desks and drawers. Each desk requires 40 minutes of assembly and 20 minutes of sanding. Each drawer requires 30 minutes of assembly and 10 minutes of sanding. The company has available 4000 minutes for assembly and 3500 minutes for sanding. If the profit per desk is $100 and the profit per drawer is $90, how many of each should the company make to maximize profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_desks = LpVariable(\"NumDesks\", lowBound=0, cat='Integer') # number of desks\nnum_drawers = LpVariable(\"NumDrawers\", lowBound=0, cat='Integer') # number of drawers\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"OfficeCompanyProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 100 * num_desks + 90 * num_drawers\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 40 * num_desks + 30 * num_drawers <= 4000 # the total assembly time should not exceed 4000 minutes\nproblem += 20 * num_desks + 10 * num_drawers <= 3500 # the total sanding time should not exceed 3500 minutes\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of desks:\", num_desks.value())\nprint(\"The number of drawers:\", num_drawers.value())\nprint(\"The total profit:\", objective.value())",
        "results": {
            "The number of desks": "1.0",
            "The number of drawers": "132.0",
            "The total profit": "11980.0"
        },
        "formulation": "maximize 100x+90y\nSubject to: \n40x+30y <= 4000\n20x+10y <= 3500 (end)",
        "type": "linear-notable",
        "index": 346,
        "length": 390,
        "var_num": 2
    },
    {
        "question": "A candle-making company can move their inventory of candles using freight and air. Freight can transport 5 tons per trip while using air can transport 3 tons per trip. Since freight take longer, the cost for each freight trip is $300 while the cost over air for each trip is $550. The company needs to transport at least 200 tons of candles and they have a budget of $20000. Additionally, due to some urgent orders, at least 30% of tons of candles must be transported through air. There must also be at least 5 trips through freight. How many of trip by each should be scheduled to minimize the total number of trips?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_freight_trips = LpVariable(\"NumFreightTrips\", lowBound=0, cat='Integer') # number of freight trips\nnum_air_trips = LpVariable(\"NumAirTrips\", lowBound=0, cat='Integer') # number of air trips\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CandleTransport\", LpMinimize)\n\n# Define the objective function\nobjective = num_freight_trips + num_air_trips\nproblem += objective # minimize the total number of trips\n\n# Define the constraints\nproblem += 300 * num_freight_trips + 550 * num_air_trips <= 20000 # the cost must be at most $20000\nproblem += 5 * num_freight_trips + 3 * num_air_trips >= 200 # at least 200 tons of candles must be transported\nproblem += num_air_trips >= (3 * num_air_trips + 5 * num_freight_trips) * 0.3 # at least 30% of candles must be transported by air\nproblem += num_freight_trips >= 5 # there must be at least five freight trips\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of freight trips:\", num_freight_trips.value())\nprint(\"The number of air trips:\", num_air_trips.value())\nprint(\"The total number of trips:\", objective.value())",
        "results": {
            "The number of freight trips": "4.0",
            "The number of air trips": "60.0",
            "The total number of trips": "64.0"
        },
        "formulation": "minimize z+z\nSubject to: \n5x+3z >= 200\n300x+550z <= 20000\nz >= 0.3(z+z+z)\nz >= 5 (end)",
        "type": "linear-notable",
        "index": 347,
        "length": 617,
        "var_num": 2
    },
    {
        "question": "You need to construct a box with square front and back to send it through the U.S. post office. The sum of the length and girth is at most 108 in. (Girth is the maximum distance around the package perpendicular to the length; for a rectangular box, the length is the largest of the three dimensions.) Find the dimensions of the box with largest volume.",
        "scenario": "## Define Variables:\nYou need to construct a box with square front and back to send it through the U.S. post office.\n// variables: {\"length of the box\": \"L\", \"square side of the box\": \"S\"}, where L, S >= 0\n\n## Define Objective Function:\nFind the dimensions of the box with largest volume.\n// The volume of the box is given by the formula V = S^2 * L. Therefore, the objective function is: Maximize V = S^2 * L\n\n## Generate Constraint-1:\nThe sum of the length and girth is at most 108 in. (Girth is the maximum distance around the package perpendicular to the length; for a rectangular box, the length is the largest of the three dimensions.)\n// The length of the box is L, and the girth is 2S + 2S = 4S. Therefore, the constraint is L + 4S <= 108",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nL = model.addVar(vtype=\"CONTINUOUS\", name=\"L\")  # length of the box\nS = model.addVar(vtype=\"CONTINUOUS\", name=\"S\")  # square side of the box\n\n# Define objective function\nV = model.addVar('V')\nmodel.setObjective(V, \"maximize\")\nmodel.addCons(V == S**2 * L)\n\n# Add constraints\nmodel.addCons(L + 4*S <= 108)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The length of the box: \", model.getVal(L))\n    print(\"The square side of the box: \", model.getVal(S))\n    print(\"The maximum volume of the box: \", model.getVal(V))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The length of the box": "36.0000",
            "The square side of the box": "18.000",
            "The maximum volume of the box": "11664.00"
        },
        "type": "nonlinear-notable",
        "index": 348,
        "length": 352,
        "var_num": 2
    },
    {
        "question": "A concert organizer has to transport equipment using carts or trolleys. Carts can transport 5 kg/min of equipment and requires 2 workers. Trolleys can transport 7 kg/min of equipment and requires 4 workers. There must be at least 12 trolleys to be used. Additionally, only a maximum of 40% of the transportation can be using trolleys. The organizer has to deliver at a rate of 100 kg/min of equipment. How many of each transportation method should be used to minimize the total number of workers?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_carts = LpVariable(\"NumCarts\", lowBound=0, cat='Integer') # number of carts\nnum_trolleys = LpVariable(\"NumTrolleys\", lowBound=0, cat='Integer') # number of trolleys\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ConcertEquipmentTransport\", LpMinimize)\n\n# Define the objective function\nobjective = 2 * num_carts + 4 * num_trolleys\nproblem += objective # minimize the total number of workers\n\n# Define the constraints\nproblem += 5 * num_carts + 7 * num_trolleys >= 100 # at least 100 kg/min of equipment should be delivered\nproblem += num_trolleys >= 12 # at least 12 trolleys should be used\nproblem += 7 * num_trolleys <= 0.4 * (5 * num_carts + 7 * num_trolleys) # no more than 40% of transportation can be using trolleys\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of carts:\", num_carts.value())\nprint(\"The number of trolleys:\", num_trolleys.value())\nprint(\"The minimum number of workers required:\", objective.value())",
        "results": {
            "The number of carts": "26.0",
            "The number of trolleys": "12.0",
            "The minimum number of workers required": "100.0"
        },
        "formulation": "minimize 2x+4y\nSubject to: \n5x+7y >= 100\ny >= 12\ny <= 0.4(x+y) (end)",
        "type": "linear-notable",
        "index": 349,
        "length": 496,
        "var_num": 2
    },
    {
        "question": "Platinum in combination with palladium has been used as a catalyst in cars and it changes carbon monoxide, which is toxic, into carbon dioxide. An automotive company is comparing two different catalysts, a palladium-heavy catalyst and a platinum-heavy catalyst. The process with a palladium-heavy catalyst requires 15 units of platinum and 25 units of palladium and can perform the conversion to carbon dioxide at a rate of 5 units per second. A platinum-heavy catalyst requires 20 units of platinum and 14 units of palladium and converts to carbon dioxide at a rate of 4 units per second. There are 450 units of platinum and 390 units of palladium available. How many of each catalyst should be used to maximize the amount converted into carbon dioxide?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_palladium_heavy = LpVariable(\"NumPalladiumHeavy\", lowBound=0, cat='Integer') # number of palladium-heavy catalyst\nnum_platinum_heavy = LpVariable(\"NumPlatinumHeavy\", lowBound=0, cat='Integer') # number of platinum-heavy catalyst\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CatalystConversion\", LpMaximize)\n\n# Define the objective function\nobjective = 5 * num_palladium_heavy + 4 * num_platinum_heavy\nproblem += objective # maximize the amount of carbon dioxide converted\n\n# Define the constraints\nproblem += 15 * num_palladium_heavy + 20 * num_platinum_heavy <= 450 # platinum availability constraint\nproblem += 25 * num_palladium_heavy + 14 * num_platinum_heavy <= 390 # palladium availability constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of palladium-heavy catalysts:\", num_palladium_heavy.value())\nprint(\"The number of platinum-heavy catalysts:\", num_platinum_heavy.value())\nprint(\"The amount of carbon dioxide converted:\", objective.value())",
        "results": {
            "The number of palladium-heavy catalysts": "6.0",
            "The number of platinum-heavy catalysts": "17.0",
            "The amount of carbon dioxide converted": "98.0"
        },
        "formulation": "maximize 5x+4y\nSubject to: \n14y+25x <= 390\n15x+20y <= 450 (end)",
        "type": "linear-notable",
        "index": 350,
        "length": 754,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA company produces four types of gadgets: G1, G2, G3, and G4, and a new type of gadget G5. They need to determine the quantities of each gadget to produce.\n// variables: {\"quantity of G1\": \"G1\", \"quantity of G2\": \"G2\", \"quantity of G3\": \"G3\", \"quantity of G4\": \"G4\", \"quantity of G5\": \"G5\"}, where G1, G2, G3, G4, G5 >= 0 and G1, G2, G3, G4, G5 are integers.\n\n## Define Objective Function:\nFor G1, the revenue per unit is $50, the production time per unit is 2 hours, and the material cost per unit is $20. \nFor G2, the revenue per unit is $60, the production time per unit is 3 hours, and the material cost per unit is $25. \nFor G3, the revenue per unit is $70, the production time per unit is 4 hours, and the material cost per unit is $30.\nFor G4, the revenue per unit is $80, the production time per unit is 5 hours, and the material cost per unit is $35.\nFor G5, the revenue per unit is $90, the production time per unit is 6 hours, and the material cost per unit is $40.\nThe company only has one production line and can only produce one gadget at a time. The company wants to maximize the profit efficiency (profit per hour of production time).\n// Profit_G1 = 50 * G1 - 20 * G1\n// Profit_G2 = 60 * G2 - 25 * G2\n// Profit_G3 = 70 * G3 - 30 * G3\n// Profit_G4 = 80 * G4 - 35 * G4\n// Profit_G5 = 90 * G5 - 40 * G5\n// So, the objective function is: Maximize (Profit_G1 + Profit_G2 + Profit_G3 + Profit_G4 + Profit_G5) / (2 * G1 + 3 * G2 + 4 * G3 + 5 * G4 + 6 * G5)\n\n## Generate Constraint-1:\nThe company has a limited production time of 100 hours.\n// 2 * G1 + 3 * G2 + 4 * G3 + 5 * G4 + 6 * G5 <= 100\n\n## Generate Constraint-2:\nThe company has a budget of $5000 for material costs.\n// 20 * G1 + 25 * G2 + 30 * G3 + 35 * G4 + 40 * G5 <= 5000\n\n## Generate Constraint-3:\nTo meet market demand, the company needs to produce at least 40 gadgets in total.\n// G1 + G2 + G3 + G4 + G5 >= 40",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nG1 = model.addVar(vtype=\"INTEGER\", name=\"G1\") # quantity of G1\nmodel.addCons(G1 >= 0)\nG2 = model.addVar(vtype=\"INTEGER\", name=\"G2\") # quantity of G2\nmodel.addCons(G2 >= 0)\nG3 = model.addVar(vtype=\"INTEGER\", name=\"G3\") # quantity of G3\nmodel.addCons(G3 >= 0)\nG4 = model.addVar(vtype=\"INTEGER\", name=\"G4\") # quantity of G4\nmodel.addCons(G4 >= 0)\nG5 = model.addVar(vtype=\"INTEGER\", name=\"G5\") # quantity of G5\nmodel.addCons(G5 >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nprofit = 50 * G1 - 20 * G1 + 60 * G2 - 25 * G2 + 70 * G3 - 30 * G3 + 80 * G4 - 35 * G4 + 90 * G5 - 40 * G5\ntime = 2 * G1 + 3 * G2 + 4 * G3 + 5 * G4 + 6 * G5\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj * time == profit)\n\n# Add constraints\nmodel.addCons(2 * G1 + 3 * G2 + 4 * G3 + 5 * G4 + 6 * G5 <= 100)\nmodel.addCons(20 * G1 + 25 * G2 + 30 * G3 + 35 * G4 + 40 * G5 <= 5000)\nmodel.addCons(G1 + G2 + G3 + G4 + G5 >= 40)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Quantity of G1: \", model.getVal(G1))\n    print(\"Quantity of G2: \", model.getVal(G2))\n    print(\"Quantity of G3: \", model.getVal(G3))\n    print(\"Quantity of G4: \", model.getVal(G4))\n    print(\"Quantity of G5: \", model.getVal(G5))\n    print(\"Profit Efficiency: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Quantity of G1": "40.0",
            "Quantity of G2": "0.0",
            "Quantity of G3": "0.0",
            "Quantity of G4": "0.0",
            "Quantity of G5": "0.0",
            "Profit Efficiency": "15.00000"
        },
        "question": "A company produces four types of gadgets: G1, G2, G3, and G4, and a new type of gadget G5. They need to determine the quantities of each gadget to produce. The revenue per unit, production time per unit, and material cost per unit for each gadget are given in the following Table.\n\n| Gadget | Revenue per Unit | Production Time per Unit | Material Cost per Unit |\n|--------|------------------|--------------------------|------------------------|\n| G1     | $50              | 2 hours                  | $20                    |\n| G2     | $60              | 3 hours                  | $25                    |\n| G3     | $70              | 4 hours                  | $30                    |\n| G4     | $80              | 5 hours                  | $35                    |\n| G5     | $90              | 6 hours                  | $40                    |\n\nThe company only has one production line and can only produce one gadget at a time. The company wants to maximize the profit efficiency (profit per hour of production time). The company has a limited production time of 100 hours. The company has a budget of $5000 for material costs. To meet market demand, the company needs to produce at least 40 gadgets in total.\n",
        "type": "nonlinear-table",
        "index": 351,
        "length": 1222,
        "var_num": 5
    },
    {
        "question": "A furniture company sells two types of tables \u2013 a dinning table and a coffee table. They cost $250 and $150 to make respectively. The company estimates that the total monthly demand of these two types of tables combined will be at most 200 units. The monthly manufacturing budget on tables is $20000. Determine the number of units of each type of tables the company should make to get maximum profit if the profit on each dinning table and coffee table are $200 and $100 respectively.",
        "formulation": "{\"variable\": [{\"description\": \"number of dining tables\", \"name\": \"x\"}, {\"description\": \"number of coffee tables\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit\", \"function\": \"200x + 100y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"total demand constraint\", \"function\": \"x + y <= 200\"}, {\"description\": \"budget constraint\", \"function\": \"250x + 150y <= 20000\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_dining_tables = LpVariable(\"NumDiningTables\", lowBound=0, cat='Integer') # number of dining tables\nnum_coffee_tables = LpVariable(\"NumCoffeeTables\", lowBound=0, cat='Integer') # number of coffee tables\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FurnitureCompanyProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 200 * num_dining_tables + 100 * num_coffee_tables\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += num_dining_tables + num_coffee_tables <= 200 # total demand constraint\nproblem += 250 * num_dining_tables + 150 * num_coffee_tables <= 20000 # budget constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of dining tables:\", num_dining_tables.value())\nprint(\"The number of coffee tables:\", num_coffee_tables.value())\nprint(\"The total profit:\", objective.value())\n",
        "results": {
            "The number of dining tables": "80.0",
            "The number of coffee tables": "0.0",
            "The total profit": "16000.0"
        },
        "type": "linear-table",
        "index": 352,
        "length": 484,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA company is planning to launch five new products (Product A, Product B, Product C, Product D, and Product E) in the market. Each product requires a different level of investment and has varying potential profits and market risks.\n// variables: {\"number of units of Product A\": \"ProductA\", \"number of units of Product B\": \"ProductB\", \"number of units of Product C\": \"ProductC\", \"number of units of Product D\": \"ProductD\", \"number of units of Product E\": \"ProductE\"}, where ProductA, ProductB, ProductC, ProductD, ProductE >= 0 & ProductA, ProductB, ProductC, ProductD, ProductE are integers\n\n## Define Objective Function:\nFor Product A, the profit per unit is $50, the market risk is 3%, and the production cost per unit is $20. \nFor Product B, the profit per unit is $70, the market risk is 5%, and the production cost per unit is $30. \nFor Product C, the profit per unit is $60, the market risk is 4%, and the production cost per unit is $25. \nFor Product D, the profit per unit is $80, the market risk is 6%, and the production cost per unit is $40. \nFor Product E, the profit per unit is $90, the market risk is 7%, and the production cost per unit is $50. \nThe company wants to maximize the Profit-Risk ratio of the investment. (The Profit-Risk ratio is defined as the total profit divided by the total market risk of cost.)\n// total profit: Profit = 50 * ProductA + 70 * ProductB + 60 * ProductC + 80 * ProductD + 90 * ProductE\n// total market risk: Risk = 3% * 20 * ProductA + 5% * 30 * ProductB + 4% * 25 * ProductC + 6% * 40 * ProductD + 7% * 50 * ProductE\n// So, the objective function is: Maximize Profit / Risk\n\n## Generate Constraint-1:\nThe company has a budget of $50,000 for all product launches.\n// 20 * ProductA + 30 * ProductB + 25 * ProductC + 40 * ProductD + 50 * ProductE <= 50000\n\n## Generate Constraint-2:\nThe company must invest at least $20,000 in all products combined.\n// 20 * ProductA + 30 * ProductB + 25 * ProductC + 40 * ProductD + 50 * ProductE >= 20000\n\n## Generate Constraint-3:\nThe company wants to produce at least 500 units of Product A.\n// ProductA >= 500",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nProductA = model.addVar(vtype=\"INTEGER\", name=\"ProductA\") # number of units of Product A\nmodel.addCons(ProductA >= 0)\nProductB = model.addVar(vtype=\"INTEGER\", name=\"ProductB\") # number of units of Product B\nmodel.addCons(ProductB >= 0)\nProductC = model.addVar(vtype=\"INTEGER\", name=\"ProductC\") # number of units of Product C\nmodel.addCons(ProductC >= 0)\nProductD = model.addVar(vtype=\"INTEGER\", name=\"ProductD\") # number of units of Product D\nmodel.addCons(ProductD >= 0)\nProductE = model.addVar(vtype=\"INTEGER\", name=\"ProductE\") # number of units of Product E\nmodel.addCons(ProductE >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj * (0.03 * 20 * ProductA + 0.05 * 30 * ProductB + 0.04 * 25 * ProductC + 0.06 * 40 * ProductD + 0.07 * 50 * ProductE) == (50 * ProductA + 70 * ProductB + 60 * ProductC + 80 * ProductD + 90 * ProductE))\n\n# Add constraints\nmodel.addCons(20 * ProductA + 30 * ProductB + 25 * ProductC + 40 * ProductD + 50 * ProductE <= 50000)\nmodel.addCons(20 * ProductA + 30 * ProductB + 25 * ProductC + 40 * ProductD + 50 * ProductE >= 20000)\nmodel.addCons(ProductA >= 500)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Profit-Risk Ratio: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Profit-Risk Ratio": "83.33333333333337"
        },
        "question": "A company is planning to launch five new products (Product A, Product B, Product C, Product D, and Product E) in the market. Each product requires a different level of investment and has varying potential profits and market risks. The profit per unit, market risk, and production cost per unit for each product are given in the following Table.\n\n| Product | Profit per Unit | Market Risk | Production Cost per Unit |\n|---------|-----------------|-------------|--------------------------|\n| A       | $50             | 3%          | $20                      |\n| B       | $70             | 5%          | $30                      |\n| C       | $60             | 4%          | $25                      |\n| D       | $80             | 6%          | $40                      |\n| E       | $90             | 7%          | $50                      |\n\nThe company has a budget of $50,000 for all product launches. The company must invest at least $20,000 in all products combined. The company wants to produce at least 500 units of Product A. The company wants to maximize the Profit-Risk ratio of the investment. (The Profit-Risk ratio is defined as the total profit divided by the total market risk of cost.)\n",
        "type": "nonlinear-table",
        "index": 353,
        "length": 1202,
        "var_num": 5
    },
    {
        "scenario": "## Define Variables:\nA manufacturing company produces three types of electronic components: A, B, and C. The company has four different production lines, each capable of producing these components with varying efficiencies.\n// variables: {\\\"workers on line 1\\\": \\\"W1\\\", \\\"workers on line 2\\\": \\\"W2\\\", \\\"workers on line 3\\\": \\\"W3\\\", \\\"workers on line 4\\\": \\\"W4\\\"}, where W1, W2, W3, W4 >= 0 & W1, W2, W3, W4 are integers\n\n## Define Objective Function:\nEach worker on line 1 can produce 10 units of component A, 5 units of component B, and 15 units of component C per hour. \nEach worker on line 2 can produce 8 units of component A, 10 units of component B, and 12 units of component C per hour. \nEach worker on line 3 can produce 12 units of component A, 6 units of component B, and 10 units of component C per hour. \nEach worker on line 4 can produce 15 units of component A, 8 units of component B, and 5 units of component C per hour.\nThe company needs to produce at least 1000 units of component A, 800 units of component B, and 1200 units of component C daily. The production lines can only be operated if at least 5 workers are assigned. Please determine the minimum production time to meet the daily demand.\n// The production time for component A: T_A = 1000 / (10 * W1 + 8 * W2 + 12 * W3 + 15 * W4)\n// The production time for component B: T_B = 800 / (5 * W1 + 10 * W2 + 6 * W3 + 8 * W4)\n// The production time for component C: T_C = 1200 / (15 * W1 + 12 * W2 + 10 * W3 + 5 * W4)\n// So, the objective function is: Minimize max(T_A, T_B, T_C)\n\n## Generate Constraint-1:\nThere are total 50 workers available.\n// W1 + W2 + W3 + W4 <= 50\n\n## Generate Constraint-2:\nEach production line can be utilized by up to 15 workers at a time.\n// W1 <= 15; W2 <= 15; W3 <= 15; W4 <= 15\n\n## Generate Constraint-3:\nEach production line must have at least 5 workers to operate.\n// W1 >= 5; W2 >= 5; W3 >= 5; W4 >= 5",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nW1 = model.addVar(vtype=\"INTEGER\", name=\"W1\") # workers on line 1\nmodel.addCons(W1 >= 0)\nW2 = model.addVar(vtype=\"INTEGER\", name=\"W2\") # workers on line 2\nmodel.addCons(W2 >= 0)\nW3 = model.addVar(vtype=\"INTEGER\", name=\"W3\") # workers on line 3\nmodel.addCons(W3 >= 0)\nW4 = model.addVar(vtype=\"INTEGER\", name=\"W4\") # workers on line 4\nmodel.addCons(W4 >= 0)\n\n# Define objective function\n# Since the objective function is not linear, we need to linearize it using a new variable and constraints\nT_A = model.addVar(vtype=\"CONTINUOUS\", name=\"T_A\")\nT_B = model.addVar(vtype=\"CONTINUOUS\", name=\"T_B\")\nT_C = model.addVar(vtype=\"CONTINUOUS\", name=\"T_C\")\nMaxTime = model.addVar(vtype=\"CONTINUOUS\", name=\"MaxTime\")\nmodel.setObjective(MaxTime, \"minimize\")\nmodel.addCons(T_A == 1000 / (10 * W1 + 8 * W2 + 12 * W3 + 15 * W4))\nmodel.addCons(T_B == 800 / (5 * W1 + 10 * W2 + 6 * W3 + 8 * W4))\nmodel.addCons(T_C == 1200 / (15 * W1 + 12 * W2 + 10 * W3 + 5 * W4))\nmodel.addCons(MaxTime >= T_A)\nmodel.addCons(MaxTime >= T_B)\nmodel.addCons(MaxTime >= T_C)\n\n# Add constraints\nmodel.addCons(W1 + W2 + W3 + W4 <= 50)\nmodel.addCons(W1 <= 15)\nmodel.addCons(W2 <= 15)\nmodel.addCons(W3 <= 15)\nmodel.addCons(W4 <= 15)\nmodel.addCons(W1 >= 5)\nmodel.addCons(W2 >= 5)\nmodel.addCons(W3 >= 5)\nmodel.addCons(W4 >= 5)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Minimum Production Time: \", model.getVal(MaxTime))\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Minimum Production Time": "2.1818181818181817"
        },
        "question": "A manufacturing company produces three types of electronic components: A, B, and C. The company has four different production lines, each capable of producing these components with varying efficiencies. The company needs to produce at least 1000 units of component A, 800 units of component B, and 1200 units of component C daily. The production lines can only be operated if at least 5 workers are assigned. Please determine the minimum production time to meet the daily demand. The production rates for each component by each worker on different lines are given in the following Table.\n\n| Line | Component A | Component B | Component C |\n|------|-------------|-------------|-------------|\n| 1    | 10 units/hr | 5 units/hr  | 15 units/hr |\n| 2    | 8 units/hr  | 10 units/hr | 12 units/hr |\n| 3    | 12 units/hr | 6 units/hr  | 10 units/hr |\n| 4    | 15 units/hr | 8 units/hr  | 5 units/hr  |\n\nThere are total 50 workers available. Each production line can be utilized by up to 15 workers at a time. Each production line must have at least 5 workers to operate. The objective function is to minimize the maximum production time for components A, B, and C, which is defined as:\n- The production time for component A: T_A = 1000 / (10 * W1 + 8 * W2 + 12 * W3 + 15 * W4)\n- The production time for component B: T_B = 800 / (5 * W1 + 10 * W2 + 6 * W3 + 8 * W4)\n- The production time for component C: T_C = 1200 / (15 * W1 + 12 * W2 + 10 * W3 + 5 * W4)\n- The objective is to minimize max(T_A, T_B, T_C).\n",
        "type": "nonlinear-table",
        "index": 354,
        "length": 1499,
        "var_num": 7
    },
    {
        "question": "Ben is growing apples and pears on his orchard. He has 50 acres available on which he must grow a minimum of 5 acres of apples and a minimum of 10 acres of pears to meet demands. The profit per apple is $2 and the profit per pear is $4. He prefers to grow more pears than apples but limitations in his workforce allow him to grow at most twice the amount of pears as apples. How many of each fruit should Ben grow in order to maximize his profit? What is that profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nacres_apples = LpVariable(\"AcresApples\", lowBound=5, cat='Integer') # acres of apples grown\nacres_pears = LpVariable(\"AcresPears\", lowBound=10, cat='Integer') # acres of pears grown\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BenOrchard\", LpMaximize)\n\n# Define the objective function\nobjective = 2 * acres_apples + 4 * acres_pears\nproblem += objective # maximize the profit\n\n# Define the constraints\nproblem += acres_apples + acres_pears <= 50 # total land constraint\nproblem += acres_pears <= 2 * acres_apples # workforce limitation\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of acres for apples:\", acres_apples.value())\nprint(\"The number of acres for pears:\", acres_pears.value())\nprint(\"The total profit:\", objective.value())",
        "results": {
            "The number of acres for apples": "17.0",
            "The number of acres for pears": "33.0",
            "The total profit": "166.0"
        },
        "formulation": "maximize 2x+4y\nSubject to: \nx+y <= 50\nx >= 5\ny >= 10\ny <= 2x (end)",
        "type": "linear-notable",
        "index": 355,
        "length": 467,
        "var_num": 2
    },
    {
        "question": "A railway company is planning the infrastructure for the city and is considering two types of transportation, trains and trams. Each train can transport 120 people per hour comfortably and each tram can transport 30 people per hour comfortably. Since trains take longer to build, the number of trams must be at least twice the number of trains. If the railway company wants to transport at least 600 people per hour, minimize the total number of transportation units required.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_trains = LpVariable(\"NumTrains\", lowBound=0, cat='Integer') # number of trains\nnum_trams = LpVariable(\"NumTrams\", lowBound=0, cat='Integer') # number of trams\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CityTransport\", LpMinimize)\n\n# Define the objective function\nobjective = num_trains + num_trams\nproblem += objective # minimize the total number of transportation units\n\n# Define the constraints\nproblem += 120 * num_trains + 30 * num_trams >= 600 # transport at least 600 people per hour\nproblem += num_trams >= 2 * num_trains # number of trams must be at least twice the number of trains\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of trains:\", num_trains.value())\nprint(\"The number of trams:\", num_trams.value())\nprint(\"The total number of transportation units:\", objective.value())",
        "results": {
            "The number of trains": "3.0",
            "The number of trams": "8.0",
            "The total number of transportation units": "11.0"
        },
        "formulation": "minimize x+y\nSubject to: \n30y+120y >= 600\ny >= 2x (end)",
        "type": "linear-notable",
        "index": 356,
        "length": 476,
        "var_num": 2
    },
    {
        "question": "A chemical company uses two tests, a salinity test and a pH test. Each unit of the salinity test requires three probes. Whereas each unit of the pH test requires two probes. The chemical company must perform at least 250 pH tests. In total, at least 400 tests must be performed. Further, because of the importance of the salinity test, there must be at most 1.5 times more pH tests than salinity tests. How many times should each test be performed to minimize the total number of probes used?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_salinity_tests = LpVariable(\"NumSalinityTests\", lowBound=0, cat='Integer') # number of salinity tests\nnum_ph_tests = LpVariable(\"NumPHTests\", lowBound=250, cat='Integer') # number of pH tests\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ChemicalCompanyTesting\", LpMinimize)\n\n# Define the objective function\nobjective = 3 * num_salinity_tests + 2 * num_ph_tests\nproblem += objective # minimize the total number of probes used\n\n# Define the constraints\nproblem += num_salinity_tests + num_ph_tests >= 400 # at least 400 tests in total\nproblem += num_ph_tests <= 1.5 * num_salinity_tests # at most 1.5 times more pH tests than salinity tests\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of salinity tests:\", num_salinity_tests.value())\nprint(\"The number of pH tests:\", num_ph_tests.value())\nprint(\"The total number of probes used:\", objective.value())",
        "results": {
            "The number of salinity tests": "167.0",
            "The number of pH tests": "250.0",
            "The total number of probes used": "1001.0"
        },
        "formulation": "minimize threex+twoy\nSubject to: \ny >= 250\nx+y >= 400\ny <= 1.5x (end)",
        "type": "linear-notable",
        "index": 357,
        "length": 492,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA manufacturing company produces three types of products: ProductA, ProductB, and ProductC. The company needs to decide the number of units to produce for each product in the next month. Additionally, the company can invest in automation to increase production efficiency, which affects the cost and production rate of each product.\n// variables: {\"number of units of ProductA\": \"UnitsA\", \"number of units of ProductB\": \"UnitsB\", \"number of units of ProductC\": \"UnitsC\", \"investment in automation for ProductA\": \"AutomationA\", \"investment in automation for ProductB\": \"AutomationB\", \"investment in automation for ProductC\": \"AutomationC\"}, where UnitsA, UnitsB, UnitsC, AutomationA, AutomationB, AutomationC >= 0 & UnitsA, UnitsB, UnitsC are integers, and AutomationA, AutomationB, AutomationC are continuous.\n\n## Define Objective Function:\nThe increase in profit is linearly proportional to the amount of automation investment for each product.\nThe initial profit per unit of ProductA is $50, but with automation, the profit increases by $5 per unit for every $100 invested in automation. \nThe initial profit per unit of ProductB is $70, and with automation, the profit increases by $7 per unit for every $100 invested in automation. \nThe initial profit per unit of ProductC is $60, and with automation, the profit increases by $6 per unit for every $100 invested in automation. \nThe company aims to maximize the total profit from all products.\n// Total profit for ProductA: ProfitA = (50 + 0.05 * AutomationA) * UnitsA\n// Total profit for ProductB: ProfitB = (70 + 0.07 * AutomationB) * UnitsB\n// Total profit for ProductC: ProfitC = (60 + 0.06 * AutomationC) * UnitsC\n// So, the objective function is: Maximize (ProfitA + ProfitB + ProfitC)\n\n## Generate Constraint-1:\nThe production cost for ProductA is $10 per unit, the production cost for ProductB is $15 per unit, and the production cost for ProductC is $20 per unit. The company has a total budget of $50,000 for production and automation investments.\n// 10 * UnitsA + 15 * UnitsB + 20 * UnitsC + AutomationA + AutomationB + AutomationC <= 50000\n\n## Generate Constraint-2:\nThe production capacity for the next month is limited to 1,000 units in total.\n// UnitsA + UnitsB + UnitsC <= 1,000\n\n## Generate Constraint-3:\nDue to market demand, the company must produce at least 100 units of ProductA and 150 units of ProductB.\n// UnitsA >= 100; UnitsB >= 150",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nUnitsA = model.addVar(vtype=\"INTEGER\", name=\"UnitsA\")  # number of units of ProductA\nmodel.addCons(UnitsA >= 0)\nUnitsB = model.addVar(vtype=\"INTEGER\", name=\"UnitsB\")  # number of units of ProductB\nmodel.addCons(UnitsB >= 0)\nUnitsC = model.addVar(vtype=\"INTEGER\", name=\"UnitsC\")  # number of units of ProductC\nmodel.addCons(UnitsC >= 0)\nAutomationA = model.addVar(vtype=\"CONTINUOUS\", name=\"AutomationA\")  # investment in automation for ProductA\nmodel.addCons(AutomationA >= 0)\nAutomationB = model.addVar(vtype=\"CONTINUOUS\", name=\"AutomationB\")  # investment in automation for ProductB\nmodel.addCons(AutomationB >= 0)\nAutomationC = model.addVar(vtype=\"CONTINUOUS\", name=\"AutomationC\")  # investment in automation for ProductC\nmodel.addCons(AutomationC >= 0)\n\n# Define objective function\nProfitA = (50 + 0.05 * AutomationA) * UnitsA\nProfitB = (70 + 0.07 * AutomationB) * UnitsB\nProfitC = (60 + 0.06 * AutomationC) * UnitsC\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == ProfitA + ProfitB + ProfitC)\n\n# Add constraints\nmodel.addCons(10 * UnitsA + 15 * UnitsB + 20 * UnitsC + AutomationA + AutomationB + AutomationC <= 50000)\nmodel.addCons(UnitsA + UnitsB + UnitsC <= 1000)\nmodel.addCons(UnitsA >= 100)\nmodel.addCons(UnitsB >= 150)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Units of ProductA: \", model.getVal(UnitsA))\n    print(\"Number of Units of ProductB: \", model.getVal(UnitsB))\n    print(\"Number of Units of ProductC: \", model.getVal(UnitsC))\n    print(\"Investment in Automation for ProductA: \", model.getVal(AutomationA))\n    print(\"Investment in Automation for ProductB: \", model.getVal(AutomationB))\n    print(\"Investment in Automation for ProductC: \", model.getVal(AutomationC))\n    print(\"Total Profit: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Units of ProductA": "100.0",
            "Number of Units of ProductB": "900.0",
            "Number of Units of ProductC": "0.0",
            "Investment in Automation for ProductA": "0.0",
            "Investment in Automation for ProductB": "35500.0",
            "Investment in Automation for ProductC": "0.0",
            "Total Profit": "2304500.00000000"
        },
        "question": "A manufacturing company produces three types of products: ProductA, ProductB, and ProductC. The company needs to decide the number of units to produce for each product in the next month. Additionally, the company can invest in automation to increase production efficiency, which affects the cost and production rate of each product. The initial profit per unit of ProductA is $50, but with automation, the profit increases by $5 per unit for every $100 invested in automation. The initial profit per unit of ProductB is $70, and with automation, the profit increases by $7 per unit for every $100 invested in automation. The initial profit per unit of ProductC is $60, and with automation, the profit increases by $6 per unit for every $100 invested in automation. The company aims to maximize the total profit from all products. The production cost for ProductA is $10 per unit, the production cost for ProductB is $15 per unit, and the production cost for ProductC is $20 per unit. The company has a total budget of $50,000 for production and automation investments. The production capacity for the next month is limited to 1,000 units in total. Due to market demand, the company must produce at least 100 units of ProductA and 150 units of ProductB. The increase in profit is linearly proportional to the amount of automation investment for each product.",
        "type": "nonlinear-notable",
        "index": 358,
        "length": 1357,
        "var_num": 6
    },
    {
        "question": "A village delivers mail to nearby villages either by runners or canoers. Runners can carry three bags of mail each time and takes 4 hours. Canoers can carry ten bags of mail each time and takes 2 hours. At most 33% of deliveries can be by canoe. Additionally, the village can spare at most 200 total hours and at least 4 runners must be used. How many of each way to deliver must be used to maximize the total amount of mail that can be delivered?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_runner_deliveries = LpVariable(\"NumRunnerDeliveries\", lowBound=0, cat='Integer') # number of runner deliveries\nnum_canoe_deliveries = LpVariable(\"NumCanoeDeliveries\", lowBound=0, cat='Integer') # number of canoe deliveries\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MailDelivery\", LpMaximize)\n\n# Define the objective function\nobjective = 3 * num_runner_deliveries + 10 * num_canoe_deliveries\nproblem += objective # maximize the total amount of mail delivered\n\n# Define the constraints\nproblem += 4 * num_runner_deliveries + 2 * num_canoe_deliveries <= 200 # the total hours can at most be 200\nproblem += num_runner_deliveries >= 4 # at least 4 runners must be used\nproblem += num_canoe_deliveries <= (num_runner_deliveries + num_canoe_deliveries) * 0.33 # at most 33% of deliveries can be by canoe\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of runner deliveries:\", num_runner_deliveries.value())\nprint(\"The number of canoe deliveries:\", num_canoe_deliveries.value())\nprint(\"The total amount of mail delivered:\", objective.value())",
        "results": {
            "The number of runner deliveries": "40.0",
            "The number of canoe deliveries": "19.0",
            "The total amount of mail delivered": "310.0"
        },
        "formulation": "maximize teny+threex\nSubject to: \n4x+2y <= 200\ny <= 0.33(x+y)\nx >= 4 (end)",
        "type": "linear-notable",
        "index": 359,
        "length": 447,
        "var_num": 2
    },
    {
        "question": "A dietician recommends her client eat blueberries and strawberries to meet her anti-oxidant and mineral requirement. A pack of blueberries contains 3 units of anti-oxidants and 5 units of minerals. A pack of strawberries contains 1 unit of anti-oxidants and 7 units of minerals. The client must get at least 90 units of anti-oxidants and 100 units of minerals. In addition, because blueberries are not in season, the dietician recommend she eats at least 3 times as many packs of strawberries as blueberries. If a pack of blueberries contains 5 grams of sugar and a pack of strawberries contains 7 grams of sugar, how many of packs of each should she consume to minimize her sugar intake?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_blueberries = LpVariable(\"NumBlueberries\", lowBound=0, cat='Integer') # number of blueberry packs\nnum_strawberries = LpVariable(\"NumStrawberries\", lowBound=0, cat='Integer') # number of strawberry packs\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DietaryProblem\", LpMinimize)\n\n# Define the objective function\nobjective = 5 * num_blueberries + 7 * num_strawberries\nproblem += objective # minimize the total sugar intake\n\n# Define the constraints\nproblem += 3 * num_blueberries + 1 * num_strawberries >= 90 # at least 90 units of anti-oxidants\nproblem += 5 * num_blueberries + 7 * num_strawberries >= 100 # at least 100 units of minerals\nproblem += num_strawberries >= 3 * num_blueberries # at least 3 times as many packs of strawberries as blueberries\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of blueberry packs:\", num_blueberries.value())\nprint(\"The number of strawberry packs:\", num_strawberries.value())\nprint(\"The total sugar intake from packs:\", objective.value())",
        "results": {
            "The number of blueberry packs": "15.0",
            "The number of strawberry packs": "45.0",
            "The total sugar intake from packs": "390.0"
        },
        "formulation": "minimize 5x+7y\nSubject to: \n3x+1y >= 90\n5x+7y >= 100\ny >= 3x (end)",
        "type": "linear-notable",
        "index": 360,
        "length": 688,
        "var_num": 2
    },
    {
        "question": "The United Charities annual fund-raising drive is scheduled to take place next week. Donations are collected during the day and night, by telephone, and through personal contact. The average donation resulting from each type of contactis as follows Phone Interview, Personal Interview. Day: Avg Donation: $2.00 (x_1), Avg Donation: $4.00 (x_3). Night: Avg Donation:$3.00 (x_2), Avg Donation $7.00 (x_4). The charity group has enough donated gasoline and cars to make at most 300 personal contacts during one day and night combined. The volunteer minutes required to conduct each type interview are as follows: Phone Interview Time (min.) Personal Interview Time (min.) Day: Minutes: 6 (x_1) Minutes: 15 (x_3). Night: Minutes: 5 (x_2) Minutes: 12 (x_4) The charity has 20 volunteer hours available each day and 40 volunteer hours each night. The chairperson of the fund-raising drive wants to know how many different types of contacts to schedule in a 24-hour period (i.e., 1 day and 1 night) to maximize the total donations.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal number of each type of contact to schedule in a 24-hour period. Let's denote the number of phone interviews during the day as D1, the number of phone interviews at night as N1, the number of personal interviews during the day as D2, and the number of personal interviews at night as N2.\n```Variables\nD1 //number of phone interviews during the day\nN1 //number of phone interviews at night\nD2 //number of personal interviews during the day\nN2 //number of personal interviews at night\nD1, N1, D2, N2 >= 0 and they are integers //non-negative integer variables\n```\n\n# Objective Function:\nWe want to maximize the total donations, so the objective function is given by the sum of the donations from each type of contact. The average donation for each type of contact is as follows: \n- Phone Interview during the day: $2.00 (D1)\n- Phone Interview at night: $3.00 (N1)\n- Personal Interview during the day: $4.00 (D2)\n- Personal Interview at night: $7.00 (N2)\n\nTherefore, the objective function is 2D1 + 3N1 + 4D2 + 7N2.\n```Objective Function\nMaximize: 2D1 + 3N1 + 4D2 + 7N2\n```\n\n# Constraints:\n- Constraint on the total number of personal contacts: The charity group has enough donated gasoline and cars to make at most 300 personal contacts during one day and night combined. Therefore, the constraint is D2 + N2 <= 300.\n- Constraint on volunteer minutes for phone interviews during the day: The volunteer minutes required to conduct each type of interview are as follows: \n  - Phone Interview during the day: 6 minutes (D1)\n  - Personal Interview during the day: 15 minutes (D2)\n  The charity has 20 volunteer hours available each day, which is equivalent to 1200 minutes. Therefore, the constraint is 6D1 + 15D2 <= 1200.\n- Constraint on volunteer minutes for phone interviews at night: The volunteer minutes required to conduct each type of interview are as follows: \n  - Phone Interview at night: 5 minutes (N1)\n  - Personal Interview at night: 12 minutes (N2)\n  The charity has 40 volunteer hours available each night, which is equivalent to 2400 minutes. Therefore, the constraint is 5N1 + 12N2 <= 2400.\n```Constraints\nD2 + N2 <= 300\n6D1 + 15D2 <= 1200\n5N1 + 12N2 <= 2400\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nD1 = LpVariable(\"DayPhoneInterviews\", lowBound=0, cat='Integer')\nN1 = LpVariable(\"NightPhoneInterviews\", lowBound=0, cat='Integer')\nD2 = LpVariable(\"DayPersonalInterviews\", lowBound=0, cat='Integer')\nN2 = LpVariable(\"NightPersonalInterviews\", lowBound=0, cat='Integer')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"UnitedCharitiesFundRaising\", LpMaximize)\n\n# Define the objective function\nproblem += 2 * D1 + 3 * N1 + 4 * D2 + 7 * N2\n\n# Define the constraints\nproblem += D2 + N2 <= 300\nproblem += 6 * D1 + 15 * D2 <= 1200\nproblem += 5 * N1 + 12 * N2 <= 2400\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Number of day phone interviews:\", D1.value())\nprint(\"Number of night phone interviews:\", N1.value())\nprint(\"Number of day personal interviews:\", D2.value())\nprint(\"Number of night personal interviews:\", N2.value())\nprint(\"Total donations:\", value(problem.objective))\n",
        "results": {
            "Number of day phone interviews": "200.0",
            "Number of night phone interviews": "480.0",
            "Number of day personal interviews": "0.0",
            "Number of night personal interviews": "0.0",
            "Total donations": "1840.0"
        },
        "type": "linear-notable",
        "index": 361,
        "length": 1024,
        "var_num": 4
    },
    {
        "scenario": "## Define Variables:\nA company plans to construct three types of production lines, each producing a certain type of product (Sugar, Flour, and Oil). For ease of management, the company decided to have the same number of workers on each production line. The company needs to determine the number of production lines to construct for each product, and the number of workers to assign to each type of production line.\n// variables: {\"number of production lines for Sugar\": \"SugarLines\", \"number of production lines for Flour\": \"FlourLines\", \"number of production lines for Oil\": \"OilLines\", \"number of workers per production line\": \"WorkersPerLine\"}, where SugarLines, FlourLines, OilLines, WorkersPerLine >= 0 and SugarLines, FlourLines, OilLines, WorkersPerLine are integers.\n\n## Define Objective Function:\nFor Sugar, the material cost per unit is $5, and the selling price per unit is $10, and production number per worker per day is 100 units.\nFor Flour, the material cost per unit is $7, and the selling price per unit is $15, and production number per worker per day is 80 units.\nFor Oil, the material cost per unit is $9, and the selling price per unit is $20, and production number per worker per day is 60 units.\nThe company wants to maximize the total profit per day.\n// Profit_Sugar = 100 * SugarLines * WorkersPerLine * (10 - 5)\n// Profit_Flour = 80 * FlourLines * WorkersPerLine * (15 - 7)\n// Profit_Oil = 60 * OilLines * WorkersPerLine * (20 - 9)\n// So, the objective function is: Maximize (Profit_Sugar + Profit_Flour + Profit_Oil)\n\n## Generate Constraint-1:\nThe company has a total of 100 workers available.\n// SugarLines * WorkersPerLine + FlourLines * WorkersPerLine + OilLines * WorkersPerLine <= 100\n\n## Generate Constraint-2:\nThe company has a budget of $5000 for material costs per day.\n// 5 * SugarLines * WorkersPerLine + 7 * FlourLines * WorkersPerLine + 9 * OilLines * WorkersPerLine <= 5000\n\n## Generate Constraint-3:\nThe company has a production capacity of 1000 units in terms of the number of units it can produce per day.\n// 100 * SugarLines * WorkersPerLine + 80 * FlourLines * WorkersPerLine + 60 * OilLines * WorkersPerLine <= 1000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nSugarLines = model.addVar(vtype=\"INTEGER\", name=\"SugarLines\") # number of production lines for Sugar\nmodel.addCons(SugarLines >= 0)\nFlourLines = model.addVar(vtype=\"INTEGER\", name=\"FlourLines\") # number of production lines for Flour\nmodel.addCons(FlourLines >= 0)\nOilLines = model.addVar(vtype=\"INTEGER\", name=\"OilLines\") # number of production lines for Oil\nmodel.addCons(OilLines >= 0)\nWorkersPerLine = model.addVar(vtype=\"INTEGER\", name=\"WorkersPerLine\") # number of workers per production line\nmodel.addCons(WorkersPerLine >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == 100 * SugarLines * WorkersPerLine * (10 - 5) + 80 * FlourLines * WorkersPerLine * (15 - 7) + 60 * OilLines * WorkersPerLine * (20 - 9))\n\n# Add constraints\nmodel.addCons(SugarLines * WorkersPerLine + FlourLines * WorkersPerLine + OilLines * WorkersPerLine <= 100)\nmodel.addCons(5 * SugarLines * WorkersPerLine + 7 * FlourLines * WorkersPerLine + 9 * OilLines * WorkersPerLine <= 5000)\nmodel.addCons(100 * SugarLines * WorkersPerLine + 80 * FlourLines * WorkersPerLine + 60 * OilLines * WorkersPerLine <= 1000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Total Profit per day: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Total Profit per day": "10560.0"
        },
        "question": "A company plans to construct three types of production lines, each producing a certain type of product (Sugar, Flour, and Oil). For ease of management, the company decided to have the same number of workers on each production line. The company needs to determine the number of production lines to construct for each product, and the number of workers to assign to each type of production line. The material cost per unit, selling price per unit, and production number per worker per day for each product are given in the following Table.\n\n| Product | Material Cost per Unit | Selling Price per Unit | Production Number per Worker per Day |\n|---------|------------------------|------------------------|--------------------------------------|\n| Sugar   | 5$                     | 10$                    | 100 units                            |\n| Flour   | 7$                     | 15$                    | 80 units                             |\n| Oil     | 9$                     | 20$                    | 60 units                             |\n\nThe company has a total of 100 workers available. The company has a budget of $5000 for material costs per day. The company has a production capacity of 1000 units in terms of the number of units it can produce per day. The company wants to maximize the total profit per day.\n",
        "type": "nonlinear-table",
        "index": 362,
        "length": 1320,
        "var_num": 4
    },
    {
        "question": "A car manufacturing company makes hamburgers and chicken wraps for workers. They need to ensure workers get at least 2200 calories, 50 grams of protein, and 70 grams of carbs. One hamburger costs $6.5 and contains 800 calories, 19 grams of protein, and 20 grams of carbs. One chicken wrap costs $4 and contains 450 calories, 12 grams of protein, and 10 grams of carbs. What is the minimum cost diet that the company can provide for its workers?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_hamburgers = LpVariable(\"NumHamburgers\", lowBound=0, cat='Integer') # number of hamburgers\nnum_chicken_wraps = LpVariable(\"NumChickenWraps\", lowBound=0, cat='Integer') # number of chicken wraps\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DietCostMinimization\", LpMinimize)\n\n# Define the objective function\nobjective = 6.5 * num_hamburgers + 4 * num_chicken_wraps\nproblem += objective # minimize the total cost\n\n# Define the constraints\nproblem += 800 * num_hamburgers + 450 * num_chicken_wraps >= 2200 # at least 2200 calories\nproblem += 19 * num_hamburgers + 12 * num_chicken_wraps >= 50 # at least 50 grams of protein\nproblem += 20 * num_hamburgers + 10 * num_chicken_wraps >= 70 # at least 70 grams of carbs\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of hamburgers:\", num_hamburgers.value())\nprint(\"The number of chicken wraps:\", num_chicken_wraps.value())\nprint(\"The minimum cost:\", objective.value())",
        "results": {
            "The number of hamburgers": "3.0",
            "The number of chicken wraps": "1.0",
            "The minimum cost": "23.5"
        },
        "formulation": "minimize 6.5x+4y\nSubject to: \n800x+450y >= 2200\n12y+19x >= 50\n10y+20x >= 70 (end)",
        "type": "linear-notable",
        "index": 363,
        "length": 444,
        "var_num": 2
    },
    {
        "question": "A volunteer organization transports voters to the polls on Election Day either by vans or cars. They have vans which can carry 6 people and cars which can carry 3 people.  They need to transport at least 200 voters to the polls. In addition, at most 30% of the vehicles can be vans. How many of each vehicle should be used to minimize the total number of cars used?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_vans = LpVariable(\"NumVans\", lowBound=0, cat='Integer') # number of vans\nnum_cars = LpVariable(\"NumCars\", lowBound=0, cat='Integer') # number of cars\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"VoterTransportation\", LpMinimize)\n\n# Define the objective function\nobjective = num_cars\nproblem += objective # minimize the total number of cars\n\n# Define the constraints\nproblem += 6 * num_vans + 3 * num_cars >= 200 # must transport at least 200 voters\nproblem += num_vans <= (num_vans + num_cars) * 0.3 # at most 30% of vehicles can be vans\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of vans:\", num_vans.value())\nprint(\"The number of cars:\", num_cars.value())",
        "results": {
            "The number of vans": "15.0",
            "The number of cars": "37.0"
        },
        "formulation": "minimize y\nSubject to: \n6x+3y >= 200\nx <= 0.3(x+y) (end)",
        "type": "linear-notable",
        "index": 364,
        "length": 365,
        "var_num": 1
    },
    {
        "question": "A recycling company collects recycling from neighborhoods using small and large bins. A small bin requires 2 workers while a large bin requires 5 workers. A small bin can hold 25 units of recycling material and a large bin can hold 60 units of recycling material. The company has available 100 workers. Because most people don't recycle, the number of small bins must be three times the number of large bins. In addition, there must be at least 10 small bins and 4 large bins. How many of each bin type should be used to maximize the total amount of recycling material that can be collected?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_small_bins = LpVariable(\"NumSmallBins\", lowBound=10, cat='Integer') # number of small bins\nnum_large_bins = LpVariable(\"NumLargeBins\", lowBound=4, cat='Integer') # number of large bins\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"Recycling\", LpMaximize)\n\n# Define the objective function\nobjective = 25 * num_small_bins + 60 * num_large_bins\nproblem += objective # maximize the total amount of recycling material collected\n\n# Define the constraints\nproblem += 2 * num_small_bins + 5 * num_large_bins <= 100 # total number of workers cannot exceed 100\nproblem += num_small_bins == 3 * num_large_bins # number of small bins must be three times the number of large bins\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of small bins:\", num_small_bins.value())\nprint(\"The number of large bins:\", num_large_bins.value())\nprint(\"The total amount of recycling material collected:\", objective.value())",
        "results": {
            "The number of small bins": "27.0",
            "The number of large bins": "9.0",
            "The total amount of recycling material collected": "1215.0"
        },
        "formulation": "maximize 25x+60y\nSubject to: \n2x+5y <= 100\nx >= 3y\nx >= 10\ny >= 4 (end)",
        "type": "linear-notable",
        "index": 365,
        "length": 591,
        "var_num": 2
    },
    {
        "question": "A cell phone company is building rural and urban factories. A rural factory can make 100 phones per day and requires 8 managers. An urban factory can make 200 phones per day and requires 20 managers. The company has available 260 managers and must make at least 3000 phones per day. How many of each factory type should be built to minimize the total number of factories?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_rural_factories = LpVariable(\"NumRuralFactories\", lowBound=0, cat='Integer') # number of rural factories\nnum_urban_factories = LpVariable(\"NumUrbanFactories\", lowBound=0, cat='Integer') # number of urban factories\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CellPhoneProduction\", LpMinimize)\n\n# Define the objective function\nobjective = num_rural_factories + num_urban_factories\nproblem += objective # minimize the total number of factories\n\n# Define the constraints\nproblem += 8 * num_rural_factories + 20 * num_urban_factories <= 260 # the number of available managers\nproblem += 100 * num_rural_factories + 200 * num_urban_factories >= 3000 # the minimum required number of phones\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of rural factories:\", num_rural_factories.value())\nprint(\"The number of urban factories:\", num_urban_factories.value())\nprint(\"The total number of factories:\", objective.value())",
        "results": {
            "The number of rural factories": "20.0",
            "The number of urban factories": "5.0",
            "The total number of factories": "25.0"
        },
        "formulation": "minimize x+y\nSubject to: \n8x+20y <= 260\n100x+200y >= 3000 (end)",
        "type": "linear-notable",
        "index": 366,
        "length": 371,
        "var_num": 2
    },
    {
        "question": "A store sells two types of donuts, regular and jelly-filled.  The store pays a baker $4 and $6 for each unit of a regular and jelly-filled donut respectively. The store makes a profit of $2 per regular donut and a profit of $3 per jelly-filled donut. In a month, the store owner expects to sell at most 1000 donuts and wants to spend at most $5000 in buying donuts from the bakery. How many of each type of donut should be bought in order to maximize the total monthly profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of regular donuts\", \"name\": \"x\"}, {\"description\": \"number of jelly-filled donuts\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total monthly profit\", \"function\": \"2x + 3y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"maximum donuts sold\", \"function\": \"x + y <= 1000\"}, {\"description\": \"maximum spending on donuts\", \"function\": \"4x + 6y <= 5000\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_regular_donuts = LpVariable(\"NumRegularDonuts\", lowBound=0, cat='Integer') # number of regular donuts\nnum_jelly_filled_donuts = LpVariable(\"NumJellyFilledDonuts\", lowBound=0, cat='Integer') # number of jelly-filled donuts\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DonutProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 2 * num_regular_donuts + 3 * num_jelly_filled_donuts\nproblem += objective # maximize the total monthly profit\n\n# Define the constraints\nproblem += num_regular_donuts + num_jelly_filled_donuts <= 1000 # maximum donuts sold\nproblem += 4 * num_regular_donuts + 6 * num_jelly_filled_donuts <= 5000 # maximum spending on donuts\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of regular donuts:\", num_regular_donuts.value())\nprint(\"The number of jelly-filled donuts:\", num_jelly_filled_donuts.value())\nprint(\"The total monthly profit:\", objective.value())\n",
        "results": {
            "The number of regular donuts": "2.0",
            "The number of jelly-filled donuts": "832.0",
            "The total monthly profit": "2500.0"
        },
        "type": "linear-notable",
        "index": 367,
        "length": 476,
        "var_num": 2
    },
    {
        "question": "A suspicious factory has 100 sq. feet of space. It makes bootleg phones and laptops. Phones require 2 hours of labor and cost $12 for each sq. foot of space allocated for phone production (cost of electricity and equipment). Laptops require 3 hours of labor and cost $15 for each sq. foot of space allocated for laptop production. Phones produce a net revenue of $50 per sq. foot while laptops produce a net revenue of $70 per sq. foot. The factory wants to spend at most $5000 and 2000 hours of labor. What is the optimal factory layout to maximize revenue?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nsq_feet_phone = LpVariable(\"SqFeetPhone\", lowBound=0, cat='Continuous') # sq. feet allocated for phone production\nsq_feet_laptop = LpVariable(\"SqFeetLaptop\", lowBound=0, cat='Continuous') # sq. feet allocated for laptop production\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FactoryLayout\", LpMaximize)\n\n# Define the objective function\nobjective = 50 * sq_feet_phone + 70 * sq_feet_laptop\nproblem += objective # maximize the net revenue\n\n# Define the constraints\nproblem += 2 * sq_feet_phone + 3 * sq_feet_laptop <= 2000 # the labor time must be at most 2000 hours\nproblem += 12 * sq_feet_phone + 15 * sq_feet_laptop <= 5000 # the cost must be at most $5000\nproblem += sq_feet_phone + sq_feet_laptop <= 100 # the space cannot exceed 100 sq. feet\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The square feet for phone production:\", sq_feet_phone.value())\nprint(\"The square feet for laptop production:\", sq_feet_laptop.value())\nprint(\"The net revenue:\", objective.value())",
        "results": {
            "The square feet for phone production": "0.0",
            "The square feet for laptop production": "100.0",
            "The net revenue": "7000.0"
        },
        "formulation": "maximize 50x+70y\nSubject to: \n12x+15y <= 5000\n2x+3y <= 2000\nx+y <= 100 (end)",
        "type": "linear-notable",
        "index": 368,
        "length": 558,
        "var_num": 2
    },
    {
        "question": "A landscaper provides 3 landscaping layouts using different amounts of rock, mulch, and grass. He has 1200 units of rock, 700 units of mulch, and 2000 units of grass. A type A layout has 10 units of rock, 7 units of mulch, and 15 units of grass. A type B layout has 5 units of rock, 12 units of mulch, and 10 units of grass. A type C layout has 12 units of rock, 4 units of mulch, and 12 units of grass. The profit is $200 for each type A layout, $175 for each type B layout, and $225 for each type C layout. How many layouts of each type should be used to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of type A layouts\", \"name\": \"x\"}, {\"description\": \"number of type B layouts\", \"name\": \"y\"}, {\"description\": \"number of type C layouts\", \"name\": \"z\"}], \"objective\": [{\"description\": \"total profit\", \"function\": \"200x + 175y + 225z\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"rock constraint\", \"function\": \"10x + 5y + 12z <= 1200\"}, {\"description\": \"mulch constraint\", \"function\": \"7x + 12y + 4z <= 700\"}, {\"description\": \"grass constraint\", \"function\": \"15x + 10y + 12z <= 2000\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y, z >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_type_A_layouts = LpVariable(\"NumOfTypeALayouts\", lowBound=0, cat='Integer') # number of type A layouts\nnum_type_B_layouts = LpVariable(\"NumOfTypeBLayouts\", lowBound=0, cat='Integer') # number of type B layouts\nnum_type_C_layouts = LpVariable(\"NumOfTypeCLayouts\", lowBound=0, cat='Integer') # number of type C layouts\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"LandscapingProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 200 * num_type_A_layouts + 175 * num_type_B_layouts + 225 * num_type_C_layouts\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 10 * num_type_A_layouts + 5 * num_type_B_layouts + 12 * num_type_C_layouts <= 1200 # rock constraint\nproblem += 7 * num_type_A_layouts + 12 * num_type_B_layouts + 4 * num_type_C_layouts <= 700 # mulch constraint\nproblem += 15 * num_type_A_layouts + 10 * num_type_B_layouts + 12 * num_type_C_layouts <= 2000 # grass constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of type A layouts:\", num_type_A_layouts.value())\nprint(\"The number of type B layouts:\", num_type_B_layouts.value())\nprint(\"The number of type C layouts:\", num_type_C_layouts.value())\nprint(\"Total profit:\", objective.value())\n",
        "results": {
            "The number of type A layouts": "0.0",
            "The number of type B layouts": "28.0",
            "The number of type C layouts": "88.0",
            "Total profit": "24700.0"
        },
        "type": "linear-notable",
        "index": 369,
        "length": 573,
        "var_num": 3
    },
    {
        "scenario": "## Define Variables:\nA city is planning to build five different types of public facilities: a library, a community center, a park, a sports complex, and a museum. The city council wants to optimize the allocation of resources to maximize the overall utility of these facilities.\n// variables: {\"number of libraries\": \"Libraries\", \"number of community centers\": \"CommunityCenters\", \"number of parks\": \"Parks\", \"number of sports complexes\": \"SportsComplexes\", \"number of museums\": \"Museums\"}, where Libraries, CommunityCenters, Parks, SportsComplexes, Museums >= 0 & Libraries, CommunityCenters, Parks, SportsComplexes, Museums are integers\n\n## Define Objective Function:\nThe utility of each facility is determined by a non-linear function based on the number of facilities built. The utility functions are as follows:\n- Library: U_lib = 100 * Libraries^0.5\n- Community Center: U_cc = 150 * CommunityCenters^0.6\n- Park: U_park = 200 * Parks^0.7\n- Sports Complex: U_sc = 250 * SportsComplexes^0.8\n- Museum: U_museum = 300 * Museums^0.9\nThe city council wants to maximize the total utility of all facilities.\n// So, the objective function is: Maximize TotalUtility = U_lib + U_cc + U_park + U_sc + U_museum\n// Maximize 100 * Libraries^0.5 + 150 * CommunityCenters^0.6 + 200 * Parks^0.7 + 250 * SportsComplexes^0.8 + 300 * Museums^0.9\n\n## Generate Constraint-1:\nThe city has a budget of $500,000 to spend on these facilities. The cost to build each type of facility is:\n- Library: $50,000\n- Community Center: $75,000\n- Park: $100,000\n- Sports Complex: $125,000\n- Museum: $150,000\n// 50000 * Libraries + 75000 * CommunityCenters + 100000 * Parks + 125000 * SportsComplexes + 150000 * Museums <= 500000\n\n## Generate Constraint-2:\nThe city has a land constraint that limits the total number of facilities that can be built. The maximum number of facilities allowed is 5.\n// Libraries + CommunityCenters + Parks + SportsComplexes + Museums <= 5\n\n## Generate Constraint-3:\nThe city council has a policy that at least one of each type of facility must be built.\n// Libraries >= 1; CommunityCenters >= 1; Parks >= 1; SportsComplexes >= 1; Museums >= 1",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nLibraries = model.addVar(vtype=\"INTEGER\", name=\"Libraries\") # number of libraries\nmodel.addCons(Libraries >= 0)\nCommunityCenters = model.addVar(vtype=\"INTEGER\", name=\"CommunityCenters\") # number of community centers\nmodel.addCons(CommunityCenters >= 0)\nParks = model.addVar(vtype=\"INTEGER\", name=\"Parks\") # number of parks\nmodel.addCons(Parks >= 0)\nSportsComplexes = model.addVar(vtype=\"INTEGER\", name=\"SportsComplexes\") # number of sports complexes\nmodel.addCons(SportsComplexes >= 0)\nMuseums = model.addVar(vtype=\"INTEGER\", name=\"Museums\") # number of museums\nmodel.addCons(Museums >= 0)\n\n# Define objective function\n## Non-linear objective function, need to linearize\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == 100 * Libraries**0.5 + 150 * CommunityCenters**0.6 + 200 * Parks**0.7 + 250 * SportsComplexes**0.8 + 300 * Museums**0.9)\n\n# Add constraints\nmodel.addCons(50000 * Libraries + 75000 * CommunityCenters + 100000 * Parks + 125000 * SportsComplexes + 150000 * Museums <= 500000)\nmodel.addCons(Libraries + CommunityCenters + Parks + SportsComplexes + Museums <= 5)\nmodel.addCons(Libraries >= 1)\nmodel.addCons(CommunityCenters >= 1)\nmodel.addCons(Parks >= 1)\nmodel.addCons(SportsComplexes >= 1)\nmodel.addCons(Museums >= 1)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Libraries: \", model.getVal(Libraries))\n    print(\"Number of Community Centers: \", model.getVal(CommunityCenters))\n    print(\"Number of Parks: \", model.getVal(Parks))\n    print(\"Number of Sports Complexes: \", model.getVal(SportsComplexes))\n    print(\"Number of Museums: \", model.getVal(Museums))\n    print(\"Total Utility: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Libraries": "1.0",
            "Number of Community Centers": "1.0",
            "Number of Parks": "1.0",
            "Number of Sports Complexes": "1.0",
            "Number of Museums": "1.0",
            "Total Utility": "1000.00000000"
        },
        "question": "A city is planning to build five different types of public facilities: a library, a community center, a park, a sports complex, and a museum. The city council wants to optimize the allocation of resources to maximize the overall utility of these facilities. The utility of each facility is determined by a non-linear function based on the number of facilities built, as shown in the following Table.\n\n| Facility       | Utility Function                          | Cost to Build |\n|----------------|-------------------------------------------|---------------|\n| Library        | U_lib = 100 * Libraries^0.5               | $50,000       |\n| Community Center | U_cc = 150 * CommunityCenters^0.6         | $75,000       |\n| Park           | U_park = 200 * Parks^0.7                  | $100,000      |\n| Sports Complex | U_sc = 250 * SportsComplexes^0.8           | $125,000      |\n| Museum         | U_museum = 300 * Museums^0.9              | $150,000      |\n\nThe city has a budget of $500,000 to spend on these facilities. The city has a land constraint that limits the total number of facilities that can be built to a maximum of 5. The city council has a policy that at least one of each type of facility must be built. The city council wants to maximize the total utility of all facilities.\n",
        "type": "nonlinear-table",
        "index": 370,
        "length": 1292,
        "var_num": 5
    },
    {
        "question": "There has been a horrible accident and patients need to be taken to the hospital by either a helicopter or bus. A helicopter can transport 5 patients per trip and takes 1 hour. On the other hand, a bus can transport 8 patients per trip and takes 3 hours. At least 120 patients need to be transported and at least 30% of the trips should be by helicopter. In addition, there can be at most 10 bus trips. How should the patients be taken to minimize the total time to transport the patients?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_helicopter_trips = LpVariable(\"NumHelicopterTrips\", lowBound=0, cat='Integer') # number of helicopter trips\nnum_bus_trips = LpVariable(\"NumBusTrips\", lowBound=0, cat='Integer') # number of bus trips\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"HospitalTransport\", LpMinimize)\n\n# Define the objective function\nobjective = num_helicopter_trips + 3 * num_bus_trips\nproblem += objective # minimize the total time to transport all patients\n\n# Define the constraints\nproblem += 5 * num_helicopter_trips + 8 * num_bus_trips >= 120 # at least 120 patients need to be transported\nproblem += num_helicopter_trips >= (num_helicopter_trips + num_bus_trips) * 0.3 # at least 30% of the trips should be by helicopter\nproblem += num_bus_trips <= 10 # there can be at most 10 bus trips\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of helicopter trips:\", num_helicopter_trips.value())\nprint(\"The number of bus trips:\", num_bus_trips.value())\nprint(\"The total time to transport the patients:\", objective.value())",
        "results": {
            "The number of helicopter trips": "24.0",
            "The number of bus trips": "0.0",
            "The total time to transport the patients": "24.0"
        },
        "formulation": "minimize 1x+3y\nSubject to: \n5x+8y >= 120\nx >= 0.3(x+y)\ny <= 10 (end)",
        "type": "linear-notable",
        "index": 371,
        "length": 489,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA tech company is planning to launch four new software products: AppX, AppY, AppZ, and AppW. They need to decide how many development teams to allocate to each product for the upcoming quarter. Additionally, the company is considering outsourcing some of the development work to external contractor teams.\n// variables: {\"number of development teams for AppX\": \"AppXTeams\", \"number of development teams for AppY\": \"AppYTeams\", \"number of development teams for AppZ\": \"AppZTeams\", \"number of development teams for AppW\": \"AppWTeams\", \"number of external contractor teams for AppX\": \"AppXContractors\", \"number of external contractor teams for AppY\": \"AppYContractors\", \"number of external contractor teams for AppZ\": \"AppZContractors\", \"number of external contractor teams for AppW\": \"AppWContractors\"}, where AppXTeams, AppYTeams, AppZTeams, AppWTeams, AppXContractors, AppYContractors, AppZContractors, AppWContractors >= 0 & all are integers\n\n## Define Objective Function:\nFor product APPX, the Estimated Revenue per Team (for both company teams and contractor trams) is $100,000, the Development Cost per company Team is $60,000, the Development Cost per External Contractor is $80,000, and the Marketing Cost per Team (for both company teams and contractor trams) is $20,000.\nFor product APPY, the Estimated Revenue per Team (for both company teams and contractor trams) is $150,000, the Development Cost per company Team is $80,000, the Development Cost per External Contractor is $100,000, and the Marketing Cost per Team (for both company teams and contractor trams) is $30,000.\nFor product APPZ, the Estimated Revenue per Team (for both company teams and contractor trams) is $200,000, the Development Cost per company Team is $100,000, the Development Cost per External Contractor is $120,000, and the Marketing Cost per Team (for both company teams and contractor trams) is $40,000.\nFor product APPW, the Estimated Revenue per Team (for both company teams and contractor trams) is $120,000, the Development Cost per company Team is $70,000, the Development Cost per External Contractor is $90,000, and the Marketing Cost per Team (for both company teams and contractor trams) is $25,000.\nThe company wants to maximize the average net profit per team (for both company teams and contractor trams).\n// Total net profit for APPX: Profit_APPX = (100,000 - 60,000 - 20,000) * AppXTeams + (100,000 - 80,000 - 20,000) * AppXContractors\n// Total net profit for APPY: Profit_APPY = (150,000 - 80,000 - 30,000) * AppYTeams + (150,000 - 100,000 - 30,000) * AppYContractors\n// Total net profit for APPZ: Profit_APPZ = (200,000 - 100,000 - 40,000) * AppZTeams + (200,000 - 120,000 - 40,000) * AppZContractors\n// Total net profit for APPW: Profit_APPW = (120,000 - 70,000 - 25,000) * AppWTeams + (120,000 - 90,000 - 25,000) * AppWContractors\n// So, the objective function is: Maximize ((Profit_APPX + Profit_APPY + Profit_APPZ + Profit_APPW) / (AppXTeams + AppYTeams + AppZTeams + AppWTeams + AppXContractors + AppYContractors + AppZContractors + AppWContractors))\n\n## Generate Constraint-1:\nThe company has a total of 30 development teams available for the quarter.\n// AppXTeams + AppYTeams + AppZTeams + AppWTeams <= 30\n\n## Generate Constraint-2:\nDue to market research, the company knows that AppX must have at least twice as many development teams as AppY.\n// AppXTeams >= 2 * AppYTeams\n\n## Generate Constraint-3:\nThe company has a budget of $2,500,000 for marketing costs and external contractors for the quarter.\n// 20,000 * AppXTeams + 30,000 * AppYTeams + 40,000 * AppZTeams + 25,000 * AppWTeams + 80,000 * AppXContractors + 100,000 * AppYContractors + 120,000 * AppZContractors + 90,000 * AppWContractors <= 2,500,000\n\n## Generate Constraint-4:\nThe company wants to ensure that each product has at least one team working on it.\n// AppXTeams + AppXContractors >= 1; AppYTeams + AppYContractors >= 1; AppZTeams + AppZContractors >= 1; AppWTeams + AppWContractors >= 1\n\n## Generate Constraint-5:\nDue to cooperation agreements, the company should hire at least 9 external contractors in total.\n// AppXContractors + AppYContractors + AppZContractors + AppWContractors >= 9",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nAppXTeams = model.addVar(vtype=\"INTEGER\", name=\"AppXTeams\") # number of development teams for AppX\nmodel.addCons(AppXTeams >= 0)\nAppYTeams = model.addVar(vtype=\"INTEGER\", name=\"AppYTeams\") # number of development teams for AppY\nmodel.addCons(AppYTeams >= 0)\nAppZTeams = model.addVar(vtype=\"INTEGER\", name=\"AppZTeams\") # number of development teams for AppZ\nmodel.addCons(AppZTeams >= 0)\nAppWTeams = model.addVar(vtype=\"INTEGER\", name=\"AppWTeams\") # number of development teams for AppW\nmodel.addCons(AppWTeams >= 0)\nAppXContractors = model.addVar(vtype=\"INTEGER\", name=\"AppXContractors\") # number of external contractor teams for AppX\nmodel.addCons(AppXContractors >= 0)\nAppYContractors = model.addVar(vtype=\"INTEGER\", name=\"AppYContractors\") # number of external contractor teams for AppY\nmodel.addCons(AppYContractors >= 0)\nAppZContractors = model.addVar(vtype=\"INTEGER\", name=\"AppZContractors\") # number of external contractor teams for AppZ\nmodel.addCons(AppZContractors >= 0)\nAppWContractors = model.addVar(vtype=\"INTEGER\", name=\"AppWContractors\") # number of external contractor teams for AppW\nmodel.addCons(AppWContractors >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == ((100000 - 60000 - 20000) * AppXTeams + (100000 - 80000 - 20000) * AppXContractors +\n                       (150000 - 80000 - 30000) * AppYTeams + (150000 - 100000 - 30000) * AppYContractors +\n                       (200000 - 100000 - 40000) * AppZTeams + (200000 - 120000 - 40000) * AppZContractors +\n                       (120000 - 70000 - 25000) * AppWTeams + (120000 - 90000 - 25000) * AppWContractors) /\n                      (AppXTeams + AppYTeams + AppZTeams + AppWTeams + AppXContractors + AppYContractors + AppZContractors + AppWContractors))\n\n# Add constraints\nmodel.addCons(AppXTeams + AppYTeams + AppZTeams + AppWTeams <= 30)\nmodel.addCons(AppXTeams >= 2 * AppYTeams)\nmodel.addCons(20000 * AppXTeams + 30000 * AppYTeams + 40000 * AppZTeams + 25000 * AppWTeams +\n              80000 * AppXContractors + 100000 * AppYContractors + 120000 * AppZContractors + 90000 * AppWContractors <= 2500000)\nmodel.addCons(AppXTeams + AppXContractors >= 1)\nmodel.addCons(AppYTeams + AppYContractors >= 1)\nmodel.addCons(AppZTeams + AppZContractors >= 1)\nmodel.addCons(AppWTeams + AppWContractors >= 1)\nmodel.addCons(AppXContractors + AppYContractors + AppZContractors + AppWContractors >= 9)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of AppX Teams: \", model.getVal(AppXTeams))\n    print(\"Number of AppY Teams: \", model.getVal(AppYTeams))\n    print(\"Number of AppZ Teams: \", model.getVal(AppZTeams))\n    print(\"Number of AppW Teams: \", model.getVal(AppWTeams))\n    print(\"Number of AppX Contractors: \", model.getVal(AppXContractors))\n    print(\"Number of AppY Contractors: \", model.getVal(AppYContractors))\n    print(\"Number of AppZ Contractors: \", model.getVal(AppZContractors))\n    print(\"Number of AppW Contractors: \", model.getVal(AppWContractors))\n    print(\"Average Net Profit per Team: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of AppX Teams": "1.0",
            "Number of AppY Teams": "0.0",
            "Number of AppZ Teams": "28.0",
            "Number of AppW Teams": "1.0",
            "Number of AppX Contractors": "0.0",
            "Number of AppY Contractors": "1.0",
            "Number of AppZ Contractors": "8.0",
            "Number of AppW Contractors": "0.0",
            "Average Net Profit per Team": "52948.71794871795"
        },
        "question": "A tech company is planning to launch four new software products: AppX, AppY, AppZ, and AppW. They need to decide how many development teams to allocate to each product for the upcoming quarter, as well as how many external contractor teams to hire. The company aims to maximize the average net profit per team (for both company teams and contractor teams). The estimated revenue, development cost for company teams, development cost for external contractors, and marketing cost per team for each product are given in the following Table.\n\n| Product | Estimated Revenue per Team | Development Cost per Company Team | Development Cost per External Contractor | Marketing Cost per Team |\n|---------|----------------------------|-----------------------------------|------------------------------------------|-------------------------|\n| AppX    | $100,000                   | $60,000                           | $80,000                                  | $20,000                 |\n| AppY    | $150,000                   | $80,000                           | $100,000                                 | $30,000                 |\n| AppZ    | $200,000                   | $100,000                          | $120,000                                 | $40,000                 |\n| AppW    | $120,000                   | $70,000                           | $90,000                                  | $25,000                 |\n\nThe company has a total of 30 development teams available for the quarter. Due to market research, the company knows that AppX must have at least twice as many development teams as AppY. The company has a budget of $2,500,000 for marketing costs and external contractors for the quarter. The company wants to ensure that each product has at least one team working on it. Due to cooperation agreements, the company should hire at least 9 external contractors in total.\n",
        "type": "nonlinear-table",
        "index": 372,
        "length": 1883,
        "var_num": 8
    },
    {
        "question": "A jewelry company produces and sells bracelets and rings. The bracelets are hand-crafted by a team who can make at most 4 bracelets per day. The rings are made by another team who can make at most 7 rings per day. All rings have to be approved by a master jeweler and he can check at most 30 jewels of either type per day. If the profit per bracelet is $700 and the profit per ring is $300, how many of each should the jewelry company make to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of bracelets made per day\", \"name\": \"x\"}, {\"description\": \"number of rings made per day\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit from bracelets and rings\", \"function\": \"700x + 300y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"bracelet production constraint\", \"function\": \"x <= 4\"}, {\"description\": \"ring production constraint\", \"function\": \"y <= 7\"}, {\"description\": \"jewel check constraint\", \"function\": \"x + y <= 30\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"bracelets\", lowBound=0, cat='Integer') # number of bracelets made per day\ny = LpVariable(\"rings\", lowBound=0, cat='Integer') # number of rings made per day\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"JewelryCompanyProfit\", LpMaximize)\n\n# Define the objective function\nproblem += 700 * x + 300 * y # maximize the total profit from bracelets and rings\n\n# Define the constraints\nproblem += x <= 4 # bracelet production constraint\nproblem += y <= 7 # ring production constraint\nproblem += x + y <= 30 # jewel check constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of bracelets to make:\", x.value())\nprint(\"The number of rings to make:\", y.value())\nprint(\"The maximum profit:\", value(problem.objective))\n",
        "results": {
            "The number of bracelets to make": "4.0",
            "The number of rings to make": "7.0",
            "The maximum profit": "4900.0"
        },
        "type": "linear-notable",
        "index": 373,
        "length": 459,
        "var_num": 2
    },
    {
        "question": "A lab has 1000 units of medicinal ingredients to make two pills, a large pill and a small pill. A large pill requires 3 units of medicinal ingredients and 2 units of filler. A small pill requires 2 units of medicinal ingredients and 1 unit of filler. The lab has to make at least 100 large pills. However, since small pills are more popular at least 60% of the total number of pills must be small. How many of each should be made to minimize the total number of filler material needed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_large_pills = LpVariable(\"NumLargePills\", lowBound=0, cat='Integer') # number of large pills\nnum_small_pills = LpVariable(\"NumSmallPills\", lowBound=0, cat='Integer') # number of small pills\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MedicineProduction\", LpMinimize)\n\n# Define the objective function\nobjective = 2 * num_large_pills + num_small_pills\nproblem += objective # minimize the total number of filler material needed\n\n# Define the constraints\nproblem += 3 * num_large_pills + 2 * num_small_pills <= 1000 # total units of medicinal ingredients is limited to 1000\nproblem += num_large_pills >= 100 # at least 100 large pills need to be made\nproblem += num_small_pills >= (num_large_pills + num_small_pills) * 0.6 # small pills need to make up at least 60% of total number of pills\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of large pills:\", num_large_pills.value())\nprint(\"The number of small pills:\", num_small_pills.value())\nprint(\"Total amount of filler material used:\", objective.value())",
        "results": {
            "The number of large pills": "100.0",
            "The number of small pills": "150.0",
            "Total amount of filler material used": "350.0"
        },
        "formulation": "minimize 2x+1y\nSubject to: \n3x+2y <= 1000\nx >= 100\ny >= 0.6(x+y) (end)",
        "type": "linear-notable",
        "index": 374,
        "length": 485,
        "var_num": 2
    },
    {
        "question": "You are the manager of an apartment complex, and you want to increase the rent to rise the profit. According to the contract, you can only increase the rent by 25 dollars each time. At first, the rent is $800/month, and all apartments are rented. Each time the rent is increased by $25, one fewer apartment is rented. Maintenance costs run $50/month for each occupied unit. Please maximizes the total amount of profit?",
        "scenario": "## Define Variables:\nYou are the manager of an apartment complex, and you want to increase the rent to rise the profit. According to the contract, you can only increase the rent by 25 dollars each time.\n// variables: {\"number of times the rent is increased by $25\": \"x\"}, where x >= 0 and x is an integer\n\n## Define Objective Function:\nAt first, the rent is $800/month, and all apartments are rented. Each time the rent is increased by $25, one fewer apartment is rented. Maintenance costs run $50/month for each occupied unit. Please maximizes the total amount of profit?\n// The total profit is the total revenue minus the total maintenance costs. The total revenue is the rent per apartment times the number of rented apartments, which is (800 + 25x)(50 - x). \n// The total maintenance costs are $50/month for each occupied unit, which is 50(50 - x).\n// Therefore, the objective function is: Maximize (800 + 25x)(50 - x) - 50(50 - x)",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"INTEGER\", name=\"x\") # number of times the rent is increased by $25\n\n# Define objective function\nobj = model.addVar(name=\"obj\")\nmodel.addCons(obj == (800 + 25*x)*(50 - x) - 50*(50 - x))\nmodel.setObjective(obj, \"maximize\")\n\n# Add constraints\nmodel.addCons(x >= 0)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The number of times the rent should be increased by $25:\", model.getVal(x))\n    print(\"The maximum total profit: \", model.getVal(model.getObjective()))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The maximum total profit": "39975.0"
        },
        "type": "nonlinear-notable",
        "index": 375,
        "length": 418,
        "var_num": 1
    },
    {
        "question": "A farmer has 200 acres of land to grow oranges and grapefruits. He must grow at least 60 acres of oranges and at least 50 acres of grapefruits. The farmer prefers to grow more grapefruits than oranges but due to a shortage, he can grow at most twice the amount of grapefruits as oranges. If the profit per acre of oranges is $200, and the profit per acre of grapefruits is $220, how many acres of each should be grown to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of acres of oranges\", \"name\": \"x\"}, {\"description\": \"number of acres of grapefruits\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit from oranges and grapefruits\", \"function\": \"200x + 220y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"total land constraint\", \"function\": \"x + y <= 200\"}, {\"description\": \"minimum oranges constraint\", \"function\": \"x >= 60\"}, {\"description\": \"minimum grapefruits constraint\", \"function\": \"y >= 50\"}, {\"description\": \"maximum grapefruits to oranges ratio constraint\", \"function\": \"y <= 2x\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"AcresOfOranges\", lowBound=60, cat='Continuous') # number of acres of oranges\ny = LpVariable(\"AcresOfGrapefruits\", lowBound=50, cat='Continuous') # number of acres of grapefruits\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 200 * x + 220 * y\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += x + y <= 200 # total land constraint\nproblem += x >= 60 # minimum oranges constraint\nproblem += y >= 50 # minimum grapefruits constraint\nproblem += y <= 2 * x # maximum grapefruits to oranges ratio constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of acres of oranges to grow:\", x.value())\nprint(\"The number of acres of grapefruits to grow:\", y.value())\nprint(\"Total profit:\", objective.value())\n",
        "results": {
            "The number of acres of oranges to grow": "66.666667",
            "The number of acres of grapefruits to grow": "133.33333",
            "Total profit": "42666.666"
        },
        "type": "linear-notable",
        "index": 376,
        "length": 437,
        "var_num": 2
    },
    {
        "question": "A zoo needs to transport their monkeys to the vet either by bus or by car. A bus can transport 20 monkeys per trip and takes 30 minutes. A car can transport 6 monkeys per trip and takes 15 minutes. There can be at most 10 bus trips. In addition, since the monkeys get aggressive when there are too many in one place at least 60% of the trips should be by car. If the zoo needs to transport 300 monkeys, how many trips of each should be done to minimize the total time required to transport the monkeys?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_bus_trips = LpVariable(\"NumBusTrips\", lowBound=0, cat='Integer') # number of bus trips\nnum_car_trips = LpVariable(\"NumCarTrips\", lowBound=0, cat='Integer') # number of car trips\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MonkeyTransport\", LpMinimize)\n\n# Define the objective function\nobjective = 30 * num_bus_trips + 15 * num_car_trips\nproblem += objective # minimize the total time required to transport the monkeys\n\n# Define the constraints\nproblem += 20 * num_bus_trips + 6 * num_car_trips >= 300 # total number of monkeys transported should be at least 300\nproblem += num_bus_trips <= 10 # there can be at most 10 bus trips\nproblem += num_car_trips >= 0.6 * (num_bus_trips + num_car_trips) # at least 60% of the trips should be by car\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of bus trips:\", num_bus_trips.value())\nprint(\"The number of car trips:\", num_car_trips.value())\nprint(\"The total time required to transport the monkeys (minutes):\", objective.value())",
        "results": {
            "The number of bus trips": "10.0",
            "The number of car trips": "17.0",
            "The total time required to transport the monkeys (minutes)": "555.0"
        },
        "formulation": "minimize 30x+15y\nSubject to: \nx <= 10\ny >= 0.6(x+y)\n20x+6y >= 300 (end)",
        "type": "linear-notable",
        "index": 377,
        "length": 502,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA company produces five types of widgets: X, Y, Z, W, and V. The company needs to decide how many units of each widget to produce in next week.\n// variables: {\"number of units of widget X\": \"X\", \"number of units of widget Y\": \"Y\", \"number of units of widget Z\": \"Z\", \"number of units of widget W\": \"W\", \"number of units of widget V\": \"V\"}, where X, Y, Z, W, V >= 0 & X, Y, Z, W, V are integers\n\n## Define Objective Function:\nFor Widget X, the selling price is 10$, the material cost is 5$, and the production time is 2 hours. \nFor Widget Y, the selling price is 15$, the material cost is 7$, and the production time is 3 hours. \nFor Widget Z, the selling price is 20$, the material cost is 9$, and the production time is 4 hours.\nFor Widget W, the selling price is 25$, the material cost is 11$, and the production time is 5 hours.\nFor Widget V, the selling price is 30$, the material cost is 13$, and the production time is 6 hours.\nThe company has only one production line and can only produce one widget at a time. The company aims to maximize the rate at which it earns profits (which is defined as the sum of the selling profit divided by the sum of the production times).\n// Selling profit of X: Profit_X = (10 - 5) * X\n// Selling profit of Y: Profit_Y = (15 - 7) * Y\n// Selling profit of Z: Profit_Z = (20 - 9) * Z\n// Selling profit of W: Profit_W = (25 - 11) * W\n// Selling profit of V: Profit_V = (30 - 13) * V\n// So, the objective function is: Maximize (Profit_X + Profit_Y + Profit_Z + Profit_W + Profit_V) / (2 * X + 3 * Y + 4 * Z + 5 * W + 6 * V)\n\n## Generate Constraint-1:\nThe company has $900 available for material costs next week.\n// 5 * X + 7 * Y + 9 * Z + 11 * W + 13 * V <= 900\n\n## Generate Constraint-2:\nThe company wants to produce at least 10 units of each widget next week.\n// X >= 10; Y >= 10; Z >= 10; W >= 10; V >= 10\n\n## Generate Constraint-3:\nThe company wants to spend at most 400 hours on production next week.\n// 2 * X + 3 * Y + 4 * Z + 5 * W + 6 * V <= 400\n\n## Generate Constraint-4:\nThe company wants to ensure that the total production of Widget W does not exceed the combined production of Widgets X, Y, and Z.\n// W <= X + Y + Z\n\n## Generate Constraint-5:\nThe company wants to ensure that the total production of Widget V does not exceed the combined production of Widgets X, Y, Z, and W.\n// V <= X + Y + Z + W",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nX = model.addVar(vtype=\"INTEGER\", name=\"X\") # number of units of widget X\nmodel.addCons(X >= 0)\nY = model.addVar(vtype=\"INTEGER\", name=\"Y\") # number of units of widget Y\nmodel.addCons(Y >= 0)\nZ = model.addVar(vtype=\"INTEGER\", name=\"Z\") # number of units of widget Z\nmodel.addCons(Z >= 0)\nW = model.addVar(vtype=\"INTEGER\", name=\"W\") # number of units of widget W\nmodel.addCons(W >= 0)\nV = model.addVar(vtype=\"INTEGER\", name=\"V\") # number of units of widget V\nmodel.addCons(V >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == (10 - 5) * X + (15 - 7) * Y + (20 - 9) * Z + (25 - 11) * W + (30 - 13) * V - (2 * X + 3 * Y + 4 * Z + 5 * W + 6 * V) * model.addVar(vtype=\"CONTINUOUS\", name=\"dummy\"))\n\n# Add constraints\nmodel.addCons(5 * X + 7 * Y + 9 * Z + 11 * W + 13 * V <= 900)\nmodel.addCons(X >= 10)\nmodel.addCons(Y >= 10)\nmodel.addCons(Z >= 10)\nmodel.addCons(W >= 10)\nmodel.addCons(V >= 10)\nmodel.addCons(2 * X + 3 * Y + 4 * Z + 5 * W + 6 * V <= 400)\nmodel.addCons(W <= X + Y + Z)\nmodel.addCons(V <= X + Y + Z + W)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of units of widget X: \", model.getVal(X))\n    print(\"Number of units of widget Y: \", model.getVal(Y))\n    print(\"Number of units of widget Z: \", model.getVal(Z))\n    print(\"Number of units of widget W: \", model.getVal(W))\n    print(\"Number of units of widget V: \", model.getVal(V))\n    print(\"Objective Value (Profit Rate): \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of units of widget X": "10.0",
            "Number of units of widget Y": "10.0",
            "Number of units of widget Z": "10.0",
            "Number of units of widget W": "14.0",
            "Number of units of widget V": "40.0",
            "Objective Value (Profit Rate)": "1116.0"
        },
        "question": "A company produces five types of widgets: X, Y, Z, W, and V. The company needs to decide how many units of each widget to produce in next week. For Widget Y, the selling price is 15$, the material cost is 7$, and the production time is 3 hours. For Widget Z, the selling price is 20$, the material cost is 9$, and the production time is 4 hours. For Widget W, the selling price is 25$, the material cost is 11$, and the production time is 5 hours. For Widget V, the selling price is 30$, the material cost is 13$, and the production time is 6 hours. The company has only one production line and can only produce one widget at a time. The company aims to maximize the rate at which it earns profits (which is defined as the sum of the selling profit divided by the sum of the production times). The company has $900 available for material costs next week. The company wants to produce at least 10 units of each widget next week. The company wants to spend at most 400 hours on production next week. The company wants to ensure that the total production of Widget W does not exceed the combined production of Widgets X, Y, and Z. The company wants to ensure that the total production of Widget V does not exceed the combined production of Widgets X, Y, Z, and W. For Widget X, the selling price is 10$, the material cost is 5$, and the production time is 2 hours.",
        "type": "nonlinear-notable",
        "index": 378,
        "length": 1361,
        "var_num": 5
    },
    {
        "question": "A food delivery person can either have shifts on bikes or scooters. A shift on a bike can deliver 10 orders, takes 5 units of energy, and brings in $50 on tips because it is faster. A shift on a scooter can deliver 7 orders, takes 6 units of energy, and brings in $43 on tips.  The delivery person has available 40 shifts a month and has 230 units of energy and must bring at least 320 orders. He must have at least 5 shifts on a scooter because bikes are harder to get. How many shifts on each type of transportation should the delivery person schedule to maximize tips received?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_bike_shifts = LpVariable(\"NumBikeShifts\", lowBound=0, cat='Integer') # number of bike shifts\nnum_scooter_shifts = LpVariable(\"NumScooterShifts\", lowBound=0, cat='Integer') # number of scooter shifts\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeTips\", LpMaximize)\n\n# Define the objective function\nobjective = 50 * num_bike_shifts + 43 * num_scooter_shifts\nproblem += objective # maximize the total tips received\n\n# Define the constraints\nproblem += num_bike_shifts + num_scooter_shifts <= 40 # no more than 40 shifts in a month\nproblem += 5 * num_bike_shifts + 6 * num_scooter_shifts <= 230 # cannot exceed 230 units of energy\nproblem += 10 * num_bike_shifts + 7 * num_scooter_shifts >= 320 # must bring at least 320 orders\nproblem += num_scooter_shifts >= 5 # must have at least 5 shifts on a scooter\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of bike shifts:\", num_bike_shifts.value())\nprint(\"The number of scooter shifts:\", num_scooter_shifts.value())\nprint(\"The total tips received:\", objective.value())",
        "results": {
            "The number of bike shifts": "35.0",
            "The number of scooter shifts": "5.0",
            "The total tips received": "1965.0"
        },
        "formulation": "maximize 50x+43y\nSubject to: \nx+y <= 40\n5x+6y <= 230\n7y+10x >= 320\ny >= 5 (end)",
        "type": "linear-notable",
        "index": 379,
        "length": 580,
        "var_num": 2
    },
    {
        "question": "A dentist has 3000 units of resin to fill cavities in both molars and canines. Molars require 20 units of resin and 3 units of pain killer. Canines require 15 units of resin and 2.3 units of pain killer. Since this dentist sees more cavities in canines, at least 60% of cavities filled must be in canines. In addition, the dentist must reserve materials to fill at least 45 molars. How many of each type of teeth should the dentist schedule to fill to minimize the amount of pain killer needed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_molars = LpVariable(\"NumMolars\", lowBound=0, cat='Integer') # number of molars\nnum_canines = LpVariable(\"NumCanines\", lowBound=0, cat='Integer') # number of canines\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DentistScheduling\", LpMinimize)\n\n# Define the objective function\nobjective = 3 * num_molars + 2.3 * num_canines\nproblem += objective # minimize the total amount of pain killer needed\n\n# Define the constraints\nproblem += 20 * num_molars + 15 * num_canines <= 3000 # the total units of resin used must not exceed 3000\nproblem += num_molars >= 45 # must fill at least 45 molars\nproblem += num_canines >= (num_molars + num_canines) * 0.6 # at least 60% of cavities filled must be in canines\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of molars to fill:\", num_molars.value())\nprint(\"The number of canines to fill:\", num_canines.value())\nprint(\"The total amount of pain killer needed:\", objective.value())",
        "results": {
            "The number of molars to fill": "45.0",
            "The number of canines to fill": "68.0",
            "The total amount of pain killer needed": "291.4"
        },
        "formulation": "minimize 2.3y+3x\nSubject to: \n20x+15y <= 3000\ny >= 0.6(x+y)\nx >= 45 (end)",
        "type": "linear-notable",
        "index": 380,
        "length": 494,
        "var_num": 2
    },
    {
        "question": "An international shipping company uses large and small ships to transport containers around the world. A large ship can carry 500 containers while a small ship can carry 200 containers. Because most ports are small, the number of large ships cannot exceed the number of small ships. If the company is under contract needs to transport at least 3000 containers, find the minimum number of ships that can be used.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_large_ships = LpVariable(\"NumLargeShips\", lowBound=0, cat='Integer') # number of large ships\nnum_small_ships = LpVariable(\"NumSmallShips\", lowBound=0, cat='Integer') # number of small ships\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ShippingContainer\", LpMinimize)\n\n# Define the objective function\nobjective = num_large_ships + num_small_ships\nproblem += objective # minimize the total number of ships\n\n# Define the constraints\nproblem += 500 * num_large_ships + 200 * num_small_ships >= 3000 # need to transport at least 3000 containers\nproblem += num_large_ships <= num_small_ships # large ships cannot exceed small ships\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of large ships:\", num_large_ships.value())\nprint(\"The number of small ships:\", num_small_ships.value())\nprint(\"The minimum number of ships needed:\", objective.value())",
        "results": {
            "The number of large ships": "4.0",
            "The number of small ships": "5.0",
            "The minimum number of ships needed": "9.0"
        },
        "formulation": "minimize x+y\nSubject to: \nx <= y\n500x+200y >= 3000 (end)",
        "type": "linear-notable",
        "index": 381,
        "length": 411,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA bakery produces 4 types of cakes: chocolate, vanilla, strawberry, and lemon. The bakery has 3 ovens and needs to schedule the baking times (hour) for each type of cake. The operating time of the oven can only be set in increments of one hour.\n// variables: {\"baking time for chocolate cake\": \"Tc\", \"baking time for vanilla cake\": \"Tv\", \"baking time for strawberry cake\": \"Ts\", \"baking time for lemon cake\": \"Tl\"}, where Tc, Tv, Ts, Tl >= 0 & Tc, Tv, Ts, Tl are integers\n\n## Define Objective Function:\nThe bakery aims to maximize its daily revenue from selling cakes. The revenue from each type of cake is proportional to the square of its baking time (hour). Specifically, the revenue from chocolate cake is 5 * Tc^2, from vanilla cake is 4 * Tv^2, from strawberry cake is 3 * Ts^2, and from lemon cake is 2 * Tl^2. \n// The objective function is: Maximize (5 * Tc^2 + 4 * Tv^2 + 3 * Ts^2 + 2 * Tl^2)\n## Generate Constraint-1:\nThe bakery must also ensure that the total baking time for all cakes does not exceed 24 hours.\n// Tc + Tv + Ts + Tl <= 24\n\n## Generate Constraint-2:\nEach oven can only bake one type of cake at a time, and the bakery must ensure that each type of cake is baked at least once.\n// Tc >= 1; Tv >= 1; Ts >= 1; Tl >= 1\n\n## Generate Constraint-3:\nThe bakery has a limited supply of ingredients, which allows for a maximum of 10 hours of baking for chocolate cake, 8 hours for vanilla cake, 6 hours for strawberry cake, and 4 hours for lemon cake.\n// Tc <= 10; Tv <= 8; Ts <= 6; Tl <= 4",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nTc = model.addVar(vtype=\"I\", name=\"Tc\") # baking time for chocolate cake\nmodel.addCons(Tc >= 0)\nTv = model.addVar(vtype=\"I\", name=\"Tv\") # baking time for vanilla cake\nmodel.addCons(Tv >= 0)\nTs = model.addVar(vtype=\"I\", name=\"Ts\") # baking time for strawberry cake\nmodel.addCons(Ts >= 0)\nTl = model.addVar(vtype=\"I\", name=\"Tl\") # baking time for lemon cake\nmodel.addCons(Tl >= 0)\n\n# Define objective function\nobj = model.addVar(\"obj\")\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == 5 * Tc**2 + 4 * Tv**2 + 3 * Ts**2 + 2 * Tl**2)\n\n# Add constraints\nmodel.addCons(Tc + Tv + Ts + Tl <= 24)\nmodel.addCons(Tc >= 1)\nmodel.addCons(Tv >= 1)\nmodel.addCons(Ts >= 1)\nmodel.addCons(Tl >= 1)\nmodel.addCons(Tc <= 10)\nmodel.addCons(Tv <= 8)\nmodel.addCons(Ts <= 6)\nmodel.addCons(Tl <= 4)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Baking time for Chocolate cake: \", model.getVal(Tc))\n    print(\"Baking time for Vanilla cake: \", model.getVal(Tv))\n    print(\"Baking time for Strawberry cake: \", model.getVal(Ts))\n    print(\"Baking time for Lemon cake: \", model.getVal(Tl))\n    print(\"Total Revenue: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Baking time for Chocolate cake": "10.0",
            "Baking time for Vanilla cake": "8.00",
            "Baking time for Strawberry cake": "5.000",
            "Baking time for Lemon cake": "1.0",
            "Total Revenue": "833.0"
        },
        "question": "A bakery produces 4 types of cakes: chocolate, vanilla, strawberry, and lemon. The bakery has 3 ovens and needs to schedule the baking times (hour) for each type of cake. The operating time of the oven can only be set in increments of one hour. The bakery must also ensure that the total baking time for all cakes does not exceed 24 hours. Each oven can only bake one type of cake at a time, and the bakery must ensure that each type of cake is baked at least once. The bakery has a limited supply of ingredients, which allows for a maximum of 10 hours of baking for chocolate cake, 8 hours for vanilla cake, 6 hours for strawberry cake, and 4 hours for lemon cake. The bakery aims to maximize its daily revenue from selling cakes. The revenue from each type of cake is proportional to the square of its baking time (hour). Specifically, the revenue from chocolate cake is 5 * Tc^2, from vanilla cake is 4 * Tv^2, from strawberry cake is 3 * Ts^2, and from lemon cake is 2 * Tl^2.",
        "type": "nonlinear-notable",
        "index": 382,
        "length": 980,
        "var_num": 4
    },
    {
        "question": "You need to build a window, which is consists of a rectangular piece of clear glass with a semicircular piece of colored glass on top. The distance from top to bottom (across both the rectangle and the semicircle) shoule be at most 2 meters. The window should be no more than 1.5 meters wide. The colored glass transmits only 1/2 as much light per unit area as the clear glass.  Find the dimensions of the rectangular portion of the window that lets through the most light.",
        "scenario": "## Define Variables:\nYou need to build a window, which is consists of a rectangular piece of clear glass with a semicircular piece of colored glass on top.\n// variables: {\"width of the rectangle\": \"w\", \"height of the rectangle\": \"h\"}, where w, h >= 0\n\n## Define Objective Function:\nThe colored glass transmits only 1/2 as much light per unit area as the clear glass.  Find the dimensions of the rectangular portion of the window that lets through the most light.\n// The area of the clear glass is w * h, and the area of the semicircular colored glass is 1/2 * \u03c0 * (w/2)^2. \n// Assume the clear glass transmits 1 unit of light per unit area, then the colored glass transmits 1/2 unit of light per unit area.\n// Therefore, the objective function is: Maximize w * h + 1/2 * \u03c0 * (w/2)^2\n\n## Generate Constraint-1:\nThe distance from top to bottom (across both the rectangle and the semicircle) shoule be at most 2 meters.\n// The height of the rectangle is h, and the radius of the semicircle is w/2. \n// Therefore, the constraint is h + w/2 <= 2\n\n## Generate Constraint-2:\nThe window should be no more than 1.5 meters wide.\n// w <= 1.5",
        "code": "from pyscipopt import Model\nimport math\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nw = model.addVar(vtype=\"CONTINUOUS\", name=\"w\") # width of the rectangle\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the rectangle\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == w * h + 0.5 * math.pi * (w/2)**2)\n\n# Add constraints\nmodel.addCons(h + w/2 <= 2)\nmodel.addCons(w <= 1.5)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The width of the rectangle:\", model.getVal(w))\n    print(\"The height of the rectangle:\", model.getVal(h))\n    print(\"The maximum light transmitted: \", model.getVal(obj))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The width of the rectangle": "1.50000",
            "The height of the rectangle": "1.250000",
            "The maximum light transmitted": "2.758572988826752"
        },
        "type": "nonlinear-notable",
        "index": 383,
        "length": 473,
        "var_num": 2
    },
    {
        "question": "Tom Designs manufactures three coats: long, short, and mini. These coats are produced in two different factories: a north one and a south one. Running the north factory for an hour costs $200 and produces 20 long coats, 15 short coats, and 10 mini coats. Running the south factory for an hour costs $400 and yields 30 long coats, 25 short coats, and 30 mini coats. To meet customer demands, a minimum of 75 long coats, 30 short coats, and 40 mini coats must be produced daily. Determine a daily production plan that minimizes the cost of meeting the company\u2019s daily demands.",
        "formulation": "{\"variable\": [{\"description\": \"number of hours operating the north factory\", \"name\": \"x\"}, {\"description\": \"number of hours operating the south factory\", \"name\": \"y\"}], \"objective\": [{\"description\": \"cost of operation\", \"function\": \"200x + 400y\", \"sense\": \"Minimize\"}], \"constraint\": [{\"description\": \"long coat production requirement\", \"function\": \"20x + 30y >= 75\"}, {\"description\": \"short coat production requirement\", \"function\": \"15x + 25y >= 30\"}, {\"description\": \"mini coat production requirement\", \"function\": \"10x + 30y >= 40\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nhours_north_factory = LpVariable(\"HoursNorthFactory\", lowBound=0, cat='Continuous') # number of hours operating the north factory\nhours_south_factory = LpVariable(\"HoursSouthFactory\", lowBound=0, cat='Continuous') # number of hours operating the south factory\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CoatProduction\", LpMinimize)\n\n# Define the objective function\nobjective = 200 * hours_north_factory + 400 * hours_south_factory\nproblem += objective # minimize the cost of operation\n\n# Define the constraints\nproblem += 20 * hours_north_factory + 30 * hours_south_factory >= 75 # long coat production requirement\nproblem += 15 * hours_north_factory + 25 * hours_south_factory >= 30 # short coat production requirement\nproblem += 10 * hours_north_factory + 30 * hours_south_factory >= 40 # mini coat production requirement\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Number of hours the north factory operates:\", hours_north_factory.value())\nprint(\"Number of hours the south factory operates:\", hours_south_factory.value())\nprint(\"Total cost of operation:\", objective.value())\n",
        "results": {
            "Number of hours the north factory operates": "3.5",
            "Number of hours the south factory operates": "0.16666667",
            "Total cost of operation": "766.666668"
        },
        "type": "linear-notable",
        "index": 384,
        "length": 574,
        "var_num": 2
    },
    {
        "question": "We have a piece of cardboard. We are going to cut out the corners and fold up the sides to form a box. The cardboard is 50 cm by 20 cm. Determine the height of the box that will give a maximum volume.",
        "scenario": "## Define Variables:\nWe have a piece of cardboard. We are going to cut out the corners and fold up the sides to form a box. \n// variables: {\"height of the box\": \"h\", \"length of the box\": \"l\", \"width of the box\": \"w\"}, where h, l, w >= 0\n\n## Define Objective Function:\nDetermine the height of the box that will give a maximum volume.\n// Maximize l * w * h\n\n## Generate Constraint-1:\nThe cardboard is 50 cm by 20 cm.\n// height of the box is equal to the height of the cutted corners, so l = 50 - 2h, w = 20 - 2h.\n// Besides, the cutted height can not be more than half of the width of the cardboard, so 2h <= 20\n// So, the constraint are: l = 50 - 2h, w = 20 - 2h, 2h <= 20",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\")  # height of the box\nl = model.addVar(vtype=\"CONTINUOUS\", name=\"l\")  # length of the box\nw = model.addVar(vtype=\"CONTINUOUS\", name=\"w\")  # width of the box\n\n# Define objective function\nobj = model.addVar(vtype=\"CONTINUOUS\", name=\"obj\")\nmodel.addCons(obj == l * w * h)\nmodel.setObjective(obj, \"maximize\")\n\n# Add constraints\nmodel.addCons(l == 50 - 2*h)\nmodel.addCons(w == 20 - 2*h)\nmodel.addCons(2*h <= 20)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The height of the box:\", model.getVal(h))\n    print(\"The length of the box:\", model.getVal(l))\n    print(\"The width of the box:\", model.getVal(w))\n    print(\"The maximum volume of the box: \", model.getVal(l * w * h))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The height of the box": "4.401841559376038",
            "The length of the box": "41.196316881247924",
            "The width of the box": "11.196316881247924",
            "The maximum volume of the box": "2030.3362935990522"
        },
        "type": "nonlinear-notable",
        "index": 385,
        "length": 200,
        "var_num": 3
    },
    {
        "question": "A dog school trains labradors and golden retrievers to deliver newspaper. A labrador can deliver 7 newspapers at a time and requires 5 small bone treats for service. A golden retriever can deliver 10 newspapers at a time and requires 6 small bone treats per service. The school only has 1500 small bone treats available. In addition, at least 50 golden retrievers must be used and at most 60% of the dogs can be labradors. How many of each dog should be used to maximize the number of newspapers that can be delivered?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_labradors = LpVariable(\"NumLabradors\", lowBound=0, cat='Integer') # number of Labradors\nnum_golden_retrievers = LpVariable(\"NumGoldenRetrievers\", lowBound=50, cat='Integer') # number of Golden Retrievers\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"NewspaperDelivery\", LpMaximize)\n\n# Define the objective function\nobjective = 7 * num_labradors + 10 * num_golden_retrievers\nproblem += objective # maximize the total number of newspapers delivered\n\n# Define the constraints\nproblem += 5 * num_labradors + 6 * num_golden_retrievers <= 1500 # cannot exceed the available bone treats\nproblem += num_labradors <= 0.6 * (num_labradors + num_golden_retrievers) # at most 60% can be labradors\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of labradors:\", num_labradors.value())\nprint(\"The number of golden retrievers:\", num_golden_retrievers.value())\nprint(\"The number of newspapers delivered:\", objective.value())",
        "results": {
            "The number of labradors": "0.0",
            "The number of golden retrievers": "250.0",
            "The number of newspapers delivered": "2500.0"
        },
        "formulation": "maximize 7x+10y\nSubject to: \n5x+6y <= 1500\ny >= 50\nx <= 0.6(x+y) (end)",
        "type": "linear-notable",
        "index": 386,
        "length": 518,
        "var_num": 2
    },
    {
        "question": "A rectangular box with a square base, an open top is to be constructed. It should have a volume of at least 216 cubic inches. What should the dimensions of the box be to minimize the surface area of the box?",
        "scenario": "## Define Variables:\nA rectangular box with a square base, an open top is to be constructed.\n// variables: {\"length of the side of the square base\": \"x\", \"height of the box\": \"h\"}, where x, h >= 0\n\n## Define Objective Function:\nWhat should the dimensions of the box be to minimize the surface area of the box?\n// The surface area of the box is the sum of the area of the base and the area of the sides. The area of the base is x^2, and the area of the sides is 4*x*h.\n// Therefore, the objective function is: Minimize x^2 + 4*x*h\n\n## Generate Constraint-1:\nIt should have a volume of at least 216 cubic inches.\n// x^2 * h >= 216",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"CONTINUOUS\", name=\"x\") # length of the side of the square base\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the box\n\n# Define objective function\nobj = model.addVar(vtype=\"CONTINUOUS\", name=\"obj\")\nmodel.addCons(obj == x**2 + 4*x*h)\nmodel.setObjective(obj, \"minimize\")\n\n# Add constraints\nmodel.addCons(x**2 * h >= 216)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The length of the side of the square base:\", model.getVal(x))\n    print(\"The height of the box:\", model.getVal(h))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The length of the side of the square base": "7.5595262888686765",
            "The height of the box": "3.7797631444364974"
        },
        "type": "nonlinear-notable",
        "index": 387,
        "length": 207,
        "var_num": 2
    },
    {
        "question": "A hockey arena can hold at most 300 people and has both heated and regular seats. A profit of $30 is made on each heated seat and a profit of $20 is made on each regular seat. The arena reserves a minimum of 50 seats to be heated seats. However, since it is not too cold, at least 3 times as many people prefer to sit in regular seats. How many of each type of seat must be sold in order to maximize profit? What is the maximum profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of heated seats sold\", \"name\": \"x\"}, {\"description\": \"number of regular seats sold\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total profit\", \"function\": \"30x + 20y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"capacity constraint\", \"function\": \"x + y <= 300\"}, {\"description\": \"minimum number of heated seats\", \"function\": \"x >= 50\"}, {\"description\": \"regular seats preference\", \"function\": \"y >= 3x\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_heated_seats = LpVariable(\"NumHeatedSeats\", lowBound=50, cat='Integer') # number of heated seats sold\nnum_regular_seats = LpVariable(\"NumRegularSeats\", lowBound=0, cat='Integer') # number of regular seats sold\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"HockeyArenaProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 30 * num_heated_seats + 20 * num_regular_seats\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += num_heated_seats + num_regular_seats <= 300 # capacity constraint\nproblem += num_regular_seats >= 3 * num_heated_seats # regular seats preference\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of heated seats sold:\", num_heated_seats.value())\nprint(\"The number of regular seats sold:\", num_regular_seats.value())\nprint(\"The maximum profit:\", objective.value())\n",
        "results": {
            "The number of heated seats sold": "75.0",
            "The number of regular seats sold": "225.0",
            "The maximum profit": "6750.0"
        },
        "type": "linear-notable",
        "index": 388,
        "length": 435,
        "var_num": 2
    },
    {
        "question": "A mask making company ships masks to their retail stores using small boxes and large boxes. A small box holds 25 masks whereas a large box holds 45 masks. Since small boxes are easier to stack and will be used first to stock stores, there must be at least three times as many small boxes as large boxes. Additionally, at least 5 large boxes must be used. If at least 750 masks are required to be distributed, how many of each size of box should be used to minimize the total number of boxes needed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_small_boxes = LpVariable(\"NumSmallBoxes\", lowBound=0, cat='Integer') # number of small boxes\nnum_large_boxes = LpVariable(\"NumLargeBoxes\", lowBound=5, cat='Integer') # number of large boxes\n\n# Define the question as a minimum problem\nproblem = LpProblem(\"MaskDistribution\", LpMinimize)\n\n# Define the objective function\nobjective = num_small_boxes + num_large_boxes\nproblem += objective # minimize the total number of boxes\n\n# Define the constraints\nproblem += 25 * num_small_boxes + 45 * num_large_boxes >= 750 # at least 750 masks are required\nproblem += num_small_boxes >= 3 * num_large_boxes # at least three times as many small boxes as large boxes\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of small boxes:\", num_small_boxes.value())\nprint(\"The number of large boxes:\", num_large_boxes.value())\nprint(\"The total number of boxes:\", objective.value())",
        "results": {
            "The number of small boxes": "20.0",
            "The number of large boxes": "6.0",
            "The total number of boxes": "26.0"
        },
        "formulation": "minimize y+x\nSubject to: \n25x+45y >= 750\nx >= 3y\ny >= 5 (end)",
        "type": "linear-notable",
        "index": 389,
        "length": 498,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA manufacturing company produces three types of products: ProductA, ProductB, and ProductC. The company needs to decide the number of units to produce for each product in the next month. Additionally, the company can invest in automation to increase production efficiency, which affects the cost and production rate of each product.\n// variables: {\"number of units of ProductA\": \"UnitsA\", \"number of units of ProductB\": \"UnitsB\", \"number of units of ProductC\": \"UnitsC\", \"investment in automation for ProductA\": \"AutomationA\", \"investment in automation for ProductB\": \"AutomationB\", \"investment in automation for ProductC\": \"AutomationC\"}, where UnitsA, UnitsB, UnitsC, AutomationA, AutomationB, AutomationC >= 0 & UnitsA, UnitsB, UnitsC are integers, and AutomationA, AutomationB, AutomationC are continuous.\n\n## Define Objective Function:\nThe increase in profit is linearly proportional to the amount of automation investment for each product.\nThe initial profit per unit of ProductA is $50, but with automation, the profit increases by $5 per unit for every $100 invested in automation. \nThe initial profit per unit of ProductB is $70, and with automation, the profit increases by $7 per unit for every $100 invested in automation. \nThe initial profit per unit of ProductC is $60, and with automation, the profit increases by $6 per unit for every $100 invested in automation. \nThe company aims to maximize the total profit from all products.\n// Total profit for ProductA: ProfitA = (50 + 0.05 * AutomationA) * UnitsA\n// Total profit for ProductB: ProfitB = (70 + 0.07 * AutomationB) * UnitsB\n// Total profit for ProductC: ProfitC = (60 + 0.06 * AutomationC) * UnitsC\n// So, the objective function is: Maximize (ProfitA + ProfitB + ProfitC)\n\n## Generate Constraint-1:\nThe production cost for ProductA is $10 per unit, the production cost for ProductB is $15 per unit, and the production cost for ProductC is $20 per unit. The company has a total budget of $50,000 for production and automation investments.\n// 10 * UnitsA + 15 * UnitsB + 20 * UnitsC + AutomationA + AutomationB + AutomationC <= 50000\n\n## Generate Constraint-2:\nThe production capacity for the next month is limited to 1,000 units in total.\n// UnitsA + UnitsB + UnitsC <= 1,000\n\n## Generate Constraint-3:\nDue to market demand, the company must produce at least 100 units of ProductA and 150 units of ProductB.\n// UnitsA >= 100; UnitsB >= 150",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nUnitsA = model.addVar(vtype=\"INTEGER\", name=\"UnitsA\")  # number of units of ProductA\nmodel.addCons(UnitsA >= 0)\nUnitsB = model.addVar(vtype=\"INTEGER\", name=\"UnitsB\")  # number of units of ProductB\nmodel.addCons(UnitsB >= 0)\nUnitsC = model.addVar(vtype=\"INTEGER\", name=\"UnitsC\")  # number of units of ProductC\nmodel.addCons(UnitsC >= 0)\nAutomationA = model.addVar(vtype=\"CONTINUOUS\", name=\"AutomationA\")  # investment in automation for ProductA\nmodel.addCons(AutomationA >= 0)\nAutomationB = model.addVar(vtype=\"CONTINUOUS\", name=\"AutomationB\")  # investment in automation for ProductB\nmodel.addCons(AutomationB >= 0)\nAutomationC = model.addVar(vtype=\"CONTINUOUS\", name=\"AutomationC\")  # investment in automation for ProductC\nmodel.addCons(AutomationC >= 0)\n\n# Define objective function\nProfitA = (50 + 0.05 * AutomationA) * UnitsA\nProfitB = (70 + 0.07 * AutomationB) * UnitsB\nProfitC = (60 + 0.06 * AutomationC) * UnitsC\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == ProfitA + ProfitB + ProfitC)\n\n# Add constraints\nmodel.addCons(10 * UnitsA + 15 * UnitsB + 20 * UnitsC + AutomationA + AutomationB + AutomationC <= 50000)\nmodel.addCons(UnitsA + UnitsB + UnitsC <= 1000)\nmodel.addCons(UnitsA >= 100)\nmodel.addCons(UnitsB >= 150)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Units of ProductA: \", model.getVal(UnitsA))\n    print(\"Number of Units of ProductB: \", model.getVal(UnitsB))\n    print(\"Number of Units of ProductC: \", model.getVal(UnitsC))\n    print(\"Investment in Automation for ProductA: \", model.getVal(AutomationA))\n    print(\"Investment in Automation for ProductB: \", model.getVal(AutomationB))\n    print(\"Investment in Automation for ProductC: \", model.getVal(AutomationC))\n    print(\"Total Profit: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Units of ProductA": "100.0",
            "Number of Units of ProductB": "900.0",
            "Number of Units of ProductC": "0.0",
            "Investment in Automation for ProductA": "0.0",
            "Investment in Automation for ProductB": "35500.0",
            "Investment in Automation for ProductC": "0.0",
            "Total Profit": "2304500.00000000"
        },
        "question": "A manufacturing company produces three types of products: ProductA, ProductB, and ProductC. The company needs to decide the number of units to produce for each product in the next month and how much to invest in automation for each product to increase production efficiency. The relationship between automation investment and profit per unit for each product is given in the following Table.\n\n| Product | Initial Profit per Unit | Increase in Profit per Unit per $100 Automation Investment |\n|---------|-------------------------|-----------------------------------------------------------|\n| ProductA | $50                     | $5                                                         |\n| ProductB | $70                     | $7                                                         |\n| ProductC | $60                     | $6                                                         |\n\nThe company aims to maximize the total profit from all products. The production cost for ProductA is $10 per unit, the production cost for ProductB is $15 per unit, and the production cost for ProductC is $20 per unit. The company has a total budget of $50,000 for production and automation investments. The production capacity for the next month is limited to 1,000 units in total. Due to market demand, the company must produce at least 100 units of ProductA and 150 units of ProductB.\n",
        "type": "nonlinear-table",
        "index": 390,
        "length": 1378,
        "var_num": 6
    },
    {
        "question": "An industrial tire company delivers large tires for equipment to remote engineering sites either by cargo planes or ultrawide trucks. Each cargo plane can transport 10 tires per trip and costs $1000. Each ultrawide truck can transport 6 tires per trip and costs $700. The company needs to transport at least 200 tires and has available $22000. Because most remote sites don't have proper airports, the number of plane trips cannot exceed the number of ultrawide truck trips. How many trips of each should be done to minimize the total number of trips?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_plane_trips = LpVariable(\"NumPlaneTrips\", lowBound=0, cat='Integer') # number of plane trips\nnum_truck_trips = LpVariable(\"NumTruckTrips\", lowBound=0, cat='Integer') # number of truck trips\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"TireTransport\", LpMinimize)\n\n# Define the objective function\nobjective = num_plane_trips + num_truck_trips\nproblem += objective # minimize the total number of trips\n\n# Define the constraints\nproblem += 1000 * num_plane_trips + 700 * num_truck_trips <= 22000 # the cost must not exceed $22000\nproblem += 10 * num_plane_trips + 6 * num_truck_trips >= 200 # need to transport at least 200 tires\nproblem += num_plane_trips <= num_truck_trips # plane trips cannot exceed truck trips\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of plane trips:\", num_plane_trips.value())\nprint(\"The number of truck trips:\", num_truck_trips.value())\nprint(\"The total number of trips:\", objective.value())",
        "results": {
            "The number of plane trips": "11.0",
            "The number of truck trips": "15.0",
            "The total number of trips": "26.0"
        },
        "formulation": "minimize x+y\nSubject to: \n10x+6y >= 200\n1000x+700y <= 22000\nx <= y (end)",
        "type": "linear-notable",
        "index": 391,
        "length": 551,
        "var_num": 2
    },
    {
        "question": "Find the largest rectangle (that is, the rectangle with largest area) that fits inside the graph of the parabola y = x^2 below the line y = a (a is an unspecified constant value), with the top side of the rectangle on the horizontal line y = a.",
        "scenario": "## Define Variables:\nYou need to find the shape of the maximum area rectangle that fits inside a graph.\n// variables: {\"width of the rectangle\": \"w\", \"height of the rectangle\": \"h\", \"x-coordinate of the left top corner of the rectangle\": \"x_0\", \"y-coordinate of the left top corner of the rectangle\": \"y_0\"}, where w, h >= 0\n\n## Define Objective Function:\nThe graph is a parabola y = x^2 below the line y = 4. Please provide the area of the rectangle and the shape of the rectangle.\n// The area of the rectangle is given by the product of the width and the height.\n// Therefore, the objective function is: Maximize w * h\n\n## Generate Constraint-1:\nThe graph is a parabola y = x^2 below the line y = 4. The top side of the rectangle is on the horizontal line y = 4.\n// The top side of the rectangle is on the horizontal line y = 4, so y_0 = 4.\n// The four corners of the rectangle are (x_0, 4), (x_0 + w, 4), (x_0 + w, 4 - h), and (x_0, 4 - h), they should lie in the given area\n// So the constraints are: x_0^2 <= 4, (x_0 + w)^2 <= 4, (x_0 + w)^2 <= 4 - h, x_0^2 <= 4 - h",
        "code": "from pyscipopt import Model\nimport math\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nw = model.addVar(vtype=\"CONTINUOUS\", name=\"w\") # width of the rectangle\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the rectangle\nx_0 = model.addVar(vtype=\"CONTINUOUS\", name=\"x_0\") # x-coordinate of the left top corner of the rectangle\ny_0 = model.addVar(vtype=\"CONTINUOUS\", name=\"y_0\") # y-coordinate of the left top corner of the rectangle\n\n# Define objective function\nobj = model.addVar(vtype=\"CONTINUOUS\", name=\"obj\")\nmodel.addCons(obj == w * h)\nmodel.setObjective(obj, \"maximize\")\n\n# Add constraints\nmodel.addCons(y_0 == 4) # The top side of the rectangle is on the horizontal line y = 4\nmodel.addCons(x_0**2 <= 4) # x_0^2 <= 4\nmodel.addCons((x_0 + w)**2 <= 4) # (x_0 + w)^2 <= 4\nmodel.addCons((x_0 + w)**2 <= 4 - h) # (x_0 + w)^2 <= 4 - h\nmodel.addCons(x_0**2 <= 4 - h) # x_0^2 <= 4 - h\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The width of the rectangle:\", model.getVal(w))\n    print(\"The height of the rectangle:\", model.getVal(h))\n    print(\"The x-coordinate of the left top corner of the rectangle:\", model.getVal(x_0))\n    print(\"The y-coordinate of the left top corner of the rectangle:\", model.getVal(y_0))\n    print(\"The area of the rectangle: \", model.getVal(w * h))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The width of the rectangle": "1.1546927982726114",
            "The height of the rectangle": "2.666684674594099",
            "The x-coordinate of the left top corner of the rectangle": "0.0",
            "The y-coordinate of the left top corner of the rectangle": "4.0",
            "The area of the rectangle": "3.079201589017748"
        },
        "type": "nonlinear-notable",
        "index": 392,
        "length": 244,
        "var_num": 4
    },
    {
        "question": "Stockco is considering four investments. Investment 1 will yield a net present value (NPV) of $16,000; investment 2, an NPV of $22,000; investment 3, an NPV of $12,000; and in- vestment 4, an NPV of $8,000. Each investment requires a certain cash outflow at the pres- ent time: investment 1, $5,000; investment 2, $7,000; investment 3, $4,000; and investment 4, $3,000. Currently, $14,000 is available for investment. Tell Stockco how to maximize the NPV obtained from investments 1-4.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal investment quantities for each investment. Let's denote the number of investment 1 as I1, the number of investment 2 as I2, the number of investment 3 as I3, and the number of investment 4 as I4.\nAdditionally, since we can only choose to invest or not invest in each investment, the investment quantities should be binary. Therefore, we have the binary constraint: I1, I2, I3, I4 = 0 or 1.\n```Variables\nI1 //number of investment 1\nI2 //number of investment 2\nI3 //number of investment 3\nI4 //number of investment 4\nI1, I2, I3, I4 = 0 or 1 //binary variables\n```\n\n# Objective Function:\nWe want to maximize the net present value (NPV) obtained from investments 1-4. The NPV for each investment is given as follows: \nInvestment 1: $16,000\nInvestment 2: $22,000\nInvestment 3: $12,000\nInvestment 4: $8,000\nTherefore, the objective function is the sum of the NPV for each investment multiplied by the corresponding investment quantity: 16000I1 + 22000I2 + 12000I3 + 8000I4.\n```Objective Function\nMaximize: 16000I1 + 22000I2 + 12000I3 + 8000I4\n```\n\n# Constraints:\nThe available investment is $14,000, so the total cash outflow cannot exceed this amount. The cash outflow for each investment is given as follows:\nInvestment 1: $5,000\nInvestment 2: $7,000\nInvestment 3: $4,000\nInvestment 4: $3,000\nTherefore, the constraint is: 5000I1 + 7000I2 + 4000I3 + 3000I4 <= 14000.\n```Constraints\n5000I1 + 7000I2 + 4000I3 + 3000I4 <= 14000\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nI1 = LpVariable(\"Investment_1\", cat='Binary') # Investment 1\nI2 = LpVariable(\"Investment_2\", cat='Binary') # Investment 2\nI3 = LpVariable(\"Investment_3\", cat='Binary') # Investment 3\nI4 = LpVariable(\"Investment_4\", cat='Binary') # Investment 4\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeNPV\", LpMaximize)\n\n# Define the objective function\nproblem += 16000 * I1 + 22000 * I2 + 12000 * I3 + 8000 * I4\n\n# Define the constraints\nproblem += 5000 * I1 + 7000 * I2 + 4000 * I3 + 3000 * I4 <= 14000\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Investment in 1:\", I1.value())\nprint(\"Investment in 2:\", I2.value())\nprint(\"Investment in 3:\", I3.value())\nprint(\"Investment in 4:\", I4.value())\nprint(\"Total NPV:\", value(problem.objective))\n",
        "results": {
            "Investment in 1": "0.0",
            "Investment in 2": "1.0",
            "Investment in 3": "1.0",
            "Investment in 4": "1.0",
            "Total NPV": "42000.0"
        },
        "type": "linear-notable",
        "index": 393,
        "length": 485,
        "var_num": 4
    },
    {
        "question": "Western Pulp (WP) produces recycled paperboard for box manufacturers by combining four grades of recycled paper stock. Each grade of stock has a different strength, color, and texture. The strength, color, and texture of the paperboard are approximately a weighted average of those characteristics of the paper inputs. The following table gives the characteristics of the paper stocks and their cost per ton. WP has received an order for 500 tons of paperboard with a strength rating of at least 7, a color of at least 5, and texture of at least 6. WP would like to determine the least costly mix required to produce this paperboard.\n\nTable (Characteristics and cost per ton of each paper grade):\n| Paper Grade | Strength | Color | Texture | Cost/Ton |\n|-------------|----------|-------|---------|----------|\n| 1           | 8        | 9     | 8       | $150     |\n| 2           | 6        | 7     | 5       | $110     |\n| 3           | 5        | 5     | 6       | $90      |\n| 4           | 3        | 4     | 5       | $50      |",
        "formulation": "# Define Variables:\nTo determine the least costly mix required to produce the paperboard, we need to find the quantities of each paper stock to use. Let's denote the quantity of paper stock 1 as X1, the quantity of paper stock 2 as X2, the quantity of paper stock 3 as X3, and the quantity of paper stock 4 as X4.\n```Variables\nX1 //quantity of paper stock 1\nX2 //quantity of paper stock 2\nX3 //quantity of paper stock 3\nX4 //quantity of paper stock 4\nX1, X2, X3, X4 >= 0 and they are integers\n```\n\n# Objective Function:\nWe want to minimize the total cost of paper stock, so the objective function is the sum of the cost of each paper stock multiplied by its quantity. The cost of paper stock 1 is $150 per ton * X1 tons. The cost of paper stock 2 is $110 per ton * X2 tons. The cost of paper stock 3 is $90 per ton * X3 tons. The cost of paper stock 4 is $50 per ton * X4 tons. Therefore, the objective function is 150X1 + 110X2 + 90X3 + 50X4.\n```Objective Function\nMinimize: 150X1 + 110X2 + 90X3 + 50X4\n```\n\n# Constraints:\n- The total quantity of paper stock used should be equal to 500 tons.\n- The strength of the paperboard should be at least 7.\n- The color of the paperboard should be at least 5.\n- The texture of the paperboard should be at least 6.\n```Constraints\nX1 + X2 + X3 + X4 = 500 //total quantity of paper stock\n8X1 + 6X2 + 5X3 + 3X4 >= 7 //strength constraint\n9X1 + 7X2 + 5X3 + 4X4 >= 5 //color constraint\n8X1 + 5X2 + 6X3 + 3X4 >= 6 //texture constraint\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nX1 = LpVariable(\"X1\", lowBound=0, cat='Integer')\nX2 = LpVariable(\"X2\", lowBound=0, cat='Integer')\nX3 = LpVariable(\"X3\", lowBound=0, cat='Integer')\nX4 = LpVariable(\"X4\", lowBound=0, cat='Integer')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"WesternPulpMix\", LpMinimize)\n\n# Define the objective function\nobjective = 150 * X1 + 110 * X2 + 90 * X3 + 50 * X4\nproblem += objective\n\n# Define the constraints\nproblem += X1 + X2 + X3 + X4 == 500\nproblem += 8 * X1 + 6 * X2 + 5 * X3 + 3 * X4 >= 7 * (X1 + X2 + X3 + X4)\nproblem += 9 * X1 + 7 * X2 + 5 * X3 + 4 * X4 >= 5 * (X1 + X2 + X3 + X4)\nproblem += 8 * X1 + 5 * X2 + 6 * X3 + 5 * X4 >= 6 * (X1 + X2 + X3 + X4)\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The quantity of paper stock 1:\", X1.value())\nprint(\"The quantity of paper stock 2:\", X2.value())\nprint(\"The quantity of paper stock 3:\", X3.value())\nprint(\"The quantity of paper stock 4:\", X4.value())\nprint(\"The minimum cost:\", objective.value())\n",
        "results": {
            "The quantity of paper stock 1": "400.0",
            "The quantity of paper stock 2": "0.0",
            "The quantity of paper stock 3": "0.0",
            "The quantity of paper stock 4": "100.0",
            "The minimum cost": "65000.0"
        },
        "type": "linear-table",
        "index": 394,
        "length": 1032,
        "var_num": 4
    },
    {
        "question": "Euing Gas produces two types of gasoline (gas 1 and gas 2) from two types of oil (oil 1 and oil 2). Each gallon of gas 1 must contain at least 50 percent oil 1, and each gallon of gas 2 must contain at least 60 percent oil 1. Each gallon of gas 1 can be sold for 12$, and each gallon of gas 2 can be sold for 14$. Currently, 500 gallons of oil 1 and 1,000 gallons of oil 2 are available. As many as 1,500 more gallons of oil 1 can be purchased at the following prices: first 500 gallons, 25$ per gallon; next 500 gallons, 20$ per gallon; next 500 gallons, 15$ per gallon. Formulate an LP that will maximize Euing's profits (revenues - purchasing costs).",
        "formulation": "# Variables:\nWe need to determine the optimal amounts of oil and gas to maximize profits. Let's denote the following variables:\n```Variables\nx1 // amount of oil 1 purchased\nx11 // amount of oil 1 used to produce gas 1\nx12 // amount of oil 1 used to produce gas 2\nx21 // amount of oil 2 used to produce gas 1\nx22 // amount of oil 2 used to produce gas 2\nx1, x11, x12, x21, x22 >= 0\n```\n\n# Objective Function:\nWe want to maximize profits, which is the difference between the total revenue and the purchasing costs. The total revenue is the sum of the revenue from gas 1 and gas 2, which is 12x11 + 14x12 + 12x21 + 14x22. \nThe purchasing costs depend on the amount of oil 1 purchased. \nIf x1 is less than or equal to 500, the purchasing cost is 25x1. \nIf x1 is between 500 and 1000, the purchasing cost is 20(x1-500) + 500 * 25 = 20x1 + 2500 \nIf x1 is between 1000 and 1500, the purchasing cost is 15(x1-1000) + 500 * 20 + 500 * 25 = 15x1 + 7500\nTherefore, the objective function is:\n```Objective Function\nMaximize: 12x11 + 14x12 + 12x21 + 14x22 - \\left\\{\n        25x1 (0 <= x1 <= 500), \\\n    20x1 + 2500 (500 <= x1 <= 1000), \\\n    15x1 + 7500 (1000 <= x1 <= 1500)  \n\right\n.}\n```\n\n# Constraints:\nEach gallon of gas 1 must contain at least 50% oil 1, so the constraint on oil 1 usage for gas 1 is 0.\nSo, x11 / (x11 + x21) >= 0.5, which is equivalent to 0.5x11 - 0.5x21 >= 0.\nEach gallon of gas 2 must contain at least 60% oil 1, so the constraint on oil 1 usage for gas 2 is 0.\nSo, x12 / (x12 + x22) >= 0.6, which is equivalent to 0.4x12 - 0.6x22 >= 0.\nThe amount of oil 1 used to produce gas 1 and gas 2 cannot exceed the amount of oil 1 purchased, so the constraint on oil 1 usage is x11 + x12 <= x1 + 500.\nThe amount of oil 2 used to produce gas 1 and gas 2 cannot exceed the amount of oil 2 available, so the constraint on oil 2 usage is x21 + x22 <= 1000.\nThe amount of oil 1 purchased cannot exceed 1500 gallons, so the upper bound constraint on oil 1 purchased is x1 <= 1500.\n```Constraints\n0.5x11 - 0.5x21 >= 0\n0.4x12 - 0.6x22 >= 0\nx11 + x12 <= x1 + 500\nx21 + x22 <= 1000\nx1 <= 1500\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx1 = LpVariable(\"x1\", lowBound=0, cat='Continuous') # amount of oil 1 purchased\nx11 = LpVariable(\"x11\", lowBound=0, cat='Continuous') # amount of oil 1 used to produce gas 1\nx12 = LpVariable(\"x12\", lowBound=0, cat='Continuous') # amount of oil 1 used to produce gas 2\nx21 = LpVariable(\"x21\", lowBound=0, cat='Continuous') # amount of oil 2 used to produce gas 1\nx22 = LpVariable(\"x22\", lowBound=0, cat='Continuous') # amount of oil 2 used to produce gas 2\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"EuingGasProfitMaximization\", LpMaximize)\n\n# Define the objective function\n# We need to handle the piecewise linear cost function for purchasing oil 1\ncosts = (25 * x1, 20 * x1 + 2500, 15 * x1 + 7500)\nbreakpoints = (0, 500, 1000)\npurchase_cost = lpSum([costs[i] if breakpoints[i] <= x1 <= breakpoints[i+1] else 0 for i in range(len(breakpoints)-1)])\nrevenue = 12 * x11 + 14 * x12 + 12 * x21 + 14 * x22\nproblem += revenue - purchase_cost\n\n# Define the constraints\nproblem += 0.5 * x11 - 0.5 * x21 >= 0 # at least 50% oil 1 in gas 1\nproblem += 0.4 * x12 - 0.6 * x22 >= 0 # at least 60% oil 1 in gas 2\nproblem += x11 + x12 <= x1 + 500 # oil 1 usage\nproblem += x21 + x22 <= 1000 # oil 2 usage\nproblem += x1 <= 1500 # oil 1 purchase limit\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The amount of oil 1 purchased:\", x1.value())\nprint(\"The amount of oil 1 used to produce gas 1:\", x11.value())\nprint(\"The amount of oil 1 used to produce gas 2:\", x12.value())\nprint(\"The amount of oil 2 used to produce gas 1:\", x21.value())\nprint(\"The amount of oil 2 used to produce gas 2:\", x22.value())\nprint(\"The maximum profit:\", problem.objective.value())\n",
        "results": {
            "The amount of oil 1 purchased": "0.0",
            "The amount of oil 1 used to produce gas 1": "500.0",
            "The amount of oil 1 used to produce gas 2": "-0.0",
            "The amount of oil 2 used to produce gas 1": "500.0",
            "The amount of oil 2 used to produce gas 2": "0.0",
            "The maximum profit": "9500.0"
        },
        "type": "linear-notable",
        "index": 395,
        "length": 653,
        "var_num": 5
    },
    {
        "question": "Gandhi Cloth Company is capable of manufacturing three types of clothing: shirts, shorts, and pants. The manufacture of each type of clothing requires that Gandhi have the appropriate type of machinery available. The machinery needed to manufacture each type of clothing must be rented at the following rates: shirt machinery, $200 per week; shorts machinery, $150 per week; pants machinery, $100 per week. The manufacture of each type of clothing also requires the amounts of cloth and labor as shown in the following Table 1. Each week, 150 hours of labor and 160 sq yd of cloth are available. The variable unit cost and selling price for each type of clothing are shown in Table 2. Maximize Gandhi's weekly profits.\n\nTable 1 (The amount of labor hours and cloth required for each type of clothing):\n| Clothing Type | Labor Hours | Cloth (sq yd) |\n| ------------- | ----------- | ------------- |\n| Shirt         | 3           | 4             |\n| Shorts        | 2           | 3             |\n| Pants         | 6           | 4             |\n\nTable 2 (Revenue and Cost Information for each type of clothing):\n| Clothing Type | Sales Price | Variable Cost |\n| ------------- | ----------- | ------------- |\n| Shirt         | $12         | $6            |\n| Shorts        | $8          | $4            |\n| Pants         | $15         | $8            |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for shirts, shorts, and pants, as well as the number of machinery rented for each type. Let's denote the number of shirts produced each week as S, the number of shorts produced each week as SH, and the number of pants produced each week as P. Additionally, let's denote the number of shirt machineries rented as SM, the number of shorts machineries rented as SHM, and the number of pants machineries rented as PM.\n```Variables\nS // number of shirts produced each week\nSH // number of shorts produced each week\nP // number of pants produced each week\nS, SH, P >= 0 and they are integers // non-negative integer variables\nSM // whether the shirt machinery should be rented\nSHM // whether the shorts machinery should be rented\nPM // whether the pants machinery should be rented \nSM, SHM, PM = 0 or 1 // binary variables\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function (profit) is given by subtracting the total cost from the total revenue. \nThe total revenue is the sum of the revenue from shirts, shorts, and pants, which is 12S + 8SH + 15P.\nThe total cost is the sum of the cost of the machineries rented and the cost of the units produced. The cost of the shirt machinery is $200 per week * SM, the cost of the shorts machinery is $150 per week * SHM, and the cost of the pants machinery is $100 per week * PM. \nThe cost of the units produced is the sum of the cost of the shirts, shorts, and pants, which is 6S + 4SH + 8P.\nSo the total cost is 200SM + 150SHM + 100PM + 6S + 4SH + 8P.\nTherefore, the objective function is given by:\n12S + 8SH + 15P - 200SM - 150SHM - 100PM - 6S - 4SH - 8P = 6S + 4SH + 7P - 200SM - 150SHM - 100PM\n```Objective Function\nMaximize: 6S + 4SH + 7P - 200SM - 150SHM - 100PM\n```\n\n# Constraints:\nThe labor hours constraint states that the total labor hours used for shirts, shorts, and pants production should not exceed the available labor hours of 150 hours per week. This can be expressed as:\n3S + 2SH + 6P <= 150\n\nThe cloth constraint states that the total amount of cloth used for shirts, shorts, and pants production should not exceed the available cloth of 160 sq yd per week. This can be expressed as:\n4S + 3SH + 4P <= 160\n\n```Constraints\n3S + 2SH + 6P <= 150\n4S + 3SH + 4P <= 160\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nS = LpVariable(\"Shirts\", lowBound=0, cat='Integer')\nSH = LpVariable(\"Shorts\", lowBound=0, cat='Integer')\nP = LpVariable(\"Pants\", lowBound=0, cat='Integer')\nSM = LpVariable(\"ShirtMachinery\", cat='Binary')\nSHM = LpVariable(\"ShortsMachinery\", cat='Binary')\nPM = LpVariable(\"PantsMachinery\", cat='Binary')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"GandhiClothCompanyProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 6*S + 4*SH + 7*P - 200*SM - 150*SHM - 100*PM\nproblem += objective\n\n# Define the constraints\nproblem += 3*S + 2*SH + 6*P <= 150\nproblem += 4*S + 3*SH + 4*P <= 160\nproblem += S <= 1000*SM  # Ensures that if S > 0, then SM must be 1 (machinery rented)\nproblem += SH <= 1000*SHM  # Ensures that if SH > 0, then SHM must be 1 (machinery rented)\nproblem += P <= 1000*PM  # Ensures that if P > 0, then PM must be 1 (machinery rented)\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of shirts produced each week:\", S.value())\nprint(\"The number of shorts produced each week:\", SH.value())\nprint(\"The number of pants produced each week:\", P.value())\nprint(\"Shirt machinery rented:\", SM.value())\nprint(\"Shorts machinery rented:\", SHM.value())\nprint(\"Pants machinery rented:\", PM.value())\nprint(\"The maximum weekly profit:\", objective.value())\n",
        "results": {
            "The number of shirts produced each week": "0.0",
            "The number of shorts produced each week": "0.0",
            "The number of pants produced each week": "25.0",
            "Shirt machinery rented": "0.0",
            "Shorts machinery rented": "0.0",
            "Pants machinery rented": "1.0",
            "The maximum weekly profit": "75.0"
        },
        "type": "linear-table",
        "index": 396,
        "length": 1348,
        "var_num": 6
    },
    {
        "scenario": "## Define Variables:\nA manufacturing company produces three types of electronic devices: DeviceA, DeviceB, and DeviceC. The company needs to decide the number of units to produce for each device to optimize its profit. Additionally, the company can invest in research and development (R&D) to improve the efficiency of production, which affects the cost and quality of the devices.\n// variables: {\\\"number of units of DeviceA\\\": \\\"UnitsA\\\", \\\"number of units of DeviceB\\\": \\\"UnitsB\\\", \\\"number of units of DeviceC\\\": \\\"UnitsC\\\", \\\"R&D investment\\\": \\\"R&D\\\"}, where UnitsA, UnitsB, UnitsC >= 0 & are integers, R&D >= 0 & is a real number\n\n## Define Objective Function:\nThe profit per unit of DeviceA is $100, but it decreases by $0.5 for every $1000 spent on R&D. The profit per unit of DeviceB is $150, but it increases by $0.2 for every $1000 spent on R&D. The profit per unit of DeviceC is $200, but it remains constant regardless of R&D investment. The company aims to maximize total profit.\n// Total profit for DeviceA: ProfitA = (100 - 0.5 * (R&D / 1000)) * UnitsA\n// Total profit for DeviceB: ProfitB = (150 + 0.2 * (R&D / 1000)) * UnitsB\n// Total profit for DeviceC: ProfitC = 200 * UnitsC\n// So, the objective function is: Maximize (ProfitA + ProfitB + ProfitC - R&D)\n\n## Generate Constraint-1:\nThe company has a production capacity limit of 1000 units in total for all devices.\n// UnitsA + UnitsB + UnitsC <= 1000\n\n## Generate Constraint-2:\nDue to market demand, the number of DeviceA units produced must be at least twice the number of DeviceB units.\n// UnitsA >= 2 * UnitsB\n\n## Generate Constraint-3:\nThe company has a budget of $50,000 for R&D investment.\n// R&D <= 50,000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nUnitsA = model.addVar(vtype=\"INTEGER\", name=\"UnitsA\") # number of units of DeviceA\nmodel.addCons(UnitsA >= 0)\nUnitsB = model.addVar(vtype=\"INTEGER\", name=\"UnitsB\") # number of units of DeviceB\nmodel.addCons(UnitsB >= 0)\nUnitsC = model.addVar(vtype=\"INTEGER\", name=\"UnitsC\") # number of units of DeviceC\nmodel.addCons(UnitsC >= 0)\nR_D = model.addVar(vtype=\"CONTINUOUS\", name=\"R&D\") # R&D investment\nmodel.addCons(R_D >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == (100 - 0.5 * (R_D / 1000)) * UnitsA + (150 + 0.2 * (R_D / 1000)) * UnitsB + 200 * UnitsC - R_D)\n\n# Add constraints\nmodel.addCons(UnitsA + UnitsB + UnitsC <= 1000)\nmodel.addCons(UnitsA >= 2 * UnitsB)\nmodel.addCons(R_D <= 50000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Units of DeviceA: \", model.getVal(UnitsA))\n    print(\"Number of Units of DeviceB: \", model.getVal(UnitsB))\n    print(\"Number of Units of DeviceC: \", model.getVal(UnitsC))\n    print(\"R&D Investment: \", model.getVal(R_D))\n    print(\"Total Profit: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Units of DeviceA": "0.0",
            "Number of Units of DeviceB": "0.0",
            "Number of Units of DeviceC": "1000.0",
            "R&D Investment": "0.0",
            "Total Profit": "200000.0"
        },
        "question": "A manufacturing company produces three types of electronic devices: DeviceA, DeviceB, and DeviceC. The company needs to decide the number of units to produce for each device to optimize its profit. Additionally, the company can invest in research and development (R&D) to improve the efficiency of production, which affects the cost and quality of the devices. The company has a production capacity limit of 1000 units in total for all devices. Due to market demand, the number of DeviceA units produced must be at least twice the number of DeviceB units. The company has a budget of $50,000 for R&D investment. The profit per unit of DeviceA is $100, but it decreases by $0.5 for every $1000 spent on R&D. The profit per unit of DeviceB is $150, but it increases by $0.2 for every $1000 spent on R&D. The profit per unit of DeviceC is $200, but it remains constant regardless of R&D investment. The company aims to maximize total profit.",
        "type": "nonlinear-notable",
        "index": 397,
        "length": 938,
        "var_num": 4
    },
    {
        "question": "A bakery makes almond and pistachio croissants. An almond croissant requires 5 units of butter and 8 units of flour. A pistachio croissant requires 3 units of butter and 6 units of flour. The bakery has available 600 units of butter and 800 units of flour. Since the almond croissant is more popular, at least 3 times as many almond croissants should be made as pistachio croissants. If making an almond croissant takes 12 minutes and making a pistachio croissant takes 10 minutes, how many of each should be made to minimize the total production time?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_almond_croissants = LpVariable(\"NumAlmondCroissants\", lowBound=0, cat='Integer') # number of almond croissants\nnum_pistachio_croissants = LpVariable(\"NumPistachioCroissants\", lowBound=0, cat='Integer') # number of pistachio croissants\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BakeryProduction\", LpMinimize)\n\n# Define the objective function\nobjective = 12 * num_almond_croissants + 10 * num_pistachio_croissants\nproblem += objective # minimize the total production time\n\n# Define the constraints\nproblem += 5 * num_almond_croissants + 3 * num_pistachio_croissants <= 600 # butter usage should not exceed 600 units\nproblem += 8 * num_almond_croissants + 6 * num_pistachio_croissants <= 800 # flour usage should not exceed 800 units\nproblem += num_almond_croissants >= 3 * num_pistachio_croissants # at least 3 times as many almond croissants should be made\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of almond croissants:\", num_almond_croissants.value())\nprint(\"The number of pistachio croissants:\", num_pistachio_croissants.value())\nprint(\"The total production time in minutes:\", objective.value())",
        "results": {
            "The number of almond croissants": "0.0",
            "The number of pistachio croissants": "0.0",
            "The total production time in minutes": "0.0"
        },
        "formulation": "minimize 12x+10y\nSubject to: \n5x+3y <= 600\n8x+6y <= 800\nx >= 3y (end)",
        "type": "linear-notable",
        "index": 398,
        "length": 552,
        "var_num": 2
    },
    {
        "question": "An investor has $70,000 to divide among several investment instruments. The returns for municipal bonds, CDs, t-bills, and growth stocks are given in the following Table. The investor must adhere to specific guidelines for the investment distribution: 1. No more than 20% in municipal bonds. 2. Investment in CDs should not exceed the other three alternatives. 3. At least 30% invested in t-bills and CDs. 4. More should be invested in CDs and t-bills than in municipal bonds and growth stocks by a ratio of 1.2 to 1. 5. All $70,000 should be invested. Formulate an LP to maximize the profit.\n\nTable (Investment returns for each instrument):\n| Investment Instrument | Return Rate |\n| --------------------- | ----------- |\n| Municipal Bonds       | 8.5%        |\n| CDs                   | 5%          |\n| T-bills               | 6.5%        |\n| Growth Stocks         | 13%         |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal investment amounts for municipal bonds, CDs, treasury bills, and growth stocks. Let's denote the amount invested in municipal bonds as M, the amount invested in CDs as C, the amount invested in treasury bills as T, and the amount invested in growth stocks as G.\n```Variables\nM // amount invested in municipal bonds\nC // amount invested in CDs\nT // amount invested in treasury bills\nG // amount invested in growth stocks\nM, C, T, G >= 0\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function (profit) is given by the sum of the returns from each investment. The return from municipal bonds is 8.5% of the amount invested in municipal bonds, which is 0.085M. The return from CDs is 5% of the amount invested in CDs, which is 0.05C. The return from treasury bills is 6.5% of the amount invested in treasury bills, which is 0.065T. The return from growth stocks is 13% of the amount invested in growth stocks, which is 0.13G. Therefore, the objective function is 0.085M + 0.05C + 0.065T + 0.13G.\n```Objective Function\nMaximize: 0.085M + 0.05C + 0.065T + 0.13G\n```\n\n# Constraints:\n1. No more than 20% in municipal bonds: M <= 0.2 * (M + C + T + G)\n2. Investment in CDs should not exceed the other three alternatives: C <= M + T + G\n3. At least 30% invested in treasury bills and CDs: T + C >= 0.3 * (M + C + T + G)\n4. More should be invested in CDs and treasury bills than in municipal bonds and growth stocks by a ratio of 1.2 to 1: (C + T) / (M + G) >= 1.2, which is equivalent to C + T - 1.2M - 1.2G >= 0\n5. All $70,000 should be invested: M + C + T + G = 70000\nSubstituting the equation M + C + T + G = 70000 into the first four constraints, we get the following constraints:\n1. M <= 0.2 * 70000 = 14000\n2.  C <= M + T + G\n3. T + C >= 0.3 * 70000 = 21000\n4. C + T - 1.2M - 1.2G >= 0\nSo the constraints are as follows:\n```Constraints\nM <= 14000\nC <= M + T + G\nT + C >= 21000\nC + T - 1.2M - 1.2G >= 0\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nM = LpVariable(\"MunicipalBonds\", lowBound=0, cat='Continuous')\nC = LpVariable(\"CDs\", lowBound=0, cat='Continuous')\nT = LpVariable(\"TBills\", lowBound=0, cat='Continuous')\nG = LpVariable(\"GrowthStocks\", lowBound=0, cat='Continuous')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"InvestmentPortfolio\", LpMaximize)\n\n# Define the objective function\nobjective = 0.085 * M + 0.05 * C + 0.065 * T + 0.13 * G\nproblem += objective\n\n# Define the constraints\nproblem += M <= 14000\nproblem += C <= M + T + G\nproblem += T + C >= 21000\nproblem += C + T - 1.2 * M - 1.2 * G >= 0\nproblem += M + C + T + G == 70000\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Amount to invest in Municipal Bonds:\", M.value())\nprint(\"Amount to invest in CDs:\", C.value())\nprint(\"Amount to invest in T-Bills:\", T.value())\nprint(\"Amount to invest in Growth Stocks:\", G.value())\nprint(\"Total Profit:\", value(problem.objective))\n",
        "results": {
            "Amount to invest in Municipal Bonds": "0.0",
            "Amount to invest in CDs": "0.0",
            "Amount to invest in T-Bills": "38181.818",
            "Amount to invest in Growth Stocks": "31818.182",
            "Total Profit": "6618.1818299999995"
        },
        "type": "linear-table",
        "index": 399,
        "length": 881,
        "var_num": 4
    },
    {
        "question": "A chocolate maker has contracted to operate a small candy counter in a fashionable store. To start with, the selection of offerings will be intentionally limited. The counter will offer a regular mix of candy made up of equal parts of cashews, raisins, caramels, and chocolates, and a deluxe mix that is one-half cashews and one-half chocolates, which will be sold in one-pound boxes. In addition, the candy counter will offer individual one-pound boxes of cashews, raisins, caramels, and chocolates. A major attraction of the candy counter is that all candies are made fresh at the counter. However, storage space for supplies and ingredients is limited. Bins are available that can hold the amounts shown in the table. Ingredient Capacity (pounds per day)\nCashews 120 Raisins 200 Caramels 100 Chocolates 160. In order to present a good image and to encourage purchases, the counter will make at least 20 boxes of each type of product each day. Any leftover boxes at the end of the day will be removed and given to a nearby nursing home for goodwill. The profit per box for the various items has been determined as follows. Item Profit per Box Regular $.80 Deluxe .90 Cashews .70 Raisins .60 Caramels .50 Chocolates .75. Solve for the optimal values of the decision variables and the maximum profit.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal number of boxes for each type of candy that adheres to the constraints given. Let's denote the number of boxes of regular mix as R, the number of boxes of deluxe as D, the number of boxes of cashews as C, the number of boxes of raisins as R, the number of boxes of caramels as C, and the number of boxes of chocolates as C.\n```Variables\nReg // number of boxes of regular mix\nDel // number of boxes of deluxe\nCas // number of boxes of cashews\nRais // number of boxes of raisins\nCar // number of boxes of caramels\nChoc // number of boxes of chocolates\nReg, Del, Cas, Rais, Car, Choc >= 0 and they are integers // non-negative and integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function (profit) is given by summing the profit from each type of candy. The profit per box for each type of candy is given as follows:\n- Regular mix: $0.80\n- Deluxe: $0.90\n- Cashews: $0.70\n- Raisins: $0.60\n- Caramels: $0.50\n- Chocolates: $0.75\n\nTherefore, the objective function is:\n```Objective Function\nMaximize: 0.80Reg + 0.90Del + 0.70Cas + 0.60Rais + 0.50Car + 0.75Choc\n```\n\n# Constraints:\nWe need to consider the following constraints:\n- Maximum capacity of cashews: The total weight of cashews used in the regular mix, deluxe, and individual cashew boxes should not exceed 120 pounds.\n- Maximum capacity of raisins: The total weight of raisins used in the regular mix and individual raisin boxes should not exceed 200 pounds.\n- Maximum capacity of caramels: The total weight of caramels used in the regular mix and individual caramel boxes should not exceed 100 pounds.\n- Maximum capacity of chocolates: The total weight of chocolates used in the regular mix, deluxe, and individual chocolate boxes should not exceed 160 pounds.\n- Minimum number of boxes for each type of candy: At least 20 boxes of each type of candy should be made each day.\n\nTherefore, the constraints are:\n```Constraints\n0.25Reg + 0.5Del + Cas <= 120 // maximum capacity of cashews\n0.25Reg + Rais <= 200 // maximum capacity of raisins\n0.25Reg + Car <= 100 // maximum capacity of caramels\n0.25Reg + 0.5Del + Choc <= 160 // maximum capacity of chocolates\nReg >= 20 // minimum boxes of regular mix\nDel >= 20 // minimum boxes of deluxe\nCas >= 20 // minimum boxes of cashews\nRais >= 20 // minimum boxes of raisins\nCar >= 20 // minimum boxes of caramels\nChoc >= 20 // minimum boxes of chocolates\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nReg = LpVariable(\"Regular\", lowBound=20, cat='Integer') # number of boxes of regular mix\nDel = LpVariable(\"Deluxe\", lowBound=20, cat='Integer') # number of boxes of deluxe\nCas = LpVariable(\"Cashews\", lowBound=20, cat='Integer') # number of boxes of cashews\nRais = LpVariable(\"Raisins\", lowBound=20, cat='Integer') # number of boxes of raisins\nCar = LpVariable(\"Caramels\", lowBound=20, cat='Integer') # number of boxes of caramels\nChoc = LpVariable(\"Chocolates\", lowBound=20, cat='Integer') # number of boxes of chocolates\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CandyCounterProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 0.80*Reg + 0.90*Del + 0.70*Cas + 0.60*Rais + 0.50*Car + 0.75*Choc\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 0.25*Reg + 0.5*Del + Cas <= 120 # maximum capacity of cashews\nproblem += 0.25*Reg + Rais <= 200 # maximum capacity of raisins\nproblem += 0.25*Reg + Car <= 100 # maximum capacity of caramels\nproblem += 0.25*Reg + 0.5*Del + Choc <= 160 # maximum capacity of chocolates\nproblem += Reg >= 20 # minimum boxes of regular mix\nproblem += Del >= 20 # minimum boxes of deluxe\nproblem += Cas >= 20 # minimum boxes of cashews\nproblem += Rais >= 20 # minimum boxes of raisins\nproblem += Car >= 20 # minimum boxes of caramels\nproblem += Choc >= 20 # minimum boxes of chocolates\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of regular mix boxes:\", Reg.value())\nprint(\"The number of deluxe mix boxes:\", Del.value())\nprint(\"The number of cashew boxes:\", Cas.value())\nprint(\"The number of raisin boxes:\", Rais.value())\nprint(\"The number of caramel boxes:\", Car.value())\nprint(\"The number of chocolate boxes:\", Choc.value())\nprint(\"The maximum profit:\", value(problem.objective))\n",
        "results": {
            "The number of regular mix boxes": "320.0",
            "The number of deluxe mix boxes": "40.0",
            "The number of cashew boxes": "20.0",
            "The number of raisin boxes": "120.0",
            "The number of caramel boxes": "20.0",
            "The number of chocolate boxes": "60.0",
            "The maximum profit": "433.0"
        },
        "type": "linear-table",
        "index": 400,
        "length": 1300,
        "var_num": 6
    },
    {
        "question": "There has been an oil spill in the ocean and ducks need to be taken to shore to be cleaned either by boat or by canoe. A boat can take 10 ducks per trip while a canoe can take 8 ducks per trip. Since the boats are motor powered, they take 20 minutes per trip while the canoes take 40 minutes per trip. In order to avoid further environmental damage, there can be at most 12 boat trips and at least 60% of the trips should be by canoe. If at least 300 ducks need to be taken to shore, how many of each transportation method should be used to minimize the total amount of time needed to transport the ducks?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_boat_trips = LpVariable(\"NumBoatTrips\", lowBound=0, upBound=12, cat='Integer') # number of boat trips\nnum_canoe_trips = LpVariable(\"NumCanoeTrips\", lowBound=0, cat='Integer') # number of canoe trips\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DuckCleaningTransport\", LpMinimize)\n\n# Define the objective function\nobjective = 20 * num_boat_trips + 40 * num_canoe_trips\nproblem += objective # minimize the total amount of time needed to transport the ducks\n\n# Define the constraints\nproblem += 10 * num_boat_trips + 8 * num_canoe_trips >= 300 # at least 300 ducks need to be taken to shore\nproblem += num_canoe_trips >= 0.6 * (num_canoe_trips + num_boat_trips) # at least 60% of the trips should be by canoe\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of boat trips:\", num_boat_trips.value())\nprint(\"The number of canoe trips:\", num_canoe_trips.value())\nprint(\"The total amount of time:\", objective.value())",
        "results": {
            "The number of boat trips": "12.0",
            "The number of canoe trips": "23.0",
            "The total amount of time": "1160.0"
        },
        "formulation": "minimize 20x+40y\nSubject to: \nx <= 12\ny >= 0.6(x+y)\n10x+8y >= 300 (end)",
        "type": "linear-notable",
        "index": 401,
        "length": 605,
        "var_num": 2
    },
    {
        "question": "A chemical company is transporting their hydrogen using two different methods, high pressure tube trailers and liquefied hydrogen tankers. The first method is a high-pressure tube trailer which can transport 50 cubic meters each per trip at a cost of $500. The second method is using liquefied hydrogen tankers which can transport 30 cubic meters each per trip at a cost of $200. The company needs to transport at least 300 cubic meters of hydrogen and they have budget of $3750 available. In addition, the number of transports done by the high pressure tube trailer method has to be less than the number of transports done by the liquefied hydrogen tanker method. How many of each transportation method should they use to minimize the total number of trips?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_tube_trips = LpVariable(\"NumTubeTrips\", lowBound=0, cat='Integer') # number of tube trips\nnum_tanker_trips = LpVariable(\"NumTankerTrips\", lowBound=0, cat='Integer') # number of tanker trips\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ChemicalTransport\", LpMinimize)\n\n# Define the objective function\nobjective = num_tube_trips + num_tanker_trips\nproblem += objective # minimize the total number of trips\n\n# Define the constraints\nproblem += 50 * num_tube_trips + 30 * num_tanker_trips >= 300 # they need to transport at least 300 cubic meters\nproblem += 500 * num_tube_trips + 200 * num_tanker_trips <= 3750 # the cost must be at most $3750\nproblem += num_tube_trips <= num_tanker_trips - 1 # tube trips must be less than the number of tanker trips\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of high-pressure tube trailer transports:\", num_tube_trips.value())\nprint(\"The number of liquefied hydrogen tanker transports:\", num_tanker_trips.value())\nprint(\"The total number of trips:\", objective.value())",
        "results": {
            "The number of high-pressure tube trailer transports": "3",
            "The number of liquefied hydrogen tanker transports": "5",
            "The total number of trips": "8"
        },
        "formulation": "minimize x+y\nSubject to: \n50x+30y >= 1000\n500x+200y <= 3750\nx <= y (end)",
        "type": "linear-notable",
        "index": 402,
        "length": 758,
        "var_num": 2
    },
    {
        "question": "Super Shop sells cat paw snacks and gold shark snacks in bulk. It plans to sell them into two snack mix products. The first mix contains 20% cat paw snacks and 80% gold shark snacks. The second mix contains 35% cat paw snacks and 65% gold shark snacks. The store has on hand 20 kg of cat paw snacks and 50 kg of gold shark snacks. If the profit per kg of the first mix is $12 and the profit per kg of the second mix is $15, how many kg of each should be prepared to maximize profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nfirst_mix = LpVariable(\"FirstMix\", lowBound=0, cat='Continuous') # kg of the first mix\nsecond_mix = LpVariable(\"SecondMix\", lowBound=0, cat='Continuous') # kg of the second mix\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 12 * first_mix + 15 * second_mix\nproblem += objective # maximize profit\n\n# Define the constraints\nproblem += 0.20 * first_mix + 0.35 * second_mix <= 20 # can't exceed available cat paw snacks\nproblem += 0.80 * first_mix + 0.65 * second_mix <= 50 # can't exceed available gold shark snacks\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The kg of the first mix:\", first_mix.value())\nprint(\"The kg of the second mix:\", second_mix.value())\nprint(\"The total profit:\", objective.value())",
        "results": {
            "The kg of the first mix": "30.0",
            "The kg of the second mix": "40.0",
            "The total profit": "960.0"
        },
        "formulation": "maximize 12x+15y\nSubject to: \n0.2x+0.35y <= 20\n0.8x+0.65y <= 50 (end)",
        "type": "linear-notable",
        "index": 403,
        "length": 482,
        "var_num": 2
    },
    {
        "question": "A meat processing plant uses two machines, a meat slicer and a meat packer, to make their hams and pork ribs. To produce one batch of hams requires 4 hours on the meat slicer and 2.5 hours on the meat packer. To produce one batch of pork ribs requires 2 hours on the meat slicer and 3.5 hours on the meat packer. Each machine runs for at most 4000 hours per year. If the profit per batch of hams is $150 and the profit per batch of pork ribs is $300, how many batches of each should be made to maximize profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_hams = LpVariable(\"NumHams\", lowBound=0, cat='Integer') # number of ham batches\nnum_ribs = LpVariable(\"NumRibs\", lowBound=0, cat='Integer') # number of pork rib batches\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MeatProcessingProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 150 * num_hams + 300 * num_ribs\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 4 * num_hams + 2 * num_ribs <= 4000 # slicer machine hours\nproblem += 2.5 * num_hams + 3.5 * num_ribs <= 4000 # packer machine hours\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of batches of hams:\", num_hams.value())\nprint(\"The number of batches of pork ribs:\", num_ribs.value())\nprint(\"The total profit:\", objective.value())",
        "results": {
            "The number of batches of hams": "1.0",
            "The number of batches of pork ribs": "1142.0",
            "The total profit": "342750.0"
        },
        "formulation": "maximize 150x+300y\nSubject to: \n4x+2y <= 4000\n2.5x+3.5y <= 4000 (end)",
        "type": "linear-notable",
        "index": 404,
        "length": 510,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA farm is cultivating three types of crops: Corn, Wheat, and Soybeans. The farm needs to decide how many acres to allocate to each crop for the upcoming growing season. Additionally, the farm is considering leasing some of its land to another farmer.\n// variables: {\"acres of Corn\": \"CornAcres\", \"acres of Wheat\": \"WheatAcres\", \"acres of Soybeans\": \"SoybeansAcres\", \"acres leased to another farmer\": \"LeasedAcres\"}, where CornAcres, WheatAcres, SoybeansAcres, LeasedAcres >= 0 & all are integers\n\n## Define Objective Function:\nFor Corn, the Expected Profit per Acre is $500, the Cost per Acre is $200, and the Water Usage per Acre is 1000 gallons.\nFor Wheat, the Expected Profit per Acre is $400, the Cost per Acre is $150, and the Water Usage per Acre is 800 gallons.\nFor Soybeans, the Expected Profit per Acre is $300, the Cost per Acre is $100, and the Water Usage per Acre is 500 gallons.\nFor leased land, the Rental Income per Acre is $100.\nThe farm aims to maximize the average profit per acre (which is defined as the total profit divided by the total acres used for all purposes).\n// Total profit for Corn: Profit_Corn = (500 - 200) * CornAcres\n// Total profit for Wheat: Profit_Wheat = (400 - 150) * WheatAcres\n// Total profit for Soybeans: Profit_Soybeans = (300 - 100) * SoybeansAcres\n// Total profit for leased land: Profit_Leased = 100 * LeasedAcres\n// So, the objective function is: Maximize ((Profit_Corn + Profit_Wheat + Profit_Soybeans + Profit_Leased) / (CornAcres + WheatAcres + SoybeansAcres + LeasedAcres))\n\n## Generate Constraint-1:\nThe farm has a total of 1000 acres available for the season.\n// CornAcres + WheatAcres + SoybeansAcres + LeasedAcres <= 1000\n\n## Generate Constraint-2:\nDue to soil conditions, the farm can allocate at most 400 acres to Corn.\n// CornAcres <= 400\n\n## Generate Constraint-3:\nThe farm has a water allocation of 700,000 gallons for the season.\n// 1000 * CornAcres + 800 * WheatAcres + 500 * SoybeansAcres <= 700,000\n\n## Generate Constraint-4:\nThe farm wants to ensure that at least 30 acres are dedicated to each crop.\n// CornAcres >= 30; WheatAcres >= 30; SoybeansAcres >= 30",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nCornAcres = model.addVar(vtype=\"INTEGER\", name=\"CornAcres\") # acres of Corn\nmodel.addCons(CornAcres >= 0)\nWheatAcres = model.addVar(vtype=\"INTEGER\", name=\"WheatAcres\") # acres of Wheat\nmodel.addCons(WheatAcres >= 0)\nSoybeansAcres = model.addVar(vtype=\"INTEGER\", name=\"SoybeansAcres\") # acres of Soybeans\nmodel.addCons(SoybeansAcres >= 0)\nLeasedAcres = model.addVar(vtype=\"INTEGER\", name=\"LeasedAcres\") # acres leased to another farmer\nmodel.addCons(LeasedAcres >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj * (CornAcres + WheatAcres + SoybeansAcres + LeasedAcres) == ((500 - 200) * CornAcres + (400 - 150) * WheatAcres + (300 - 100) * SoybeansAcres + 100 * LeasedAcres))\n\n# Add constraints\nmodel.addCons(CornAcres + WheatAcres + SoybeansAcres + LeasedAcres <= 1000)\nmodel.addCons(CornAcres <= 400)\nmodel.addCons(1000 * CornAcres + 800 * WheatAcres + 500 * SoybeansAcres <= 700000)\nmodel.addCons(CornAcres >= 30)\nmodel.addCons(WheatAcres >= 30)\nmodel.addCons(SoybeansAcres >= 30)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Acres of Corn: \", model.getVal(CornAcres))\n    print(\"Acres of Wheat: \", model.getVal(WheatAcres))\n    print(\"Acres of Soybeans: \", model.getVal(SoybeansAcres))\n    print(\"Acres Leased: \", model.getVal(LeasedAcres))\n    print(\"Average Profit per Acre: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Acres of Corn": "400.0",
            "Acres of Wheat": "30.0",
            "Acres of Soybeans": "30.0",
            "Acres Leased": "0.0",
            "Average Profit per Acre": "290.2173913043478"
        },
        "question": "A farm is cultivating three types of crops: Corn, Wheat, and Soybeans. The farm needs to decide how many acres to allocate to each crop for the upcoming growing season. Additionally, the farm is considering leasing some of its land to another farmer. For Wheat, the Expected Profit per Acre is $400, the Cost per Acre is $150, and the Water Usage per Acre is 800 gallons. For Soybeans, the Expected Profit per Acre is $300, the Cost per Acre is $100, and the Water Usage per Acre is 500 gallons. For leased land, the Rental Income per Acre is $100. The farm aims to maximize the average profit per acre (which is defined as the total profit divided by the total acres used for all purposes). The farm has a total of 1000 acres available for the season. Due to soil conditions, the farm can allocate at most 400 acres to Corn. The farm has a water allocation of 700,000 gallons for the season. The farm wants to ensure that at least 30 acres are dedicated to each crop. For Corn, the Expected Profit per Acre is $500, the Cost per Acre is $200, and the Water Usage per Acre is 1000 gallons.",
        "type": "nonlinear-notable",
        "index": 405,
        "length": 1089,
        "var_num": 4
    },
    {
        "question": "A factory transports rice to the city in horse-drawn carts that are either medium or large size. A medium sized cart requires 2 horses and can carry 30 kg of rice. A large sized cart requires 4 horses and can carry 70 kg of rice.  The factory has 60 horses available. Because the horses don't get along well, the number of medium sized carts must be three times the number of large sized carts. In addition, there must be at least 5 medium sized carts and at least 5 large sized carts. How many of each cart size should be used to maximize the amount of rice that can be transported?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_medium_carts = LpVariable(\"NumMediumCarts\", lowBound=5, cat='Integer') # number of medium sized carts\nnum_large_carts = LpVariable(\"NumLargeCarts\", lowBound=5, cat='Integer') # number of large sized carts\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"RiceTransport\", LpMaximize)\n\n# Define the objective function\nobjective = 30 * num_medium_carts + 70 * num_large_carts\nproblem += objective # maximize the total amount of rice transported\n\n# Define the constraints\nproblem += 2 * num_medium_carts + 4 * num_large_carts <= 60 # the number of horses used must not exceed 60\nproblem += num_medium_carts == 3 * num_large_carts # the number of medium carts should be three times the large carts\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of medium sized carts:\", num_medium_carts.value())\nprint(\"The number of large sized carts:\", num_large_carts.value())\nprint(\"The amount of rice transported:\", objective.value())",
        "results": {
            "The number of medium sized carts": "18.0",
            "The number of large sized carts": "6.0",
            "The amount of rice transported": "960.0"
        },
        "formulation": "maximize 30x+70y\nSubject to: \n2x+4y <= 60\nx >= 3y\nx >= 5\ny >= 5 (end)",
        "type": "linear-notable",
        "index": 406,
        "length": 583,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA renewable energy company is planning to install three types of solar power plants: large-scale, medium-scale, and small-scale. The company needs to decide how many of each type of plant to build and how much capital to invest in each type of plant. The efficiency of energy production varies by plant size, and the cost of installation also differs.\n// variables: {\"number of large-scale plants\": \"LargePlants\", \"number of medium-scale plants\": \"MediumPlants\", \"number of small-scale plants\": \"SmallPlants\", \"capital investment per large-scale plant\": \"CapitalLarge\", \"capital investment per medium-scale plant\": \"CapitalMedium\", \"capital investment per small-scale plant\": \"CapitalSmall\"}, where LargePlants, MediumPlants, SmallPlants, CapitalLarge, CapitalMedium, CapitalSmall >= 0 and LargePlants, MediumPlants, SmallPlants are integers, and CapitalLarge, CapitalMedium, CapitalSmall are continuous.\n\n## Define Objective Function:\nThe daily energy output of each type of plant is proportional to the capital invested in that plant. The large-scale plants have an efficiency of 1000 kWh per day per $60,000 invested, the medium-scale plants have an efficiency of 700 kWh per day per $50,000 invested, and the small-scale plants have an efficiency of 500 kWh per day per $30,000 invested. The company wants to maximize the total daily energy output.\n// Energy_Large = 1000 * LargePlants * CapitalLarge / 60,000\n// Energy_Medium = 700 * MediumPlants * CapitalMedium / 50,000\n// Energy_Small = 500 * SmallPlants * CapitalSmall / 30,000\n// So, the objective function is: Maximize (Energy_Large + Energy_Medium + Energy_Small)\n\n## Generate Constraint-1:\nThe company has a total capital budget of $1,000,000 for investment in solar plants.\n// LargePlants * CapitalLarge + MediumPlants * CapitalMedium + SmallPlants * CapitalSmall <= 1,000,000\n\n## Generate Constraint-2:\nDue to zoning regulations, the company can only build a maximum of 5 large-scale plants.\n// LargePlants <= 5\n\n## Generate Constraint-3:\nThe total number of plants (regardless of size) must not exceed 20.\n// LargePlants + MediumPlants + SmallPlants <= 20",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nLargePlants = model.addVar(vtype=\"INTEGER\", name=\"LargePlants\") # number of large-scale plants\nmodel.addCons(LargePlants >= 0)\nMediumPlants = model.addVar(vtype=\"INTEGER\", name=\"MediumPlants\") # number of medium-scale plants\nmodel.addCons(MediumPlants >= 0)\nSmallPlants = model.addVar(vtype=\"INTEGER\", name=\"SmallPlants\") # number of small-scale plants\nmodel.addCons(SmallPlants >= 0)\nCapitalLarge = model.addVar(vtype=\"CONTINUOUS\", name=\"CapitalLarge\") # capital investment per large-scale plant\nmodel.addCons(CapitalLarge >= 0)\nCapitalMedium = model.addVar(vtype=\"CONTINUOUS\", name=\"CapitalMedium\") # capital investment per medium-scale plant\nmodel.addCons(CapitalMedium >= 0)\nCapitalSmall = model.addVar(vtype=\"CONTINUOUS\", name=\"CapitalSmall\") # capital investment per small-scale plant\nmodel.addCons(CapitalSmall >= 0)\n\n# Define objective function\nEnergy_Large = 1000 * LargePlants * CapitalLarge / 60000\nEnergy_Medium = 700 * MediumPlants * CapitalMedium / 50000\nEnergy_Small = 500 * SmallPlants * CapitalSmall / 30000\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == Energy_Large + Energy_Medium + Energy_Small)\n\n# Add constraints\nmodel.addCons(LargePlants * CapitalLarge + MediumPlants * CapitalMedium + SmallPlants * CapitalSmall <= 1000000)\nmodel.addCons(LargePlants <= 5)\nmodel.addCons(LargePlants + MediumPlants + SmallPlants <= 20)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Total Daily Energy Output: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Total Daily Energy Output": "16666.666666666668"
        },
        "question": "A renewable energy company is planning to install three types of solar power plants: large-scale, medium-scale, and small-scale. The company needs to decide how many of each type of plant to build and how much capital to invest in each type of plant. The efficiency of energy production varies by plant size, and the cost of installation also differs. The daily energy output of each type of plant is proportional to the capital invested in that plant, as shown in the following Table.\n\n| Plant Type       | Efficiency (kWh/day per $1,000) | Capital Investment per Plant |\n|------------------|---------------------------------|-----------------------------|\n| Large-scale      | 16.67                           | $60,000                     |\n| Medium-scale     | 14.00                           | $50,000                     |\n| Small-scale      | 16.67                           | $30,000                     |\n\nThe company has a total capital budget of $1,000,000 for investment in solar plants. Due to zoning regulations, the company can only build a maximum of 5 large-scale plants. The total number of plants (regardless of size) must not exceed 20. The company wants to maximize the total daily energy output.\n",
        "type": "nonlinear-table",
        "index": 407,
        "length": 1216,
        "var_num": 6
    },
    {
        "scenario": "## Define Variables:\nGlueco has 5 different production lines for glue. He needs to assign workers to each production line.\n// variables: {\"number of workers on production line 1\": \"N1\", \"number of workers on production line 2\": \"N2\", \"number of workers on production line 3\": \"N3\", \"number of workers on production line 4\": \"N4\", \"number of workers on production line 5\": \"N5\"}, where N1, N2, N3, N4, N5 >= 0 & N1, N2, N3, N4, N5 are integers\n\n## Define Objective Function:\nGlueco produces 3 types of glue on the 5 production lines. \nOn production line 1, each worker produces 20 units of glue 1, 30 units of glue 2, and 40 units of glue 3 during a hour. \nOn production line 2, each worker produces 50 units of glue 1, 35 units of glue 2, and 45 units of glue 3 during a hour. \nOn production line 3, each worker produces 30 units of glue 1, 40 units of glue 2, and 50 units of glue 3 during a hour. \nOn production line 4, each worker produces 40 units of glue 1, 45 units of glue 2, and 50 units of glue 3 during a hour. \nOn production line 5, each worker produces 25 units of glue 1, 35 units of glue 2, and 45 units of glue 3 during a hour. \nNow, Glueco needs to produce at least 120 units of glue 1, at least 150 units of glue 2, and at least 200 units of glue 3. The five production lines can only be opened or closed at the same time. Please determine the minimum time to meet the weekly demand.\n// The production time for glue 1: T1 = 120 / (20 * N1 + 50 * N2 + 30 * N3 + 40 * N4 + 25 * N5)\n// The production time for glue 2: T2 = 150 / (30 * N1 + 35 * N2 + 40 * N3 + 45 * N4 + 35 * N5)\n// The production time for glue 3: T3 = 200 / (40 * N1 + 45 * N2 + 50 * N3 + 50 * N4 + 45 * N5)\n// So, the objective function is: Minimize max(T1, T2, T3)\n// Minimize max(120 / (20 * N1 + 50 * N2 + 30 * N3 + 40 * N4 + 25 * N5), 150 / (30 * N1 + 35 * N2 + 40 * N3 + 45 * N4 + 35 * N5), 200 / (40 * N1 + 45 * N2 + 50 * N3 + 50 * N4 + 45 * N5))\n\n## Generate Constraint-1:\nThere are total 80 workers available.\n// N1 + N2 + N3 + N4 + N5 <= 80\n\n## Generate Constraint-2:\nEach line can be utilized by up to 20 workers at a time.\n// N1 <= 20; N2 <= 20; N3 <= 20; N4 <= 20; N5 <= 20",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nN1 = model.addVar(vtype=\"INTEGER\", name=\"N1\") # number of workers on production line 1\nmodel.addCons(N1 >= 0)\nN2 = model.addVar(vtype=\"INTEGER\", name=\"N2\") # number of workers on production line 2\nmodel.addCons(N2 >= 0)\nN3 = model.addVar(vtype=\"INTEGER\", name=\"N3\") # number of workers on production line 3\nmodel.addCons(N3 >= 0)\nN4 = model.addVar(vtype=\"INTEGER\", name=\"N4\") # number of workers on production line 4\nmodel.addCons(N4 >= 0)\nN5 = model.addVar(vtype=\"INTEGER\", name=\"N5\") # number of workers on production line 5\nmodel.addCons(N5 >= 0)\n\n# Define objective function\n# Since the objective function is not linear, we need to introduce a new variable and constraints to linearize it\nT = model.addVar(name=\"T\")\nmodel.setObjective(T, \"minimize\")\nmodel.addCons(T >= 120 / (20 * N1 + 50 * N2 + 30 * N3 + 40 * N4 + 25 * N5))\nmodel.addCons(T >= 150 / (30 * N1 + 35 * N2 + 40 * N3 + 45 * N4 + 35 * N5))\nmodel.addCons(T >= 200 / (40 * N1 + 45 * N2 + 50 * N3 + 50 * N4 + 45 * N5))\n\n# Add constraints\nmodel.addCons(N1 + N2 + N3 + N4 + N5 <= 80)\nmodel.addCons(N1 <= 20)\nmodel.addCons(N2 <= 20)\nmodel.addCons(N3 <= 20)\nmodel.addCons(N4 <= 20)\nmodel.addCons(N5 <= 20)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Workers on Production Line 1: \", model.getVal(N1))\n    print(\"Number of Workers on Production Line 2: \", model.getVal(N2))\n    print(\"Number of Workers on Production Line 3: \", model.getVal(N3))\n    print(\"Number of Workers on Production Line 4: \", model.getVal(N4))\n    print(\"Number of Workers on Production Line 5: \", model.getVal(N5))\n    print(\"Minimum Time to Meet Weekly Demand: \", model.getVal(T))\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Workers on Production Line 1": "0.0",
            "Number of Workers on Production Line 2": "20.0",
            "Number of Workers on Production Line 3": "20.0",
            "Number of Workers on Production Line 4": "20.0",
            "Number of Workers on Production Line 5": "20.0",
            "Minimum Time to Meet Weekly Demand": "0.05263157894736842"
        },
        "question": "Glueco has 5 different production lines for glue and needs to assign workers to each production line. The production rates for each type of glue on each production line are given in the following Table.\n\n| Production Line | Glue 1 Units/Worker/Hour | Glue 2 Units/Worker/Hour | Glue 3 Units/Worker/Hour |\n|-----------------|--------------------------|--------------------------|--------------------------|\n| 1               | 20                       | 30                       | 40                       |\n| 2               | 50                       | 35                       | 45                       |\n| 3               | 30                       | 40                       | 50                       |\n| 4               | 40                       | 45                       | 50                       |\n| 5               | 25                       | 35                       | 45                       |\n\nGlueco needs to produce at least 120 units of glue 1, at least 150 units of glue 2, and at least 200 units of glue 3. The five production lines can only be opened or closed at the same time. Please determine the minimum time to meet the weekly demand. The company has a total of 80 workers available and each line can be utilized by up to 20 workers at a time.\n",
        "type": "nonlinear-table",
        "index": 408,
        "length": 1272,
        "var_num": 5
    },
    {
        "scenario": "## Define Variables:\nA bakery produces four types of pastries: Croissant, Danish, Baguette, and Tart. They need to determine the quantities of each pastry to produce to maximize their profit while considering the cost of ingredients and the demand from customers.\n// variables: {\"quantity of Croissant\": \"Croissant\", \"quantity of Danish\": \"Danish\", \"quantity of Baguette\": \"Baguette\", \"quantity of Tart\": \"Tart\"}, where Croissant, Danish, Baguette, Tart >= 0 and Croissant, Danish, Baguette, Tart are integers.\n\n## Define Objective Function:\nThe profit per unit for Croissant is $3, for Danish is $4, for Baguette is $5, and for Tart is $6. Due to economies of scale, the profit per unit increases by $0.02 for each pastry type if the production exceeds 100 units. The bakery aims to maximize the total profit from selling the pastries.\n// Profit_Croissant = max(3 + 0.02 * (Croissant - 100), 3) * Croissant\n// Profit_Danish = max(4 + 0.02 * (Danish - 100), 4) * Danish\n// Profit_Baguette = max(5 + 0.02 * (Baguette - 100), 5) * Baguette\n// Profit_Tart = max(6 + 0.02 * (Tart - 100), 6) * Tart\n// So, the objective function is: Maximize Profit_Croissant + Profit_Danish + Profit_Baguette + Profit_Tart\n\n## Generate Constraint-1:\nThe bakery has a limited supply of flour, which is a key ingredient in all pastries. Each Croissant requires 50 g of flour, each Danish requires 70 g, each Baguette requires 60 g, and each Tart requires 80 g. The total available flour is 50000 g.\n// 50 * Croissant + 70 * Danish + 60 * Baguette + 80 * Tart <= 50000\n\n## Generate Constraint-2:\nThe bakery faces a demand limit for each type of pastry. The demand limit for Croissant is 300 units, for Danish is 250 units, for Baguette is 200 units, and for Tart is 150 units.\n// Croissant <= 300; Danish <= 250; Baguette <= 200; Tart <= 150\n\n## Generate Constraint-3:\nThe bakery has a production capacity of 700 units in terms of the total number of pastries it can produce.\n// Croissant + Danish + Baguette + Tart <= 700",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\n\"\"\"\nProfit_Croissant = max(3 + 0.02 * (Croissant - 100), 3) * Croissant\nProfit_Danish = max(4 + 0.02 * (Danish - 100), 4) * Danish\nProfit_Baguette = max(5 + 0.02 * (Baguette - 100), 5) * Baguette\nProfit_Tart = max(6 + 0.02 * (Tart - 100), 6) * Tart\n\"\"\"\n\nCroissant1 = model.addVar(vtype=\"INTEGER\", name=\"Croissant1\", lb=0, ub=100)\nCroissant2 = model.addVar(vtype=\"INTEGER\", name=\"Croissant2\", lb=100, ub=300)\nCroissant_b1 = model.addVar(vtype=\"B\", name=\"Croissant_b1\")\nCroissant_b2 = model.addVar(vtype=\"B\", name=\"Croissant_b2\")\nmodel.addCons(Croissant_b1 + Croissant_b2 == 1)\nCroissant = Croissant1*Croissant_b1 + Croissant2*Croissant_b2\nProft_Croissant = 3 * Croissant1 * Croissant_b1 + (3 + 0.02 * (Croissant2 - 100)) * Croissant2 * Croissant_b2\n\nDanish1 = model.addVar(vtype=\"INTEGER\", name=\"Danish1\", lb=0, ub=100)\nDanish2 = model.addVar(vtype=\"INTEGER\", name=\"Danish2\", lb=100, ub=250)\nDanish_b1 = model.addVar(vtype=\"B\", name=\"Danish_b1\")\nDanish_b2 = model.addVar(vtype=\"B\", name=\"Danish_b2\")\nmodel.addCons(Danish_b1 + Danish_b2 == 1)\nDanish = Danish1*Danish_b1 + Danish2*Danish_b2\nProfit_Danish = 4 * Danish1 * Danish_b1 + (4 + 0.02 * (Danish2 - 100)) * Danish2 * Danish_b2\n\nBaguette1 = model.addVar(vtype=\"INTEGER\", name=\"Baguette1\", lb=0, ub=100)\nBaguette2 = model.addVar(vtype=\"INTEGER\", name=\"Baguette2\", lb=100, ub=200)\nBaguette_b1 = model.addVar(vtype=\"B\", name=\"Baguette_b1\")\nBaguette_b2 = model.addVar(vtype=\"B\", name=\"Baguette_b2\")\nmodel.addCons(Baguette_b1 + Baguette_b2 == 1)\nBaguette = Baguette1*Baguette_b1 + Baguette2*Baguette_b2\nProfit_Baguette = 5 * Baguette1 * Baguette_b1 + (5 + 0.02 * (Baguette2 - 100)) * Baguette2 * Baguette_b2\n\nTart1 = model.addVar(vtype=\"INTEGER\", name=\"Tart1\", lb=0, ub=100)\nTart2 = model.addVar(vtype=\"INTEGER\", name=\"Tart2\", lb=100, ub=150)\nTart_b1 = model.addVar(vtype=\"B\", name=\"Tart_b1\")\nTart_b2 = model.addVar(vtype=\"B\", name=\"Tart_b2\")\nmodel.addCons(Tart_b1 + Tart_b2 == 1)\nTart = Tart1*Tart_b1 + Tart2*Tart_b2\nProfit_Tart = 6 * Tart1 * Tart_b1 + (6 + 0.02 * (Tart2 - 100)) * Tart2 * Tart_b2\n\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == Proft_Croissant + Profit_Danish + Profit_Baguette + Profit_Tart)\n\n# Add constraints\nmodel.addCons(50 * Croissant + 70 * Danish + 60 * Baguette + 80 * Tart <= 50000)\nmodel.addCons(Croissant + Danish + Baguette + Tart <= 700)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution\nif model.getStatus() == \"optimal\":\n    print(\"Number of Croissant:\", model.getVal(Croissant1)*model.getVal(Croissant_b1) + model.getVal(Croissant2)*model.getVal(Croissant_b2))\n    print(\"Number of Danish:\", model.getVal(Danish1)*model.getVal(Danish_b1) + model.getVal(Danish2)*model.getVal(Danish_b2))\n    print(\"Number of Baguette:\", model.getVal(Baguette1)*model.getVal(Baguette_b1) + model.getVal(Baguette2)*model.getVal(Baguette_b2))\n    print(\"Number of Tart:\", model.getVal(Tart1)*model.getVal(Tart_b1) + model.getVal(Tart2)*model.getVal(Tart_b2))\n    print(\"Total Profit:\", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Croissant": "300.0",
            "Number of Danish": "250.0",
            "Number of Baguette": "0.0",
            "Number of Tart": "150.0",
            "Total Profit": "4900.0"
        },
        "question": "A bakery produces four types of pastries: Croissant, Danish, Baguette, and Tart. They need to determine the quantities of each pastry to produce to maximize their profit while considering the cost of ingredients and the demand from customers. The profit per unit for each pastry and the requirements for a key ingredient, flour, are given in the following Table.\n\n| Pastry   | Profit per Unit | Flour Required (g) |\n|----------|-----------------|--------------------|\n| Croissant| $3 (increases by $0.02 per unit if production exceeds 100) | 50 |\n| Danish   | $4 (increases by $0.02 per unit if production exceeds 100) | 70 |\n| Baguette | $5 (increases by $0.02 per unit if production exceeds 100) | 60 |\n| Tart     | $6 (increases by $0.02 per unit if production exceeds 100) | 80 |\n\nThe bakery has a limited supply of flour, which is a key ingredient in all pastries. The total available flour is 50000 g. The bakery faces a demand limit for each type of pastry: 300 units for Croissant, 250 units for Danish, 200 units for Baguette, and 150 units for Tart. The bakery also has a production capacity of 700 units in terms of the total number of pastries it can produce. The bakery aims to maximize the total profit from selling the pastries, considering the economies of scale where the profit per unit increases by $0.02 for each pastry type if the production exceeds 100 units.\n",
        "type": "nonlinear-table",
        "index": 409,
        "length": 1381,
        "var_num": 4
    },
    {
        "question": "A metal-working shop has access to two types of metal-working equipment, a chop saw and a steel cutter. A chop saw can work 25 pounds of steel and generates 25 units of waste every day. A steel cutter can only cut 5 pounds of steel and generates 3 units of waste every day.  The metal-working shop is expecting an increase in demand and must cut 520 pounds of metal every day. However, there is a waste limitation due to the fines that may be in place if too much heavy metal is discarded and they may at most produce 400 units of waste every day. How should the metal-working shop purchase their metal-working equipment to decrease the total number of metal-working equipment needed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_chop_saws = LpVariable(\"NumChopSaws\", lowBound=0, cat='Integer') # number of chop saws\nnum_steel_cutters = LpVariable(\"NumSteelCutters\", lowBound=0, cat='Integer') # number of steel cutters\n\n# Define the question as a minimum problem\nproblem = LpProblem(\"MetalWorkingEquipment\", LpMinimize)\n\n# Define the objective function\nobjective = num_chop_saws + num_steel_cutters\nproblem += objective # minimize the total number of metal-working equipment needed\n\n# Define the constraints\nproblem += 25 * num_chop_saws + 5 * num_steel_cutters >= 520 # must cut at least 520 pounds of metal every day\nproblem += 25 * num_chop_saws + 3 * num_steel_cutters <= 400 # may produce at most 400 units of waste every day\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of chop saws:\", num_chop_saws.value())\nprint(\"The number of steel cutters:\", num_steel_cutters.value())\nprint(\"The total number of metal-working equipment:\", objective.value())",
        "results": {
            "The number of chop saws": "8.0",
            "The number of steel cutters": "64.0",
            "The total number of metal-working equipment": "72.0"
        },
        "formulation": "minimize x+y\nSubject to: \n25x+5y >= 520\n3y+25x <= 400 (end)",
        "type": "linear-notable",
        "index": 410,
        "length": 684,
        "var_num": 2
    },
    {
        "question": "A food company would like to run its commercials on three streaming platforms: Pi TV, Beta Video and Gamma Live. The cost for a commercial as well as the expected audience reach is given. On Pi TV, a commercial costs $1200 and attracts 2000 viewers. On Beta Video, a commercial costs $2000 and attracts 5000 viewers. On Gamma Live, a commercial costs $4000 and attracts 9000 viewers. Beta Video limits the number of commercials from a single company to 8. In order to attract a wide range of people, at most a third of all commercials should occur on Gamma Live and a minimum of 20% should occur on Pi TV. If the weekly budget is $20000, how many commercials should be run in each of the three possible choices in order to maximize audience?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_commercials_pi = LpVariable(\"NumCommercialsPiTV\", lowBound=0, cat='Integer') # number of commercials on Pi TV\nnum_commercials_beta = LpVariable(\"NumCommercialsBetaVideo\", lowBound=0, upBound=8, cat='Integer') # number of commercials on Beta Video\nnum_commercials_gamma = LpVariable(\"NumCommercialsGammaLive\", lowBound=0, cat='Integer') # number of commercials on Gamma Live\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FoodCompanyAds\", LpMaximize)\n\n# Define the objective function\nobjective = 2000 * num_commercials_pi + 5000 * num_commercials_beta + 9000 * num_commercials_gamma\nproblem += objective # maximize the total audience\n\n# Define the constraints\nproblem += 1200 * num_commercials_pi + 2000 * num_commercials_beta + 4000 * num_commercials_gamma <= 20000 # the cost must be at most $20000\nproblem += num_commercials_gamma <= (num_commercials_pi + num_commercials_beta + num_commercials_gamma) / 3 # at most a third of all commercials on Gamma Live\nproblem += num_commercials_pi >= (num_commercials_pi + num_commercials_beta + num_commercials_gamma) * 0.2 # a minimum of 20% commercials should occur on Pi TV\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of commercials on Pi TV:\", num_commercials_pi.value())\nprint(\"The number of commercials on Beta Video:\", num_commercials_beta.value())\nprint(\"The number of commercials on Gamma Live:\", num_commercials_gamma.value())\nprint(\"Total audience reached:\", objective.value())",
        "results": {
            "The number of commercials on Pi TV": "3.0",
            "The number of commercials on Beta Video": "8.0",
            "The number of commercials on Gamma Live": "0.0",
            "Total audience reached": "46000.0"
        },
        "formulation": "maximize 2000x+5000y+9000z\nSubject to: \ny <= 8\nz <= 3(x+y+z)\nx >= 0.2(x+y+z)\n1200x+2000y+4000z <= 20000 (end)",
        "type": "linear-notable",
        "index": 411,
        "length": 741,
        "var_num": 3
    },
    {
        "question": "Find two positive numbers whose sum is 300 and whose product is a maximum.",
        "scenario": "## Define Variables:\nFind two positive numbers.\n// variables: {\"first number\": \"x\", \"second number\": \"y\"}, where x, y >= 0\n\n## Define Objective Function:\nMaximize the product of the two numbers.\n// Maximize: x*y\n\n## Generate Constraint-1:\nThe sum of the two numbers should be 300.\n// x + y = 300",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"CONTINUOUS\", name=\"x\") # first number\ny = model.addVar(vtype=\"CONTINUOUS\", name=\"y\") # second number\n\n# Define objective function\nobj = model.addVar(vtype=\"CONTINUOUS\", name=\"obj\")\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == x*y)\n\n# Add constraints\nmodel.addCons(x + y == 300)\nmodel.addCons(x >= 0)\nmodel.addCons(y >= 0)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The first number:\", model.getVal(x))\n    print(\"The second number:\", model.getVal(y))\n    print(\"The product of the two numbers: \", model.getVal(x*y))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The first number": "150.0000",
            "The second number": "150.0000",
            "The product of the two numbers": "22500.0"
        },
        "type": "nonlinear-notable",
        "index": 412,
        "length": 74,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA company specializes in blending tea and offers five different blends: Zen, Energy, Relax, Extra, and Premium. They need to determine the quantities of each blend to produce.\n// variables: {\"quantity of Zen blend\": \"Zen\", \"quantity of Energy blend\": \"Energy\", \"quantity of Relax blend\": \"Relax\", \"quantity of Extra blend\": \"Extra\", \"quantity of Premium blend\": \"Premium\"}, where Zen, Energy, Relax, Extra, Premium >= 0 and Zen, Energy, Relax, Extra, Premium are integers.\n\n## Define Objective Function:\nFor Zen, the initial profit per unit is $5. \nFor Energy, the initial profit per unit is $7. \nFor Relax, the initial profit per unit is $6.\nFor Extra, the initial profit per unit is $8.\nFor Premium, the initial profit per unit is $10.\nBecause of the scale effect, the profits of blends increase linearly according to the scale of production. When the production of each blend exceeds 50 units, the average profit per unit of the blend increases by $0.01. The company wants to maximize the total profit from selling the tea blends.\n// Profit_Zen = max(5 + 0.01 * (Zen - 50), 5) * Zen\n// Profit_Energy = max(7 + 0.01 * (Energy - 50), 7) * Energy\n// Profit_Relax = max(6 + 0.01 * (Relax - 50), 6) * Relax\n// Profit_Extra = max(8 + 0.01 * (Extra - 50), 8) * Extra\n// Profit_Premium = max(10 + 0.01 * (Premium - 50), 10) * Premium\n// So, the objective function is: Maximize Profit_Zen + Profit_Energy + Profit_Relax + Profit_Extra + Profit_Premium\n\n## Generate Constraint-1:\nFor Zen, the special tea leaves required per unit is 10 g. For Energy, the special tea leaves required per unit is 15 g. For Relax, the special tea leaves required per unit is 12 g. For Extra, the special tea leaves required per unit is 18 g. For Premium, the special tea leaves required per unit is 20 g.\nThe company has a limited supply of special tea leaves (1000 g), which are required for the production of each blend.\n// 10 * Zen + 15 * Energy + 12 * Relax + 18 * Extra + 20 * Premium <= 1000\n\n## Generate Constraint-2:\nThe market has a demand limit for each blend. For Zen, the demand limit is 200 units. For Energy, the demand limit is 250 units. For Relax, the demand limit is 300 units. For Extra, the demand limit is 150 units. For Premium, the demand limit is 100 units.\n// Zen <= 200; Energy <= 250; Relax <= 300; Extra <= 150; Premium <= 100\n\n## Generate Constraint-3:\nThe company has a production capacity of 650 units in terms of the number of units it can produce.\n// Zen + Energy + Relax + Extra + Premium <= 650",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\n\"\"\"\nProfit_Zen = max(5 + 0.01 * (Zen - 50), 5) * Zen\nProfit_Energy = max(7 + 0.01 * (Energy - 50), 7) * Energy\nProfit_Relax = max(6 + 0.01 * (Relax - 50), 6) * Relax\nProfit_Extra = max(8 + 0.01 * (Extra - 50), 8) * Extra\nProfit_Premium = max(10 + 0.01 * (Premium - 50), 10) * Premium\n\"\"\"\n\nZen1 = model.addVar(vtype=\"INTEGER\", name=\"Zen1\", lb=0, ub=50)\nZen2 = model.addVar(vtype=\"INTEGER\", name=\"Zen2\", lb=50, ub=200)\nZen_b1 = model.addVar(vtype=\"B\", name=\"Zen_b1\")\nZen_b2 = model.addVar(vtype=\"B\", name=\"Zen_b2\")\nmodel.addCons(Zen_b1 + Zen_b2 == 1)\n# model.addCons(Zen == Zen1*Zen_b1 + Zen2*Zen_b2)\nZen = Zen1*Zen_b1 + Zen2*Zen_b2\nProfit_Zen = 5 * Zen1 * Zen_b1 + (5 + 0.01 * (Zen2 - 50)) * Zen2 * Zen_b2\n\nEnergy1 = model.addVar(vtype=\"INTEGER\", name=\"Energy1\", lb=0, ub=50)\nEnergy2 = model.addVar(vtype=\"INTEGER\", name=\"Energy2\", lb=50, ub=250)\nEnergy_b1 = model.addVar(vtype=\"B\", name=\"Energy_b1\")\nEnergy_b2 = model.addVar(vtype=\"B\", name=\"Energy_b2\")\nmodel.addCons(Energy_b1 + Energy_b2 == 1)\n# model.addCons(Energy == Energy1*Energy_b1 + Energy2*Energy_b2)\nEnergy = Energy1*Energy_b1 + Energy2*Energy_b2\nProfit_Energy = 7 * Energy1 * Energy_b1 + (7 + 0.01 * (Energy2 - 50)) * Energy2 * Energy_b2\n\n\nRelax1 = model.addVar(vtype=\"INTEGER\", name=\"Relax1\", lb=0, ub=50)\nRelax2 = model.addVar(vtype=\"INTEGER\", name=\"Relax2\", lb=50, ub=300)\nRelax_b1 = model.addVar(vtype=\"B\", name=\"Relax_b1\")\nRelax_b2 = model.addVar(vtype=\"B\", name=\"Relax_b2\")\nmodel.addCons(Relax_b1 + Relax_b2 == 1)\n# model.addCons(Relax == Relax1*Relax_b1 + Relax2*Relax_b2)\nRelax = Relax1*Relax_b1 + Relax2*Relax_b2\nProfit_Relax = 6 * Relax1 * Relax_b1 + (6 + 0.01 * (Relax2 - 50)) * Relax2 * Relax_b2\n\nExtra1 = model.addVar(vtype=\"INTEGER\", name=\"Extra1\", lb=0, ub=50)\nExtra2 = model.addVar(vtype=\"INTEGER\", name=\"Extra2\", lb=50, ub=150)\nExtra_b1 = model.addVar(vtype=\"B\", name=\"Extra_b1\")\nExtra_b2 = model.addVar(vtype=\"B\", name=\"Extra_b2\")\nmodel.addCons(Extra_b1 + Extra_b2 == 1)\n# model.addCons(Extra == Extra1*Extra_b1 + Extra2*Extra_b2)\nExtra = Extra1*Extra_b1 + Extra2*Extra_b2\nProfit_Extra = 8 * Extra1 * Extra_b1 + (8 + 0.01 * (Extra2 - 50)) * Extra2 * Extra_b2\n\nPremium1 = model.addVar(vtype=\"INTEGER\", name=\"Premium1\", lb=0, ub=50)\nPremium2 = model.addVar(vtype=\"INTEGER\", name=\"Premium2\", lb=50, ub=100)\nPremium_b1 = model.addVar(vtype=\"B\", name=\"Premium_b1\")\nPremium_b2 = model.addVar(vtype=\"B\", name=\"Premium_b2\")\nmodel.addCons(Premium_b1 + Premium_b2 == 1)\n# model.addCons(Premium == Premium1*Premium_b1 + Premium2*Premium_b2)\nPremium = Premium1*Premium_b1 + Premium2*Premium_b2\nProfit_Premium = 10 * Premium1 * Premium_b1 + (10 + 0.01 * (Premium2 - 50)) * Premium2 * Premium_b2\n\nobj = model.addVar('obj')\nmodel.addCons(obj == Profit_Zen + Profit_Energy + Profit_Relax + Profit_Extra + Profit_Premium)\nmodel.setObjective(obj, \"maximize\")\n\n# Add constraints\nmodel.addCons(10 * Zen + 15 * Energy + 12 * Relax + 18 * Extra + 20 * Premium <= 1000)\nmodel.addCons(Zen + Energy + Relax + Extra + Premium <= 650)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nif model.getStatus() == \"optimal\":\n    print(\"Zen:\", model.getVal(Zen)*model.getVal(Zen_b1) + model.getVal(Zen)*model.getVal(Zen_b2))\n    print(\"Energy:\", model.getVal(Energy)*model.getVal(Energy_b1) + model.getVal(Energy)*model.getVal(Energy_b2))\n    print(\"Relax:\", model.getVal(Relax)*model.getVal(Relax_b1) + model.getVal(Relax)*model.getVal(Relax_b2))\n    print(\"Extra:\", model.getVal(Extra)*model.getVal(Extra_b1) + model.getVal(Extra)*model.getVal(Extra_b2))\n    print(\"Premium:\", model.getVal(Premium)*model.getVal(Premium_b1) + model.getVal(Premium)*model.getVal(Premium_b2))\n    print(\"Total Profit: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Zen": "100.0",
            "Energy": "0.0",
            "Relax": "0.0",
            "Extra": "0.0",
            "Premium": "0.0",
            "Total Profit": "550.0"
        },
        "question": "A company specializes in blending tea and offers five different blends: Zen, Energy, Relax, Extra, and Premium. They need to determine the quantities of each blend to produce. The initial profit per unit and the special tea leaves required per unit for each blend are given in the following Table.\n\n| Blend    | Initial Profit per Unit | Special Tea Leaves Required per Unit |\n|----------|-------------------------|-------------------------------------|\n| Zen      | 5$                     | 10 g                                |\n| Energy   | 7$                     | 15 g                                |\n| Relax    | 6$                     | 12 g                                |\n| Extra    | 8$                     | 18 g                                |\n| Premium  | 10$                    | 20 g                                |\n\nThe company has a limited supply of special tea leaves (1000 g), which are required for the production of each blend. The market has a demand limit for each blend. For Zen, the demand limit is 200 units. For Energy, the demand limit is 250 units. For Relax, the demand limit is 300 units. For Extra, the demand limit is 150 units. For Premium, the demand limit is 100 units. The company has a production capacity of 650 units in terms of the number of units it can produce. The company wants to maximize the total profit from selling the tea blends, considering that the profits of blends increase linearly according to the scale of production. When the production of each blend exceeds 50 units, the average profit per unit of the blend increases by $0.01.\n",
        "type": "nonlinear-table",
        "index": 413,
        "length": 1592,
        "var_num": 5
    },
    {
        "question": "A cone is made from a circular sheet. The radius of the circular sheet is 2m. The cone is formed by cutting out a sector from the circular sheet and then gluing the cut edges of the remaining piece together. We need to determine the maximum attainable volume for the cone.",
        "scenario": "## Define Variables:\nA cone is made from a circular sheet with a radius of 1m, by cutting out a sector and gluing the cut edges of the remaining piece together.\n// variables: {\"angle of the cutted sector\": \"\u03b8\"}, where \u03b8 >= 0, \u03b8 <= 2\u03c0\n\n## Define Objective Function:\nWhat is the maximum attainable volume for the cone?\n// The formula for the volume of the cone is V = (1/3)\u03c0r^2h, where r is the radius of the base of the cone and h is the height of the cone. We need to find the r and h\n// The circumference of the base of the cone is equal to the length of the arc of the sector cut out from the circular sheet. This can be represented as 2\u03c0r = R\u03b8, R=2m, where \u03b8 is the angle of the sector in radians. So r = \u03b8 / \u03c0\n// The slant height of the cone is equal to the radius of the circular sheet. This can be represented as \u221a(r^2 + h^2) = R. Squaring both sides, we get r^2 + h^2 = R^2. So h = \u221a(4 - r^2)\n// So, the volume of the cone is V = (1/3)\u03c0r^2h = (1/3)\u03c0 * (\u03b8 / \u03c0)^2 * \u221a(4 - (\u03b8 / \u03c0)^2)\n// The objective function is: Maximize V = (1/3)\u03c0 * (\u03b8 / \u03c0)^2 * \u221a(4 - (\u03b8 / \u03c0)^2)",
        "code": "from pyscipopt import Model\nimport math\n\n# Create a new model\nmodel = Model()\n\n# Define variables\ntheta = model.addVar(lb=0, ub=2*math.pi, vtype=\"CONTINUOUS\", name=\"theta\") # angle of the cutted sector\n\n# Define objective function\nV = model.addVar('V')\nmodel.setObjective(V, \"maximize\")\nmodel.addCons(V == (1/3) * math.pi * (theta / math.pi)**2 * (4 - (theta / math.pi)**2)**0.5)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The angle of the cutted sector for the maximum volume:\", model.getVal(theta))\n    print(\"The maximum volume of the cone: \", model.getVal(V))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The angle of the cutted sector for the maximum volume": "5.130271220877978",
            "The maximum volume of the cone": "3.224532575115765"
        },
        "type": "nonlinear-notable",
        "index": 414,
        "length": 272,
        "var_num": 1
    },
    {
        "question": "In an easy linear program, we have two vectors $x_{1}$, $x_{2}$, which $(x_{1},x_{2})\\in\\mathbb{R}^{2}$. As the constraints are $x_{1}\\geq0, x_{2}\\geq0,x_{2}-x_{1}\\leq1,x_{1}+6x_{2}\\leq15$, and $4x_{1}-x_{2}\\leq10$. We need to find a point $(x_{1},x_{2})$ of this function to maximize the value $x_{1}+x_{2}$.",
        "formulation": "# Define Variables:\nWe have two vectors, x1 and x2, where (x1, x2) \u2208 \u211d\u00b2.\n```Variables\nx1 // vector 1\nx2 // vector 2\n```\n\n# Objective Function:\nWe want to maximize the value of x1 + x2.\n```Objective Function\nMaximize: x1 + x2\n```\n\n# Constraints:\nWe have the following constraints:\n- x1 must be non-negative.\n- x2 must be non-negative.\n- The difference between x2 and x1 must be less than or equal to 1.\n- The sum of x1 and 6x2 must be less than or equal to 15.\n- The difference between 4x1 and x2 must be less than or equal to 10.\n```Constraints\nx1 >= 0\nx2 >= 0\nx2 - x1 <= 1\nx1 + 6x2 <= 15\n4x1 - x2 <= 10\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx1 = LpVariable(\"x1\", lowBound=0, cat='Continuous') # vector 1\nx2 = LpVariable(\"x2\", lowBound=0, cat='Continuous') # vector 2\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeVectorSum\", LpMaximize)\n\n# Define the objective function\nobjective = x1 + x2\nproblem += objective # maximize the value of x1 + x2\n\n# Define the constraints\nproblem += x2 - x1 <= 1 # The difference between x2 and x1 must be less than or equal to 1\nproblem += x1 + 6 * x2 <= 15 # The sum of x1 and 6x2 must be less than or equal to 15\nproblem += 4 * x1 - x2 <= 10 # The difference between 4x1 and x2 must be less than or equal to 10\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The value of x1:\", x1.value())\nprint(\"The value of x2:\", x2.value())\nprint(\"The maximum value of x1 + x2:\", objective.value())\n",
        "results": {
            "The value of x1": "3.0",
            "The value of x2": "2.0",
            "The maximum value of x1 + x2": "5.0"
        },
        "type": "linear-notable",
        "index": 415,
        "length": 309,
        "var_num": 2
    },
    {
        "question": "To graduate from Basketweavers University with a major in operations research, a student must complete at least two math courses, at least two OR courses, and at least two computer courses. Some courses can be used to fulfill more than one requirement, and some courses are prerequisites for others. Formulate an LP that minimizes the number of courses needed to satisfy the major requirements.\n\nTable (Courses and their corresponding requirement fulfillment):\n| Course Name                    | Fulfills Math Requirement | Fulfills OR Requirement | Fulfills Computer Requirement | Prerequisite For            |\n| ------------------------------ | ------------------------- | ----------------------- | ----------------------------- | --------------------------- |\n| Calculus                       | Yes                       | No                      | No                            | Business Statistics         |\n| Operations Research            | Yes                       | Yes                     | No                            | None                        |\n| Data Structures                | Yes                       | No                      | Yes                           | None                        |\n| Business Statistics            | Yes                       | Yes                     | No                            | Forecasting                 |\n| Computer Simulation            | No                        | Yes                     | Yes                           | None                        |\n| Introduction to Computer Programming | No                        | No                      | Yes                           | Computer Simulation, Data Structures |\n| Forecasting                    | Yes                       | Yes                     | No                            | None                        |",
        "formulation": "# Define Variables:\nTo formulate the LP, we need to define binary variables to represent whether each course is selected or not. Let's denote the variable for course i as xi.\n```Variables\nx1 // Calculus\nx2 // Operations Research\nx3 // Data Structures\nx4 // Business Statistics\nx5 // Computer Simulation\nx6 // Introduction to Computer Programming\nx7 // Forecasting\nx1, x2, x3, x4, x5, x6, x7 = 0 or 1 // Binary variables\n```\n\n# Objective Function:\nWe want to minimize the number of courses needed to satisfy the major requirements. Since each selected course contributes 1 to the total number of courses needed, the objective function is simply the sum of all the selected courses.\n```Objective Function\nMinimize: x1 + x2 + x3 + x4 + x5 + x6 + x7\n```\n\n# Constraints:\nWe have several constraints to ensure that the minimum requirements for each category are met and that the prerequisites are satisfied.\n```Constraints\nx1 + x2 + x3 + x4 + x7 >= 2 // Minimum number of math courses\nx2 + x4 + x5 + x7 >= 2 // Minimum number of OR courses\nx3 + x5 + x6 >= 2 // Minimum number of computer courses\nx1 >= x4 // Calculus is a prerequisite for business statistics\nx6 >= x5 // Introduction to computer programming is a prerequisite for computer simulation\nx6 >= x3 // Introduction to computer programming is a prerequisite for data structures\nx4 >= x7 // Business statistics is a prerequisite for forecasting\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx1 = LpVariable(\"Calculus\", cat='Binary')\nx2 = LpVariable(\"Operations_Research\", cat='Binary')\nx3 = LpVariable(\"Data_Structures\", cat='Binary')\nx4 = LpVariable(\"Business_Statistics\", cat='Binary')\nx5 = LpVariable(\"Computer_Simulation\", cat='Binary')\nx6 = LpVariable(\"Intro_to_Computer_Programming\", cat='Binary')\nx7 = LpVariable(\"Forecasting\", cat='Binary')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"Course_Selection\", LpMinimize)\n\n# Define the objective function\nproblem += x1 + x2 + x3 + x4 + x5 + x6 + x7\n\n# Define the constraints\nproblem += x1 + x2 + x3 + x4 + x7 >= 2 # Minimum number of math courses\nproblem += x2 + x4 + x5 + x7 >= 2 # Minimum number of OR courses\nproblem += x3 + x5 + x6 >= 2 # Minimum number of computer courses\nproblem += x1 >= x4 # Calculus is a prerequisite for business statistics\nproblem += x6 >= x5 # Introduction to computer programming is a prerequisite for computer simulation\nproblem += x6 >= x3 # Introduction to computer programming is a prerequisite for data structures\nproblem += x4 >= x7 # Business statistics is a prerequisite for forecasting\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The selected courses are:\")\nprint(\"Calculus:\", x1.value())\nprint(\"Operations Research:\", x2.value())\nprint(\"Data Structures:\", x3.value())\nprint(\"Business Statistics:\", x4.value())\nprint(\"Computer Simulation:\", x5.value())\nprint(\"Introduction to Computer Programming:\", x6.value())\nprint(\"Forecasting:\", x7.value())\nprint(\"The minimum number of courses needed:\", value(problem.objective))\n",
        "results": {
            "Calculus": "0.0",
            "Operations Research": "1.0",
            "Data Structures": "1.0",
            "Business Statistics": "0.0",
            "Computer Simulation": "1.0",
            "Introduction to Computer Programming": "1.0",
            "Forecasting": "0.0",
            "The minimum number of courses needed": "4.0"
        },
        "type": "linear-table",
        "index": 416,
        "length": 1834,
        "var_num": 8
    },
    {
        "scenario": "## Define Variables:\nA logistics company is managing the distribution of three types of goods: GoodsX, GoodsY, and GoodsZ. The company needs to determine the number of trucks allocated to each type of goods and the number of trips per truck for each type of goods will make in the upcoming month. For ease of management, the number of trips per truck is the same for all trucks of the same type of goods. Additionally, the company can invest in fuel-efficient upgrades for all trucks, which will reduce fuel costs per trip.\n// variables: {\"number of trucks for GoodsX\": \"TrucksX\", \"number of trucks for GoodsY\": \"TrucksY\", \"number of trucks for GoodsZ\": \"TrucksZ\", \"number of trips per truck for GoodsX\": \"TripsX\", \"number of trips per truck for GoodsY\": \"TripsY\", \"number of trips per truck for GoodsZ\": \"TripsZ\", \"investment in fuel efficiency\": \"FuelEfficiency\"}, where TrucksX, TrucksY, TrucksZ, TripsX, TripsY, TripsZ, FuelEfficiency >= 0 & TrucksX, TrucksY, TrucksZ, TripsX, TripsY, TripsZ are integers, and FuelEfficiency is continuous.\n\n## Define Objective Function:\nThe fuel cost per trip of all trucks decreases by $10 for every $10,000 invested in fuel efficiency upgrades. The initial fuel cost per trip for GoodsX is $200, for GoodsY is $250, and for GoodsZ is $300. The revenue generated per trip is $500 for GoodsX, $600 for GoodsY, and $700 for GoodsZ. The company aims to maximize the total profit from all goods.\n// Total profit for GoodsX: ProfitX = (500 - 200 + 0.001 * FuelEfficiency) * TrucksX * TripsX\n// Total profit for GoodsY: ProfitY = (600 - 250 + 0.001 * FuelEfficiency) * TrucksY * TripsY\n// Total profit for GoodsZ: ProfitZ = (700 - 300 + 0.001 * FuelEfficiency) * TrucksZ * TripsZ\n// So, the objective function is: Maximize (ProfitX + ProfitY + ProfitZ)\n\n## Generate Constraint-1:\nThe company has a total of 50 trucks available for the month.\n// TrucksX + TrucksY + TrucksZ <= 50\n\n## Generate Constraint-2:\nThe total investment in fuel efficiency upgrades cannot exceed $60,000.\n// FuelEfficiency <= 60000\n\n## Generate Constraint-3:\nDue to operational constraints, each truck can make no more than 20 trips in the month.\n// TripsX <= 20; TripsY <= 20; TripsZ <= 20\n\n## Generate Constraint-4:\nThe company must ensure that at least 10 trucks are allocated to GoodsX and 15 trucks to GoodsY.\n// TrucksX >= 10; TrucksY >= 15",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nTrucksX = model.addVar(vtype=\"INTEGER\", name=\"TrucksX\") # number of trucks for GoodsX\nmodel.addCons(TrucksX >= 0)\nTrucksY = model.addVar(vtype=\"INTEGER\", name=\"TrucksY\") # number of trucks for GoodsY\nmodel.addCons(TrucksY >= 0)\nTrucksZ = model.addVar(vtype=\"INTEGER\", name=\"TrucksZ\") # number of trucks for GoodsZ\nmodel.addCons(TrucksZ >= 0)\nTripsX = model.addVar(vtype=\"INTEGER\", name=\"TripsX\") # number of trips per truck for GoodsX\nmodel.addCons(TripsX >= 0)\nTripsY = model.addVar(vtype=\"INTEGER\", name=\"TripsY\") # number of trips per truck for GoodsY\nmodel.addCons(TripsY >= 0)\nTripsZ = model.addVar(vtype=\"INTEGER\", name=\"TripsZ\") # number of trips per truck for GoodsZ\nmodel.addCons(TripsZ >= 0)\nFuelEfficiency = model.addVar(vtype=\"CONTINUOUS\", name=\"FuelEfficiency\") # investment in fuel efficiency\nmodel.addCons(FuelEfficiency >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == (500 - 200 + 0.001 * FuelEfficiency) * TrucksX * TripsX + (600 - 250 + 0.001 * FuelEfficiency) * TrucksY * TripsY + (700 - 300 + 0.001 * FuelEfficiency) * TrucksZ * TripsZ)\n\n# Add constraints\nmodel.addCons(TrucksX + TrucksY + TrucksZ <= 50)\nmodel.addCons(FuelEfficiency <= 60000)\nmodel.addCons(TripsX <= 20)\nmodel.addCons(TripsY <= 20)\nmodel.addCons(TripsZ <= 20)\nmodel.addCons(TrucksX >= 10)\nmodel.addCons(TrucksY >= 15)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Trucks for GoodsX: \", model.getVal(TrucksX))\n    print(\"Number of Trucks for GoodsY: \", model.getVal(TrucksY))\n    print(\"Number of Trucks for GoodsZ: \", model.getVal(TrucksZ))\n    print(\"Number of Trips per Truck for GoodsX: \", model.getVal(TripsX))\n    print(\"Number of Trips per Truck for GoodsY: \", model.getVal(TripsY))\n    print(\"Number of Trips per Truck for GoodsZ: \", model.getVal(TripsZ))\n    print(\"Investment in Fuel Efficiency: \", model.getVal(FuelEfficiency))\n    print(\"Total Profit: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Trucks for GoodsX": "10.0",
            "Number of Trucks for GoodsY": "15.0",
            "Number of Trucks for GoodsZ": "25.0",
            "Number of Trips per Truck for GoodsX": "20.0",
            "Number of Trips per Truck for GoodsY": "20.0",
            "Number of Trips per Truck for GoodsZ": "20.0",
            "Investment in Fuel Efficiency": "60000.0",
            "Total Profit": "425000.0"
        },
        "question": "A logistics company is managing the distribution of three types of goods: GoodsX, GoodsY, and GoodsZ. The company needs to determine the number of trucks allocated to each type of goods and the number of trips per truck for each type of goods will make in the upcoming month. Additionally, the company can invest in fuel-efficient upgrades for all trucks, which will reduce fuel costs per trip. The initial fuel cost per trip, revenue generated per trip, and the effect of fuel efficiency upgrades on fuel costs are given in the following Table.\n\n| Goods | Initial Fuel Cost per Trip | Revenue per Trip | Fuel Cost Reduction per $10,000 Investment |\n|-------|----------------------------|------------------|------------------------------------------|\n| GoodsX | $200                       | $500             | $10                                      |\n| GoodsY | $250                       | $600             | $10                                      |\n| GoodsZ | $300                       | $700             | $10                                      |\n\nThe company has a total of 50 trucks available for the month. The total investment in fuel efficiency upgrades cannot exceed $60,000. Due to operational constraints, each truck can make no more than 20 trips in the month. The company must ensure that at least 10 trucks are allocated to GoodsX and 15 trucks to GoodsY. The company aims to maximize the total profit from all goods.\n",
        "type": "nonlinear-table",
        "index": 417,
        "length": 1438,
        "var_num": 7
    },
    {
        "question": "An oil and gas company operates on 300 acres of land where they use oil wells of small and large size. Per acre of land, a small oil well can produce 2 barrels of oil. Per acre of land, a large oil well can produce 5 barrels of oil. However, a small oil well produces 10 units of pollution and requires 5 drill bits per acre and a large oil well produces 20 units of pollution and requires 10 drill bits per acre. The company has available 2500 drill bits and due to strict environmental laws can produce at most 4500 units of pollution. For how many acres should each oil well be used to maximize the total production of oil?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nsmall_well_acres = LpVariable(\"SmallWellAcres\", lowBound=0) # acres of land for small wells\nlarge_well_acres = LpVariable(\"LargeWellAcres\", lowBound=0) # acres of land for large wells\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"OilProduction\", LpMaximize)\n\n# Define the objective function\nobjective = 2 * small_well_acres + 5 * large_well_acres\nproblem += objective # maximize the total production of oil\n\n# Define the constraints\nproblem += small_well_acres + large_well_acres <= 300 # the total area of land must not exceed 300 acres\nproblem += 10 * small_well_acres + 20 * large_well_acres <= 4500 # pollution should not exceed 4500 units\nproblem += 5 * small_well_acres + 10 * large_well_acres <= 2500 # drill bits required should not exceed available number\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of acres for small oil wells:\", small_well_acres.value())\nprint(\"The number of acres for large oil wells:\", large_well_acres.value())\nprint(\"The total production of oil:\", objective.value())",
        "results": {
            "The number of acres for small oil wells": "0.0",
            "The number of acres for large oil wells": "225.0",
            "The total production of oil": "1125.0"
        },
        "formulation": "maximize 2x+5y\nSubject to: \n5x+10y <= 2500\n10x+20y <= 4500\nx+y <= 300 (end)",
        "type": "linear-notable",
        "index": 418,
        "length": 626,
        "var_num": 2
    },
    {
        "question": "The Healthy Pet Food Company manufactures two types of dog food: Meaties and Yummies. Each package of Meaties contains 2 pounds of cereal and 3 pounds of meat; each package of Yummies contains 3 pounds of cereal and 1.5 pounds of meat. Healthy believes it can sell as much of each dog food as it can make. Meaties sell for $2.80 per package and Yummies sell for $2.00 per package. Healthy's production is limited in several ways. First, Healthy can buy only up to 400,000 pounds of cereal each month at $0.20 per pound. It can buy only up to 300,000 pounds of meat per month at $0.50 per pound. In addition, a special piece of machinery is required to make Meaties, and this machine has a capacity of 90,000 packages per month. The variable cost of blending and packing the dog food is $0.25 per package for Meaties and $0.20 per package for Yummies. Suppose you are the manager of the Dog Food Division of the Healthy Pet Food Company. Your salary is based on division profit, so you try to maximize its profit. How should you operate the division to maximize its profit and your salary?",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for Meaties and Yummies that adhere to the constraints given. Let's denote the number of packages of Meaties as M and the number of packages of Yummies as Y.\n```Variables\nM // number of packages of Meaties to produce \nY // number of packages of Yummies to produce\nM, Y >= 0 and they are integers // non-negative integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function (profit) is given by subtracting the total cost from the total revenue. \nThe total revenue is the sum of the revenue from Meaties and Yummies, which is $2.80M + $2.00Y.\nThe total cost is the sum of the cost of the cereal, meat, and packaging. The cost of the cereal is $0.20 per pound * (2M + 3Y) pounds. The cost of the meat is $0.50 per pound * (3M + 1.5Y) pounds. The cost of the packaging is $0.25 per package * M packages for Meaties and $0.20 per package * Y packages for Yummies. \nSo the total cost is $0.20(2M + 3Y) + $0.50(3M + 1.5Y) + $0.25M + $0.20Y = $0.4M + $0.6Y + $1.5M + $0.75Y + $0.25M + $0.20Y = $2.15M + $1.55Y\nTherefore, the objective function is $2.80M + $2.00Y - ($2.15M + $1.55Y) = $0.65M + $0.45Y.\n```Objective Function\nMaximize: $0.65M + $0.45Y\n```\n\n# Constraints:\n```Constraints\n2M + 3Y <= 400,000 // Healthy can buy only up to 400,000 pounds of cereal each month\n3M + 1.5Y <= 300,000 // Healthy can buy only up to 300,000 pounds of meat each month\nM <= 90,000 // The machine has a capacity of 90,000 packages per month\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nM = LpVariable(\"Meaties\", lowBound=0, cat='Integer') # number of packages of Meaties to produce\nY = LpVariable(\"Yummies\", lowBound=0, cat='Integer') # number of packages of Yummies to produce\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nprofit = 0.65 * M + 0.45 * Y\nproblem += profit # maximize the profit\n\n# Define the constraints\nproblem += 2 * M + 3 * Y <= 400000 # cereal constraint\nproblem += 3 * M + 1.5 * Y <= 300000 # meat constraint\nproblem += M <= 90000 # machine capacity constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of Meaties packages to produce:\", M.value())\nprint(\"The number of Yummies packages to produce:\", Y.value())\nprint(\"The maximum profit:\", profit.value())\n",
        "results": {
            "The number of Meaties packages to produce": "50000.0",
            "The number of Yummies packages to produce": "100000.0",
            "The maximum profit": "77500.0"
        },
        "type": "linear-notable",
        "index": 419,
        "length": 1088,
        "var_num": 2
    },
    {
        "question": "The Ace Manufacturing Company has orders for three similar products: A, B, and C with quantities of 1750, 500, and 1100 units respectively. Three machines are available for the manufacturing operations, and all three machines can produce all the products at the same production rate. However, the unit costs of the products vary depending on the machine used due to varying defect percentages. The machine capacities for the next week and the unit costs for producing each product on each machine are provided in the following tables. Use the transportation model to develop the minimum cost production schedule for the products and machines. Show the linear programming formulation. If the constant is \"1\" it must be entered in the box. If your answer is zero enter \"0\".\n\nTable (Machine capacities for the next week):\n| Machine | Capacity |\n|---------|----------|\n| 1       | 1550     |\n| 2       | 1450     |\n| 3       | 1150     |\n\nTable (Unit costs of products on each machine):\n| Product/Machine | Machine 1 | Machine 2 | Machine 3 |\n|-----------------|-----------|-----------|-----------|\n| A               | $0.80     | $1.40     | $0.80     |\n| B               | $1.30     | $1.30     | $0.80     |\n| C               | $0.70     | $1.50     | $1.20     |",
        "formulation": "# Define Variables:\nWe need to determine the number of units of each product produced on each machine. Let's denote the number of units of product A produced on machine 1 as A1, the number of units of product B produced on machine 1 as B1, and the number of units of product C produced on machine 1 as C1. Similarly, we denote the number of units of each product produced on machines 2 and 3 as A2, B2, C2, A3, B3, and C3, respectively.\n```\nVariables:\nA1 // Units of product A produced on machine 1\nB1 // Units of product B produced on machine 1\nC1 // Units of product C produced on machine 1\nA2 // Units of product A produced on machine 2\nB2 // Units of product B produced on machine 2\nC2 // Units of product C produced on machine 2\nA3 // Units of product A produced on machine 3\nB3 // Units of product B produced on machine 3\nC3 // Units of product C produced on machine 3\nA1, B1, C1, A2, B2, C2, A3, B3, C3 >= 0 and they are integers\n```\n\n# Objective Function:\nWe want to minimize the production cost, so the objective function (minimum production cost) is given by the sum of the cost of producing each product on each machine. The cost of producing each product on each machine is given in the question. Therefore, the objective function is:\n0.80A1 + 1.30B1 + 0.70C1 + 1.40A2 + 1.30B2 + 1.50C2 + 0.80A3 + 0.80B3 + 1.20C3\n```\nObjective Function:\nMinimize: 0.80A1 + 1.30B1 + 0.70C1 + 1.40A2 + 1.30B2 + 1.50C2 + 0.80A3 + 0.80B3 + 1.20C3\n```\n\n# Constraints:\nWe have several constraints that need to be satisfied:\n- Machine 1 capacity: The total number of units produced on machine 1 should not exceed its capacity of 1550 units.\n- Machine 2 capacity: The total number of units produced on machine 2 should not exceed its capacity of 1450 units.\n- Machine 3 capacity: The total number of units produced on machine 3 should not exceed its capacity of 1150 units.\n- Product A quantity demanded: The total number of units of product A produced on all machines should equal the quantity demanded, which is 1750 units.\n- Product B quantity demanded: The total number of units of product B produced on all machines should equal the quantity demanded, which is 500 units.\n- Product C quantity demanded: The total number of units of product C produced on all machines should equal the quantity demanded, which is 1100 units.\n```\nConstraints:\nA1 + B1 + C1 <= 1550 // Machine 1 capacity\nA2 + B2 + C2 <= 1450 // Machine 2 capacity\nA3 + B3 + C3 <= 1150 // Machine 3 capacity\nA1 + A2 + A3 = 1750 // Product A quantity demanded\nB1 + B2 + B3 = 500 // Product B quantity demanded\nC1 + C2 + C3 = 1100 // Product C quantity demanded\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nA1 = LpVariable(\"A1\", lowBound=0, cat='Integer')\nB1 = LpVariable(\"B1\", lowBound=0, cat='Integer')\nC1 = LpVariable(\"C1\", lowBound=0, cat='Integer')\nA2 = LpVariable(\"A2\", lowBound=0, cat='Integer')\nB2 = LpVariable(\"B2\", lowBound=0, cat='Integer')\nC2 = LpVariable(\"C2\", lowBound=0, cat='Integer')\nA3 = LpVariable(\"A3\", lowBound=0, cat='Integer')\nB3 = LpVariable(\"B3\", lowBound=0, cat='Integer')\nC3 = LpVariable(\"C3\", lowBound=0, cat='Integer')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimumCostProductionSchedule\", LpMinimize)\n\n# Define the objective function\nobjective = 0.80*A1 + 1.30*B1 + 0.70*C1 + 1.40*A2 + 1.30*B2 + 1.50*C2 + 0.80*A3 + 0.80*B3 + 1.20*C3\nproblem += objective\n\n# Define the constraints\nproblem += A1 + B1 + C1 <= 1550\nproblem += A2 + B2 + C2 <= 1450\nproblem += A3 + B3 + C3 <= 1150\nproblem += A1 + A2 + A3 == 1750\nproblem += B1 + B2 + B3 == 500\nproblem += C1 + C2 + C3 == 1100\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The production units for A on machine 1:\", A1.value())\nprint(\"The production units for B on machine 1:\", B1.value())\nprint(\"The production units for C on machine 1:\", C1.value())\nprint(\"The production units for A on machine 2:\", A2.value())\nprint(\"The production units for B on machine 2:\", B2.value())\nprint(\"The production units for C on machine 2:\", C2.value())\nprint(\"The production units for A on machine 3:\", A3.value())\nprint(\"The production units for B on machine 3:\", B3.value())\nprint(\"The production units for C on machine 3:\", C3.value())\nprint(\"The minimum production cost:\", objective.value())\n",
        "results": {
            "The production units for A on machine 1": "450.0",
            "The production units for B on machine 1": "0.0",
            "The production units for C on machine 1": "1100.0",
            "The production units for A on machine 2": "150.0",
            "The production units for B on machine 2": "500.0",
            "The production units for C on machine 2": "0.0",
            "The production units for A on machine 3": "1150.0",
            "The production units for B on machine 3": "0.0",
            "The production units for C on machine 3": "0.0",
            "The minimum production cost": "2910.0"
        },
        "type": "linear-table",
        "index": 420,
        "length": 1262,
        "var_num": 9
    },
    {
        "scenario": "## Define Variables:\nA logistics company is managing the distribution of three types of goods: GoodsX, GoodsY, and GoodsZ. The company needs to decide how many trucks to allocate for each type of good to optimize delivery efficiency and minimize costs. Additionally, the company can invest in route optimization software to reduce travel time and fuel consumption, which affects the cost and efficiency of each delivery.\n// variables: {\"number of trucks for GoodsX\": \"TrucksX\", \"number of trucks for GoodsY\": \"TrucksY\", \"number of trucks for GoodsZ\": \"TrucksZ\", \"investment in route optimization for GoodsX\": \"OptimizationX\", \"investment in route optimization for GoodsY\": \"OptimizationY\", \"investment in route optimization for GoodsZ\": \"OptimizationZ\"}, where TrucksX, TrucksY, TrucksZ >= 0 & TrucksX, TrucksY, TrucksZ are integers, and OptimizationX, OptimizationY, OptimizationZ are continuous.\n\n## Define Objective Function:\nThe reduction in delivery costs is linearly proportional to the amount of investment in route optimization software for each type of good.\nThe initial cost per truck for GoodsX is $1,000, but with optimization, the cost decreases by $10 for every $100 invested in optimization. \nThe initial cost per truck for GoodsY is $1,200, and with optimization, the cost decreases by $12 for every $100 invested in optimization. \nThe initial cost per truck for GoodsZ is $1,500, and with optimization, the cost decreases by $15 for every $100 invested in optimization. \nThe company aims to minimize the total delivery cost for all goods.\n// Total cost for GoodsX: CostX = (1000 - 0.1 * OptimizationX) * TrucksX\n// Total cost for GoodsY: CostY = (1200 - 0.12 * OptimizationY) * TrucksY\n// Total cost for GoodsZ: CostZ = (1500 - 0.15 * OptimizationZ) * TrucksZ\n// So, the objective function is: Minimize (CostX + CostY + CostZ)\n\n## Generate Constraint-1:\nThe company has a total of 50 trucks available for allocation.\n// TrucksX + TrucksY + TrucksZ <= 50\n\n## Generate Constraint-2:\nThe budget for route optimization software is $10,000.\n// OptimizationX + OptimizationY + OptimizationZ <= 10000\n\n## Generate Constraint-3:\nDue to contractual obligations, the company must allocate at least 10 trucks for GoodsX and 15 trucks for GoodsY.\n// TrucksX >= 10; TrucksY >= 15",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nTrucksX = model.addVar(vtype=\"INTEGER\", name=\"TrucksX\") # number of trucks for GoodsX\nmodel.addCons(TrucksX >= 0)\nTrucksY = model.addVar(vtype=\"INTEGER\", name=\"TrucksY\") # number of trucks for GoodsY\nmodel.addCons(TrucksY >= 0)\nTrucksZ = model.addVar(vtype=\"INTEGER\", name=\"TrucksZ\") # number of trucks for GoodsZ\nmodel.addCons(TrucksZ >= 0)\nOptimizationX = model.addVar(vtype=\"CONTINUOUS\", name=\"OptimizationX\") # investment in route optimization for GoodsX\nmodel.addCons(OptimizationX >= 0)\nOptimizationY = model.addVar(vtype=\"CONTINUOUS\", name=\"OptimizationY\") # investment in route optimization for GoodsY\nmodel.addCons(OptimizationY >= 0)\nOptimizationZ = model.addVar(vtype=\"CONTINUOUS\", name=\"OptimizationZ\") # investment in route optimization for GoodsZ\nmodel.addCons(OptimizationZ >= 0)\n\n# Define objective function\nCostX = (1000 - 0.1 * OptimizationX) * TrucksX\nCostY = (1200 - 0.12 * OptimizationY) * TrucksY\nCostZ = (1500 - 0.15 * OptimizationZ) * TrucksZ\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nmodel.addCons(obj == CostX + CostY + CostZ)\n\n# Add constraints\nmodel.addCons(TrucksX + TrucksY + TrucksZ <= 50)\nmodel.addCons(OptimizationX + OptimizationY + OptimizationZ <= 10000)\nmodel.addCons(TrucksX >= 10)\nmodel.addCons(TrucksY >= 15)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Trucks for GoodsX: \", model.getVal(TrucksX))\n    print(\"Number of Trucks for GoodsY: \", model.getVal(TrucksY))\n    print(\"Number of Trucks for GoodsZ: \", model.getVal(TrucksZ))\n    print(\"Investment in Optimization for GoodsX: \", model.getVal(OptimizationX))\n    print(\"Investment in Optimization for GoodsY: \", model.getVal(OptimizationY))\n    print(\"Investment in Optimization for GoodsZ: \", model.getVal(OptimizationZ))\n    print(\"Total Cost: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Trucks for GoodsX": "10.0",
            "Number of Trucks for GoodsY": "40.0",
            "Number of Trucks for GoodsZ": "0.0",
            "Investment in Optimization for GoodsX": "0",
            "Investment in Optimization for GoodsY": "10000.0",
            "Investment in Optimization for GoodsZ": "0",
            "Total Cost": "10000"
        },
        "question": "A logistics company is managing the distribution of three types of goods: GoodsX, GoodsY, and GoodsZ. The company needs to decide how many trucks to allocate for each type of good to optimize delivery efficiency and minimize costs. Additionally, the company can invest in route optimization software to reduce travel time and fuel consumption, which affects the cost and efficiency of each delivery. The initial cost per truck for GoodsX is $1,000, but with optimization, the cost decreases by $10 for every $100 invested in optimization. The initial cost per truck for GoodsY is $1,200, and with optimization, the cost decreases by $12 for every $100 invested in optimization. The initial cost per truck for GoodsZ is $1,500, and with optimization, the cost decreases by $15 for every $100 invested in optimization. The company aims to minimize the total delivery cost for all goods. The company has a total of 50 trucks available for allocation. The budget for route optimization software is $10,000. Due to contractual obligations, the company must allocate at least 10 trucks for GoodsX and 15 trucks for GoodsY. The reduction in delivery costs is linearly proportional to the amount of investment in route optimization software for each type of good.",
        "type": "nonlinear-notable",
        "index": 421,
        "length": 1255,
        "var_num": 6
    },
    {
        "question": "A large fishing boat sends fish back to shore either by small canoes or smaller diesel boats. A canoe can carry back 10 fish while a small diesel boat can carry back 15 fish. In order to follow environmental rules, the number of small canoes used has to be at least 3 times as many as the number of diesel boats uses. If  at least 1000 fish need to be transported to shore, minimize the total number of canoes and diesel boats needed.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_canoes = LpVariable(\"NumCanoes\", lowBound=0, cat='Integer') # number of canoes\nnum_diesel_boats = LpVariable(\"NumDieselBoats\", lowBound=0, cat='Integer') # number of diesel boats\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FisheryTransport\", LpMinimize)\n\n# Define the objective function\nobjective = num_canoes + num_diesel_boats\nproblem += objective # minimize the total number of boats used\n\n# Define the constraints\nproblem += 10 * num_canoes + 15 * num_diesel_boats >= 1000 # at least 1000 fish must be transported\nproblem += num_canoes >= 3 * num_diesel_boats # number of canoes must be at least 3 times the number of diesel boats\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of canoes:\", num_canoes.value())\nprint(\"The number of diesel boats:\", num_diesel_boats.value())\nprint(\"The total number of boats used:\", objective.value())",
        "results": {
            "The number of canoes": "67.0",
            "The number of diesel boats": "22.0",
            "The total number of boats used": "89.0"
        },
        "formulation": "minimize x+y\nSubject to: \nx >= 3y\n10x+15y >= 1000 (end)",
        "type": "linear-notable",
        "index": 422,
        "length": 434,
        "var_num": 2
    },
    {
        "question": "A dim sum restaurant can deliver their food by cart or by hand. Servers can deliver by cart and have 70 customer interactions and will have to refill food five times an hour. They can also deliver more food by hand, due to the increased mobility, and have 85 customer interactions while refilling food twenty times an hour. However, the customers get more options when delivering by cart, therefore at least 70% of delivery shifts must be by cart. There must be at least 3 servers delivering by hand for their direct customer service. If the restaurant wants to have 4000 customer interactions per hour, how many of each form of delivery should the dim sum restaurant schedule to minimize the total number of refills per hour?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_cart_deliveries = LpVariable(\"NumCartDeliveries\", lowBound=0, cat='Integer') # number of deliveries by cart\nnum_hand_deliveries = LpVariable(\"NumHandDeliveries\", lowBound=0, cat='Integer') # number of deliveries by hand\n\n# Define the question as a minimum problem\nproblem = LpProblem(\"DimSumDelivery\", LpMinimize)\n\n# Define the objective function\nobjective = 5 * num_cart_deliveries + 20 * num_hand_deliveries\nproblem += objective # minimize the total number of refills\n\n# Define the constraints\nproblem += 70 * num_cart_deliveries + 85 * num_hand_deliveries >= 4000 # ensure enough customer interactions per hour\nproblem += num_cart_deliveries >= 0.7 * (num_cart_deliveries + num_hand_deliveries) # at least 70% shifts must be by cart\nproblem += num_hand_deliveries >= 3 # at least three servers delivering by hand \n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of deliveries by cart:\", num_cart_deliveries.value())\nprint(\"The number of deliveries by hand:\", num_hand_deliveries.value())\nprint(\"The total number of refills per hour:\", objective.value())# Define the question as a maximum or minimum problem\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FisheryTransport\", LpMaximize)\n\n# Define the objective function\nobjective = 100 * num_sled_dog_trips + 300 * num_truck_trips\nproblem += objective # maximize the total number of fish transported\n\n# Define the constraints\nproblem += 50 * num_sled_dog_trips + 100 * num_truck_trips <= 1000 # the cost must be at most $1000\nproblem += num_sled_dog_trips <= num_truck_trips - 1 # sled dog trips must be less than the number of truck trips\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of sled dog trips:\", num_sled_dog_trips.value())\nprint(\"The number of truck trips:\", num_truck_trips.value())\nprint(\"The number of fish transported:\", objective.value())",
        "results": {
            "The number of deliveries by cart": "54.0",
            "The number of deliveries by hand": "3.0",
            "The total number of refills per hour": "330.0",
            "The number of sled dog trips": "0.0",
            "The number of truck trips": "10.0",
            "The number of fish transported": "3000.0"
        },
        "formulation": "minimize fivex+twentyy\nSubject to: \nx >= 0.7(x+y)\ny >= 3\n70x+85y <= 4000 (end)",
        "type": "linear-notable",
        "index": 423,
        "length": 726,
        "var_num": 5
    },
    {
        "question": "A company in the desert can transport goods to rural cities either by camel caravans or desert trucks. A camel caravan can deliver 50 units of goods per trip and takes 12 hours. A desert truck can deliver 150 units of goods per trip and takes 5 hours. However, due to the cost of fuel, the company prefers to have more camel caravans than desert trucks.  If the company needs to deliver 1500 units of goods, how many of each method of transportation should the company organize to minimize the total number of hours required?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_camel_caravans = LpVariable(\"NumCamelCaravans\", lowBound=0, cat='Integer') # number of camel caravans\nnum_desert_trucks = LpVariable(\"NumDesertTrucks\", lowBound=0, cat='Integer') # number of desert trucks\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"GoodsTransport\", LpMinimize)\n\n# Define the objective function\nobjective = 12 * num_camel_caravans + 5 * num_desert_trucks\nproblem += objective # minimize the total number of hours\n\n# Define the constraints\nproblem += 50 * num_camel_caravans + 150 * num_desert_trucks >= 1500 # the number of goods to be delivered\nproblem += num_camel_caravans >= num_desert_trucks + 1 # prefer to have more camel caravans than desert trucks\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of camel caravans:\", num_camel_caravans.value())\nprint(\"The number of desert trucks:\", num_desert_trucks.value())\nprint(\"The total hours required:\", objective.value())",
        "results": {
            "The number of camel caravans": "9.0",
            "The number of desert trucks": "7.0",
            "The total hours required": "143.0"
        },
        "formulation": "minimize 12x+5y\nSubject to: \n50x+150y >= 1500\nx >= y (end)",
        "type": "linear-notable",
        "index": 424,
        "length": 525,
        "var_num": 2
    },
    {
        "question": "Mark has 50 acres of land available to grow potatoes and cucumbers that he sells at a farmers' market. He must grow at least 12 acres of potatoes and 15 acres of cucumbers to meet his contract. Mark prefers to grow more cucumbers than potatoes, but he only has enough resources to grow at most twice the amount of cucumbers as potatoes. If the profit per acre of potatoes is $500 and the profit per acre of cucumbers is $650, how many acres of each should he grow to maximize his profit? What is that profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nacres_potatoes = LpVariable(\"AcresPotatoes\", lowBound=12, cat='Integer') # number of acres for potatoes\nacres_cucumbers = LpVariable(\"AcresCucumbers\", lowBound=15, cat='Integer') # number of acres for cucumbers\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FarmProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 500 * acres_potatoes + 650 * acres_cucumbers\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += acres_potatoes + acres_cucumbers <= 50 # the total land for cultivation must be less than or equal to 50 acres\nproblem += acres_cucumbers <= 2 * acres_potatoes # cucumbers can only be at most twice the amount of potatoes\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Acres of potatoes:\", acres_potatoes.value())\nprint(\"Acres of cucumbers:\", acres_cucumbers.value())\nprint(\"The maximum profit:\", objective.value())",
        "results": {
            "Acres of potatoes": "17.0",
            "Acres of cucumbers": "33.0",
            "The maximum profit": "29950.0"
        },
        "formulation": "maximize 500x+650y\nSubject to: \nx+y <= 50\nx >= 12\ny >= 15\ny <= 2x (end)",
        "type": "linear-notable",
        "index": 425,
        "length": 508,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA company plans to construct three types of production lines, each producing a certain type of product (Sugar, Flour, and Oil). For ease of management, the company decided to have the same number of workers on the same type of production line. The company needs to determine the number of production lines to construct for each product, and the number of workers to assign to each type of production line.\n// variables: {\"number of production lines for Sugar\": \"SugarLines\", \"number of production lines for Flour\": \"FlourLines\", \"number of production lines for Oil\": \"OilLines\", \"number of workers per production line for Sugar\": \"SugarWorkersPerLine\", \"number of workers per production line for Flour\": \"FlourWorkersPerLine\", \"number of workers per production line for Oil\": \"OilWorkersPerLine\"}, where SugarLines, FlourLines, OilLines, SugarWorkersPerLine, FlourWorkersPerLine, OilWorkersPerLine >= 0 and SugarLines, FlourLines, OilLines, SugarWorkersPerLine, FlourWorkersPerLine, OilWorkersPerLine are integers.\n\n## Define Objective Function:\nFor Sugar, the material cost per unit is $5, and the selling price per unit is $10, and production number per worker per day is 100 units.\nFor Flour, the material cost per unit is $7, and the selling price per unit is $15, and production number per worker per day is 80 units.\nFor Oil, the material cost per unit is $9, and the selling price per unit is $20, and production number per worker per day is 60 units.\nThe company wants to maximize the total profit per day.\n// Profit_Sugar = 100 * SugarLines * SugarWorkersPerLine * (10 - 5)\n// Profit_Flour = 80 * FlourLines * FlourWorkersPerLine * (15 - 7)\n// Profit_Oil = 60 * OilLines * OilWorkersPerLine * (20 - 9)\n// So, the objective function is: Maximize (Profit_Sugar + Profit_Flour + Profit_Oil)\n\n## Generate Constraint-1:\nThe company has a total of 100 workers available.\n// SugarLines * SugarWorkersPerLine + FlourLines * FlourWorkersPerLine + OilLines * OilWorkersPerLine <= 100\n\n## Generate Constraint-2:\nThe company has a budget of $5000 for material costs per day.\n// 5 * SugarLines * SugarWorkersPerLine + 7 * FlourLines * FlourWorkersPerLine + 9 * OilLines * OilWorkersPerLine <= 5000\n\n## Generate Constraint-3:\nThe company has a production capacity of 1000 units in terms of the number of units it can produce per day.\n// 100 * SugarLines * SugarWorkersPerLine + 80 * FlourLines * FlourWorkersPerLine + 60 * OilLines * OilWorkersPerLine <= 1000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nSugarLines = model.addVar(vtype=\"INTEGER\", name=\"SugarLines\") # number of production lines for Sugar\nmodel.addCons(SugarLines >= 0)\nFlourLines = model.addVar(vtype=\"INTEGER\", name=\"FlourLines\") # number of production lines for Flour\nmodel.addCons(FlourLines >= 0)\nOilLines = model.addVar(vtype=\"INTEGER\", name=\"OilLines\") # number of production lines for Oil\nmodel.addCons(OilLines >= 0)\nSugarWorkersPerLine = model.addVar(vtype=\"INTEGER\", name=\"SugarWorkersPerLine\") # number of workers per production line for Sugar\nmodel.addCons(SugarWorkersPerLine >= 0)\nFlourWorkersPerLine = model.addVar(vtype=\"INTEGER\", name=\"FlourWorkersPerLine\") # number of workers per production line for Flour\nmodel.addCons(FlourWorkersPerLine >= 0)\nOilWorkersPerLine = model.addVar(vtype=\"INTEGER\", name=\"OilWorkersPerLine\") # number of workers per production line for Oil\nmodel.addCons(OilWorkersPerLine >= 0)\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == 100 * SugarLines * SugarWorkersPerLine * (10 - 5) + 80 * FlourLines * FlourWorkersPerLine * (15 - 7) + 60 * OilLines * OilWorkersPerLine * (20 - 9))\n\n# Add constraints\nmodel.addCons(SugarLines * SugarWorkersPerLine + FlourLines * FlourWorkersPerLine + OilLines * OilWorkersPerLine <= 100)\nmodel.addCons(5 * SugarLines * SugarWorkersPerLine + 7 * FlourLines * FlourWorkersPerLine + 9 * OilLines * OilWorkersPerLine <= 5000)\nmodel.addCons(100 * SugarLines * SugarWorkersPerLine + 80 * FlourLines * FlourWorkersPerLine + 60 * OilLines * OilWorkersPerLine <= 1000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Sugar Lines: \", model.getVal(SugarLines))\n    print(\"Number of Flour Lines: \", model.getVal(FlourLines))\n    print(\"Number of Oil Lines: \", model.getVal(OilLines))\n    print(\"Number of Workers per Line for Sugar: \", model.getVal(SugarWorkersPerLine))\n    print(\"Number of Workers per Line for Flour: \", model.getVal(FlourWorkersPerLine))\n    print(\"Number of Workers per Line for Oil: \", model.getVal(OilWorkersPerLine))\n    print(\"Total Profit: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Sugar Lines": "0.0",
            "Number of Flour Lines": "0.0",
            "Number of Oil Lines": "4.0",
            "Number of Workers per Line for Sugar": "0.0",
            "Number of Workers per Line for Flour": "0.0",
            "Number of Workers per Line for Oil": "4.0",
            "Total Profit": "10560.0"
        },
        "question": "A company plans to construct three types of production lines, each producing a certain type of product (Sugar, Flour, and Oil). For ease of management, the company decided to have the same number of workers on the same type of production line. The company needs to determine the number of production lines to construct for each product, and the number of workers to assign to each type of production line. For Flour, the material cost per unit is $7, and the selling price per unit is $15, and production number per worker per day is 80 units. For Oil, the material cost per unit is $9, and the selling price per unit is $20, and production number per worker per day is 60 units. The company wants to maximize the total profit per day. The company has a total of 100 workers available. The company has a budget of $5000 for material costs per day. The company has a production capacity of 1000 units in terms of the number of units it can produce per day. For Sugar, the material cost per unit is $5, and the selling price per unit is $10, and production number per worker per day is 100 units.",
        "type": "nonlinear-notable",
        "index": 426,
        "length": 1094,
        "var_num": 6
    },
    {
        "question": "A taco stand sells regular tacos and deluxe tacos with extra meat. The stand makes x1 regular tacos at a profit of $2.50 each and x2 deluxe tacos at a profit of $3.55 each (x1 and x2 are unknown variables both greater than or equal to 0). There is a demand for at most 50 regular tacos and at most 40 deluxe tacos. The stand only has enough supplies to sell at most 70 tacos of either type. How many of each taco should the stand make to maximize profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_regular_tacos = LpVariable(\"NumRegularTacos\", lowBound=0, cat='Integer') # number of regular tacos\nnum_deluxe_tacos = LpVariable(\"NumDeluxeTacos\", lowBound=0, cat='Integer') # number of deluxe tacos\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"TacoStandProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 2.5 * num_regular_tacos + 3.55 * num_deluxe_tacos\nproblem += objective # maximize the profit\n\n# Define the constraints\nproblem += num_regular_tacos <= 50 # demand for regular tacos\nproblem += num_deluxe_tacos <= 40 # demand for deluxe tacos\nproblem += num_regular_tacos + num_deluxe_tacos <= 70 # limit of total supply\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of regular tacos:\", num_regular_tacos.value())\nprint(\"The number of deluxe tacos:\", num_deluxe_tacos.value())\nprint(\"The maximum profit:\", objective.value())",
        "results": {
            "The number of regular tacos": "30.0",
            "The number of deluxe tacos": "40.0",
            "The maximum profit": "217.0"
        },
        "formulation": "maximize 3.55y+2.50x\nSubject to: \nx <= 50\ny <= 40\nx+y <= 70 (end)",
        "type": "linear-notable",
        "index": 427,
        "length": 454,
        "var_num": 2
    },
    {
        "question": "A printing company sells math workbooks and English workbooks. To meet demand, they must make at least 40 math workbooks and at least 60 English workbooks. However, they can make at most 140 math workbooks and at most 170 English workbooks. The company has a contract with a school to send at least 200 workbooks of either type. If the profit per math workbook is $15 and the profit per English workbook is $17, how many of each should the company make to maximize profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_math_workbooks = LpVariable(\"NumMathWorkbooks\", lowBound=40, upBound=140, cat='Integer') # number of math workbooks\nnum_english_workbooks = LpVariable(\"NumEnglishWorkbooks\", lowBound=60, upBound=170, cat='Integer') # number of English workbooks\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeWorkbookProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 15 * num_math_workbooks + 17 * num_english_workbooks\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += num_math_workbooks + num_english_workbooks >= 200 # they must send at least 200 workbooks\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of math workbooks:\", num_math_workbooks.value())\nprint(\"The number of English workbooks:\", num_english_workbooks.value())\nprint(\"The total profit:\", objective.value())",
        "results": {
            "The number of math workbooks": "140.0",
            "The number of English workbooks": "170.0",
            "The total profit": "4990.0"
        },
        "formulation": "maximize 17y+15x\nSubject to: \nx >= 40\ny >= 60\nx <= 140\ny <= 170\nx+y >= 200 (end)",
        "type": "linear-notable",
        "index": 428,
        "length": 472,
        "var_num": 2
    },
    {
        "question": "A bee farmer transports his honey in small and large bottles. A small bottle can take 5 units of honey while a large bottle can take 20 units of honey. The farmer has available at most 300 small bottles and at most 100 large bottles. In addition, since small bottles are easier to sell, at least twice as many small bottles must be used than large bottles. Finally, he can transport at most 200 bottles total and at least 50 must be large bottles. How many of each bottle should be use to maximize the total amount of honey he can transport?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_small_bottles = LpVariable(\"NumSmallBottles\", lowBound=0, cat='Integer') # number of small bottles\nnum_large_bottles = LpVariable(\"NumLargeBottles\", lowBound=50, cat='Integer') # number of large bottles\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"HoneyTransport\", LpMaximize)\n\n# Define the objective function\nobjective = 5 * num_small_bottles + 20 * num_large_bottles\nproblem += objective # maximize the total amount of honey transported\n\n# Define the constraints\nproblem += num_small_bottles <= 300 # at most 300 small bottles\nproblem += num_large_bottles <= 100 # at most 100 large bottles\nproblem += num_small_bottles >= 2 * num_large_bottles # small bottles must be twice as many as large bottles\nproblem += num_small_bottles + num_large_bottles <= 200 # at most 200 bottles in total\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of small bottles:\", num_small_bottles.value())\nprint(\"The number of large bottles:\", num_large_bottles.value())\nprint(\"The amount of honey transported:\", objective.value())",
        "results": {
            "The number of small bottles": "134.0",
            "The number of large bottles": "66.0",
            "The amount of honey transported": "1990.0"
        },
        "formulation": "maximize 5x+20y\nSubject to: \nx <= 300\ny <= 100\nx >= 2y\nx+y <= 200\ny >= 50 (end)",
        "type": "linear-notable",
        "index": 429,
        "length": 541,
        "var_num": 2
    },
    {
        "question": "An ice cream store makes chocolate and vanilla ice cream by the gallon. In a week, they must make at least 5 gallons of each type but at most 10 gallons of chocolate ice cream and at most 8 gallons of vanilla ice cream. It takes 1 hour to produce a gallon of chocolate ice cream and 2 hours to produce a gallon of vanilla ice cream. In a week, 30 hours are available to make ice cream. In addition at least 6 workers are needed with 1 working on the chocolate ice cream and 2 on the vanilla ice cream at any time. If the profit per gallon of chocolate ice cream is $200 and the profit per gallon of vanilla ice cream is $300, how many gallons of each should be made to maximize profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\ngallons_chocolate = LpVariable(\"GallonsChocolate\", lowBound=5, upBound=10, cat='Integer') # gallons of chocolate ice cream\ngallons_vanilla = LpVariable(\"GallonsVanilla\", lowBound=5, upBound=8, cat='Integer') # gallons of vanilla ice cream\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"IceCreamProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 200 * gallons_chocolate + 300 * gallons_vanilla\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += gallons_chocolate + 2 * gallons_vanilla <= 30 # hours available in a week\nproblem += gallons_chocolate + 2 * gallons_vanilla >= 6 # at least 6 workers are needed\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Gallons of chocolate ice cream:\", gallons_chocolate.value())\nprint(\"Gallons of vanilla ice cream:\", gallons_vanilla.value())\nprint(\"Total profit:\", objective.value())",
        "results": {
            "Gallons of chocolate ice cream": "10.0",
            "Gallons of vanilla ice cream": "8.0",
            "Total profit": "4400.0"
        },
        "formulation": "maximize 300y+200x\nSubject to: \nx >= 5\ny >= 5\nx <= 10\ny <= 8\n1x+2y <= 30\n1x+2y >= 6 (end)",
        "type": "linear-notable",
        "index": 430,
        "length": 685,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA farm grows five types of crops: A, B, C, D, and E. The farm needs to decide how much of each crop to plant this season.\n// variables: {\"amount of crop A\": \"A\", \"amount of crop B\": \"B\", \"amount of crop C\": \"C\", \"amount of crop D\": \"D\", \"amount of crop E\": \"E\"}, where A, B, C, D, E >= 0 & A, B, C, D, E are integers\n\n## Define Objective Function:\nFor Crop A, the selling price is $20 per ton, the cost of seeds is $5 per ton, and the required labor hours are 3 hours per ton.\nFor Crop B, the selling price is $25 per ton, the cost of seeds is $7 per ton, and the required labor hours are 4 hours per ton.\nFor Crop C, the selling price is $30 per ton, the cost of seeds is $9 per ton, and the required labor hours are 5 hours per ton.\nFor Crop D, the selling price is $35 per ton, the cost of seeds is $11 per ton, and the required labor hours are 6 hours per ton.\nFor Crop E, the selling price is $40 per ton, the cost of seeds is $13 per ton, and the required labor hours are 7 hours per ton.\nThe farm aims to maximize the rate at which it earns profits (which is defined as the sum of the selling profit divided by the sum of the labor hours).\n// Selling profit of A: Profit_A = (20 - 5) * A\n// Selling profit of B: Profit_B = (25 - 7) * B\n// Selling profit of C: Profit_C = (30 - 9) * C\n// Selling profit of D: Profit_D = (35 - 11) * D\n// Selling profit of E: Profit_E = (40 - 13) * E\n// So, the objective function is: Maximize (Profit_A + Profit_B + Profit_C + Profit_D + Profit_E) / (3 * A + 4 * B + 5 * C + 6 * D + 7 * E)\n\n## Generate Constraint-1:\nThe farm has $9900 available for seed costs this season.\n// 5 * A + 7 * B + 9 * C + 11 * D + 13 * E <= 9900\n\n## Generate Constraint-2:\nThe farm wants to plant at least 20 tons of each crop this season.\n// A >= 20; B >= 20; C >= 20; D >= 20; E >= 20\n\n## Generate Constraint-3:\nThe farm wants to limit the total labor hours to at most 900 hours this season.\n// 3 * A + 4 * B + 5 * C + 6 * D + 7 * E <= 900",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nA = model.addVar(vtype=\"INTEGER\", name=\"A\") # amount of crop A\nmodel.addCons(A >= 0)\nB = model.addVar(vtype=\"INTEGER\", name=\"B\") # amount of crop B\nmodel.addCons(B >= 0)\nC = model.addVar(vtype=\"INTEGER\", name=\"C\") # amount of crop C\nmodel.addCons(C >= 0)\nD = model.addVar(vtype=\"INTEGER\", name=\"D\") # amount of crop D\nmodel.addCons(D >= 0)\nE = model.addVar(vtype=\"INTEGER\", name=\"E\") # amount of crop E\nmodel.addCons(E >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj * (3 * A + 4 * B + 5 * C + 6 * D + 7 * E) == (15 * A + 18 * B + 21 * C + 24 * D + 27 * E))\n\n# Add constraints\nmodel.addCons(5 * A + 7 * B + 9 * C + 11 * D + 13 * E <= 9900)\nmodel.addCons(A >= 20)\nmodel.addCons(B >= 20)\nmodel.addCons(C >= 20)\nmodel.addCons(D >= 20)\nmodel.addCons(E >= 20)\nmodel.addCons(3 * A + 4 * B + 5 * C + 6 * D + 7 * E <= 900)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Amount of Crop A: \", model.getVal(A))\n    print(\"Amount of Crop B: \", model.getVal(B))\n    print(\"Amount of Crop C: \", model.getVal(C))\n    print(\"Amount of Crop D: \", model.getVal(D))\n    print(\"Amount of Crop E: \", model.getVal(E))\n    print(\"Max Profit Rate: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Amount of Crop A": "153.0",
            "Amount of Crop B": "20.0",
            "Amount of Crop C": "20.0",
            "Amount of Crop D": "20.0",
            "Amount of Crop E": "20.0",
            "Max Profit Rate": "4.5550611790878754"
        },
        "question": "A farm grows five types of crops: A, B, C, D, and E. The farm needs to decide how much of each crop to plant this season. The selling price, cost of seeds, and required labor hours for each crop are given in the following Table.\n\n| Crop | Selling Price per Ton | Cost of Seeds per Ton | Required Labor Hours per Ton |\n|------|-----------------------|-----------------------|------------------------------|\n| A    | $20                   | $5                    | 3 hours                      |\n| B    | $25                   | $7                    | 4 hours                      |\n| C    | $30                   | $9                    | 5 hours                      |\n| D    | $35                   | $11                   | 6 hours                      |\n| E    | $40                   | $13                   | 7 hours                      |\n\nThe farm has $9900 available for seed costs this season. The farm wants to plant at least 20 tons of each crop this season. The farm wants to limit the total labor hours to at most 900 hours this season. The farm aims to maximize the rate at which it earns profits (which is defined as the sum of the selling profit divided by the sum of the labor hours).\n",
        "type": "nonlinear-table",
        "index": 431,
        "length": 1202,
        "var_num": 5
    },
    {
        "question": "A construction company in the tropics uses cows and elephants to carry bricks. A cow can carry 20 bricks on its back while an elephant can carry 50 bricks on its back. To avoid having elephants create too much traffic, the number of elephant cannot exceed the number of cows. In addition, there can be at most twice the number of cows as elephants. If the company needs to transport at least 1000 bricks, find the minimum number of animals, cows and elephants, that can be used..",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_cows = LpVariable(\"NumCows\", lowBound=0, cat='Integer') # number of cows\nnum_elephants = LpVariable(\"NumElephants\", lowBound=0, cat='Integer') # number of elephants\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ConstructionTransport\", LpMinimize)\n\n# Define the objective function\nobjective = num_cows + num_elephants\nproblem += objective # minimize the total number of animals used\n\n# Define the constraints\nproblem += 20 * num_cows + 50 * num_elephants >= 1000 # At least 1000 bricks must be transported\nproblem += num_elephants <= num_cows # Number of elephants cannot exceed the number of cows\nproblem += num_cows <= 2 * num_elephants # At most twice the number of cows as elephants\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of cows:\", num_cows.value())\nprint(\"The number of elephants:\", num_elephants.value())\nprint(\"The total number of animals used:\", objective.value())",
        "results": {
            "The number of cows": "15.0",
            "The number of elephants": "14.0",
            "The total number of animals used": "29.0"
        },
        "formulation": "minimize x+y\nSubject to: \ny <= x\nx <= 2y\n20x+50y >= 1000 (end)",
        "type": "linear-notable",
        "index": 432,
        "length": 479,
        "var_num": 2
    },
    {
        "question": "Suppose a company manufactures two products, A and B, using three inputs, labor, material R, and materials S. To make one unit of product A requires 6 pounds of R, 7.5 pounds of S, and 9 person-hours of labor; to make one unit of product B requires 12 pounds of R, 4.5 pounds of S, and 6 person-hours of labor. The demands for the products are such that the company can sell as much of each product as it can produce and earn a profit of $3 per unit of A and $4 per unit of B. However, only 900 pounds of R, 675 pounds of S, and 1200 person-hours of labor are available to the company each day. Formulate the company's problem as a linear program to maximize profit.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for products A and B that adhere to the constraints given. Let's denote the number of units of product A as A and the number of units of product B as B.\n```Variables\nA //number of units of product A to produce \nB //number of units of product B to produce\nA, B >= 0 and they are integers //non-negative integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit of the company, which is given by the following equation:\n```Objective Function\nMaximize: 3A + 4B\n```\n\n# Constraints:\nWe need to make sure that the company does not exceed the available pounds of R, S, and person-hours of labor. We also need to make sure that the company does not produce a negative number of units of product A or B. The constraints are given by the following equations:\n```Constraints\n6A + 12B <= 900 //available pounds of R\n7.5A + 4.5B <= 675 //available pounds of S\n9A + 6B <= 1200 //available person-hours of labor\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nA = LpVariable(\"A\", lowBound=0, cat='Integer') # number of units of product A to produce\nB = LpVariable(\"B\", lowBound=0, cat='Integer') # number of units of product B to produce\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 3 * A + 4 * B\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 6 * A + 12 * B <= 900 # available pounds of R\nproblem += 7.5 * A + 4.5 * B <= 675 # available pounds of S\nproblem += 9 * A + 6 * B <= 1200 # available person-hours of labor\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of units of product A to produce:\", A.value())\nprint(\"The number of units of product B to produce:\", B.value())\nprint(\"The maximum profit:\", objective.value())\n",
        "results": {
            "The number of units of product A to produce": "64.0",
            "The number of units of product B to produce": "43.0",
            "The maximum profit": "364.0"
        },
        "type": "linear-notable",
        "index": 433,
        "length": 666,
        "var_num": 2
    },
    {
        "question": "There is a closed cylinder. The volume of the cylinder is 16\u03c0. Find the dimensions of the cylinder that has the least amount of surface area.",
        "scenario": "## Define Variables:\nThere is a closed cylinder. The volume of the cylinder is 16\u03c0.\n// variables: {\"radius of the cylinder\": \"r\", \"height of the cylinder\": \"h\"}, where r, h >= 0\n\n## Define Objective Function:\nFind the dimensions of the cylinder that has the least amount of surface area.\n// The surface area of the cylinder is given by the formula 2\u03c0rh + 2\u03c0r^2.\n// Therefore, the objective function is: Minimize 2\u03c0rh + 2\u03c0r^2\n\n## Generate Constraint-1:\nThe volume of the cylinder is 16\u03c0.\n// The volume of the cylinder is given by the formula \u03c0r^2h, and it is given that the volume is 16\u03c0. Therefore, the constraint is \u03c0r^2h = 16\u03c0.\n// r^2h = 16",
        "code": "from pyscipopt import Model\nimport math\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nr = model.addVar(vtype=\"CONTINUOUS\", name=\"r\") # radius of the cylinder\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the cylinder\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nmodel.addCons(obj == 2*math.pi*r*h + 2*math.pi*r**2)\n\n# Add constraints\nmodel.addCons(r**2*h == 16)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The radius of the cylinder: \", model.getVal(r))\n    print(\"The height of the cylinder: \", model.getVal(h))\n    print(\"The surface area of the cylinder: \", model.getVal(obj))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The radius of the cylinder": "2.0",
            "The height of the cylinder": "4.0",
            "The surface area of the cylinder": "75.39822"
        },
        "type": "nonlinear-notable",
        "index": 434,
        "length": 141,
        "var_num": 2
    },
    {
        "question": "East Oak Designs are famous for its high-end furniture. Each sofa produced by East Oak Designs nets the company a profit of $400. Each kitchen cabinet yields a $1200 profit. Every week, 100 gallons of lacquer and 300 lengths of high-quality oak are available. Each sofa requires approximately 3 gallon of lacquer and 10 length of oak. Each kitchen cabinet takes 10 gallon of lacquer and 24 lengths of wood. What should the production plan for East Oak Designs to make a maximum profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of sofas produced\", \"name\": \"x\"}, {\"description\": \"number of kitchen cabinets produced\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total profit\", \"function\": \"400x + 1200y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"lacquer constraint\", \"function\": \"3x + 10y <= 100\"}, {\"description\": \"oak constraint\", \"function\": \"10x + 24y <= 300\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_sofas = LpVariable(\"NumSofas\", lowBound=0, cat='Integer') # number of sofas produced\nnum_cabinets = LpVariable(\"NumCabinets\", lowBound=0, cat='Integer') # number of kitchen cabinets produced\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FurnitureProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 400 * num_sofas + 1200 * num_cabinets\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 3 * num_sofas + 10 * num_cabinets <= 100 # lacquer constraint\nproblem += 10 * num_sofas + 24 * num_cabinets <= 300 # oak constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of sofas to produce:\", num_sofas.value())\nprint(\"The number of kitchen cabinets to produce:\", num_cabinets.value())\nprint(\"The maximum profit:\", objective.value())\n",
        "results": {
            "The number of sofas to produce": "20.0",
            "The number of kitchen cabinets to produce": "4.0",
            "The maximum profit": "12800.0"
        },
        "type": "linear-notable",
        "index": 435,
        "length": 485,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA farm grows three types of crops: C1, C2, and C3, and a new type of crop C4. They need to determine the areas to allocate for each crop.\n// variables: {\"area for C1\": \"C1\", \"area for C2\": \"C2\", \"area for C3\": \"C3\", \"area for C4\": \"C4\"}, where C1, C2, C3, C4 >= 0 and C1, C2, C3, C4 are integers.\n\n## Define Objective Function:\nFor C1, the profit per acre is $100, the water usage per acre is 500 gallons, and the labor cost per acre is $30. \nFor C2, the profit per acre is $120, the water usage per acre is 600 gallons, and the labor cost per acre is $40. \nFor C3, the profit per acre is $140, the water usage per acre is 700 gallons, and the labor cost per acre is $50.\nFor C4, the profit per acre is $160, the water usage per acre is 800 gallons, and the labor cost per acre is $60.\nThe farm has limited resources for water and labor. The farm wants to maximize the profit efficiency (profit per gallon of water used).\n// Profit_C1 = 100 * C1 - 30 * C1\n// Profit_C2 = 120 * C2 - 40 * C2\n// Profit_C3 = 140 * C3 - 50 * C3\n// Profit_C4 = 160 * C4 - 60 * C4\n// So, the objective function is: Maximize (Profit_C1 + Profit_C2 + Profit_C3 + Profit_C4) / (500 * C1 + 600 * C2 + 700 * C3 + 800 * C4)\n\n## Generate Constraint-1:\nThe farm has a limited water supply of 100,000 gallons.\n// 500 * C1 + 600 * C2 + 700 * C3 + 800 * C4 <= 100,000\n\n## Generate Constraint-2:\nThe farm has a budget of $10,000 for labor costs.\n// 30 * C1 + 40 * C2 + 50 * C3 + 60 * C4 <= 10,000\n\n## Generate Constraint-3:\nThe farm has a total land area of 200 acres, and he wants to use at least 50 acres in total.\n// C1 + C2 + C3 + C4 <= 200\n// C1 + C2 + C3 + C4 >= 50",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nC1 = model.addVar(vtype=\"INTEGER\", name=\"C1\", lb=0) # area for C1\nC2 = model.addVar(vtype=\"INTEGER\", name=\"C2\", lb=0) # area for C2\nC3 = model.addVar(vtype=\"INTEGER\", name=\"C3\", lb=0) # area for C3\nC4 = model.addVar(vtype=\"INTEGER\", name=\"C4\", lb=0) # area for C4\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj * (500 * C1 + 600 * C2 + 700 * C3 + 800 * C4) == (100 * C1 - 30 * C1 + 120 * C2 - 40 * C2 + 140 * C3 - 50 * C3 + 160 * C4 - 60 * C4))\n\n# Add constraints\nmodel.addCons(500 * C1 + 600 * C2 + 700 * C3 + 800 * C4 <= 100000)\nmodel.addCons(30 * C1 + 40 * C2 + 50 * C3 + 60 * C4 <= 10000)\nmodel.addCons(C1 + C2 + C3 + C4 <= 200)\nmodel.addCons(C1 + C2 + C3 + C4 >= 50)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Profit Efficiency: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Profit Efficiency": "0.1400000000000"
        },
        "question": "A farm grows three types of crops: C1, C2, and C3, and a new type of crop C4. They need to determine the areas to allocate for each crop. For C2, the profit per acre is $120, the water usage per acre is 600 gallons, and the labor cost per acre is $40. For C3, the profit per acre is $140, the water usage per acre is 700 gallons, and the labor cost per acre is $50. For C4, the profit per acre is $160, the water usage per acre is 800 gallons, and the labor cost per acre is $60. The farm has limited resources for water and labor. The farm wants to maximize the profit efficiency (profit per gallon of water used). The farm has a limited water supply of 100,000 gallons. The farm has a budget of $10,000 for labor costs. The farm has a total land area of 200 acres, and he wants to use at least 50 acres in total. For C1, the profit per acre is $100, the water usage per acre is 500 gallons, and the labor cost per acre is $30.",
        "type": "nonlinear-notable",
        "index": 436,
        "length": 928,
        "var_num": 4
    },
    {
        "scenario": "## Define Variables:\nA company is planning to optimize its energy consumption by investing in three types of renewable energy sources: Solar, Wind, and Hydro. The company aims to balance cost efficiency with environmental impact.\n// variables: {\"amount of energy produced by solar\": \"Solar\", \"amount of energy produced by wind\": \"Wind\", \"amount of energy produced by hydro\": \"Hydro\"}, where Solar, Wind, Hydro >= 0 & Solar, Wind, Hydro are integers\n\n## Define Objective Function:\nThe cost of producing one unit of solar energy is $500, wind energy is $300, and hydro energy is $400. The environmental impact score for producing one unit of solar energy is 3, wind energy is 2, and hydro energy is 4. The company wants to minimize the Cost-Impact ratio of the investment. (The Cost-Impact ratio is defined as the total cost of energy production divided by the total environmental impact score.)\n// total cost of energy production: Cost = 500 * Solar + 300 * Wind + 400 * Hydro\n// total environmental impact score: Impact = 3 * Solar + 2 * Wind + 4 * Hydro\n// So, the objective function is: Minimize Cost / Impact\n\n## Generate Constraint-1:\nThe company has a budget of $150,000 for energy investments.\n// 500 * Solar + 300 * Wind + 400 * Hydro <= 150000\n\n## Generate Constraint-2:\nThe company aims to produce at least 360 units of energy in total.\n// Solar + Wind + Hydro >= 360\n\n## Generate Constraint-3:\nThe company wants to ensure that at least 100 units of energy come from each source.\n// Solar >= 100\n// Wind >= 100\n// Hydro >= 100",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nSolar = model.addVar(vtype=\"INTEGER\", name=\"Solar\")  # amount of energy produced by solar\nmodel.addCons(Solar >= 0)\nWind = model.addVar(vtype=\"INTEGER\", name=\"Wind\")  # amount of energy produced by wind\nmodel.addCons(Wind >= 0)\nHydro = model.addVar(vtype=\"INTEGER\", name=\"Hydro\")  # amount of energy produced by hydro\nmodel.addCons(Hydro >= 0)\n\n# Define objective function\n# Since the objective is not linear (division), we introduce a new variable and a constraint\nCost = 500 * Solar + 300 * Wind + 400 * Hydro\nImpact = 3 * Solar + 2 * Wind + 4 * Hydro\nRatio = model.addVar(name=\"Ratio\")\nmodel.setObjective(Ratio, \"minimize\")\nmodel.addCons(Ratio == Cost / Impact)\n\n# Add constraints\nmodel.addCons(500 * Solar + 300 * Wind + 400 * Hydro <= 150000)\nmodel.addCons(Solar + Wind + Hydro >= 360)\nmodel.addCons(Solar >= 100)\nmodel.addCons(Wind >= 100)\nmodel.addCons(Hydro >= 100)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Amount of Solar Energy: \", model.getVal(Solar))\n    print(\"Amount of Wind Energy: \", model.getVal(Wind))\n    print(\"Amount of Hydro Energy: \", model.getVal(Hydro))\n    print(\"Cost-Impact Ratio: \", model.getVal(Ratio))\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Amount of Solar Energy": "100.0",
            "Amount of Wind Energy": "100.0",
            "Amount of Hydro Energy": "175.0",
            "Cost-Impact Ratio": "125.0"
        },
        "question": "A company is planning to optimize its energy consumption by investing in three types of renewable energy sources: Solar, Wind, and Hydro. The company aims to balance cost efficiency with environmental impact. The cost and environmental impact score for producing one unit of each type of energy are given in the following Table.\n\n| Energy Source | Cost per Unit | Environmental Impact Score |\n|---------------|---------------|----------------------------|\n| Solar         | $500          | 3                          |\n| Wind          | $300          | 2                          |\n| Hydro         | $400          | 4                          |\n\nThe company has a budget of $150,000 for energy investments. The company aims to produce at least 360 units of energy in total. The company wants to ensure that at least 100 units of energy come from each source. The company wants to minimize the Cost-Impact ratio of the investment, which is defined as the total cost of energy production divided by the total environmental impact score.\n",
        "type": "nonlinear-table",
        "index": 437,
        "length": 1034,
        "var_num": 3
    },
    {
        "question": "A tasty burrito is to be made from units of beans and onions and is to contain a minimum of 110 units of spice and 80 units of flavor. Beans cost $6 per unit and onion cost $8 per unit. One unit of beans contains 10 units of spice and 3 units of flavor. One unit of onions contains 2 units of spice and 6 units of flavor. Formulate this as an LP and find the minimum cost burrito that can be made.",
        "formulation": "{\"variable\": [{\"description\": \"number of units of beans\", \"name\": \"x\"}, {\"description\": \"number of units of onions\", \"name\": \"y\"}], \"objective\": [{\"description\": \"minimum cost\", \"function\": \"6x + 8y\", \"sense\": \"Minimize\"}], \"constraint\": [{\"description\": \"minimum units of spice\", \"function\": \"10x + 2y >= 110\"}, {\"description\": \"minimum units of flavor\", \"function\": \"3x + 6y >= 80\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_units_beans = LpVariable(\"NumUnitsBeans\", lowBound=0, cat='Integer') # number of units of beans\nnum_units_onions = LpVariable(\"NumUnitsOnions\", lowBound=0, cat='Integer') # number of units of onions\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimumCostBurrito\", LpMinimize)\n\n# Define the objective function\nobjective = 6 * num_units_beans + 8 * num_units_onions\nproblem += objective # minimize the total cost\n\n# Define the constraints\nproblem += 10 * num_units_beans + 2 * num_units_onions >= 110 # minimum units of spice\nproblem += 3 * num_units_beans + 6 * num_units_onions >= 80 # minimum units of flavor\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of units of beans:\", num_units_beans.value())\nprint(\"The number of units of onions:\", num_units_onions.value())\nprint(\"The minimum cost:\", objective.value())\n",
        "results": {
            "The number of units of beans": "11",
            "The number of units of onions": "8",
            "The minimum cost": "130"
        },
        "type": "linear-notable",
        "index": 438,
        "length": 397,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA logistics company operates three types of vehicles: TruckX, TruckY, and TruckZ. The company needs to decide how many trips each type of vehicle should make in the next month to optimize its operations. Additionally, the company can invest in upgrading the vehicles to improve their fuel efficiency and capacity, which affects the operational cost and revenue per trip.\n// variables: {\"number of trips for TruckX\": \"TripsX\", \"number of trips for TruckY\": \"TripsY\", \"number of trips for TruckZ\": \"TripsZ\", \"investment in upgrading TruckX\": \"UpgradeX\", \"investment in upgrading TruckY\": \"UpgradeY\", \"investment in upgrading TruckZ\": \"UpgradeZ\"}, where TripsX, TripsY, TripsZ >= 0 & TripsX, TripsY, TripsZ are integers, and UpgradeX, UpgradeY, UpgradeZ are continuous.\n\n## Define Objective Function:\nThe revenue per trip increases with the amount of upgrade investment for each vehicle type.\nThe initial revenue per trip for TruckX is $1,000, but with upgrades, the revenue increases by $100 per trip for every $500 invested in upgrades. \nThe initial revenue per trip for TruckY is $1,500, and with upgrades, the revenue increases by $150 per trip for every $500 invested in upgrades. \nThe initial revenue per trip for TruckZ is $2,000, and with upgrades, the revenue increases by $200 per trip for every $500 invested in upgrades. \nThe company aims to maximize the total revenue from all vehicle trips.\n// Total revenue for TruckX: RevenueX = (1000 + 0.2 * UpgradeX) * TripsX\n// Total revenue for TruckY: RevenueY = (1500 + 0.3 * UpgradeY) * TripsY\n// Total revenue for TruckZ: RevenueZ = (2000 + 0.4 * UpgradeZ) * TripsZ\n// So, the objective function is: Maximize (RevenueX + RevenueY + RevenueZ)\n\n## Generate Constraint-1:\nThe operational cost for each trip of TruckX is $500, for TruckY is $750, and for TruckZ is $1,000. The company has a total budget of $100,000 for operational costs and vehicle upgrades.\n// 500 * TripsX + 750 * TripsY + 1000 * TripsZ + UpgradeX + UpgradeY + UpgradeZ <= 100000\n\n## Generate Constraint-2:\nThe total number of trips that can be made in the next month is limited to 200.\n// TripsX + TripsY + TripsZ <= 200\n\n## Generate Constraint-3:\nDue to maintenance schedules, TruckX can make no more than 50 trips, and TruckY can make no more than 70 trips.\n// TripsX <= 50; TripsY <= 70",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nTripsX = model.addVar(vtype=\"INTEGER\", name=\"TripsX\") # number of trips for TruckX\nmodel.addCons(TripsX >= 0)\nTripsY = model.addVar(vtype=\"INTEGER\", name=\"TripsY\") # number of trips for TruckY\nmodel.addCons(TripsY >= 0)\nTripsZ = model.addVar(vtype=\"INTEGER\", name=\"TripsZ\") # number of trips for TruckZ\nmodel.addCons(TripsZ >= 0)\nUpgradeX = model.addVar(vtype=\"CONTINUOUS\", name=\"UpgradeX\") # investment in upgrading TruckX\nmodel.addCons(UpgradeX >= 0)\nUpgradeY = model.addVar(vtype=\"CONTINUOUS\", name=\"UpgradeY\") # investment in upgrading TruckY\nmodel.addCons(UpgradeY >= 0)\nUpgradeZ = model.addVar(vtype=\"CONTINUOUS\", name=\"UpgradeZ\") # investment in upgrading TruckZ\nmodel.addCons(UpgradeZ >= 0)\n\n# Define objective function\nRevenueX = model.addVar(name=\"RevenueX\")\nRevenueY = model.addVar(name=\"RevenueY\")\nRevenueZ = model.addVar(name=\"RevenueZ\")\nmodel.setObjective(RevenueX + RevenueY + RevenueZ, \"maximize\")\nmodel.addCons(RevenueX == (1000 + 0.2 * UpgradeX) * TripsX)\nmodel.addCons(RevenueY == (1500 + 0.3 * UpgradeY) * TripsY)\nmodel.addCons(RevenueZ == (2000 + 0.4 * UpgradeZ) * TripsZ)\n\n# Add constraints\nmodel.addCons(500 * TripsX + 750 * TripsY + 1000 * TripsZ + UpgradeX + UpgradeY + UpgradeZ <= 100000)\nmodel.addCons(TripsX + TripsY + TripsZ <= 200)\nmodel.addCons(TripsX <= 50)\nmodel.addCons(TripsY <= 70)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Trips for TruckX: \", model.getVal(TripsX))\n    print(\"Number of Trips for TruckY: \", model.getVal(TripsY))\n    print(\"Number of Trips for TruckZ: \", model.getVal(TripsZ))\n    print(\"Investment in Upgrading TruckX: \", model.getVal(UpgradeX))\n    print(\"Investment in Upgrading TruckY: \", model.getVal(UpgradeY))\n    print(\"Investment in Upgrading TruckZ: \", model.getVal(UpgradeZ))\n    print(\"Total Revenue: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Trips for TruckX": "0.0",
            "Number of Trips for TruckY": "70.0",
            "Number of Trips for TruckZ": "0.0",
            "Investment in Upgrading TruckX": "0.0",
            "Investment in Upgrading TruckY": "47500.0",
            "Investment in Upgrading TruckZ": "0.0",
            "Total Revenue": "1102500.0"
        },
        "question": "A logistics company operates three types of vehicles: TruckX, TruckY, and TruckZ. The company needs to decide how many trips each type of vehicle should make in the next month to optimize its operations. Additionally, the company can invest in upgrading the vehicles to improve their fuel efficiency and capacity, which affects the operational cost and revenue per trip. The initial revenue per trip for TruckX is $1,000, but with upgrades, the revenue increases by $100 per trip for every $500 invested in upgrades. The initial revenue per trip for TruckY is $1,500, and with upgrades, the revenue increases by $150 per trip for every $500 invested in upgrades. The initial revenue per trip for TruckZ is $2,000, and with upgrades, the revenue increases by $200 per trip for every $500 invested in upgrades. The company aims to maximize the total revenue from all vehicle trips. The operational cost for each trip of TruckX is $500, for TruckY is $750, and for TruckZ is $1,000. The company has a total budget of $100,000 for operational costs and vehicle upgrades. The total number of trips that can be made in the next month is limited to 200. Due to maintenance schedules, TruckX can make no more than 50 trips, and TruckY can make no more than 70 trips. The revenue per trip increases with the amount of upgrade investment for each vehicle type.",
        "type": "nonlinear-notable",
        "index": 439,
        "length": 1350,
        "var_num": 6
    },
    {
        "question": "A car manufacturer ships their cars on large and small planes. A large plane can carry 30 cars while a small plane can carry 10 cars. Since large planes cause more pollution, the number of large planes must be less than the number of small planes. If the manufacturer wants to deliver at least 300 cars, find the minimum number of planes that can be used.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_large_planes = LpVariable(\"NumLargePlanes\", lowBound=0, cat='Integer') # number of large planes\nnum_small_planes = LpVariable(\"NumSmallPlanes\", lowBound=0, cat='Integer') # number of small planes\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CarShipping\", LpMinimize)\n\n# Define the objective function\nobjective = num_large_planes + num_small_planes\nproblem += objective # minimize the total number of planes\n\n# Define the constraints\nproblem += 30 * num_large_planes + 10 * num_small_planes >= 300 # the manufacturer wants to deliver at least 300 cars\nproblem += num_large_planes <= num_small_planes - 1 # the number of large planes must be less than the number of small planes\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of large planes:\", num_large_planes.value())\nprint(\"The number of small planes:\", num_small_planes.value())\nprint(\"The total number of planes:\", objective.value())",
        "results": {
            "The number of large planes": "7.0",
            "The number of small planes": "9.0",
            "The total number of planes": "16.0"
        },
        "formulation": "minimize x+y\nSubject to: \nx <= y\n30x+10y >= 300 (end)",
        "type": "linear-notable",
        "index": 440,
        "length": 355,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA farm grows five types of crops: A, B, C, D, and E. The farm needs to decide how much of each crop to plant this season.\n// variables: {\"amount of crop A\": \"A\", \"amount of crop B\": \"B\", \"amount of crop C\": \"C\", \"amount of crop D\": \"D\", \"amount of crop E\": \"E\"}, where A, B, C, D, E >= 0 & A, B, C, D, E are integers\n\n## Define Objective Function:\nFor Crop A, the selling price is $20 per ton, the cost of seeds is $5 per ton, and the required labor hours are 3 hours per ton.\nFor Crop B, the selling price is $25 per ton, the cost of seeds is $7 per ton, and the required labor hours are 4 hours per ton.\nFor Crop C, the selling price is $30 per ton, the cost of seeds is $9 per ton, and the required labor hours are 5 hours per ton.\nFor Crop D, the selling price is $35 per ton, the cost of seeds is $11 per ton, and the required labor hours are 6 hours per ton.\nFor Crop E, the selling price is $40 per ton, the cost of seeds is $13 per ton, and the required labor hours are 7 hours per ton.\nThe farm aims to maximize the rate at which it earns profits (which is defined as the sum of the selling profit divided by the sum of the labor hours).\n// Selling profit of A: Profit_A = (20 - 5) * A\n// Selling profit of B: Profit_B = (25 - 7) * B\n// Selling profit of C: Profit_C = (30 - 9) * C\n// Selling profit of D: Profit_D = (35 - 11) * D\n// Selling profit of E: Profit_E = (40 - 13) * E\n// So, the objective function is: Maximize (Profit_A + Profit_B + Profit_C + Profit_D + Profit_E) / (3 * A + 4 * B + 5 * C + 6 * D + 7 * E)\n\n## Generate Constraint-1:\nThe farm has $9900 available for seed costs this season.\n// 5 * A + 7 * B + 9 * C + 11 * D + 13 * E <= 9900\n\n## Generate Constraint-2:\nThe farm wants to plant at least 20 tons of each crop this season.\n// A >= 20; B >= 20; C >= 20; D >= 20; E >= 20\n\n## Generate Constraint-3:\nThe farm wants to limit the total labor hours to at most 900 hours this season.\n// 3 * A + 4 * B + 5 * C + 6 * D + 7 * E <= 900",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nA = model.addVar(vtype=\"INTEGER\", name=\"A\") # amount of crop A\nmodel.addCons(A >= 0)\nB = model.addVar(vtype=\"INTEGER\", name=\"B\") # amount of crop B\nmodel.addCons(B >= 0)\nC = model.addVar(vtype=\"INTEGER\", name=\"C\") # amount of crop C\nmodel.addCons(C >= 0)\nD = model.addVar(vtype=\"INTEGER\", name=\"D\") # amount of crop D\nmodel.addCons(D >= 0)\nE = model.addVar(vtype=\"INTEGER\", name=\"E\") # amount of crop E\nmodel.addCons(E >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj * (3 * A + 4 * B + 5 * C + 6 * D + 7 * E) == (15 * A + 18 * B + 21 * C + 24 * D + 27 * E))\n\n# Add constraints\nmodel.addCons(5 * A + 7 * B + 9 * C + 11 * D + 13 * E <= 9900)\nmodel.addCons(A >= 20)\nmodel.addCons(B >= 20)\nmodel.addCons(C >= 20)\nmodel.addCons(D >= 20)\nmodel.addCons(E >= 20)\nmodel.addCons(3 * A + 4 * B + 5 * C + 6 * D + 7 * E <= 900)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Amount of Crop A: \", model.getVal(A))\n    print(\"Amount of Crop B: \", model.getVal(B))\n    print(\"Amount of Crop C: \", model.getVal(C))\n    print(\"Amount of Crop D: \", model.getVal(D))\n    print(\"Amount of Crop E: \", model.getVal(E))\n    print(\"Max Profit Rate: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Amount of Crop A": "153.0",
            "Amount of Crop B": "20.0",
            "Amount of Crop C": "20.0",
            "Amount of Crop D": "20.0",
            "Amount of Crop E": "20.0",
            "Max Profit Rate": "4.5550611790878754"
        },
        "question": "A farm grows five types of crops: A, B, C, D, and E. The farm needs to decide how much of each crop to plant this season. For Crop B, the selling price is $25 per ton, the cost of seeds is $7 per ton, and the required labor hours are 4 hours per ton. For Crop C, the selling price is $30 per ton, the cost of seeds is $9 per ton, and the required labor hours are 5 hours per ton. For Crop D, the selling price is $35 per ton, the cost of seeds is $11 per ton, and the required labor hours are 6 hours per ton. For Crop E, the selling price is $40 per ton, the cost of seeds is $13 per ton, and the required labor hours are 7 hours per ton. The farm aims to maximize the rate at which it earns profits (which is defined as the sum of the selling profit divided by the sum of the labor hours). The farm has $9900 available for seed costs this season. The farm wants to plant at least 20 tons of each crop this season. The farm wants to limit the total labor hours to at most 900 hours this season. For Crop A, the selling price is $20 per ton, the cost of seeds is $5 per ton, and the required labor hours are 3 hours per ton.",
        "type": "nonlinear-notable",
        "index": 441,
        "length": 1124,
        "var_num": 5
    },
    {
        "question": "A seafood factory packages fish meat and shrimp meat. All packages must pass through a weight checking machine and a packaging inspection machine. In a week, each machine is available for at most 1200 minutes. A package of fish meat requires 3 minutes in the weight checking machine and 15 minutes in the packaging inspection machine. A package of shrimp meat requires 1.5 minutes in the weight checking machine and 7 minutes in the packaging inspection machine. A package of fish meat generates a profit of $7 while a package of shrimp generates a profit of $3. Formulate an LP to maximize profit.",
        "formulation": "{\"variable\": [{\"description\": \"number of packages of fish meat\", \"name\": \"x\"}, {\"description\": \"number of packages of shrimp meat\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit\", \"function\": \"7x + 3y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"weight checking machine constraint\", \"function\": \"3x + 1.5y <= 1200\"}, {\"description\": \"packaging inspection machine constraint\", \"function\": \"15x + 7y <= 1200\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"fish_meat_packages\", lowBound=0, cat='Continuous') # number of packages of fish meat\ny = LpVariable(\"shrimp_meat_packages\", lowBound=0, cat='Continuous') # number of packages of shrimp meat\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SeafoodFactoryProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 7 * x + 3 * y\nproblem += objective # maximize profit\n\n# Define the constraints\nproblem += 3 * x + 1.5 * y <= 1200 # weight checking machine constraint\nproblem += 15 * x + 7 * y <= 1200 # packaging inspection machine constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of packages of fish meat:\", x.value())\nprint(\"The number of packages of shrimp meat:\", y.value())\nprint(\"The maximum profit:\", objective.value())\n",
        "results": {
            "The number of packages of fish meat": "80.0",
            "The number of packages of shrimp meat": "0.0",
            "The maximum profit": "560.0"
        },
        "type": "linear-notable",
        "index": 442,
        "length": 598,
        "var_num": 2
    },
    {
        "question": "A rectangular box with a square base, an open top, and a volume of  216in^3 is to be constructed. What should the dimensions of the box be to minimize the surface area of the box? What is the minimum surface area?",
        "scenario": "## Define Variables:\nA rectangular box with a square base, an open top is to be constructed.\n// variables: {\"length of the side of the square base\": \"x\", \"height of the box\": \"h\"}, where x, h >= 0\n\n## Define Objective Function:\nWhat should the dimensions of the box be to minimize the surface area of the box?\n// The surface area of the box is the sum of the area of the base and the area of the sides. The area of the base is x^2, and the area of the sides is 4*x*h.\n// Therefore, the objective function is: Minimize x^2 + 4*x*h\n\n## Generate Constraint-1:\nIt should have a volume of at least 216 cubic inches.\n// x^2 * h >= 216",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"CONTINUOUS\", name=\"x\") # length of the side of the square base\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the box\n\n# Define objective function\nobj = model.addVar(vtype=\"CONTINUOUS\", name=\"obj\")\nmodel.addCons(obj == x**2 + 4*x*h)\nmodel.setObjective(obj, \"minimize\")\n\n# Add constraints\nmodel.addCons(x**2 * h >= 216)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The length of the side of the square base:\", model.getVal(x))\n    print(\"The height of the box:\", model.getVal(h))\n    print(\"The minimum surface area of the box: \", model.getVal(x**2 + 4*x*h))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The length of the side of the square base": "7.5595262888686765",
            "The height of the box": "3.7797631444364974",
            "The minimum surface area of the box": "171.43931313635517"
        },
        "type": "nonlinear-notable",
        "index": 443,
        "length": 213,
        "var_num": 2
    },
    {
        "question": "You are selling a product. The price ($) must be integer. Marketing tells you that if you set the price of an item at $10 then you will be unable to sell it, but that you can sell 500 items for each dollar below $10 that you set the price. Suppose your fixed costs total $3000, and your marginal cost is $2 per item. What is the most profit you can make?",
        "scenario": "## Define Variables:\nYou are selling a product. The price ($) must be an integer.\n// variables: {\"number of dollars below $10 that the price is set\": \"x\"}, where x >= 0 and x is an integer\n\n## Define Objective Function:\nMarketing tells you that if you set the price of an item at $10 then you will be unable to sell it, but that you can sell 500 items for each dollar below $10 that you set the price. Suppose your fixed costs total $3000, and your marginal cost is $2 per item. What is the most profit you can make?\n// The revenue is the product of the price per item and the number of items sold. The number of items sold is 500(10 - x).\n// So, the revenue is (10 - x)(500(10 - x))\n// The cost is the sum of the fixed costs and the product of the marginal cost and the number of items sold. The fixed costs are $3000, and the marginal cost per item is $2. So, the cost is 3000 + 2(500(10 - x))\n// Therefore, the profit is the revenue minus the cost, which is (10 - x)(500(10 - x)) - 3000 - 2(500(10 - x))\n// The objective function is: Maximize (10 - x)(500(10 - x)) - 3000 - 2(500(10 - x))",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"INTEGER\", name=\"x\", ub=10) # number of dollars below $10 that the price is set\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == (10 - x)*(500*(10 - x)) - 3000 - 2*(500*(10 - x)))\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The number of dollars below $10 that the price is set:\", model.getVal(x))\n    print(\"The maximum profit you can make: \", model.getVal(obj))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The number of dollars below $10 that the price is set": "0.0",
            "The maximum profit you can make": "37000.0000"
        },
        "type": "nonlinear-notable",
        "index": 444,
        "length": 354,
        "var_num": 1
    },
    {
        "question": "A food truck sells tacos and burritos. To stay in business, they must sell at least 50 tacos and at least 30 burritos. However, they only have enough supplies to make at most 80 tacos and at most 50 burritos. Given their tight schedule, they can also cook at most 100 items total. The profit per taco is $3 and the profit per burrito is $6. How many of each item should they sell to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of tacos sold\", \"name\": \"x\"}, {\"description\": \"number of burritos sold\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total profit\", \"function\": \"3x + 6y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"minimum number of tacos sold\", \"function\": \"x >= 50\"}, {\"description\": \"minimum number of burritos sold\", \"function\": \"y >= 30\"}, {\"description\": \"maximum number of tacos that can be made\", \"function\": \"x <= 80\"}, {\"description\": \"maximum number of burritos that can be made\", \"function\": \"y <= 50\"}, {\"description\": \"maximum number of items that can be cooked\", \"function\": \"x + y <= 100\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_tacos_sold = LpVariable(\"NumTacosSold\", lowBound=50, upBound=80, cat='Integer') # number of tacos sold\nnum_burritos_sold = LpVariable(\"NumBurritosSold\", lowBound=30, upBound=50, cat='Integer') # number of burritos sold\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FoodTruckProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 3 * num_tacos_sold + 6 * num_burritos_sold\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += num_tacos_sold + num_burritos_sold <= 100 # maximum number of items that can be cooked\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of tacos sold:\", num_tacos_sold.value())\nprint(\"The number of burritos sold:\", num_burritos_sold.value())\nprint(\"Total profit:\", objective.value())\n",
        "results": {
            "The number of tacos sold": "50.0",
            "The number of burritos sold": "50.0",
            "Total profit": "450.0"
        },
        "type": "linear-notable",
        "index": 445,
        "length": 399,
        "var_num": 2
    },
    {
        "question": "You need to construct a cylinder with a hemispherical top. The container's volume is at least 100 cubic units. The hemispherical top has the same radius as the cylinder. The cost per unit area of the top is twice as great as the cost per unit area of the side. And the cost per unit area of the bottom is 1.5 times the cost per unit area of the side.\nPlease find the height and radius of the cylinder that minimizes the cost of the container.",
        "scenario": "## Define Variables:\nYou need to construct a cylinder with a hemispherical top.\n// variables: {\"radius of the cylinder\": \"r\", \"height of the cylinder\": \"h\"}, where r, h >= 0\n\n## Define Objective Function:\nThe container's volume is at least 100 cubic units. The hemispherical top has the same radius as the cylinder. The cost per unit area of the top is twice as great as the cost per unit area of the side. And the cost per unit area of the bottom is 1.5 times the cost per unit area of the side. Please find the height and radius of the cylinder that minimizes the cost of the container.\n// Fist, we need to find the area of the container. The area of the side is 2\u03c0rh, the area of the hemispherical top is 2\u03c0r^2, and the area of the bottom is \u03c0r^2.\n// Assuming the cost per unit area of the side is $1, then the cost per unit area of the top is $2, and the cost per unit area of the bottom is $1.5. The total cost of the container is 2\u03c0rh + 2*2\u03c0r^2 + 1.5*\u03c0r^2.\n// Therefore, the objective function is: Minimize 2\u03c0rh + 4\u03c0r^2 + 1.5\u03c0r^2\n\n## Generate Constraint-1:\nThe volume of the container is at least 100 cubic units.\n// The volume of the cylinder is given by the formula \u03c0r^2h, and the volume of the hemispherical top is given by the formula 2/3 * \u03c0r^3. The total volume is the sum of the volume of the cylinder and the volume of the hemispherical top, which is \u03c0r^2h + 2/3 * \u03c0r^3.\n// It is given that the volume is at least 100. Therefore, the constraint is: \u03c0r^2h + 2/3 * \u03c0r^3 >= 100",
        "code": "from pyscipopt import Model\nimport math\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nr = model.addVar(vtype=\"CONTINUOUS\", name=\"r\") # radius of the cylinder\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the cylinder\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nmodel.addCons(obj == 2*math.pi*r*h + 4*math.pi*r**2 + 1.5*math.pi*r**2)\n\n# Add constraints\nmodel.addCons(math.pi*r**2*h + 2/3 * math.pi*r**3 >= 100)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The radius of the cylinder: \", model.getVal(r))\n    print(\"The height of the cylinder: \", model.getVal(h))\n    print(\"The minimum cost of the container: \", model.getVal(obj))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The radius of the cylinder": "1.9694900377768338",
            "The height of the cylinder": "6.893215132220839",
            "The minimum cost of the container": "152.3236937205567"
        },
        "type": "nonlinear-notable",
        "index": 446,
        "length": 442,
        "var_num": 2
    },
    {
        "question": "Suppose a company manufactures two products, A and B, using three inputs: labor, material R, and material S. The demands for the products are such that the company can sell as much of each product as it can produce and earn a profit of $3 per unit of A and $4 per unit of B. However, only 900 pounds of R, 675 pounds of S, and 1200 person-hours of labor are available to the company each day. Maximize profit.\n\nTable (The amount of each input required to make one unit of product):\n| Input       | Product A | Product B |\n| ----------- | --------- | --------- |\n| Material R  | 6 pounds  | 12 pounds |\n| Material S  | 7.5 pounds| 4.5 pounds|\n| Labor       | 9 hours   | 6 hours   |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for products A and B that adhere to the constraints given. Let's denote the number of units of product A as A and the number of units of product B as B.\n```Variables\nA //number of units of product A to produce \nB //number of units of product B to produce\nA, B >= 0 and they are integers //non-negative integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit of the company, which is given by the following equation:\n```Objective Function\nMaximize: 3A + 4B\n```\n\n# Constraints:\nWe need to make sure that the company does not exceed the available pounds of R, S, and person-hours of labor. We also need to make sure that the company does not produce a negative number of units of product A or B. The constraints are given by the following equations:\n```Constraints\n6A + 12B <= 900 //available pounds of R\n7.5A + 4.5B <= 675 //available pounds of S\n9A + 6B <= 1200 //available person-hours of labor\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nA = LpVariable(\"A\", lowBound=0, cat='Integer') # number of units of product A to produce\nB = LpVariable(\"B\", lowBound=0, cat='Integer') # number of units of product B to produce\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 3 * A + 4 * B\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 6 * A + 12 * B <= 900 # available pounds of R\nproblem += 7.5 * A + 4.5 * B <= 675 # available pounds of S\nproblem += 9 * A + 6 * B <= 1200 # available person-hours of labor\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of units of product A to produce:\", A.value())\nprint(\"The number of units of product B to produce:\", B.value())\nprint(\"The maximum profit:\", objective.value())\n",
        "results": {
            "The number of units of product A to produce": "64.0",
            "The number of units of product B to produce": "43.0",
            "The maximum profit": "364.0"
        },
        "type": "linear-table",
        "index": 447,
        "length": 681,
        "var_num": 2
    },
    {
        "question": "A school employs staff and substitute teachers. Per shift, staff teachers work 6 hours and get paid $300. Per shift, substitute teachers work 3 hours and get paid $100. For the summer term, the school requires 1000 hours of teaching availability. If the school has a budget of $40000, how many of each teacher should be hired to minimize the total number of teachers?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_staff = LpVariable(\"NumStaff\", lowBound=0, cat='Integer') # number of staff teachers\nnum_substitute = LpVariable(\"NumSubstitute\", lowBound=0, cat='Integer') # number of substitute teachers\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"TeacherStaffing\", LpMinimize)\n\n# Define the objective function\nobjective = num_staff + num_substitute\nproblem += objective # minimize the total number of teachers\n\n# Define the constraints\nproblem += 6 * num_staff + 3 * num_substitute >= 1000 # total teaching hours should be at least 1000\nproblem += 300 * num_staff + 100 * num_substitute <= 40000 # total salary should not exceed the budget\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of staff teachers:\", num_staff.value())\nprint(\"The number of substitute teachers:\", num_substitute.value())\nprint(\"The total number of teachers:\", objective.value())",
        "results": {
            "The number of staff teachers": "66.0",
            "The number of substitute teachers": "202.0",
            "The total number of teachers": "268.0"
        },
        "formulation": "minimize x+y\nSubject to: \n6x+3y >= 1000\n300x+100y <= 40000 (end)",
        "type": "linear-notable",
        "index": 448,
        "length": 367,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA logistics company is managing the distribution of three types of goods (GoodA, GoodB, and GoodC) across multiple regions. The company needs to decide the number of trucks to allocate for each type of good and the number of trips each truck will make. Additionally, the company is considering using a fleet of drones to assist in the delivery of goods, especially in hard-to-reach areas.\n// variables: {\"number of trucks for GoodA\": \"TrucksA\", \"number of trucks for GoodB\": \"TrucksB\", \"number of trucks for GoodC\": \"TrucksC\", \"number of trips per truck for GoodA\": \"TripsA\", \"number of trips per truck for GoodB\": \"TripsB\", \"number of trips per truck for GoodC\": \"TripsC\", \"number of drones for GoodA\": \"DronesA\", \"number of drones for GoodB\": \"DronesB\", \"number of drones for GoodC\": \"DronesC\"}, where TrucksA, TrucksB, TrucksC, TripsA, TripsB, TripsC, DronesA, DronesB, DronesC >= 0 and all are integers.\n\n## Define Objective Function:\nThe cost of operating a truck per trip is $500, and the revenue generated per trip is $1000. The cost of operating a drone per trip is $100, and the revenue generated per trip is $300. The company wants to maximize the total net profit from all goods.\n// NetProfit_GoodA = (1000 * TripsA - 500 * TripsA) * TrucksA + (300 * DronesA - 100 * DronesA) * DronesA\n// NetProfit_GoodB = (1000 * TripsB - 500 * TripsB) * TrucksB + (300 * DronesB - 100 * DronesB) * DronesB\n// NetProfit_GoodC = (1000 * TripsC - 500 * TripsC) * TrucksC + (300 * DronesC - 100 * DronesC) * DronesC\n// So, the objective function is: Maximize (NetProfit_GoodA + NetProfit_GoodB + NetProfit_GoodC)\n\n## Generate Constraint-1:\nThe company has a total of 20 trucks available.\n// TrucksA + TrucksB + TrucksC <= 20\n\n## Generate Constraint-2:\nThe company can make a maximum of 100 trips per day.\n// TripsA * TrucksA + TripsB * TrucksB + TripsC * TrucksC <= 100\n\n## Generate Constraint-3:\nThe company has a budget of $3000 for operating costs per day.\n// 500 * (TripsA * TrucksA + TripsB * TrucksB + TripsC * TrucksC) + 100 * (DronesA + DronesB + DronesC) <= 3000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nTrucksA = model.addVar(vtype=\"INTEGER\", name=\"TrucksA\") # number of trucks for GoodA\nmodel.addCons(TrucksA >= 0)\nTrucksB = model.addVar(vtype=\"INTEGER\", name=\"TrucksB\") # number of trucks for GoodB\nmodel.addCons(TrucksB >= 0)\nTrucksC = model.addVar(vtype=\"INTEGER\", name=\"TrucksC\") # number of trucks for GoodC\nmodel.addCons(TrucksC >= 0)\nTripsA = model.addVar(vtype=\"INTEGER\", name=\"TripsA\") # number of trips per truck for GoodA\nmodel.addCons(TripsA >= 0)\nTripsB = model.addVar(vtype=\"INTEGER\", name=\"TripsB\") # number of trips per truck for GoodB\nmodel.addCons(TripsB >= 0)\nTripsC = model.addVar(vtype=\"INTEGER\", name=\"TripsC\") # number of trips per truck for GoodC\nmodel.addCons(TripsC >= 0)\nDronesA = model.addVar(vtype=\"INTEGER\", name=\"DronesA\") # number of drones for GoodA\nmodel.addCons(DronesA >= 0)\nDronesB = model.addVar(vtype=\"INTEGER\", name=\"DronesB\") # number of drones for GoodB\nmodel.addCons(DronesB >= 0)\nDronesC = model.addVar(vtype=\"INTEGER\", name=\"DronesC\") # number of drones for GoodC\nmodel.addCons(DronesC >= 0)\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == ((1000 * TripsA - 500 * TripsA) * TrucksA + (300 * DronesA - 100 * DronesA) * DronesA) +\n                  ((1000 * TripsB - 500 * TripsB) * TrucksB + (300 * DronesB - 100 * DronesB) * DronesB) +\n                  ((1000 * TripsC - 500 * TripsC) * TrucksC + (300 * DronesC - 100 * DronesC) * DronesC))\n\n# Add constraints\nmodel.addCons(TrucksA + TrucksB + TrucksC <= 20)\nmodel.addCons(TripsA * TrucksA + TripsB * TrucksB + TripsC * TrucksC <= 100)\nmodel.addCons(500 * (TripsA * TrucksA + TripsB * TrucksB + TripsC * TrucksC) + 100 * (DronesA + DronesB + DronesC) <= 3000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Total Net Profit: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Total Net Profit": "180000.0"
        },
        "question": "A logistics company is managing the distribution of three types of goods (GoodA, GoodB, and GoodC) across multiple regions. The company needs to decide the number of trucks to allocate for each type of good and the number of trips each truck will make. Additionally, the company is considering using a fleet of drones to assist in the delivery of goods, especially in hard-to-reach areas. The company has a total of 20 trucks available. The company can make a maximum of 100 trips per day. The company has a budget of $3000 for operating costs per day. The cost of operating a truck per trip is $500, and the revenue generated per trip is $1000. The cost of operating a drone per trip is $100, and the revenue generated per trip is $300. The company wants to maximize the total net profit from all goods.",
        "type": "nonlinear-notable",
        "index": 449,
        "length": 804,
        "var_num": 9
    },
    {
        "question": "A neighbourhood pizza restaurant has opened and sells pizzas in two sizes; large pizza and medium pizza. Large pizzas require 12 units of dough, and 5 units of toppings. Medium pizzas require 8 units of dough, and 4 units of toppings. While large pizzas take 12 minutes to bake, medium pizzas require 8 minutes to bake. The neighbourhood pizza restaurant must use at least 10000 units of dough and 4400 units of toppings. Medium pizzas are popular due to a promotion, therefore, at least 200 medium pizzas must be made. There are regulars that prefer large pizzas and at least two times as many large pizzas should be made than medium pizzas. How many of each size of pizzas should the neighbourhood pizza restaurant make to reduce time spent baking?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nlarge_pizzas = LpVariable(\"LargePizzas\", lowBound=0, cat='Integer') # number of large pizzas\nmedium_pizzas = LpVariable(\"MediumPizzas\", lowBound=0, cat='Integer') # number of medium pizzas\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"PizzaBakingTimeMinimization\", LpMinimize)\n\n# Define the objective function\nobjective = 12 * large_pizzas + 8 * medium_pizzas\nproblem += objective # minimize the total time spent baking\n\n# Define the constraints\nproblem += 12 * large_pizzas + 8 * medium_pizzas >= 10000 # use at least 10000 units of dough\nproblem += 5 * large_pizzas + 4 * medium_pizzas >= 4400 # use at least 4400 units of toppings\nproblem += medium_pizzas >= 200 # at least 200 medium pizzas must be made\nproblem += large_pizzas >= 2 * medium_pizzas # at least two times as many large pizzas as medium pizzas\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of large pizzas to make:\", large_pizzas.value())\nprint(\"The number of medium pizzas to make:\", medium_pizzas.value())\nprint(\"The total time spent baking:\", objective.value())",
        "results": {
            "The number of large pizzas to make": "629.0",
            "The number of medium pizzas to make": "314.0",
            "The total time spent baking": "10060.0"
        },
        "formulation": "minimize 8y+12x\nSubject to: \n12x+8y >= 10000\n5x+4y >= 4400\ny >= 200\nx >= 2y (end)",
        "type": "linear-notable",
        "index": 450,
        "length": 750,
        "var_num": 2
    },
    {
        "question": "William is a potato farmer and he has to send his product to the city. He can transport his potato packages by regular truck which can take 70 packages per trip or by refrigerated truck which can take 100 packages per trip. The cost per regular truck trip is $50 and the cost per refrigerated truck trip is $70. He wants to spend at most $5000 and the number of refrigerated truck trips must not exceed the number of regular truck trips. Formulate an LP to maximize the number of potato packages that can be transported.",
        "formulation": "{\"variable\": [{\"description\": \"number of regular truck trips\", \"name\": \"x\"}, {\"description\": \"number of refrigerated truck trips\", \"name\": \"y\"}], \"objective\": [{\"description\": \"number of potato packages transported\", \"function\": \"70x + 100y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"budget constraint\", \"function\": \"50x + 70y <= 5000\"}, {\"description\": \"number of refrigerated truck trips must not exceed number of regular truck trips\", \"function\": \"y <= x\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_regular_truck_trips = LpVariable(\"NumRegularTruckTrips\", lowBound=0, cat='Integer') # number of regular truck trips\nnum_refrigerated_truck_trips = LpVariable(\"NumRefrigeratedTruckTrips\", lowBound=0, cat='Integer') # number of refrigerated truck trips\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"PotatoTransport\", LpMaximize)\n\n# Define the objective function\nobjective = 70 * num_regular_truck_trips + 100 * num_refrigerated_truck_trips\nproblem += objective # maximize the total number of potato packages transported\n\n# Define the constraints\nproblem += 50 * num_regular_truck_trips + 70 * num_refrigerated_truck_trips <= 5000 # budget constraint\nproblem += num_refrigerated_truck_trips <= num_regular_truck_trips # refrigerated truck trips must not exceed regular truck trips\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of regular truck trips:\", num_regular_truck_trips.value())\nprint(\"The number of refrigerated truck trips:\", num_refrigerated_truck_trips.value())\nprint(\"The number of potato packages transported:\", objective.value())\n",
        "results": {
            "The number of regular truck trips": "44.0",
            "The number of refrigerated truck trips": "40.0",
            "The number of potato packages transported": "7080.0"
        },
        "type": "linear-notable",
        "index": 451,
        "length": 520,
        "var_num": 2
    },
    {
        "question": "A summer painting company employs students earning $200 a week and full-time employees earning $500 a week. The company needs at least 100 painters of whom at 30 must be full-time employees. In addition, to make sure there is enough experience, the number of full-time employees should be at least half the number of students. Formulate a LP to minimize the wage bill.",
        "formulation": "{\"variable\": [{\"description\": \"number of student painters\", \"name\": \"x\"}, {\"description\": \"number of full-time painters\", \"name\": \"y\"}], \"objective\": [{\"description\": \"wage bill\", \"function\": \"200x + 500y\", \"sense\": \"Minimize\"}], \"constraint\": [{\"description\": \"total number of painters\", \"function\": \"x + y >= 100\"}, {\"description\": \"minimum number of full-time painters\", \"function\": \"y >= 30\"}, {\"description\": \"experience constraint\", \"function\": \"y >= 0.5x\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_student_painters = LpVariable(\"NumStudentPainters\", lowBound=0, cat='Integer') # number of student painters\nnum_full_time_painters = LpVariable(\"NumFullTimePainters\", lowBound=0, cat='Integer') # number of full-time painters\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimizeWageBill\", LpMinimize)\n\n# Define the objective function\nobjective = 200 * num_student_painters + 500 * num_full_time_painters\nproblem += objective # minimize the wage bill\n\n# Define the constraints\nproblem += num_student_painters + num_full_time_painters >= 100 # total number of painters\nproblem += num_full_time_painters >= 30 # minimum number of full-time painters\nproblem += num_full_time_painters >= 0.5 * num_student_painters # experience constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of student painters:\", num_student_painters.value())\nprint(\"The number of full-time painters:\", num_full_time_painters.value())\nprint(\"The total wage bill:\", objective.value())\n",
        "results": {
            "The number of student painters": "66.0",
            "The number of full-time painters": "34.0",
            "The total wage bill": "30200.0"
        },
        "type": "linear-notable",
        "index": 452,
        "length": 368,
        "var_num": 2
    },
    {
        "question": "A car rental company charges its customers p dollars per day, where 60\u2264p\u2264150. The price should be an integer. It has found that the number of cars rented per day can be modeled by the linear function n(p)=750\u22125p. How much should the company charge each customer to maximize revenue?",
        "scenario": "## Define Variables:\nA car rental company charges its customers p dollars per day, where 60\u2264p\u2264150. The price should be an integer. \n// variables: {\"price per day\": \"p\"}, where 60 <= p <= 150, p is an integer\n\n## Define Objective Function:\nIt has found that the number of cars rented per day can be modeled by the linear function  n(p)=750\u22125p. How much should the company charge each customer to maximize revenue?\n// The revenue is the product of the price per day and the number of cars rented per day. The number of cars rented per day is given by the linear function n(p) = 750 - 5p. \n// Therefore, the objective function is: Maximize p * (750 - 5p)",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\np = model.addVar(vtype=\"INTEGER\", name=\"p\", lb=60, ub=150)  # price per day\n\n# Define objective function\nrevenue = model.addVar(name=\"revenue\")\nmodel.setObjective(revenue, \"maximize\")\nmodel.addCons(revenue == p * (750 - 5*p))\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The optimal price per day to maximize revenue:\", model.getVal(p))\n    print(\"The maximum revenue: \", model.getVal(revenue))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The optimal price per day to maximize revenue": "75.0",
            "The maximum revenue": "28125.0"
        },
        "type": "nonlinear-notable",
        "index": 453,
        "length": 282,
        "var_num": 1
    },
    {
        "question": "A sand company delivers sand for playgrounds in small and large containers. A small container requires 1 person to unload and can hold 20 units of sand. A large container requires 3 people to unload and can hold 50 units of sand. Since most playgrounds are small, the number of small containers used must be thrice the number of large containers used. In addition, there must be at least 5 small containers and 3 large containers used. If the company has 100 people available, maximize the amount of sand that they can deliver.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_small_containers = LpVariable(\"NumSmallContainers\", lowBound=5, cat='Integer') # number of small containers\nnum_large_containers = LpVariable(\"NumLargeContainers\", lowBound=3, cat='Integer') # number of large containers\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SandDelivery\", LpMaximize)\n\n# Define the objective function\nobjective = 20 * num_small_containers + 50 * num_large_containers\nproblem += objective # maximize the total amount of sand delivered\n\n# Define the constraints\nproblem += num_small_containers + 3 * num_large_containers <= 100 # the total number of people required must not exceed 100\nproblem += num_small_containers == 3 * num_large_containers # small containers used must be thrice the large containers\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of small containers:\", num_small_containers.value())\nprint(\"The number of large containers:\", num_large_containers.value())\nprint(\"The amount of sand delivered:\", objective.value())",
        "results": {
            "The number of small containers": "48.0",
            "The number of large containers": "16.0",
            "The amount of sand delivered": "1760.0"
        },
        "formulation": "maximize 20x+50y\nSubject to: \nx >= 3y\nx >= 5\ny >= 3\n1x+3y <= 100 (end)",
        "type": "linear-notable",
        "index": 454,
        "length": 527,
        "var_num": 2
    },
    {
        "question": "A senior home has snacks of spinach and soybeans to increase their intake of iron. A cup of spinach contains 100 units of fibre and 5 mg of iron. A cup of soybeans contains 80 units of fibre and 12 mg of iron. Due to other nutritional requirements, the nurses decided that the number of cups of spinach must exceed the number of cups of soybeans. Furthermore, a cup of spinach contains 30 calories while a cup of soybeans contains 100 calories. If they schedule that the elderly need in total at least 12000 units of fibre and 300 mg of iron, how many cups of each should the nurses schedule to maximize the seniors\u2019 total caloric intake?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_cups_spinach = LpVariable(\"NumCupsSpinach\", lowBound=0) # number of cups of spinach\nnum_cups_soybeans = LpVariable(\"NumCupsSoybeans\", lowBound=0) # number of cups of soybeans\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"NutritionalIntake\", LpMaximize)\n\n# Define the objective function\nobjective = 30 * num_cups_spinach + 100 * num_cups_soybeans\nproblem += objective # maximize the total caloric intake\n\n# Define the constraints\nproblem += 100 * num_cups_spinach + 80 * num_cups_soybeans >= 12000 # total fiber units must be at least 12000\nproblem += 5 * num_cups_spinach + 12 * num_cups_soybeans >= 300 # total iron mg must be at least 300\nproblem += num_cups_spinach >= num_cups_soybeans # cups of spinach should exceed the number of cups of soybeans\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of cups of spinach:\", num_cups_spinach.value())\nprint(\"The number of cups of soybeans:\", num_cups_soybeans.value())\nprint(\"The total caloric intake:\", objective.value())",
        "results": {
            "The number of cups of spinach": "0.0",
            "The number of cups of soybeans": "0.0",
            "The total caloric intake": "0.0"
        },
        "formulation": "maximize 30x+100y\nSubject to: \n100x+80y >= 12000\n5x+12y >= 300\nx >= y (end)",
        "type": "linear-notable",
        "index": 455,
        "length": 638,
        "var_num": 2
    },
    {
        "question": "A singer has two types of concerts he can hold, pop and R&B. Each pop concert will bring in 100 audience members and take 2 days of practice. Every R&B concert brings in 240 audience members and takes 4 days of practice. The singer must bring in at least 10000 audience members and only has available 180 days for practice. If he can at most perform 40% of his concerts as R&B because he likes pop songs more, how many of each type of concert should be created to minimize the total number of concerts?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_pop_concerts = LpVariable(\"NumPopConcerts\", lowBound=0, cat='Integer') # number of pop concerts\nnum_rnb_concerts = LpVariable(\"NumRnBConcerts\", lowBound=0, cat='Integer') # number of R&B concerts\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ConcertSchedule\", LpMinimize)\n\n# Define the objective function\nobjective = num_pop_concerts + num_rnb_concerts\nproblem += objective # minimize the total number of concerts\n\n# Define the constraints\nproblem += 100 * num_pop_concerts + 240 * num_rnb_concerts >= 10000 # at least 10000 audience members\nproblem += 2 * num_pop_concerts + 4 * num_rnb_concerts <= 180 # no more than 180 days for practice\nproblem += num_rnb_concerts <= 0.4 * (num_pop_concerts + num_rnb_concerts) # at most 40% R&B concerts\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of pop concerts:\", num_pop_concerts.value())\nprint(\"The number of R&B concerts:\", num_rnb_concerts.value())\nprint(\"The total number of concerts:\", objective.value())",
        "results": {
            "The number of pop concerts": "40.0",
            "The number of R&B concerts": "25.0",
            "The total number of concerts": "65.0"
        },
        "formulation": "minimize x+y\nSubject to: \n100x+240y >= 10000\n4y+2x <= 180\ny <= 0.4(x+y) (end)",
        "type": "linear-notable",
        "index": 456,
        "length": 502,
        "var_num": 2
    },
    {
        "question": "You need to find a rectangle. The area of the rectangle is 100. Please provide the dimensions of the rectangle that minimizes the perimeter.",
        "scenario": "## Define Variables:\nYou need to find a rectangle.\n// variables: {\"length of the rectangle\": \"L\", \"width of the rectangle\": \"W\"}, where L, W >= 0\n\n## Define Objective Function:\nPlease provide the dimensions of the rectangle that minimizes the perimeter.\n// The perimeter of the rectangle is given by 2L + 2W. Therefore, the objective function is: Minimize 2L + 2W\n\n## Generate Constraint-1:\nThe area of the rectangle is 100.\n// L * W = 100",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nL = model.addVar(vtype=\"CONTINUOUS\", name=\"L\") # length of the rectangle\nW = model.addVar(vtype=\"CONTINUOUS\", name=\"W\") # width of the rectangle\n\n# Define objective function\nmodel.setObjective(2*L + 2*W, \"minimize\")\n\n# Add constraints\nmodel.addCons(L * W == 100)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The length of the rectangle:\", model.getVal(L))\n    print(\"The width of the rectangle:\", model.getVal(W))\n    print(\"The minimum perimeter of the rectangle: \", 2*model.getVal(L) + 2*model.getVal(W))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The length of the rectangle": "10.000",
            "The width of the rectangle": "10.00",
            "The minimum perimeter of the rectangle": "40.000000"
        },
        "type": "nonlinear-notable",
        "index": 457,
        "length": 140,
        "var_num": 2
    },
    {
        "question": "A production company needs to transport their equipment and staff for a movie they are shooting using large mobile production units or small mobile production units. Large mobile production units can hold 6 people and takes up 2 parking spots whereas small mobile production units can hold only 2 people and takes up 1 parking spot. Movie stars prefer to have their small mobile production unit to share with a close staff, therefore at least 5 units must be small mobile units. However, due to logistic limitations, large mobile production units are more space efficient per spot, they must make up at least 75% of all vehicles. If the movie needs to transport 80 people, minimize the total number of parking spots required by this production.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_large_units = LpVariable(\"NumLargeUnits\", lowBound=0, cat='Integer') # number of large mobile production units\nnum_small_units = LpVariable(\"NumSmallUnits\", lowBound=0, cat='Integer') # number of small mobile production units\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"TransportProblem\", LpMinimize)\n\n# Define the objective function\nobjective = 2 * num_large_units + num_small_units\nproblem += objective # minimize the total number of parking spots\n\n# Define the constraints\nproblem += 6 * num_large_units + 2 * num_small_units >= 80 # at least 80 people need to be transported\nproblem += num_small_units >= 5 # at least 5 small units are needed\nproblem += num_large_units >= (0.75) * (num_large_units + num_small_units) # large units should make up at least 75% of all vehicles\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of large mobile production units:\", num_large_units.value())\nprint(\"The number of small mobile production units:\", num_small_units.value())\nprint(\"The total number of parking spots required:\", objective.value())",
        "results": {
            "The number of large mobile production units": "15.0",
            "The number of small mobile production units": "5.0",
            "The total number of parking spots required": "35.0"
        },
        "formulation": "minimize 2x+1y\nSubject to: \ny >= 5\nx >= 0.75(x+y)\n6x+2y >= 80 (end)",
        "type": "linear-notable",
        "index": 458,
        "length": 744,
        "var_num": 2
    },
    {
        "question": "You are designing a poster to contain a fixed area of 100 square inches, and have margins of 2 inches at the top and bottom and 1 inch at the sides. Find the ratio of vertical dimension to horizontal dimension of the printed area on the poster if you want to minimize the amount of posterboard needed.",
        "scenario": "## Define Variables:\nYou are designing a rectangular poster by cutting from a rectangular piece of paper.\n// variables: {\"width of the poster\": \"w\", \"height of the poster\": \"h\"}, where w, h >= 0\n\n## Define Objective Function:\nThe top and bottom margins are 2 inches, and the side margins are 1 inch. What dimensions of the poster should you use to minimize the area of paper used?\n// The width of the used paper is w + 2*1, and the height of the used paper is h + 2*2.\n// Therefore, the objective function is: Minimize (w + 2) * (h + 4)\n\n## Generate Constraint-1:\nThe poster must have an area of 100 square inches.\n// The area of the poster is given by the product of the width and the height, and it is given that the area is 100. Therefore, the constraint is w * h = 100",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nw = model.addVar(vtype=\"CONTINUOUS\", name=\"w\") # width of the poster\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the poster\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nmodel.addCons(obj == (w + 2) * (h + 4))\n\n# Add constraints\nmodel.addCons(w * h == 100)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The width of the poster:\", model.getVal(w))\n    print(\"The height of the poster:\", model.getVal(h))\n    print(\"The minimum area of paper used: \", model.getVal(obj))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The width of the poster": "7.071067811865474",
            "The height of the poster": "14.142135623730955",
            "The minimum area of paper used": "164.5685424949238"
        },
        "type": "nonlinear-notable",
        "index": 459,
        "length": 301,
        "var_num": 2
    },
    {
        "question": "The weather is freezing and the fish in the pond need to be transported either by helicopter or car. A helicopter can take 30 fish per trip and takes 40 minutes. A car can take 20 fish per trip and takes 30 minutes. Since helicopter trips are expensive, there can be at most 5 helicopter trips. In addition, at least 60% of the trips should be by car. If at least 300 fish need to transported, how many of each trip should be taken to minimize the total time needed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_helicopter_trips = LpVariable(\"NumHelicopterTrips\", lowBound=0, cat='Integer') # number of helicopter trips\nnum_car_trips = LpVariable(\"NumCarTrips\", lowBound=0, cat='Integer') # number of car trips\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FishTransport\", LpMinimize)\n\n# Define the objective function\nobjective = 40 * num_helicopter_trips + 30 * num_car_trips\nproblem += objective # minimize the total time needed\n\n# Define the constraints\nproblem += num_helicopter_trips <= 5 # at most 5 helicopter trips\nproblem += num_car_trips >= 0.6 * (num_car_trips + num_helicopter_trips) # at least 60% of the trips should be by car\nproblem += 30 * num_helicopter_trips + 20 * num_car_trips >= 300 # at least 300 fish need to be transported\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of helicopter trips:\", num_helicopter_trips.value())\nprint(\"The number of car trips:\", num_car_trips.value())\nprint(\"The total time needed:\", objective.value())",
        "results": {
            "The number of helicopter trips": "4.0",
            "The number of car trips": "9.0",
            "The total time needed": "430.0"
        },
        "formulation": "minimize 40x+30y\nSubject to: \nx <= 5\ny >= 0.6(x+y)\n30x+20y >= 300 (end)",
        "type": "linear-notable",
        "index": 460,
        "length": 466,
        "var_num": 2
    },
    {
        "question": "A zookeeper feeds a gorilla with bananas and mangoes. Each banana contains 80 calories, 20 grams of potassium, and 10 grams of sugar. Each mango contains 100 calories, 15 grams of potassium, and 8 grams of sugar.  The gorilla must consume at least 4000 calories and 150 grams of potassium. Since the gorilla prefers bananas, at most 33% of the fruits he eats can be mangoes. If excess sugar makes the gorilla aggressive, how many of each fruit should he consume to minimize his sugar intake?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_bananas = LpVariable(\"NumBananas\", lowBound=0, cat='Integer')  # number of bananas\nnum_mangoes = LpVariable(\"NumMangoes\", lowBound=0, cat='Integer')  # number of mangoes\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"GorillaDiet\", LpMinimize)\n\n# Define the objective function\nobjective = 10 * num_bananas + 8 * num_mangoes\nproblem += objective  # minimize the total sugar intake\n\n# Define the constraints\nproblem += 80 * num_bananas + 100 * num_mangoes >= 4000  # at least 4000 calories\nproblem += 20 * num_bananas + 15 * num_mangoes >= 150  # at least 150 grams of potassium\nproblem += num_bananas >= 3 * num_mangoes  # at most 33% of the fruits can be mangoes\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of bananas:\", num_bananas.value())\nprint(\"The number of mangoes:\", num_mangoes.value())\nprint(\"The total sugar intake:\", objective.value())",
        "results": {
            "The number of bananas": "36.0",
            "The number of mangoes": "12.0",
            "The total sugar intake": "456.0"
        },
        "formulation": "minimize 10x+8y\nSubject to: \n80x+100y >= 4000\n20x+15y >= 150\ny <= 0.33(x+y) (end)",
        "type": "linear-notable",
        "index": 461,
        "length": 491,
        "var_num": 2
    },
    {
        "question": "A audio company make two types of headphones: wired headphones and wireless headphones. Two different teams make each type of headphones. The wired team can make at most 100 wired headphones per day and the wireless team can make at most 170 wireless headphones per day. Both teams require use of a shared audio testing machine, and this machine can be used to make a maximum of 150 headphones per day. The profit per wired headphone is $50 and the profit per wireless headphone $20. How many of each headphone should be made to maximize profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_wired_headphones = LpVariable(\"NumWiredHeadphones\", lowBound=0, cat='Integer') # number of wired headphones\nnum_wireless_headphones = LpVariable(\"NumWirelessHeadphones\", lowBound=0, cat='Integer') # number of wireless headphones\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"HeadphoneProduction\", LpMaximize)\n\n# Define the objective function\nobjective = 50 * num_wired_headphones + 20 * num_wireless_headphones\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += num_wired_headphones <= 100 # wired team can make at most 100 headphones\nproblem += num_wireless_headphones <= 170 # wireless team can make at most 170 headphones\nproblem += num_wired_headphones + num_wireless_headphones <= 150 # shared machine limitation\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of wired headphones:\", num_wired_headphones.value())\nprint(\"The number of wireless headphones:\", num_wireless_headphones.value())\nprint(\"Total profit:\", objective.value())",
        "results": {
            "The number of wired headphones": "100.0",
            "The number of wireless headphones": "50.0",
            "Total profit": "6000.0"
        },
        "formulation": "maximize 50x+20y\nSubject to: \nx <= 100\ny <= 170\nx+y <= 150 (end)",
        "type": "linear-notable",
        "index": 462,
        "length": 545,
        "var_num": 2
    },
    {
        "question": "A tropical city full of islands sends mail either by submarine or by boat. A submarine can carry 100 pieces of mail per trip and uses 30 liters of gas. A boat can carry 80 pieces of mail per trip and uses 25 liters of gas. There can be at most 6 submarine trips and a minimum of 50% of the trips must be by boat. If the city needs to transport at least 1000 pieces of mail, how many of each transportation should they use to minimize the total amount of gas used?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_submarine_trips = LpVariable(\"NumSubmarineTrips\", lowBound=0, upBound=6, cat='Integer') # number of submarine trips\nnum_boat_trips = LpVariable(\"NumBoatTrips\", lowBound=0, cat='Integer') # number of boat trips\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MailTransport\", LpMinimize)\n\n# Define the objective function\nobjective = 30 * num_submarine_trips + 25 * num_boat_trips\nproblem += objective # minimize the total amount of gas used\n\n# Define the constraints\nproblem += 100 * num_submarine_trips + 80 * num_boat_trips >= 1000 # at least 1000 pieces of mail must be transported\nproblem += num_boat_trips >= (num_submarine_trips + num_boat_trips) * 0.5 # at least 50% of the trips must be by boat\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of submarine trips:\", num_submarine_trips.value())\nprint(\"The number of boat trips:\", num_boat_trips.value())\nprint(\"The total amount of gas used:\", objective.value())",
        "results": {
            "The number of submarine trips": "2.0",
            "The number of boat trips": "10.0",
            "The total amount of gas used": "310.0"
        },
        "formulation": "minimize 30x+25y\nSubject to: \nx <= 6\ny >= 0.5(x+y)\n100x+80y >= 1000 (end)",
        "type": "linear-notable",
        "index": 463,
        "length": 463,
        "var_num": 2
    },
    {
        "question": "An oil and gas company is sending their oil to the port using containers and trucks. A container can hold 30 units of oil while a truck can hold 40 units of oil. Due to government restrictions, the number of trucks used has to at most half the number of containers used. If at least 2000 units of oil need to be sent to the port and at least 15 containers need to be used, minimize the total number of containers and trucks needed.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_containers = LpVariable(\"NumContainers\", lowBound=15, cat='Integer') # number of containers\nnum_trucks = LpVariable(\"NumTrucks\", lowBound=0, cat='Integer') # number of trucks\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"OilTransport\", LpMinimize)\n\n# Define the objective function\nobjective = num_containers + num_trucks\nproblem += objective # minimize the total number of containers and trucks\n\n# Define the constraints\nproblem += 30 * num_containers + 40 * num_trucks >= 2000 # at least 2000 units of oil need to be sent\nproblem += num_trucks <= num_containers * 0.5 # trucks used has to at most half the number of containers\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of containers:\", num_containers.value())\nprint(\"The number of trucks:\", num_trucks.value())\nprint(\"The total number of containers and trucks:\", objective.value())",
        "results": {
            "The number of containers": "40.0",
            "The number of trucks": "20.0",
            "The total number of containers and trucks": "60.0"
        },
        "formulation": "minimize x+y\nSubject to: \ny <= halfx\n30x+40y >= 2000\nx >= 15 (end)",
        "type": "linear-notable",
        "index": 464,
        "length": 431,
        "var_num": 2
    },
    {
        "question": "You have 800 ft of fencing to make a pen for hogs. If you have a river on one side of your property, what is the dimension of the rectangular pen that maximizes the area?",
        "scenario": "## Define Variables:\nYou want to make a rectangular pen for hogs.\n// variables: {\"length of the pen\": \"L\", \"width of the pen\": \"W\"}, where L, W >= 0\n\n## Define Objective Function:\nWhat is the dimension of the rectangular pen that maximizes the area?\n// The area of the pen is given by the product of the length and the width. Therefore, the objective function is: Maximize L * W\n\n## Generate Constraint-1:\nYou have 800 ft of fencing. There is a river on one side of your property, and you do not need to fence that side.\n// L + 2W <= 800",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nL = model.addVar(vtype=\"CONTINUOUS\", name=\"L\") # length of the pen\nW = model.addVar(vtype=\"CONTINUOUS\", name=\"W\") # width of the pen\n\n# Define objective function\nobj = model.addVar(vtype=\"CONTINUOUS\", name=\"obj\")\nmodel.addCons(obj == L * W)\nmodel.setObjective(obj, \"maximize\")\n\n# Add constraints\nmodel.addCons(L + 2*W <= 800)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The length of the pen:\", model.getVal(L))\n    print(\"The width of the pen:\", model.getVal(W))\n    print(\"The maximum area of the pen: \", model.getVal(L * W))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The length of the pen": "400.000",
            "The width of the pen": "200.00",
            "The maximum area of the pen": "80000.0"
        },
        "type": "nonlinear-notable",
        "index": 465,
        "length": 170,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA city is planning to build parks in five different neighborhoods (A, B, C, D, E) to improve the quality of life and environmental sustainability. The cost and benefits of building a park in each neighborhood vary.\n// variables: {\"number of parks in neighborhood A\": \"PA\", \"number of parks in neighborhood B\": \"PB\", \"number of parks in neighborhood C\": \"PC\", \"number of parks in neighborhood D\": \"PD\", \"number of parks in neighborhood E\": \"PE\"}, where PA, PB, PC, PD, PE >= 0 & PA, PB, PC, PD, PE are integers\n\n## Define Objective Function:\nThe cost of building a park in neighborhood A is $50,000, and the environmental benefit is 100 EcoPoints.\nThe cost of building a park in neighborhood B is $70,000, and the environmental benefit is 150 EcoPoints.\nThe cost of building a park in neighborhood C is $60,000, and the environmental benefit is 120 EcoPoints.\nThe cost of building a park in neighborhood D is $80,000, and the environmental benefit is 180 EcoPoints.\nThe cost of building a park in neighborhood E is $90,000, and the environmental benefit is 200 EcoPoints.\nThe city wants to maximize the total environmental benefit while minimizing the total cost. The objective is to maximize the benefit-to-cost ratio.\n// Total cost: Cost = 50000 * PA + 70000 * PB + 60000 * PC + 80000 * PD + 90000 * PE\n// Total environmental benefit: Benefit = 100 * PA + 150 * PB + 120 * PC + 180 * PD + 200 * PE\n// So, the objective function is: Maximize (Benefit / Cost)\n\n## Generate Constraint-1:\nThe city has a budget of $1,000,000 for park construction.\n// 50000 * PA + 70000 * PB + 60000 * PC + 80000 * PD + 90000 * PE <= 1000000\n\n## Generate Constraint-2:\nAt least one park must be built in each neighborhood.\n// PA >= 1; PB >= 1; PC >= 1; PD >= 1; PE >= 1\n\n## Generate Constraint-3:\nThe total number of parks built should not exceed 15.\n// PA + PB + PC + PD + PE <= 15",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nPA = model.addVar(vtype=\"INTEGER\", name=\"PA\") # number of parks in neighborhood A\nmodel.addCons(PA >= 0)\nPB = model.addVar(vtype=\"INTEGER\", name=\"PB\") # number of parks in neighborhood B\nmodel.addCons(PB >= 0)\nPC = model.addVar(vtype=\"INTEGER\", name=\"PC\") # number of parks in neighborhood C\nmodel.addCons(PC >= 0)\nPD = model.addVar(vtype=\"INTEGER\", name=\"PD\") # number of parks in neighborhood D\nmodel.addCons(PD >= 0)\nPE = model.addVar(vtype=\"INTEGER\", name=\"PE\") # number of parks in neighborhood E\nmodel.addCons(PE >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == (100 * PA + 150 * PB + 120 * PC + 180 * PD + 200 * PE) / (50000 * PA + 70000 * PB + 60000 * PC + 80000 * PD + 90000 * PE))\n\n# Add constraints\nmodel.addCons(50000 * PA + 70000 * PB + 60000 * PC + 80000 * PD + 90000 * PE <= 1000000)\nmodel.addCons(PA >= 1)\nmodel.addCons(PB >= 1)\nmodel.addCons(PC >= 1)\nmodel.addCons(PD >= 1)\nmodel.addCons(PE >= 1)\nmodel.addCons(PA + PB + PC + PD + PE <= 15)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Benefit-to-Cost Ratio: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Benefit-to-Cost Ratio": "0.0022121212121212126"
        },
        "question": "A city is planning to build parks in five different neighborhoods (A, B, C, D, E) to improve the quality of life and environmental sustainability. The cost and benefits of building a park in each neighborhood vary. The cost of building a park in neighborhood B is $70,000, and the environmental benefit is 150 EcoPoints. The cost of building a park in neighborhood C is $60,000, and the environmental benefit is 120 EcoPoints. The cost of building a park in neighborhood D is $80,000, and the environmental benefit is 180 EcoPoints. The cost of building a park in neighborhood E is $90,000, and the environmental benefit is 200 EcoPoints. The city wants to maximize the total environmental benefit while minimizing the total cost. The objective is to maximize the benefit-to-cost ratio. The city has a budget of $1,000,000 for park construction. At least one park must be built in each neighborhood. The total number of parks built should not exceed 15. The cost of building a park in neighborhood A is $50,000, and the environmental benefit is 100 EcoPoints.",
        "type": "nonlinear-notable",
        "index": 466,
        "length": 1059,
        "var_num": 5
    },
    {
        "question": "There are two specialized containers, a small and large one, that are used to make a pharmaceutical paste. The small container requires 10 units of water and 15 units of the powdered pill to make 20 units of the paste. The large container requires 20 units of water and 20 units of the powdered pill to make 30 units of the paste. The pharmacy has available 500 units of water and 700 units of the powdered pill. How many of each container should be used to maximize the amount of paste that can be made?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_small_containers = LpVariable(\"NumSmallContainers\", lowBound=0, cat='Integer') # number of small containers\nnum_large_containers = LpVariable(\"NumLargeContainers\", lowBound=0, cat='Integer') # number of large containers\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"PharmaceuticalPasteProduction\", LpMaximize)\n\n# Define the objective function\nobjective = 20 * num_small_containers + 30 * num_large_containers\nproblem += objective # maximize the total units of paste produced\n\n# Define the constraints\nproblem += 10 * num_small_containers + 20 * num_large_containers <= 500 # constraint on the units of water\nproblem += 15 * num_small_containers + 20 * num_large_containers <= 700 # constraint on the units of the powdered pill\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of small containers:\", num_small_containers.value())\nprint(\"The number of large containers:\", num_large_containers.value())\nprint(\"The amount of paste produced:\", objective.value())",
        "results": {
            "The number of small containers": "40.0",
            "The number of large containers": "5.0",
            "The amount of paste produced": "950.0"
        },
        "formulation": "maximize 20x+30y\nSubject to: \n10x+20y <= 500\n15x+20y <= 700 (end)",
        "type": "linear-notable",
        "index": 467,
        "length": 504,
        "var_num": 2
    },
    {
        "question": "A farmer decides to move his cows to a nearby farm using helicopters and trucks. A helicopter can take 3 cows per trip and creates 5 units of pollution. A truck can take 7 cows per trip and creates 10 units of pollution. The farmer needs to transport 80 cows and he only has enough money for at most 8 truck trips. How many of each type of trip should be taken to minimize the total amount of pollution produced?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_helicopter_trips = LpVariable(\"NumHelicopterTrips\", lowBound=0, cat='Integer') # number of helicopter trips\nnum_truck_trips = LpVariable(\"NumTruckTrips\", lowBound=0, cat='Integer') # number of truck trips\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CowTransport\", LpMinimize)\n\n# Define the objective function\nobjective = 5 * num_helicopter_trips + 10 * num_truck_trips\nproblem += objective # minimize the total amount of pollution\n\n# Define the constraints\nproblem += 3 * num_helicopter_trips + 7 * num_truck_trips >= 80 # at least 80 cows must be transported\nproblem += num_truck_trips <= 8 # at most 8 truck trips due to the budget\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Number of helicopter trips:\", num_helicopter_trips.value())\nprint(\"Number of truck trips:\", num_truck_trips.value())\nprint(\"Total amount of pollution produced:\", objective.value())",
        "results": {
            "Number of helicopter trips": "8.0",
            "Number of truck trips": "8.0",
            "Total amount of pollution produced": "120.0"
        },
        "formulation": "minimize 5x+10y\nSubject to: \n3x+7y >= 80\ny <= 8 (end)",
        "type": "linear-notable",
        "index": 468,
        "length": 412,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA logistics company is managing the distribution of three types of goods: GoodsX, GoodsY, and GoodsZ. The company needs to determine the number of trucks allocated to each type of goods and the number of trips per truck for each type of goods will make in the upcoming month. For ease of management, the number of trips per truck is the same for all trucks of the same type of goods. Additionally, the company can invest in fuel-efficient upgrades for all trucks, which will reduce fuel costs per trip.\n// variables: {\"number of trucks for GoodsX\": \"TrucksX\", \"number of trucks for GoodsY\": \"TrucksY\", \"number of trucks for GoodsZ\": \"TrucksZ\", \"number of trips per truck for GoodsX\": \"TripsX\", \"number of trips per truck for GoodsY\": \"TripsY\", \"number of trips per truck for GoodsZ\": \"TripsZ\", \"investment in fuel efficiency\": \"FuelEfficiency\"}, where TrucksX, TrucksY, TrucksZ, TripsX, TripsY, TripsZ, FuelEfficiency >= 0 & TrucksX, TrucksY, TrucksZ, TripsX, TripsY, TripsZ are integers, and FuelEfficiency is continuous.\n\n## Define Objective Function:\nThe fuel cost per trip of all trucks decreases by $10 for every $10,000 invested in fuel efficiency upgrades. The initial fuel cost per trip for GoodsX is $200, for GoodsY is $250, and for GoodsZ is $300. The revenue generated per trip is $500 for GoodsX, $600 for GoodsY, and $700 for GoodsZ. The company aims to maximize the total profit from all goods.\n// Total profit for GoodsX: ProfitX = (500 - 200 + 0.001 * FuelEfficiency) * TrucksX * TripsX\n// Total profit for GoodsY: ProfitY = (600 - 250 + 0.001 * FuelEfficiency) * TrucksY * TripsY\n// Total profit for GoodsZ: ProfitZ = (700 - 300 + 0.001 * FuelEfficiency) * TrucksZ * TripsZ\n// So, the objective function is: Maximize (ProfitX + ProfitY + ProfitZ)\n\n## Generate Constraint-1:\nThe company has a total of 50 trucks available for the month.\n// TrucksX + TrucksY + TrucksZ <= 50\n\n## Generate Constraint-2:\nThe total investment in fuel efficiency upgrades cannot exceed $60,000.\n// FuelEfficiency <= 60000\n\n## Generate Constraint-3:\nDue to operational constraints, each truck can make no more than 20 trips in the month.\n// TripsX <= 20; TripsY <= 20; TripsZ <= 20\n\n## Generate Constraint-4:\nThe company must ensure that at least 10 trucks are allocated to GoodsX and 15 trucks to GoodsY.\n// TrucksX >= 10; TrucksY >= 15",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nTrucksX = model.addVar(vtype=\"INTEGER\", name=\"TrucksX\") # number of trucks for GoodsX\nmodel.addCons(TrucksX >= 0)\nTrucksY = model.addVar(vtype=\"INTEGER\", name=\"TrucksY\") # number of trucks for GoodsY\nmodel.addCons(TrucksY >= 0)\nTrucksZ = model.addVar(vtype=\"INTEGER\", name=\"TrucksZ\") # number of trucks for GoodsZ\nmodel.addCons(TrucksZ >= 0)\nTripsX = model.addVar(vtype=\"INTEGER\", name=\"TripsX\") # number of trips per truck for GoodsX\nmodel.addCons(TripsX >= 0)\nTripsY = model.addVar(vtype=\"INTEGER\", name=\"TripsY\") # number of trips per truck for GoodsY\nmodel.addCons(TripsY >= 0)\nTripsZ = model.addVar(vtype=\"INTEGER\", name=\"TripsZ\") # number of trips per truck for GoodsZ\nmodel.addCons(TripsZ >= 0)\nFuelEfficiency = model.addVar(vtype=\"CONTINUOUS\", name=\"FuelEfficiency\") # investment in fuel efficiency\nmodel.addCons(FuelEfficiency >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == (500 - 200 + 0.001 * FuelEfficiency) * TrucksX * TripsX + (600 - 250 + 0.001 * FuelEfficiency) * TrucksY * TripsY + (700 - 300 + 0.001 * FuelEfficiency) * TrucksZ * TripsZ)\n\n# Add constraints\nmodel.addCons(TrucksX + TrucksY + TrucksZ <= 50)\nmodel.addCons(FuelEfficiency <= 60000)\nmodel.addCons(TripsX <= 20)\nmodel.addCons(TripsY <= 20)\nmodel.addCons(TripsZ <= 20)\nmodel.addCons(TrucksX >= 10)\nmodel.addCons(TrucksY >= 15)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Trucks for GoodsX: \", model.getVal(TrucksX))\n    print(\"Number of Trucks for GoodsY: \", model.getVal(TrucksY))\n    print(\"Number of Trucks for GoodsZ: \", model.getVal(TrucksZ))\n    print(\"Number of Trips per Truck for GoodsX: \", model.getVal(TripsX))\n    print(\"Number of Trips per Truck for GoodsY: \", model.getVal(TripsY))\n    print(\"Number of Trips per Truck for GoodsZ: \", model.getVal(TripsZ))\n    print(\"Investment in Fuel Efficiency: \", model.getVal(FuelEfficiency))\n    print(\"Total Profit: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Trucks for GoodsX": "10.0",
            "Number of Trucks for GoodsY": "15.0",
            "Number of Trucks for GoodsZ": "25.0",
            "Number of Trips per Truck for GoodsX": "20.0",
            "Number of Trips per Truck for GoodsY": "20.0",
            "Number of Trips per Truck for GoodsZ": "20.0",
            "Investment in Fuel Efficiency": "60000.0",
            "Total Profit": "425000.0"
        },
        "question": "A logistics company is managing the distribution of three types of goods: GoodsX, GoodsY, and GoodsZ. The company needs to determine the number of trucks allocated to each type of goods and the number of trips per truck for each type of goods will make in the upcoming month. For ease of management, the number of trips per truck is the same for all trucks of the same type of goods. Additionally, the company can invest in fuel-efficient upgrades for all trucks, which will reduce fuel costs per trip. The company has a total of 50 trucks available for the month. The total investment in fuel efficiency upgrades cannot exceed $60,000. Due to operational constraints, each truck can make no more than 20 trips in the month. The company must ensure that at least 10 trucks are allocated to GoodsX and 15 trucks to GoodsY. The fuel cost per trip of all trucks decreases by $10 for every $10,000 invested in fuel efficiency upgrades. The initial fuel cost per trip for GoodsX is $200, for GoodsY is $250, and for GoodsZ is $300. The revenue generated per trip is $500 for GoodsX, $600 for GoodsY, and $700 for GoodsZ. The company aims to maximize the total profit from all goods.",
        "type": "nonlinear-notable",
        "index": 469,
        "length": 1177,
        "var_num": 7
    },
    {
        "question": "Jordan is a chef. He wants to design a diet consisting of Kebabs and Rice.  Assume that each serving of Rice costs $3 and contains 300 calories and 4.5 grams of protein. Assume that each serving of Kebab costs $2 and contains 200 calories and 4 grams of protein. He's interested in spending as little money as possible but he wants to ensure that his meals have at least 2200 calories and at least 30 grams of protein per day. Formulate a linear programming problem that will help minimize the cost of the diet.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_rice_servings = LpVariable(\"NumRiceServings\", lowBound=0, cat='Integer') # number of rice servings\nnum_kebab_servings = LpVariable(\"NumKebabServings\", lowBound=0, cat='Integer') # number of kebab servings\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DietCost\", LpMinimize)\n\n# Define the objective function\nobjective = 3 * num_rice_servings + 2 * num_kebab_servings\nproblem += objective # minimize the cost\n\n# Define the constraints\nproblem += 300 * num_rice_servings + 200 * num_kebab_servings >= 2200 # at least 2200 calories\nproblem += 4.5 * num_rice_servings + 4 * num_kebab_servings >= 30 # at least 30 grams of protein\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of rice servings:\", num_rice_servings.value())\nprint(\"The number of kebab servings:\", num_kebab_servings.value())\nprint(\"The total cost of the diet: $\", objective.value())",
        "results": {
            "The number of rice servings": "6.0",
            "The number of kebab servings": "2.0",
            "The total cost of the diet": "22.0"
        },
        "formulation": "minimize 3y+2x\nSubject to: \n300y+200x >= 2200\n4.5y+4x >= 30 (end)",
        "type": "linear-notable",
        "index": 470,
        "length": 511,
        "var_num": 2
    },
    {
        "question": "An open-topped glass aquarium with a square base is designed to hold more than 62.5 cubic feet of water. What is the minimum possible exterior surface area of the aquarium?",
        "scenario": "## Define Variables:\nAn open-topped glass aquarium with a square base is designed to hold 62.5 cubic feet of water.\n// variables: {\"length of the side of the square base\": \"x\", \"height of the aquarium\": \"h\"}, where x, h >= 0\n\n## Define Objective Function:\nWhat is the minimum possible exterior surface area of the aquarium?\n// The exterior surface area of the aquarium is the sum of the area of the base and the area of the four sides. The area of the base is x^2, and the area of the four sides is 4*x*h.\n// So, the objective function is: Minimize x^2 + 4*x*h\n\n## Generate Constraint-1:\nThe volume of the aquarium must be greater than 62.5 cubic feet.\n// x^2*h >= 62.5",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"CONTINUOUS\", name=\"x\") # length of the side of the square base\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the aquarium\n\n# Define objective function\nobj = model.addVar(vtype=\"CONTINUOUS\", name=\"obj\")\nmodel.addCons(obj == x**2 + 4*x*h)\nmodel.setObjective(obj, \"minimize\")\n\n# Add constraints\nmodel.addCons(x**2*h >= 62.5)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The length of the side of the square base:\", model.getVal(x))\n    print(\"The height of the aquarium:\", model.getVal(h))\n    print(\"The minimum possible exterior surface area of the aquarium: \", model.getObjVal())\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The length of the side of the square base": "5.0",
            "The height of the aquarium": "2.5",
            "The minimum possible exterior surface area of the aquarium": "75.0"
        },
        "type": "nonlinear-notable",
        "index": 471,
        "length": 172,
        "var_num": 2
    },
    {
        "question": "A car manufacturer makes two types of car oils: Oil Max and Oil Max Pro. A container of Oil Max contains 46 grams of substance A, 43 grams of substance B and 56 grams of substance C. A container of Oil Max Pro contains 13 grams of substance A, 4 grams of substance B and 45 grams of substance C. The car manufacturer has 1345 grams of substance A, 346 grams of substance B, 1643 grams of substance C. In addition, the profit per container of Oil Max is $10 and the profit per container of Oil Max Pro is $15. How many containers of each of oil should the car manufacturer make to maximize profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_oil_max = LpVariable(\"NumOilMax\", lowBound=0, cat='Integer') # number of Oil Max containers\nnum_oil_max_pro = LpVariable(\"NumOilMaxPro\", lowBound=0, cat='Integer') # number of Oil Max Pro containers\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"OilManufacturing\", LpMaximize)\n\n# Define the objective function\nobjective = 10 * num_oil_max + 15 * num_oil_max_pro\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 46 * num_oil_max + 13 * num_oil_max_pro <= 1345 # the available amount of substance A\nproblem += 43 * num_oil_max + 4 * num_oil_max_pro <= 346 # the available amount of substance B\nproblem += 56 * num_oil_max + 45 * num_oil_max_pro <= 1643 # the available amount of substance C\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of Oil Max containers:\", num_oil_max.value())\nprint(\"The number of Oil Max Pro containers:\", num_oil_max_pro.value())\nprint(\"The total profit:\", objective.value())",
        "results": {
            "The number of Oil Max containers": "0.0",
            "The number of Oil Max Pro containers": "36.0",
            "The total profit": "540.0"
        },
        "formulation": "maximize 10x+15y\nSubject to: \n46x+13y <= 1345\n43x+4y <= 346\n56x+45y <= 1643 (end)",
        "type": "linear-notable",
        "index": 472,
        "length": 596,
        "var_num": 2
    },
    {
        "question": "Eric is a world-famous wood artist. He manufactures two types of decors made of oak. The first product, a display shelf, requires 25 minutes each for carving and 20 minutes each for polishing. The second decor is a plant stand and it requires 20 minutes each for carving and 10 minutes each for polishing. There are 350 minutes available for carving and 600 for polishing. The profit is $55 each for the display shelf and $45 for each plant stand. How many decors of each type should the artist create in order to maximize his profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of display shelves manufactured\", \"name\": \"x\"}, {\"description\": \"number of plant stands manufactured\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit\", \"function\": \"55x + 45y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"time constraint for carving\", \"function\": \"25x + 20y <= 350\"}, {\"description\": \"time constraint for polishing\", \"function\": \"20x + 10y <= 600\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_display_shelves = LpVariable(\"NumDisplayShelves\", lowBound=0, cat='Integer') # number of display shelves manufactured\nnum_plant_stands = LpVariable(\"NumPlantStands\", lowBound=0, cat='Integer') # number of plant stands manufactured\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"WoodArtProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 55 * num_display_shelves + 45 * num_plant_stands\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 25 * num_display_shelves + 20 * num_plant_stands <= 350 # time constraint for carving\nproblem += 20 * num_display_shelves + 10 * num_plant_stands <= 600 # time constraint for polishing\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of display shelves to manufacture:\", num_display_shelves.value())\nprint(\"The number of plant stands to manufacture:\", num_plant_stands.value())\nprint(\"Total profit:\", objective.value())\n",
        "results": {
            "The number of display shelves to manufacture": "2.0",
            "The number of plant stands to manufacture": "15.0",
            "Total profit": "785.0"
        },
        "type": "linear-notable",
        "index": 473,
        "length": 534,
        "var_num": 2
    },
    {
        "question": "A theme park transports its visitors around the park either by scooter or rickshaw. A scooter can carry 2 people while a rickshaw can carry 3 people. To avoid excessive pollution, at most 40% of the vehicles used can be rickshaws. If the park needs to transport at least 300 visitors, minimize the total number of scooters used.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_scooters = LpVariable(\"NumScooters\", lowBound=0, cat='Integer') # number of scooters\nnum_rickshaws = LpVariable(\"NumRickshaws\", lowBound=0, cat='Integer') # number of rickshaws\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ThemeParkTransport\", LpMinimize)\n\n# Define the objective function\nobjective = num_scooters\nproblem += objective # minimize the total number of scooters used\n\n# Define the constraints\nproblem += 2 * num_scooters + 3 * num_rickshaws >= 300 # At least 300 visitors must be transported\nproblem += num_rickshaws <= 0.4 * (num_scooters + num_rickshaws) # At most 40% of vehicles can be rickshaws\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of scooters:\", num_scooters.value())\nprint(\"The number of rickshaws:\", num_rickshaws.value())\nprint(\"The total number of vehicles used:\", num_scooters.value() + num_rickshaws.value())",
        "results": {
            "The number of scooters": "75.0",
            "The number of rickshaws": "50.0",
            "The total number of vehicles used": "125.0"
        },
        "formulation": "minimize x\nSubject to: \ny <= 0.4(x+y)\n2x+3y >= 300 (end)",
        "type": "linear-notable",
        "index": 474,
        "length": 328,
        "var_num": 2
    },
    {
        "question": "A lawn mowing service provides neighborhood services using small teams and large teams. A small team requires 3 employees and can mow 50 sq ft of lawn. A large team requires 5 employees and can mow 80 sq ft of lawn. The company has 150 employees available. Because most people have smaller lawns in the city, the number of small teams must be at least 3 times as much as the number of large teams. In addition, to make sure the company can meet all demands, there has to be at least 6 large teams and at least 10 small teams. How many of each team type should be used to maximize the amount of lawn that can be mowed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_small_teams = LpVariable(\"NumSmallTeams\", lowBound=0, cat='Integer') # number of small teams\nnum_large_teams = LpVariable(\"NumLargeTeams\", lowBound=0, cat='Integer') # number of large teams\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"LawnMowing\", LpMaximize)\n\n# Define the objective function\nobjective = 50 * num_small_teams + 80 * num_large_teams\nproblem += objective # maximize the total amount of lawn that can be mowed\n\n# Define the constraints\nproblem += 3 * num_small_teams + 5 * num_large_teams <= 150 # the total number of employees must be at most 150\nproblem += num_small_teams >= 3 * num_large_teams # small teams must be at least 3 times as much as large teams\nproblem += num_small_teams >= 10 # there has to be at least 10 small teams\nproblem += num_large_teams >= 6 # there has to be at least 6 large teams\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of small teams:\", num_small_teams.value())\nprint(\"The number of large teams:\", num_large_teams.value())\nprint(\"The total amount of lawn that can be mowed:\", objective.value())",
        "results": {
            "The number of small teams": "40.0",
            "The number of large teams": "6.0",
            "The total amount of lawn that can be mowed": "2480.0"
        },
        "formulation": "maximize 50x+80y\nSubject to: \n3x+5y <= 150\nx >= 3y\ny >= 6\nx >= 10 (end)",
        "type": "linear-notable",
        "index": 475,
        "length": 617,
        "var_num": 2
    },
    {
        "question": "There are six cities (cities 1-6) in Kilroy County. The county must determine where to build fire stations. The county wants to build the minimum number of fire stations needed to ensure that at least one fire station is within 15 minutes (driving time) of each city. The times (in minutes) required to drive between the cities in Kilroy County are shown in the following Table. Tell Kilroy how many fire stations should be built and where they should be located.\n\nTable (Time Required to Travel between Cities in Kilroy County):\n| From / To | City 1 | City 2 | City 3 | City 4 | City 5 | City 6 |\n|-----------|--------|--------|--------|--------|--------|--------|\n| City 1    | 0      | 10     | 20     | 30     | 30     | 20     |\n| City 2    | 10     | 0      | 25     | 35     | 20     | 10     |\n| City 3    | 20     | 25     | 0      | 15     | 30     | 20     |\n| City 4    | 30     | 35     | 15     | 0      | 15     | 25     |\n| City 5    | 30     | 20     | 30     | 15     | 0      | 14     |\n| City 6    | 20     | 10     | 20     | 25     | 14     | 0      |",
        "formulation": "# Define Variables:\nWe need to determine whether a fire station should be built in each city. Let's denote the decision variables as follows:\n```Variables\nx_i = 0 or 1, i = 1, 2, 3, 4, 5, 6 // Binary variable ,Represents whether a fire station should be built in City i\n```\nwhere i represents the city number. For example, x1 represents whether a fire station should be built in City 1. If x1=1, it means a fire station should be built in City 1. If x1=0, it means no fire station should be built in City 1.\n\n# Objective Function:\nWe want to minimize the number of fire stations built while ensuring that each city has at least one fire station within a 15-minute driving distance. Therefore, the objective function is:\n```Objective Function\nMinimize: x1 + x2 + x3 + x4 + x5 + x6\n```\n\n# Constraints:\nNext, we need to formulate the constraints that ensure each city is within 15 minutes of at least one fire station. This can be done by looking at each city individually and considering the travel times to all other cities. \nFor example, for city 1, the time required to travel to ctiy 1-6 are 0 10 20 30 30 20. So, only city 2 is within 15 minutes of city 1. Therefore, we need to ensure that either city 1 or city 2 has a fire station. This can be expressed as:\nx1 + x2 >= 1\nSimilarly, for city 2, the time required to travel to ctiy 1-6 are 10 0 25 35 20 10. So, only city 1 and city 6 are within 15 minutes of city 2. Therefore, we need to ensure that either city 1, city 2, or city 6 has a fire station. This can be expressed as:\nx1 + x2 + x6 >= 1\nSimilarly, for city 3, the time required to travel to ctiy 1-6 are 20 25 0 15 30 20. So, only city 4 is within 15 minutes of city 3. Therefore, we need to ensure that either city 3 or city 4 has a fire station. This can be expressed as:\nx3 + x4 >= 1\nSimilarly, for city 4, the time required to travel to ctiy 1-6 are 30 35 15 0 15 25. So, only city 3, city 4, and city 5 are within 15 minutes of city 4. Therefore, we need to ensure that either city 3, city 4, or city 5 has a fire station. This can be expressed as:\nx3 + x4 + x5 >= 1\nSimilarly, for city 5, the time required to travel to ctiy 1-6 are 30 20 30 15 0 14. So, only city 4, city 5, and city 6 are within 15 minutes of city 5. Therefore, we need to ensure that either city 4, city 5, or city 6 has a fire station. This can be expressed as:\nx4 + x5 + x6 >= 1\nSimilarly, for city 6, the time required to travel to ctiy 1-6 are 20 10 20 25 14 0. So, only city 2, city 5, and city 6 are within 15 minutes of city 6. Therefore, we need to ensure that either city 2, city 5, or city 6 has a fire station. This can be expressed as:\nx2 + x5 + x6 >= 1\nPutting it all together, we get the following linear programming problem:\n```Constraints\nx1 + x2 >= 1\nx1 + x2 + x6 >= 1\nx3 + x4 >= 1\nx3 + x4 + x5 >= 1\nx4 + x5 + x6 >= 1\nx2 + x5 + x6 >= 1\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx1 = LpVariable(\"x1\", cat='Binary')\nx2 = LpVariable(\"x2\", cat='Binary')\nx3 = LpVariable(\"x3\", cat='Binary')\nx4 = LpVariable(\"x4\", cat='Binary')\nx5 = LpVariable(\"x5\", cat='Binary')\nx6 = LpVariable(\"x6\", cat='Binary')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FireStationLocation\", LpMinimize)\n\n# Define the objective function\nproblem += x1 + x2 + x3 + x4 + x5 + x6\n\n# Define the constraints\nproblem += x1 + x2 >= 1\nproblem += x1 + x2 + x6 >= 1\nproblem += x3 + x4 >= 1\nproblem += x3 + x4 + x5 >= 1\nproblem += x4 + x5 + x6 >= 1\nproblem += x2 + x5 + x6 >= 1\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The optimal number of fire stations to be built is:\", value(problem.objective))\nprint(\"Locations for fire stations:\")\nprint(\"City 1:\", x1.value())\nprint(\"City 2:\", x2.value())\nprint(\"City 3:\", x3.value())\nprint(\"City 4:\", x4.value())\nprint(\"City 5:\", x5.value())\nprint(\"City 6:\", x6.value())\n",
        "results": {
            "The optimal number of fire stations to be built is": "2.0",
            "Whether a fire stations should be built in City 1": "0.0",
            "Whether a fire stations should be built in City 2": "1.0",
            "Whether a fire stations should be built in City 3": "0.0",
            "Whether a fire stations should be built in City 4": "1.0",
            "Whether a fire stations should be built in City 5": "0.0",
            "Whether a fire stations should be built in City 6": "0.0"
        },
        "type": "linear-table",
        "index": 476,
        "length": 1073,
        "var_num": 7
    },
    {
        "question": "A doctor recommends that a man eat burgers and pizza in order to put on weight. Each burger contains 10 units of fat and 300 calories. Each slice of pizza contains 8 units of fat and 250 calories. The man must get at least 130 units of fat and 3000 calories. Further, each burger contains 12 units of cholesterol while each slice of pizza contains 10 units of cholesterol. Since burgers are slightly more expensive, the man decides to eat at least twice as many slices of pizza as burgers. How many of each should he eat to minimize his cholesterol intake?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_burgers = LpVariable(\"NumBurgers\", lowBound=0, cat='Integer')  # number of burgers\nnum_pizzas = LpVariable(\"NumPizzas\", lowBound=0, cat='Integer')  # number of slices of pizza\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimizeCholesterol\", LpMinimize)\n\n# Define the objective function\nobjective = 12 * num_burgers + 10 * num_pizzas\nproblem += objective  # minimize the total cholesterol intake\n\n# Define the constraints\nproblem += 10 * num_burgers + 8 * num_pizzas >= 130  # at least 130 units of fat\nproblem += 300 * num_burgers + 250 * num_pizzas >= 3000  # at least 3000 calories\nproblem += num_pizzas >= 2 * num_burgers  # at least twice as many slices of pizza as burgers\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of burgers to eat:\", num_burgers.value())\nprint(\"The number of slices of pizza to eat:\", num_pizzas.value())\nprint(\"The minimum cholesterol intake:\", objective.value())",
        "results": {
            "The number of burgers to eat": "5.0",
            "The number of slices of pizza to eat": "10.0",
            "The minimum cholesterol intake": "160.0"
        },
        "formulation": "minimize 12x+10y\nSubject to: \n10x+8y >= 130\n300x+250y >= 3000\ny >= 2x (end)",
        "type": "linear-notable",
        "index": 477,
        "length": 556,
        "var_num": 2
    },
    {
        "question": "A daycare center has children they must pick up and can use two types of vehicles: bus or a personal car. A bus can carry 9 children while a personal car can carry 4 children. The daycare has to pick up at least 100 children. Additionally, due to limitations of pollution, there must be more buses than personal cars. But some children require extra attention. Therefore, there must be at least 5 personal cars. How many of each form of transportation should the daycare center schedule for to minimize the total number of vehicles?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_buses = LpVariable(\"NumBuses\", lowBound=0, cat='Integer') # number of buses\nnum_cars = LpVariable(\"NumCars\", lowBound=5, cat='Integer') # number of personal cars, at least 5\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DaycareTransport\", LpMinimize)\n\n# Define the objective function\nobjective = num_buses + num_cars\nproblem += objective # minimize the total number of vehicles\n\n# Define the constraints\nproblem += 9 * num_buses + 4 * num_cars >= 100 # at least 100 children must be picked up\nproblem += num_buses >= num_cars + 1 # there must be more buses than personal cars\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of buses:\", num_buses.value())\nprint(\"The number of personal cars:\", num_cars.value())\nprint(\"The total number of vehicles:\", objective.value())",
        "results": {
            "The number of buses": "9.0",
            "The number of personal cars": "5.0",
            "The total number of vehicles": "14.0"
        },
        "formulation": "minimize x+y\nSubject to: \nx >= y\ny >= 5\n4y+9x >= 100 (end)",
        "type": "linear-notable",
        "index": 478,
        "length": 532,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA tech company is planning to launch four new software products: AppX, AppY, AppZ, and AppW. They need to decide how many development teams to allocate to each product for the upcoming quarter. Additionally, the company is considering outsourcing some of the development work to external contractor teams.\n// variables: {\"number of development teams for AppX\": \"AppXTeams\", \"number of development teams for AppY\": \"AppYTeams\", \"number of development teams for AppZ\": \"AppZTeams\", \"number of development teams for AppW\": \"AppWTeams\", \"number of external contractor teams for AppX\": \"AppXContractors\", \"number of external contractor teams for AppY\": \"AppYContractors\", \"number of external contractor teams for AppZ\": \"AppZContractors\", \"number of external contractor teams for AppW\": \"AppWContractors\"}, where AppXTeams, AppYTeams, AppZTeams, AppWTeams, AppXContractors, AppYContractors, AppZContractors, AppWContractors >= 0 & all are integers\n\n## Define Objective Function:\nFor product APPX, the Estimated Revenue per Team (for both company teams and contractor trams) is $100,000, the Development Cost per company Team is $60,000, the Development Cost per External Contractor is $80,000, and the Marketing Cost per Team (for both company teams and contractor trams) is $20,000.\nFor product APPY, the Estimated Revenue per Team (for both company teams and contractor trams) is $150,000, the Development Cost per company Team is $80,000, the Development Cost per External Contractor is $100,000, and the Marketing Cost per Team (for both company teams and contractor trams) is $30,000.\nFor product APPZ, the Estimated Revenue per Team (for both company teams and contractor trams) is $200,000, the Development Cost per company Team is $100,000, the Development Cost per External Contractor is $120,000, and the Marketing Cost per Team (for both company teams and contractor trams) is $40,000.\nFor product APPW, the Estimated Revenue per Team (for both company teams and contractor trams) is $120,000, the Development Cost per company Team is $70,000, the Development Cost per External Contractor is $90,000, and the Marketing Cost per Team (for both company teams and contractor trams) is $25,000.\nThe company wants to maximize the average net profit per team (for both company teams and contractor trams).\n// Total net profit for APPX: Profit_APPX = (100,000 - 60,000 - 20,000) * AppXTeams + (100,000 - 80,000 - 20,000) * AppXContractors\n// Total net profit for APPY: Profit_APPY = (150,000 - 80,000 - 30,000) * AppYTeams + (150,000 - 100,000 - 30,000) * AppYContractors\n// Total net profit for APPZ: Profit_APPZ = (200,000 - 100,000 - 40,000) * AppZTeams + (200,000 - 120,000 - 40,000) * AppZContractors\n// Total net profit for APPW: Profit_APPW = (120,000 - 70,000 - 25,000) * AppWTeams + (120,000 - 90,000 - 25,000) * AppWContractors\n// So, the objective function is: Maximize ((Profit_APPX + Profit_APPY + Profit_APPZ + Profit_APPW) / (AppXTeams + AppYTeams + AppZTeams + AppWTeams + AppXContractors + AppYContractors + AppZContractors + AppWContractors))\n\n## Generate Constraint-1:\nThe company has a total of 30 development teams available for the quarter.\n// AppXTeams + AppYTeams + AppZTeams + AppWTeams <= 30\n\n## Generate Constraint-2:\nDue to market research, the company knows that AppX must have at least twice as many development teams as AppY.\n// AppXTeams >= 2 * AppYTeams\n\n## Generate Constraint-3:\nThe company has a budget of $2,500,000 for marketing costs and external contractors for the quarter.\n// 20,000 * AppXTeams + 30,000 * AppYTeams + 40,000 * AppZTeams + 25,000 * AppWTeams + 80,000 * AppXContractors + 100,000 * AppYContractors + 120,000 * AppZContractors + 90,000 * AppWContractors <= 2,500,000\n\n## Generate Constraint-4:\nThe company wants to ensure that each product has at least one team working on it.\n// AppXTeams + AppXContractors >= 1; AppYTeams + AppYContractors >= 1; AppZTeams + AppZContractors >= 1; AppWTeams + AppWContractors >= 1\n\n## Generate Constraint-5:\nDue to cooperation agreements, the company should hire at least 9 external contractors in total.\n// AppXContractors + AppYContractors + AppZContractors + AppWContractors >= 9",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nAppXTeams = model.addVar(vtype=\"INTEGER\", name=\"AppXTeams\") # number of development teams for AppX\nmodel.addCons(AppXTeams >= 0)\nAppYTeams = model.addVar(vtype=\"INTEGER\", name=\"AppYTeams\") # number of development teams for AppY\nmodel.addCons(AppYTeams >= 0)\nAppZTeams = model.addVar(vtype=\"INTEGER\", name=\"AppZTeams\") # number of development teams for AppZ\nmodel.addCons(AppZTeams >= 0)\nAppWTeams = model.addVar(vtype=\"INTEGER\", name=\"AppWTeams\") # number of development teams for AppW\nmodel.addCons(AppWTeams >= 0)\nAppXContractors = model.addVar(vtype=\"INTEGER\", name=\"AppXContractors\") # number of external contractor teams for AppX\nmodel.addCons(AppXContractors >= 0)\nAppYContractors = model.addVar(vtype=\"INTEGER\", name=\"AppYContractors\") # number of external contractor teams for AppY\nmodel.addCons(AppYContractors >= 0)\nAppZContractors = model.addVar(vtype=\"INTEGER\", name=\"AppZContractors\") # number of external contractor teams for AppZ\nmodel.addCons(AppZContractors >= 0)\nAppWContractors = model.addVar(vtype=\"INTEGER\", name=\"AppWContractors\") # number of external contractor teams for AppW\nmodel.addCons(AppWContractors >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == ((100000 - 60000 - 20000) * AppXTeams + (100000 - 80000 - 20000) * AppXContractors +\n                       (150000 - 80000 - 30000) * AppYTeams + (150000 - 100000 - 30000) * AppYContractors +\n                       (200000 - 100000 - 40000) * AppZTeams + (200000 - 120000 - 40000) * AppZContractors +\n                       (120000 - 70000 - 25000) * AppWTeams + (120000 - 90000 - 25000) * AppWContractors) /\n                      (AppXTeams + AppYTeams + AppZTeams + AppWTeams + AppXContractors + AppYContractors + AppZContractors + AppWContractors))\n\n# Add constraints\nmodel.addCons(AppXTeams + AppYTeams + AppZTeams + AppWTeams <= 30)\nmodel.addCons(AppXTeams >= 2 * AppYTeams)\nmodel.addCons(20000 * AppXTeams + 30000 * AppYTeams + 40000 * AppZTeams + 25000 * AppWTeams +\n              80000 * AppXContractors + 100000 * AppYContractors + 120000 * AppZContractors + 90000 * AppWContractors <= 2500000)\nmodel.addCons(AppXTeams + AppXContractors >= 1)\nmodel.addCons(AppYTeams + AppYContractors >= 1)\nmodel.addCons(AppZTeams + AppZContractors >= 1)\nmodel.addCons(AppWTeams + AppWContractors >= 1)\nmodel.addCons(AppXContractors + AppYContractors + AppZContractors + AppWContractors >= 9)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of AppX Teams: \", model.getVal(AppXTeams))\n    print(\"Number of AppY Teams: \", model.getVal(AppYTeams))\n    print(\"Number of AppZ Teams: \", model.getVal(AppZTeams))\n    print(\"Number of AppW Teams: \", model.getVal(AppWTeams))\n    print(\"Number of AppX Contractors: \", model.getVal(AppXContractors))\n    print(\"Number of AppY Contractors: \", model.getVal(AppYContractors))\n    print(\"Number of AppZ Contractors: \", model.getVal(AppZContractors))\n    print(\"Number of AppW Contractors: \", model.getVal(AppWContractors))\n    print(\"Average Net Profit per Team: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of AppX Teams": "1.0",
            "Number of AppY Teams": "0.0",
            "Number of AppZ Teams": "28.0",
            "Number of AppW Teams": "1.0",
            "Number of AppX Contractors": "0.0",
            "Number of AppY Contractors": "1.0",
            "Number of AppZ Contractors": "8.0",
            "Number of AppW Contractors": "0.0",
            "Average Net Profit per Team": "52948.71794871795"
        },
        "question": "A tech company is planning to launch four new software products: AppX, AppY, AppZ, and AppW. They need to decide how many development teams to allocate to each product for the upcoming quarter. Additionally, the company is considering outsourcing some of the development work to external contractor teams. For product APPY, the Estimated Revenue per Team (for both company teams and contractor trams) is $150,000, the Development Cost per company Team is $80,000, the Development Cost per External Contractor is $100,000, and the Marketing Cost per Team (for both company teams and contractor trams) is $30,000. For product APPZ, the Estimated Revenue per Team (for both company teams and contractor trams) is $200,000, the Development Cost per company Team is $100,000, the Development Cost per External Contractor is $120,000, and the Marketing Cost per Team (for both company teams and contractor trams) is $40,000. For product APPW, the Estimated Revenue per Team (for both company teams and contractor trams) is $120,000, the Development Cost per company Team is $70,000, the Development Cost per External Contractor is $90,000, and the Marketing Cost per Team (for both company teams and contractor trams) is $25,000. The company wants to maximize the average net profit per team (for both company teams and contractor trams). The company has a total of 30 development teams available for the quarter. Due to market research, the company knows that AppX must have at least twice as many development teams as AppY. The company has a budget of $2,500,000 for marketing costs and external contractors for the quarter. The company wants to ensure that each product has at least one team working on it. Due to cooperation agreements, the company should hire at least 9 external contractors in total. For product APPX, the Estimated Revenue per Team (for both company teams and contractor trams) is $100,000, the Development Cost per company Team is $60,000, the Development Cost per External Contractor is $80,000, and the Marketing Cost per Team (for both company teams and contractor trams) is $20,000.",
        "type": "nonlinear-notable",
        "index": 479,
        "length": 2105,
        "var_num": 8
    },
    {
        "question": "Dorian Auto has a $20,000 advertising budget. Dorian can purchase full-page ads in two magazines: Inside Jocks (IJ) and Family Square (FS). An exposure occurs when a person reads a Dorian Auto ad for the first time. The number of exposures generated by each ad in IJ and FS is detailed in the following Table. Each full-page ad in either magazine costs $1,000. Assume there is no overlap in the readership of the two magazines. Formulate an LP to maximize the number of exposures that Dorian can obtain with limited advertising funds.\n\nTable (The number of exposures generated by each ad):\n| Magazine | Ads 1-6 | Ads 7-10 | Ads 11-15 | Ads 16+ |\n| -------- | -------- | -------- | --------- | ------- |\n| IJ       | 10,000   | 3,000    | 2,500     | 0       |\n| FS       | 8,000    | 6,000    | 2,000     | 0       |\n\nFor example, 8 ads in IJ would generate 6(10,000) + 2(3,000) = 66,000 exposures, and 13 ads in FS would generate 4(8,000) + 8(6,000) + 1(2,000) = 82,000 exposures.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal number of ads to purchase in each magazine. Let's denote the number of ads yielding 10,000 exposures in IJ as IJ_10, the number of ads yielding 3,000 exposures in IJ as IJ_3, the number of ads yielding 2,500 exposures in IJ as IJ_2p5, the number of ads yielding 8,000 exposures in FS as FS_8, the number of ads yielding 6,000 exposures in FS as FS_6, and the number of ads yielding 2,000 exposures in FS as FS_2.\n```Variables\nIJ_10 //number of IJ ads yielding 10,000 exposures\nIJ_3 //number of IJ ads yielding 3,000 exposures\nIJ_2p5 //number of IJ ads yielding 2,500 exposures\nFS_8 //number of FS ads yielding 8,000 exposures\nFS_6 //number of FS ads yielding 6,000 exposures\nFS_2 //number of FS ads yielding 2,000 exposures\nIJ_10, IJ_3, IJ_2p5, FS_8, FS_6, FS_2 >= 0 and they are integers // non-negativive integer variables\n```\n\n# Objective Function:\nWe want to maximize the number of exposures that Dorian can obtain with limited advertising funds. The number of exposures generated by each ad in IJ and FS is given. The total number of exposures is the sum of the number of exposures generated by each type of ad multiplied by the number of ads purchased in that type. So the objective function is 10 * IJ_10 + 3 * IJ_3 + 2.5 * IJ_2p5 + 8 * FS_8 + 6 * FS_6 + 2 * FS_2.\n```Objective Function\nMaximize: 10 * IJ_10 + 3 * IJ_3 + 2.5 * IJ_2p5 + 8 * FS_8 + 6 * FS_6 + 2 * FS_2\n```\n\n# Constraints:\nWe have several constraints to consider:\n1. The maximum advertising budget is $20,000, so the total cost of the ads purchased in IJ and FS should not exceed this budget. The cost of each ad is $1,000. So the constraint is IJ_10 + IJ_3 + IJ_2p5 + FS_8 + FS_6 + FS_2 <= 20.\n2. There are limits on the number of ads that can be purchased in each category. The maximum number of ads yielding 10,000 exposures in IJ is 6, so the constraint is IJ_10 <= 6. The maximum number of ads yielding 3,000 exposures in IJ is 4, so the constraint is IJ_3 <= 4. The maximum number of ads yielding 2,500 exposures in IJ is 5, so the constraint is IJ_2p5 <= 5. The maximum number of ads yielding 8,000 exposures in FS is 4, so the constraint is FS_8 <= 4. The maximum number of ads yielding 6,000 exposures in FS is 8, so the constraint is FS_6 <= 8. The maximum number of ads yielding 2,000 exposures in FS is 3, so the constraint is FS_2 <= 3.\n```Constraints\nIJ_10 + IJ_3 + IJ_2p5 + FS_8 + FS_6 + FS_2 <= 20 //maximum advertising budget\nIJ_10 <= 6 //maximum number of IJ ads yielding 10,000 exposures\nIJ_3 <= 4 //maximum number of IJ ads yielding 3,000 exposures\nIJ_2p5 <= 5 //maximum number of IJ ads yielding 2,500 exposures\nFS_8 <= 4 //maximum number of FS ads yielding 8,000 exposures\nFS_6 <= 8 //maximum number of FS ads yielding 6,000 exposures\nFS_2 <= 3 //maximum number of FS ads yielding 2,000 exposures\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nIJ_10 = LpVariable(\"IJ_10\", lowBound=0, upBound=6, cat='Integer')\nIJ_3 = LpVariable(\"IJ_3\", lowBound=0, upBound=4, cat='Integer')\nIJ_2p5 = LpVariable(\"IJ_2p5\", lowBound=0, upBound=5, cat='Integer')\nFS_8 = LpVariable(\"FS_8\", lowBound=0, upBound=4, cat='Integer')\nFS_6 = LpVariable(\"FS_6\", lowBound=0, upBound=8, cat='Integer')\nFS_2 = LpVariable(\"FS_2\", lowBound=0, upBound=3, cat='Integer')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeExposures\", LpMaximize)\n\n# Define the objective function\nproblem += 10000 * IJ_10 + 3000 * IJ_3 + 2500 * IJ_2p5 + 8000 * FS_8 + 6000 * FS_6 + 2000 * FS_2\n\n# Define the constraints\nproblem += IJ_10 + IJ_3 + IJ_2p5 + FS_8 + FS_6 + FS_2 <= 20\nproblem += IJ_10 <= 6\nproblem += IJ_3 <= 4\nproblem += IJ_2p5 <= 5\nproblem += FS_8 <= 4\nproblem += FS_6 <= 8\nproblem += FS_2 <= 3\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of IJ ads yielding 10,000 exposures:\", IJ_10.value())\nprint(\"The number of IJ ads yielding 3,000 exposures:\", IJ_3.value())\nprint(\"The number of IJ ads yielding 2,500 exposures:\", IJ_2p5.value())\nprint(\"The number of FS ads yielding 8,000 exposures:\", FS_8.value())\nprint(\"The number of FS ads yielding 6,000 exposures:\", FS_6.value())\nprint(\"The number of FS ads yielding 2,000 exposures:\", FS_2.value())\nprint(\"The maximum number of exposures:\", value(problem.objective))\n",
        "results": {
            "The number of IJ ads yielding 10,000 exposures": "6.0",
            "The number of IJ ads yielding 3,000 exposures": "2.0",
            "The number of IJ ads yielding 2,500 exposures": "0.0",
            "The number of FS ads yielding 8,000 exposures": "4.0",
            "The number of FS ads yielding 6,000 exposures": "8.0",
            "The number of FS ads yielding 2,000 exposures": "0.0",
            "The maximum number of exposures": "146000.0"
        },
        "type": "linear-table",
        "index": 480,
        "length": 981,
        "var_num": 6
    },
    {
        "question": "A woman has $5000 to invest in her sisters' companies. She can invest in her younger sister's company and her elder sister's company. Each dollar invested in her younger sister's company yields a profit of $0.05 while each dollar invested in her elder sister's company yields a profit of $0.08. She wants to invest a minimum of 40% of her investment into her younger sister's company and at least $2000 in her elder sister's company. How much money should she invest in each to maximize her profit?",
        "formulation": "{\"variable\": [{\"description\": \"amount invested in younger sister's company\", \"name\": \"x\"}, {\"description\": \"amount invested in elder sister's company\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit from investment\", \"function\": \"0.05x + 0.08y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"total investment constraint\", \"function\": \"x + y <= 5000\"}, {\"description\": \"minimum investment in younger sister's company\", \"function\": \"x >= 0.4 * (x + y)\"}, {\"description\": \"minimum investment in elder sister's company\", \"function\": \"y >= 2000\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\namount_younger_sister = LpVariable(\"AmountInvestedInYoungerSister\", lowBound=0, cat='Continuous') # amount invested in younger sister's company\namount_elder_sister = LpVariable(\"AmountInvestedInElderSister\", lowBound=0, cat='Continuous') # amount invested in elder sister's company\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"InvestmentProblem\", LpMaximize)\n\n# Define the objective function\nobjective = 0.05 * amount_younger_sister + 0.08 * amount_elder_sister\nproblem += objective # maximize the profit from investment\n\n# Define the constraints\nproblem += amount_younger_sister + amount_elder_sister <= 5000 # total investment constraint\nproblem += amount_younger_sister >= 0.4 * (amount_younger_sister + amount_elder_sister) # minimum investment in younger sister's company\nproblem += amount_elder_sister >= 2000 # minimum investment in elder sister's company\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The amount to invest in the younger sister's company:\", amount_younger_sister.value())\nprint(\"The amount to invest in the elder sister's company:\", amount_elder_sister.value())\nprint(\"The maximum profit from the investment:\", objective.value())\n",
        "results": {
            "The amount to invest in the younger sister's company": "2000.0",
            "The amount to invest in the elder sister's company": "3000.0",
            "The maximum profit from the investment": "340.0"
        },
        "type": "linear-notable",
        "index": 481,
        "length": 498,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA bakery produces four types of pastries: Croissant, Danish, Muffin, and Tart. The bakery needs to decide how many units of each pastry to produce for the upcoming holiday season.\n// variables: {\"number of Croissants\": \"C\", \"number of Danishes\": \"D\", \"number of Muffins\": \"M\", \"number of Tarts\": \"T\"}, where C, D, M, T >= 0 and C, D, M, T are integers.\n\n## Define Objective Function:\nFor Croissant, the selling price is $3, the cost of ingredients is $1, and the production time is 15 minutes. \nFor Danish, the selling price is $4, the cost of ingredients is $2, and the production time is 20 minutes. \nFor Muffin, the selling price is $2.5, the cost of ingredients is $0.8, and the production time is 10 minutes.\nFor Tart, the selling price is $5, the cost of ingredients is $3, and the production time is 25 minutes.\nThe bakery has a limited production capacity and aims to maximize the total profit per hour of production.\n// Profit_C = (3 - 1) * C\n// Profit_D = (4 - 2) * D\n// Profit_M = (2.5 - 0.8) * M\n// Profit_T = (5 - 3) * T\n// So, the objective function is: Maximize (Profit_C + Profit_D + Profit_M + Profit_T) / (15 * C + 20 * D + 10 * M + 25 * T) * 60\n\n## Generate Constraint-1:\nThe bakery has a budget of $500 for ingredients.\n// C + 2 * D + 0.8 * M + 3 * T <= 500\n\n## Generate Constraint-2:\nThe bakery wants to produce at least 50 units of each pastry.\n// C >= 50; D >= 50; M >= 50; T >= 50\n\n## Generate Constraint-3:\nThe bakery has a total production time limit of 80 hours.\n// 15 * C + 20 * D + 10 * M + 25 * T <= 80 * 60",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nC = model.addVar(vtype=\"INTEGER\", name=\"C\") # number of Croissants\nmodel.addCons(C >= 0)\nD = model.addVar(vtype=\"INTEGER\", name=\"D\") # number of Danishes\nmodel.addCons(D >= 0)\nM = model.addVar(vtype=\"INTEGER\", name=\"M\") # number of Muffins\nmodel.addCons(M >= 0)\nT = model.addVar(vtype=\"INTEGER\", name=\"T\") # number of Tarts\nmodel.addCons(T >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj * (15 * C + 20 * D + 10 * M + 25 * T) == (2 * C + 2 * D + 1.7 * M + 2 * T) * 60)\n\n# Add constraints\nmodel.addCons(C + 2 * D + 0.8 * M + 3 * T <= 500)\nmodel.addCons(C >= 50)\nmodel.addCons(D >= 50)\nmodel.addCons(M >= 50)\nmodel.addCons(T >= 50)\nmodel.addCons(15 * C + 20 * D + 10 * M + 25 * T <= 80 * 60)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Croissants: \", model.getVal(C))\n    print(\"Number of Danishes: \", model.getVal(D))\n    print(\"Number of Muffins: \", model.getVal(M))\n    print(\"Number of Tarts: \", model.getVal(T))\n    print(\"Total Profit per Hour: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Croissants": "50.0",
            "Number of Danishes": "50.0",
            "Number of Muffins": "180.0",
            "Number of Tarts": "50.0",
            "Total Profit per Hour": "7.574999999999999"
        },
        "question": "A bakery produces four types of pastries: Croissant, Danish, Muffin, and Tart. The bakery needs to decide how many units of each pastry to produce for the upcoming holiday season. For Danish, the selling price is $4, the cost of ingredients is $2, and the production time is 20 minutes. For Muffin, the selling price is $2.5, the cost of ingredients is $0.8, and the production time is 10 minutes. For Tart, the selling price is $5, the cost of ingredients is $3, and the production time is 25 minutes. The bakery has a limited production capacity and aims to maximize the total profit per hour of production. The bakery has a budget of $500 for ingredients. The bakery wants to produce at least 50 units of each pastry. The bakery has a total production time limit of 80 hours. For Croissant, the selling price is $3, the cost of ingredients is $1, and the production time is 15 minutes.",
        "type": "nonlinear-notable",
        "index": 482,
        "length": 888,
        "var_num": 4
    },
    {
        "question": "Your Lego furniture company makes Tables and Chairs. Below, you are given the starting inventory, selling price, and Bill of Materials (recipe, or construction requirements).  You are to determine the number of Tables and Chairs to be built to maximize revenue. You must make 4 chairs for every table. Large wood per table is 3, small wood per table is 2, large wood per chair is 1, small wood per chair 4, revenue per table is $35, revenue per chair is $29, large wood inventory is 300 and small wood inventory is 500. The goal will be the revenue generated by your production plan - rounded to the nearest whole dollar.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for Tables and Chairs that adhere to the constraints given. Let's denote the number of tables as T and the number of chairs as C.\n```Variables\nT //number of tables to produce \nC //number of chairs to produce\nT, C >= 0 and they are integers //non-negative integer variables\n```\n\n# Objective Function:\nWe want to maximize the revenue generated by the production plan, so the objective function is given by the total revenue. \nThe total revenue is the sum of the revenue from Tables and Chairs, which is 35T + 29C.\nTherefore, the objective function is 35T + 29C.\n```Objective Function\nMaximize: 35T + 29C\n```\n\n# Constraints:\n```Constraints\n3T + C <= 300 //constraint on large wood inventory\n2T + 4C <= 500 //constraint on small wood inventory\n4T = C //constraint on ratio of chairs to tables\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nT = LpVariable(\"Tables\", lowBound=0, cat='Integer') # number of tables to produce\nC = LpVariable(\"Chairs\", lowBound=0, cat='Integer') # number of chairs to produce\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeRevenue\", LpMaximize)\n\n# Define the objective function\nobjective = 35 * T + 29 * C\nproblem += objective # maximize the total revenue\n\n# Define the constraints\nproblem += 3 * T + 1 * C <= 300 # constraint on large wood inventory\nproblem += 2 * T + 4 * C <= 500 # constraint on small wood inventory\nproblem += 4 * T == C # constraint on ratio of chairs to tables\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of tables to produce:\", T.value())\nprint(\"The number of chairs to produce:\", C.value())\nprint(\"The total revenue generated:\", round(objective.value()))\n",
        "results": {
            "The number of tables to produce": "27.0",
            "The number of chairs to produce": "108.0",
            "The total revenue generated": "4077"
        },
        "type": "linear-table",
        "index": 483,
        "length": 621,
        "var_num": 2
    },
    {
        "question": "To graduate from Basketweavers University with a major in operations research, a student must complete at least two math courses, at least two OR courses, and at least two computer courses. Some courses can be used to fulfill more than one requirement, and some courses are prerequisites for others. Minimizes the number of courses needed to satisfy the major requirements.\n\nTable (Courses and their corresponding requirement fulfillment):\n| Course Name                    | Fulfills Math Requirement | Fulfills OR Requirement | Fulfills Computer Requirement | Prerequisite For            |\n| ------------------------------ | ------------------------- | ----------------------- | ----------------------------- | --------------------------- |\n| Calculus                       | Yes                       | No                      | No                            | Business Statistics         |\n| Operations Research            | Yes                       | Yes                     | No                            | None                        |\n| Data Structures                | Yes                       | No                      | Yes                           | None                        |\n| Business Statistics            | Yes                       | Yes                     | No                            | Forecasting                 |\n| Computer Simulation            | No                        | Yes                     | Yes                           | None                        |\n| Introduction to Computer Programming | No                        | No                      | Yes                           | Computer Simulation, Data Structures |\n| Forecasting                    | Yes                       | Yes                     | No                            | None                        |",
        "formulation": "# Define Variables:\nTo formulate the LP, we need to define binary variables to represent whether each course is selected or not. Let's denote the variable for course i as xi.\n```Variables\nx1 // Calculus\nx2 // Operations Research\nx3 // Data Structures\nx4 // Business Statistics\nx5 // Computer Simulation\nx6 // Introduction to Computer Programming\nx7 // Forecasting\nx1, x2, x3, x4, x5, x6, x7 = 0 or 1 // Binary variables\n```\n\n# Objective Function:\nWe want to minimize the number of courses needed to satisfy the major requirements. Since each selected course contributes 1 to the total number of courses needed, the objective function is simply the sum of all the selected courses.\n```Objective Function\nMinimize: x1 + x2 + x3 + x4 + x5 + x6 + x7\n```\n\n# Constraints:\nWe have several constraints to ensure that the minimum requirements for each category are met and that the prerequisites are satisfied.\n```Constraints\nx1 + x2 + x3 + x4 + x7 >= 2 // Minimum number of math courses\nx2 + x4 + x5 + x7 >= 2 // Minimum number of OR courses\nx3 + x5 + x6 >= 2 // Minimum number of computer courses\nx1 >= x4 // Calculus is a prerequisite for business statistics\nx6 >= x5 // Introduction to computer programming is a prerequisite for computer simulation\nx6 >= x3 // Introduction to computer programming is a prerequisite for data structures\nx4 >= x7 // Business statistics is a prerequisite for forecasting\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx1 = LpVariable(\"Calculus\", cat='Binary')\nx2 = LpVariable(\"Operations_Research\", cat='Binary')\nx3 = LpVariable(\"Data_Structures\", cat='Binary')\nx4 = LpVariable(\"Business_Statistics\", cat='Binary')\nx5 = LpVariable(\"Computer_Simulation\", cat='Binary')\nx6 = LpVariable(\"Intro_to_Computer_Programming\", cat='Binary')\nx7 = LpVariable(\"Forecasting\", cat='Binary')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"Course_Selection\", LpMinimize)\n\n# Define the objective function\nproblem += x1 + x2 + x3 + x4 + x5 + x6 + x7\n\n# Define the constraints\nproblem += x1 + x2 + x3 + x4 + x7 >= 2 # Minimum number of math courses\nproblem += x2 + x4 + x5 + x7 >= 2 # Minimum number of OR courses\nproblem += x3 + x5 + x6 >= 2 # Minimum number of computer courses\nproblem += x1 >= x4 # Calculus is a prerequisite for business statistics\nproblem += x6 >= x5 # Introduction to computer programming is a prerequisite for computer simulation\nproblem += x6 >= x3 # Introduction to computer programming is a prerequisite for data structures\nproblem += x4 >= x7 # Business statistics is a prerequisite for forecasting\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The selected courses are:\")\nprint(\"Calculus:\", x1.value())\nprint(\"Operations Research:\", x2.value())\nprint(\"Data Structures:\", x3.value())\nprint(\"Business Statistics:\", x4.value())\nprint(\"Computer Simulation:\", x5.value())\nprint(\"Introduction to Computer Programming:\", x6.value())\nprint(\"Forecasting:\", x7.value())\nprint(\"The minimum number of courses needed:\", value(problem.objective))\n",
        "results": {
            "Calculus": "0.0",
            "Operations Research": "1.0",
            "Data Structures": "1.0",
            "Business Statistics": "0.0",
            "Computer Simulation": "1.0",
            "Introduction to Computer Programming": "1.0",
            "Forecasting": "0.0",
            "The minimum number of courses needed": "4.0"
        },
        "type": "linear-table",
        "index": 484,
        "length": 1813,
        "var_num": 8
    },
    {
        "scenario": "## Define Variables:\nA city is planning to build parks in five different neighborhoods (A, B, C, D, E) to improve the quality of life and environmental sustainability. The cost and benefits of building a park in each neighborhood vary.\n// variables: {\"number of parks in neighborhood A\": \"PA\", \"number of parks in neighborhood B\": \"PB\", \"number of parks in neighborhood C\": \"PC\", \"number of parks in neighborhood D\": \"PD\", \"number of parks in neighborhood E\": \"PE\"}, where PA, PB, PC, PD, PE >= 0 & PA, PB, PC, PD, PE are integers\n\n## Define Objective Function:\nThe cost of building a park in neighborhood A is $50,000, and the environmental benefit is 100 EcoPoints.\nThe cost of building a park in neighborhood B is $70,000, and the environmental benefit is 150 EcoPoints.\nThe cost of building a park in neighborhood C is $60,000, and the environmental benefit is 120 EcoPoints.\nThe cost of building a park in neighborhood D is $80,000, and the environmental benefit is 180 EcoPoints.\nThe cost of building a park in neighborhood E is $90,000, and the environmental benefit is 200 EcoPoints.\nThe city wants to maximize the total environmental benefit while minimizing the total cost. The objective is to maximize the benefit-to-cost ratio.\n// Total cost: Cost = 50000 * PA + 70000 * PB + 60000 * PC + 80000 * PD + 90000 * PE\n// Total environmental benefit: Benefit = 100 * PA + 150 * PB + 120 * PC + 180 * PD + 200 * PE\n// So, the objective function is: Maximize (Benefit / Cost)\n\n## Generate Constraint-1:\nThe city has a budget of $1,000,000 for park construction.\n// 50000 * PA + 70000 * PB + 60000 * PC + 80000 * PD + 90000 * PE <= 1000000\n\n## Generate Constraint-2:\nAt least one park must be built in each neighborhood.\n// PA >= 1; PB >= 1; PC >= 1; PD >= 1; PE >= 1\n\n## Generate Constraint-3:\nThe total number of parks built should not exceed 15.\n// PA + PB + PC + PD + PE <= 15",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nPA = model.addVar(vtype=\"INTEGER\", name=\"PA\") # number of parks in neighborhood A\nmodel.addCons(PA >= 0)\nPB = model.addVar(vtype=\"INTEGER\", name=\"PB\") # number of parks in neighborhood B\nmodel.addCons(PB >= 0)\nPC = model.addVar(vtype=\"INTEGER\", name=\"PC\") # number of parks in neighborhood C\nmodel.addCons(PC >= 0)\nPD = model.addVar(vtype=\"INTEGER\", name=\"PD\") # number of parks in neighborhood D\nmodel.addCons(PD >= 0)\nPE = model.addVar(vtype=\"INTEGER\", name=\"PE\") # number of parks in neighborhood E\nmodel.addCons(PE >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == (100 * PA + 150 * PB + 120 * PC + 180 * PD + 200 * PE) / (50000 * PA + 70000 * PB + 60000 * PC + 80000 * PD + 90000 * PE))\n\n# Add constraints\nmodel.addCons(50000 * PA + 70000 * PB + 60000 * PC + 80000 * PD + 90000 * PE <= 1000000)\nmodel.addCons(PA >= 1)\nmodel.addCons(PB >= 1)\nmodel.addCons(PC >= 1)\nmodel.addCons(PD >= 1)\nmodel.addCons(PE >= 1)\nmodel.addCons(PA + PB + PC + PD + PE <= 15)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Benefit-to-Cost Ratio: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Benefit-to-Cost Ratio": "0.0022121212121212126"
        },
        "question": "A city is planning to build parks in five different neighborhoods (A, B, C, D, E) to improve the quality of life and environmental sustainability. The cost and benefits of building a park in each neighborhood vary. The city wants to maximize the total environmental benefit while minimizing the total cost, aiming to maximize the benefit-to-cost ratio. The cost, environmental benefit, and other constraints for each neighborhood are given in the following Table.\n\n| Neighborhood | Cost per Park | Environmental Benefit (EcoPoints) |\n|--------------|---------------|----------------------------------|\n| A            | $50,000       | 100                              |\n| B            | $70,000       | 150                              |\n| C            | $60,000       | 120                              |\n| D            | $80,000       | 180                              |\n| E            | $90,000       | 200                              |\n\nThe city has a budget of $1,000,000 for park construction. At least one park must be built in each neighborhood. The total number of parks built should not exceed 15.\n",
        "type": "nonlinear-table",
        "index": 485,
        "length": 1109,
        "var_num": 5
    },
    {
        "scenario": "## Define Variables:\nA company has four different production facilities and needs to allocate resources (labor and machinery) to each facility to maximize production efficiency.\n// variables: {\"labor at facility 1\": \"L1\", \"labor at facility 2\": \"L2\", \"labor at facility 3\": \"L3\", \"labor at facility 4\": \"L4\", \"machinery at facility 1\": \"M1\", \"machinery at facility 2\": \"M2\", \"machinery at facility 3\": \"M3\", \"machinery at facility 4\": \"M4\"}, where L1, L2, L3, L4, M1, M2, M3, M4 >= 0 & L1, L2, L3, L4, M1, M2, M3, M4 are integers\n\n## Define Objective Function:\nThe company propose the production efficiency score. The production efficiency score of each facility is determined by a non-linear function that depends on the number of laborers and machinery. The efficiency score function is given by: Efficiency = (L^2 * M) / (L + M), where L is the number of laborers and M is the number of machinery units. The company aims to maximize the total efficiency score across all facilities.\n// The efficiency score at facility 1: E1 = (L1^2 * M1) / (L1 + M1)\n// The efficiency score at facility 2: E2 = (L2^2 * M2) / (L2 + M2)\n// The efficiency score at facility 3: E3 = (L3^2 * M3) / (L3 + M3)\n// The efficiency score at facility 4: E4 = (L4^2 * M4) / (L4 + M4)\n// So, the objective function is: Maximize E1 + E2 + E3 + E4\n// Maximize (L1^2 * M1) / (L1 + M1) + (L2^2 * M2) / (L2 + M2) + (L3^2 * M3) / (L3 + M3) + (L4^2 * M4) / (L4 + M4)\n\n## Generate Constraint-1:\nThe total number of laborers available across all facilities is 100.\n// L1 + L2 + L3 + L4 <= 100\n\n## Generate Constraint-2:\nThe total number of machinery units available across all facilities is 50.\n// M1 + M2 + M3 + M4 <= 50\n\n## Generate Constraint-3:\nEach facility can have a maximum of 30 laborers.\n// L1 <= 30; L2 <= 30; L3 <= 30; L4 <= 30\n\n## Generate Constraint-4:\nEach facility can have a maximum of 20 machinery units.\n// M1 <= 20; M2 <= 20; M3 <= 20; M4 <= 20\n\n## Generate Constraint-5:\nEach facility must have at least 5 laborers and 3 machinery units.\n// L1 >= 5; L2 >= 5; L3 >= 5; L4 >= 5\n// M1 >= 3; M2 >= 3; M3 >= 3; M4 >= 3",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nL1 = model.addVar(vtype=\"INTEGER\", name=\"L1\") # labor at facility 1\nmodel.addCons(L1 >= 0)\nL2 = model.addVar(vtype=\"INTEGER\", name=\"L2\") # labor at facility 2\nmodel.addCons(L2 >= 0)\nL3 = model.addVar(vtype=\"INTEGER\", name=\"L3\") # labor at facility 3\nmodel.addCons(L3 >= 0)\nL4 = model.addVar(vtype=\"INTEGER\", name=\"L4\") # labor at facility 4\nmodel.addCons(L4 >= 0)\nM1 = model.addVar(vtype=\"INTEGER\", name=\"M1\") # machinery at facility 1\nmodel.addCons(M1 >= 0)\nM2 = model.addVar(vtype=\"INTEGER\", name=\"M2\") # machinery at facility 2\nmodel.addCons(M2 >= 0)\nM3 = model.addVar(vtype=\"INTEGER\", name=\"M3\") # machinery at facility 3\nmodel.addCons(M3 >= 0)\nM4 = model.addVar(vtype=\"INTEGER\", name=\"M4\") # machinery at facility 4\nmodel.addCons(M4 >= 0)\n\n# Define objective function\n## Non-linear objective function, need to linearize\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == (L1**2 * M1) / (L1 + M1) + (L2**2 * M2) / (L2 + M2) + (L3**2 * M3) / (L3 + M3) + (L4**2 * M4) / (L4 + M4))\n\n# Add constraints\nmodel.addCons(L1 + L2 + L3 + L4 <= 100)\nmodel.addCons(M1 + M2 + M3 + M4 <= 50)\nmodel.addCons(L1 <= 30)\nmodel.addCons(L2 <= 30)\nmodel.addCons(L3 <= 30)\nmodel.addCons(L4 <= 30)\nmodel.addCons(M1 <= 20)\nmodel.addCons(M2 <= 20)\nmodel.addCons(M3 <= 20)\nmodel.addCons(M4 <= 20)\nmodel.addCons(L1 >= 5)\nmodel.addCons(L2 >= 5)\nmodel.addCons(L3 >= 5)\nmodel.addCons(L4 >= 5)\nmodel.addCons(M1 >= 3)\nmodel.addCons(M2 >= 3)\nmodel.addCons(M3 >= 3)\nmodel.addCons(M4 >= 3)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Total Efficiency Score: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Total Efficiency Score": "949.163898708422"
        },
        "question": "A company has four different production facilities and needs to allocate resources (labor and machinery) to each facility to maximize production efficiency. The total number of laborers available across all facilities is 100. The total number of machinery units available across all facilities is 50. Each facility can have a maximum of 30 laborers. Each facility can have a maximum of 20 machinery units. Each facility must have at least 5 laborers and 3 machinery units. The company propose the production efficiency score. The production efficiency score of each facility is determined by a non-linear function that depends on the number of laborers and machinery. The efficiency score function is given by: Efficiency = (L^2 * M) / (L + M), where L is the number of laborers and M is the number of machinery units. The company aims to maximize the total efficiency score across all facilities.",
        "type": "nonlinear-notable",
        "index": 486,
        "length": 897,
        "var_num": 8
    },
    {
        "question": "A company which manufactures canoes employs 120 employees, each of whom working 30 hours per week. Half of them work in the carpenter department, 20 persons in the plastics department, and the rest of them at the completion department. The company manufactures the simple canoes with net unit profit _ 7 and the luxury canoes with corresponding profit _ 10. A simple canoe requires 4.5 hours in the carpenter department and two hours in each of the other two departments. The working hours for each luxury canoe are 5, 1 and 4 at the carpenter department, plastics department and completion department respectively. Marketing calculations have shown that not less than 1/3 and not more than 2/3 of the total number of the canoes should be luxurious. How will the company maximize its overall net profit?",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for simple canoes and luxury canoes that adhere to the constraints given. Let's denote the number of simple canoes as S and the number of luxury canoes as L.\n```Variables\nS //number of simple canoes to produce \nL //number of luxury canoes to produce\nS, L >= 0 and they are integers //non-negative integer variables\n```\n\n# Objective Function:\nWe want to maximize the overall net profit of the company. The net profit of a simple canoe is 7 and the net profit of a luxury canoe is 10. Therefore, the objective function is:\n```Objective\nMaximize 7S + 10L\n```\n\n# Constraints:\nThe constraints are the following:\n1. The total number of work hours in the carpenter department is 120/2*30 = 1800 hours.\n2. The total number of work hours in the plastics department is 20*30 = 600 hours.\n3. The total number of work hours in the completion department is (120-120/2-20)*30 = 1200 hours.\n4. The number of luxury canoes should be between 1/3 and 2/3 of the total number of canoes.\n```Constraints\n4.5S + 5L <= 1800\n2S + L <= 600\n2S + 4L <= 1200\n1/3*(S + L) <= L <= 2/3*(S + L)\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nS = LpVariable(\"SimpleCanoes\", lowBound=0, cat='Integer') # number of simple canoes\nL = LpVariable(\"LuxuryCanoes\", lowBound=0, cat='Integer') # number of luxury canoes\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CanoesProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 7 * S + 10 * L\nproblem += objective # maximize the overall net profit\n\n# Define the constraints\nproblem += 4.5 * S + 5 * L <= 1800 # carpenter department hours\nproblem += 2 * S + 1 * L <= 600 # plastics department hours\nproblem += 2 * S + 4 * L <= 1200 # completion department hours\nproblem += L >= 1/3 * (S + L) # at least 1/3 of the canoes should be luxury\nproblem += L <= 2/3 * (S + L) # at most 2/3 of the canoes should be luxury\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of simple canoes to produce:\", S.value())\nprint(\"The number of luxury canoes to produce:\", L.value())\nprint(\"The maximum overall net profit:\", objective.value())\n",
        "results": {
            "The number of simple canoes to produce": "150.0",
            "The number of luxury canoes to produce": "225.0",
            "The maximum overall net profit": "3300.0"
        },
        "type": "linear-notable",
        "index": 487,
        "length": 803,
        "var_num": 2
    },
    {
        "question": "You need to construct a fence around an area of 1600 ft. What are the dimensions of the rectangular pen to minimize the amount of material needed?",
        "scenario": "## Define Variables:\nYou need to construct a rectangular fence.\n// variables: {\"length of the rectangle\": \"L\", \"width of the rectangle\": \"W\"}, where L, W >= 0\n\n## Define Objective Function:\nWhat are the dimensions of the rectangular pen to minimize the amount of material needed?\n// The amount of material needed is the perimeter of the rectangle. The perimeter of a rectangle is given by 2L + 2W. \n// Therefore, the objective function is: Minimize 2L + 2W\n\n## Generate Constraint-1:\nThe area of the rectangle must be at least 1600 ft.\n// L * W >= 1600",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nL = model.addVar(vtype=\"CONTINUOUS\", name=\"L\") # length of the rectangle\nW = model.addVar(vtype=\"CONTINUOUS\", name=\"W\") # width of the rectangle\n\n# Define objective function\nmodel.setObjective(2*L + 2*W, \"minimize\")\n\n# Add constraints\nmodel.addCons(L * W >= 1600)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The length of the rectangle:\", model.getVal(L))\n    print(\"The width of the rectangle:\", model.getVal(W))\n    print(\"The amount of material needed: \", 2*model.getVal(L) + 2*model.getVal(W))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The length of the rectangle": "40.000",
            "The width of the rectangle": "40.000",
            "The amount of material needed": "160"
        },
        "type": "nonlinear-notable",
        "index": 488,
        "length": 146,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA company plans to operate three types of transportation services, each serving a different type of cargo (Electronics, Textiles, and Food). The company needs to determine the number of vehicles to allocate for each cargo type, and the number of trips in each type of service per vehicle. For ease of management, the company decided to have the same number of trips per vehicle for the same type of service.\n// variables: {\"number of vehicles for Electronics\": \"ElectronicsVehicles\", \"number of vehicles for Textiles\": \"TextilesVehicles\", \"number of vehicles for Food\": \"FoodVehicles\", \"number of trips per vehicle for Electronics\": \"ElectronicsTripsPerVehicle\", \"number of trips per vehicle for Textiles\": \"TextilesTripsPerVehicle\", \"number of trips per vehicle for Food\": \"FoodTripsPerVehicle\"}, where ElectronicsVehicles, TextilesVehicles, FoodVehicles, ElectronicsTripsPerVehicle, TextilesTripsPerVehicle, FoodTripsPerVehicle >= 0 and ElectronicsVehicles, TextilesVehicles, FoodVehicles, ElectronicsTripsPerVehicle, TextilesTripsPerVehicle, FoodTripsPerVehicle are integers.\n\n## Define Objective Function:\nFor Electronics, the transportation cost per trip is $100, and the revenue per trip is $200.\nFor Textiles, the transportation cost per trip is $80, and the revenue per trip is $160.\nFor Food, the transportation cost per trip is $120, and the revenue per trip is $240.\nThe company wants to maximize the total profit per day.\n// Profit_Electronics = ElectronicsVehicles * ElectronicsTripsPerVehicle * (200 - 100)\n// Profit_Textiles = TextilesVehicles * TextilesTripsPerVehicle * (160 - 80)\n// Profit_Food = FoodVehicles * FoodTripsPerVehicle * (240 - 120)\n// So, the objective function is: Maximize (Profit_Electronics + Profit_Textiles + Profit_Food)\n\n## Generate Constraint-1:\nThe company has a total of 20 vehicles available.\n// ElectronicsVehicles + TextilesVehicles + FoodVehicles <= 20\n\n## Generate Constraint-2:\nThe company has a budget of $1500 for transportation costs per day.\n// 100 * ElectronicsVehicles * ElectronicsTripsPerVehicle + 80 * TextilesVehicles * TextilesTripsPerVehicle + 120 * FoodVehicles * FoodTripsPerVehicle <= 1500\n\n## Generate Constraint-3:\nThe company has a daily operational capacity of 100 trips in terms of the number of trips it can handle per day.\n// 5 * ElectronicsVehicles * ElectronicsTripsPerVehicle + 6 * TextilesVehicles * TextilesTripsPerVehicle + 4 * FoodVehicles * FoodTripsPerVehicle <= 100\n\n## Generate Constraint-4:\nFor Electronics, each vehicle can make at most 5 trips per day. For Textiles, each vehicle can make at most 6 trips per day. For Food, each vehicle can make at most 4 trips per day.\n// ElectronicsTripsPerVehicle <= 5; TextilesTripsPerVehicle <= 6; FoodTripsPerVehicle <= 4",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nElectronicsVehicles = model.addVar(vtype=\"INTEGER\", name=\"ElectronicsVehicles\") # number of vehicles for Electronics\nmodel.addCons(ElectronicsVehicles >= 0)\nTextilesVehicles = model.addVar(vtype=\"INTEGER\", name=\"TextilesVehicles\") # number of vehicles for Textiles\nmodel.addCons(TextilesVehicles >= 0)\nFoodVehicles = model.addVar(vtype=\"INTEGER\", name=\"FoodVehicles\") # number of vehicles for Food\nmodel.addCons(FoodVehicles >= 0)\nElectronicsTripsPerVehicle = model.addVar(vtype=\"INTEGER\", name=\"ElectronicsTripsPerVehicle\") # number of trips per vehicle for Electronics\nmodel.addCons(ElectronicsTripsPerVehicle >= 0)\nTextilesTripsPerVehicle = model.addVar(vtype=\"INTEGER\", name=\"TextilesTripsPerVehicle\") # number of trips per vehicle for Textiles\nmodel.addCons(TextilesTripsPerVehicle >= 0)\nFoodTripsPerVehicle = model.addVar(vtype=\"INTEGER\", name=\"FoodTripsPerVehicle\") # number of trips per vehicle for Food\nmodel.addCons(FoodTripsPerVehicle >= 0)\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == ElectronicsVehicles * ElectronicsTripsPerVehicle * (200 - 100) + TextilesVehicles * TextilesTripsPerVehicle * (160 - 80) + FoodVehicles * FoodTripsPerVehicle * (240 - 120))\n\n# Add constraints\nmodel.addCons(ElectronicsVehicles + TextilesVehicles + FoodVehicles <= 20)\nmodel.addCons(100 * ElectronicsVehicles * ElectronicsTripsPerVehicle + 80 * TextilesVehicles * TextilesTripsPerVehicle + 120 * FoodVehicles * FoodTripsPerVehicle <= 1500)\nmodel.addCons(5 * ElectronicsVehicles * ElectronicsTripsPerVehicle + 6 * TextilesVehicles * TextilesTripsPerVehicle + 4 * FoodVehicles * FoodTripsPerVehicle <= 100)\nmodel.addCons(ElectronicsTripsPerVehicle <= 5)\nmodel.addCons(TextilesTripsPerVehicle <= 6)\nmodel.addCons(FoodTripsPerVehicle <= 4)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Total Profit per day: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Total Profit per day": "1500.0"
        },
        "question": "A company plans to operate three types of transportation services, each serving a different type of cargo (Electronics, Textiles, and Food). The company needs to determine the number of vehicles to allocate for each cargo type, and the number of trips in each type of service per vehicle. For ease of management, the company decided to have the same number of trips per vehicle for the same type of service. The transportation cost per trip and the revenue per trip for each cargo type are given in the following Table.\n\n| Cargo Type | Transportation Cost per Trip | Revenue per Trip |\n|------------|------------------------------|------------------|\n| Electronics | $100                         | $200             |\n| Textiles   | $80                          | $160             |\n| Food       | $120                         | $240             |\n\nThe company has a total of 20 vehicles available. The company has a budget of $1500 for transportation costs per day. The company has a daily operational capacity of 100 trips in terms of the number of trips it can handle per day. For Electronics, each vehicle can make at most 5 trips per day. For Textiles, each vehicle can make at most 6 trips per day. For Food, each vehicle can make at most 4 trips per day. The company wants to maximize the total profit per day.\n",
        "type": "nonlinear-table",
        "index": 489,
        "length": 1316,
        "var_num": 6
    },
    {
        "question": "There are six cities (cities 1-6) in Kilroy County. The county must determine where to build fire stations. The county wants to build the minimum number of fire stations needed to ensure that at least one fire station is within 15 minutes (driving time) of each city. The times (in minutes) required to drive between the cities in Kilroy County are shown in the following Table. Formulate a linear problem that will tell Kilroy how many fire stations should be built and where they should be located.\n\nTable (Time Required to Travel between Cities in Kilroy County):\n| From / To | City 1 | City 2 | City 3 | City 4 | City 5 | City 6 |\n|-----------|--------|--------|--------|--------|--------|--------|\n| City 1    | 0      | 10     | 20     | 30     | 30     | 20     |\n| City 2    | 10     | 0      | 25     | 35     | 20     | 10     |\n| City 3    | 20     | 25     | 0      | 15     | 30     | 20     |\n| City 4    | 30     | 35     | 15     | 0      | 15     | 25     |\n| City 5    | 30     | 20     | 30     | 15     | 0      | 14     |\n| City 6    | 20     | 10     | 20     | 25     | 14     | 0      |",
        "formulation": "# Define Variables:\nWe need to determine whether a fire station should be built in each city. Let's denote the decision variables as follows:\n```Variables\nx_i = 0 or 1, i = 1, 2, 3, 4, 5, 6 // Binary variable ,Represents whether a fire station should be built in City i\n```\nwhere i represents the city number. For example, x1 represents whether a fire station should be built in City 1. If x1=1, it means a fire station should be built in City 1. If x1=0, it means no fire station should be built in City 1.\n\n# Objective Function:\nWe want to minimize the number of fire stations built while ensuring that each city has at least one fire station within a 15-minute driving distance. Therefore, the objective function is:\n```Objective Function\nMinimize: x1 + x2 + x3 + x4 + x5 + x6\n```\n\n# Constraints:\nNext, we need to formulate the constraints that ensure each city is within 15 minutes of at least one fire station. This can be done by looking at each city individually and considering the travel times to all other cities. \nFor example, for city 1, the time required to travel to ctiy 1-6 are 0 10 20 30 30 20. So, only city 2 is within 15 minutes of city 1. Therefore, we need to ensure that either city 1 or city 2 has a fire station. This can be expressed as:\nx1 + x2 >= 1\nSimilarly, for city 2, the time required to travel to ctiy 1-6 are 10 0 25 35 20 10. So, only city 1 and city 6 are within 15 minutes of city 2. Therefore, we need to ensure that either city 1, city 2, or city 6 has a fire station. This can be expressed as:\nx1 + x2 + x6 >= 1\nSimilarly, for city 3, the time required to travel to ctiy 1-6 are 20 25 0 15 30 20. So, only city 4 is within 15 minutes of city 3. Therefore, we need to ensure that either city 3 or city 4 has a fire station. This can be expressed as:\nx3 + x4 >= 1\nSimilarly, for city 4, the time required to travel to ctiy 1-6 are 30 35 15 0 15 25. So, only city 3, city 4, and city 5 are within 15 minutes of city 4. Therefore, we need to ensure that either city 3, city 4, or city 5 has a fire station. This can be expressed as:\nx3 + x4 + x5 >= 1\nSimilarly, for city 5, the time required to travel to ctiy 1-6 are 30 20 30 15 0 14. So, only city 4, city 5, and city 6 are within 15 minutes of city 5. Therefore, we need to ensure that either city 4, city 5, or city 6 has a fire station. This can be expressed as:\nx4 + x5 + x6 >= 1\nSimilarly, for city 6, the time required to travel to ctiy 1-6 are 20 10 20 25 14 0. So, only city 2, city 5, and city 6 are within 15 minutes of city 6. Therefore, we need to ensure that either city 2, city 5, or city 6 has a fire station. This can be expressed as:\nx2 + x5 + x6 >= 1\nPutting it all together, we get the following linear programming problem:\n```Constraints\nx1 + x2 >= 1\nx1 + x2 + x6 >= 1\nx3 + x4 >= 1\nx3 + x4 + x5 >= 1\nx4 + x5 + x6 >= 1\nx2 + x5 + x6 >= 1\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx1 = LpVariable(\"x1\", cat='Binary')\nx2 = LpVariable(\"x2\", cat='Binary')\nx3 = LpVariable(\"x3\", cat='Binary')\nx4 = LpVariable(\"x4\", cat='Binary')\nx5 = LpVariable(\"x5\", cat='Binary')\nx6 = LpVariable(\"x6\", cat='Binary')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FireStationLocation\", LpMinimize)\n\n# Define the objective function\nproblem += x1 + x2 + x3 + x4 + x5 + x6\n\n# Define the constraints\nproblem += x1 + x2 >= 1\nproblem += x1 + x2 + x6 >= 1\nproblem += x3 + x4 >= 1\nproblem += x3 + x4 + x5 >= 1\nproblem += x4 + x5 + x6 >= 1\nproblem += x2 + x5 + x6 >= 1\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The optimal number of fire stations to be built is:\", value(problem.objective))\nprint(\"Locations for fire stations:\")\nprint(\"City 1:\", x1.value())\nprint(\"City 2:\", x2.value())\nprint(\"City 3:\", x3.value())\nprint(\"City 4:\", x4.value())\nprint(\"City 5:\", x5.value())\nprint(\"City 6:\", x6.value())\n",
        "results": {
            "The optimal number of fire stations to be built is": "2.0",
            "Whether a fire stations should be built in City 1": "0.0",
            "Whether a fire stations should be built in City 2": "1.0",
            "Whether a fire stations should be built in City 3": "0.0",
            "Whether a fire stations should be built in City 4": "1.0",
            "Whether a fire stations should be built in City 5": "0.0",
            "Whether a fire stations should be built in City 6": "0.0"
        },
        "type": "linear-table",
        "index": 490,
        "length": 1110,
        "var_num": 7
    },
    {
        "question": "The Southfork Feed Company makes a feed mix from four ingredients-oats, corn, soybeans, and a vitamin supplement. The company has 300 pounds of oats, 400 pounds of corn, 200 pounds of soybeans, and 100 pounds of vitamin supplements for the mix. The company has the following requirements for the mix: At least 30% of the mix must be soybeans. (constraint 1) At least 20% of the mix must be the vitamin supplement. (constraint 2) The ratio of corn to oats cannot exceed 2 to 1. (constraint 3) The amount of oats cannot exceed the amount of soybeans. (constraint 4) The mix must weigh at least 500 pounds. (constraint 5) A pound of oats costs $0.50; a pound of corn, $1.20; a pound of soybeans, $0.60; a pound of vitamin supplement, $2.00. The feed company wants to know the number of pounds of each ingredient to put in the mix in order to minimize the total costs.",
        "formulation": "# Variables:\nLet's denote the number of pounds of oats as O, the number of pounds of corn as C, the number of pounds of soybeans as S, and the number of pounds of vitamin supplement as V.\n```Variables\nO //number of pounds of oats\nC //number of pounds of corn\nS //number of pounds of soybeans\nV //number of pounds of vitamin supplement\nO, C, S, V >= 0\n```\n\n# Objective Function:\nWe want to minimize the total cost, so the objective function (total cost) is given by the sum of the cost of each ingredient multiplied by its respective weight. The cost of oats is $0.50 per pound * O pounds. The cost of corn is $1.20 per pound * C pounds. The cost of soybeans is $0.60 per pound * S pounds. The cost of the vitamin supplement is $2.00 per pound * V pounds. \nSo the objective function is 0.50O + 1.20C + 0.60S + 2.00V.\n```Objective Function\nMinimize: 0.50O + 1.20C + 0.60S + 2.00V\n```\n\n# Constraints:\n```Constraints\nS >= 0.3(O + C + S + V) //At least 30% of the mix must be soybeans\nV >= 0.2(O + C + S + V) //At least 20% of the mix must be the vitamin supplement\n2C <= O //The ratio of corn to oats cannot exceed 2 to 1\nO <= S //The amount of oats cannot exceed the amount of soybeans\nO + C + S + V >= 500 //The mix must weigh at least 500 pounds\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nO = LpVariable(\"Oats\", lowBound=0, cat='Continuous') # number of pounds of oats\nC = LpVariable(\"Corn\", lowBound=0, cat='Continuous') # number of pounds of corn\nS = LpVariable(\"Soybeans\", lowBound=0, cat='Continuous') # number of pounds of soybeans\nV = LpVariable(\"VitaminSupplement\", lowBound=0, cat='Continuous') # number of pounds of vitamin supplement\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FeedMixProblem\", LpMinimize)\n\n# Define the objective function\nobjective = 0.50 * O + 1.20 * C + 0.60 * S + 2.00 * V\nproblem += objective # minimize the total cost\n\n# Define the constraints\nproblem += S >= 0.3 * (O + C + S + V) # At least 30% of the mix must be soybeans\nproblem += V >= 0.2 * (O + C + S + V) # At least 20% of the mix must be the vitamin supplement\nproblem += C <= 2 * O # The ratio of corn to oats cannot exceed 2 to 1\nproblem += O <= S # The amount of oats cannot exceed the amount of soybeans\nproblem += O + C + S + V >= 500 # The mix must weigh at least 500 pounds\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of pounds of oats:\", O.value())\nprint(\"The number of pounds of corn:\", C.value())\nprint(\"The number of pounds of soybeans:\", S.value())\nprint(\"The number of pounds of vitamin supplement:\", V.value())\nprint(\"The total cost of the mix:\", objective.value())\n",
        "results": {
            "The number of pounds of oats": "200.0",
            "The number of pounds of corn": "0.0",
            "The number of pounds of soybeans": "200.0",
            "The number of pounds of vitamin supplement": "100.0",
            "The total cost of the mix": "420.0"
        },
        "type": "linear-notable",
        "index": 491,
        "length": 864,
        "var_num": 4
    },
    {
        "question": "A researcher is outsourcing annotations and has two options: a specialized third-party or a common third-party annotation company. The specialized company can annotate at a rate of 60 images per hour whereas the common company can annotate at a rate of 40 images per hour. However, the specialized company charges $100 per hour and the common company charges $72 per hour. The researcher has deadlines to meet and must complete a dataset of at least 10,000 images. They also have some special images that only the specialized company can annotate. Therefore, at least a third of work must be allocated to the specialized company. How should the researcher distribute the annotations to the two companies to minimize the cost of annotating the whole dataset?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nhours_specialized = LpVariable(\"hours_specialized\", lowBound=0, cat='Continuous') # hours for specialized company\nhours_common = LpVariable(\"hours_common\", lowBound=0, cat='Continuous') # hours for common company\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"AnnotationCostMinimization\", LpMinimize)\n\n# Define the objective function\nobjective = 100 * hours_specialized + 72 * hours_common\nproblem += objective # minimize the total cost\n\n# Define the constraints\nproblem += 60 * hours_specialized + 40 * hours_common >= 10000 # at least 10,000 images\nproblem += 3 * hours_specialized >= hours_specialized + hours_common # at least a third of work to the specialized company\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The hours for the specialized company:\", hours_specialized.value())\nprint(\"The hours for the common company:\", hours_common.value())\nprint(\"The total cost:\", objective.value())",
        "results": {
            "The hours for the specialized company": "166.66667",
            "The hours for the common company": "0.0",
            "The total cost": "16666.667"
        },
        "formulation": "minimize 100x+72y\nSubject to: \n60x+40y >= 10000\nx >= 3 (end)",
        "type": "linear-notable",
        "index": 492,
        "length": 757,
        "var_num": 2
    },
    {
        "question": "A shoe company supplies shoes to stores via vans and trucks. A van can transport 50 pairs of shoes while a truck can transport 100 pairs of shoes. The company must supply a minimum of 2000 pairs of shoes around the city. Since most stores are small, the number of trucks used cannot exceed the number of vans used.  Find the minimum number of vans that can be used?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_van_used = LpVariable(\"NumVanUsed\", lowBound=0, cat='Integer') # number of vans used\nnum_truck_used = LpVariable(\"NumTruckUsed\", lowBound=0, cat='Integer') # number of trucks used\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ShoeSupply\", LpMinimize)\n\n# Define the objective function\nobjective = num_van_used\nproblem += objective # minimize the number of vans used\n\n# Define the constraints\nproblem += 50 * num_van_used + 100 * num_truck_used >= 2000 # at least 2000 pairs of shoes must be supplied\nproblem += num_truck_used <= num_van_used # number of trucks cannot exceed the number of vans\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of vans used:\", num_van_used.value())\nprint(\"The number of trucks used:\", num_truck_used.value())",
        "results": {
            "The number of vans used": "14.0",
            "The number of trucks used": "13.0"
        },
        "formulation": "minimize x\nSubject to: \n50x+100y >= 2000\ny <= x (end)",
        "type": "linear-notable",
        "index": 493,
        "length": 365,
        "var_num": 1
    },
    {
        "question": "Glueco produces three types of glue on two different production lines. Each line can be utilized by up to seven workers at a time. Workers are paid $500 per week on production line 1, and $900 per week on production line 2. A week of production costs $1,000 to set up production line 1 and $2,000 to set up production line 2. During a week on a production line, each worker produces the number of units of glue shown in the following Table. Each week, at least 120 units of glue 1, at least 150 units of glue 2, and at least 200 units of glue 3 must be produced. Formulate an LP to minimize the total cost of meeting weekly demands.\n\nTable (The number of units of glue produced by each worker on each production line during a week):\n| Glue Type | Production Line 1 | Production Line 2 |\n| ---------- | ----------------- | ----------------- |\n| Glue 1     | 20                | 50                |\n| Glue 2     | 30                | 35                |\n| Glue 3     | 40                | 45                |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal number of workers working on each production line. Let's denote the number of workers working on production line 1 as x and the number of workers working on production line 2 as y.\n```Variables\nx // number of workers working on production line 1\ny // number of workers working on production line 2\nx, y >= 0 and they are integers // non-negativity integer variables\n```\n\n# Objective Function:\nWe want to minimize the total cost of meeting weekly demands. The total cost consists of the cost of workers' salaries and the setup cost for each production line. The cost of workers' salaries is $500 per week for production line 1 and $900 per week for production line 2. The setup cost for production line 1 is $1,000 and the setup cost for production line 2 is $2,000. Therefore, the objective function is given by the sum of these costs: 500x + 900y + 1000 + 2000.\n```Objective Function\nMinimize: 500x + 900y + 3000\n```\n\n# Constraints:\nWe have several constraints that need to be satisfied:\n- The minimum number of units of glue 1, glue 2, and glue 3 that must be produced each week: 20x + 50y >= 120, 30x + 35y >= 150, and 40x + 45y >= 200.\n- The number of workers working on each production line cannot exceed 7: x <= 7 and y <= 7.\n- Non-negativity constraint: x, y >= 0.\n```Constraints\n20x + 50y >= 120 // minimum number of glue 1\n30x + 35y >= 150 // minimum number of glue 2\n40x + 45y >= 200 // minimum number of glue 3\nx <= 7 // maximum number of workers on production line 1\ny <= 7 // maximum number of workers on production line 2\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"WorkersOnLine1\", lowBound=0, upBound=7, cat='Integer') # number of workers on production line 1\ny = LpVariable(\"WorkersOnLine2\", lowBound=0, upBound=7, cat='Integer') # number of workers on production line 2\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimizeProductionCost\", LpMinimize)\n\n# Define the objective function\nobjective = 500 * x + 900 * y + 3000\nproblem += objective # minimize the total cost\n\n# Define the constraints\nproblem += 20 * x + 50 * y >= 120 # minimum number of glue 1\nproblem += 30 * x + 35 * y >= 150 # minimum number of glue 2\nproblem += 40 * x + 45 * y >= 200 # minimum number of glue 3\nproblem += x <= 7 # maximum number of workers on production line 1\nproblem += y <= 7 # maximum number of workers on production line 2\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of workers on production line 1:\", x.value())\nprint(\"The number of workers on production line 2:\", y.value())\nprint(\"The total cost:\", objective.value())\n",
        "results": {
            "The number of workers on production line 1": "4.0",
            "The number of workers on production line 2": "1.0",
            "The total cost": "5900.0"
        },
        "type": "linear-table",
        "index": 494,
        "length": 1006,
        "var_num": 2
    },
    {
        "question": "A hospital prepares batches of medication patches and anti-biotic creams. Each medication patch requires 3 minutes to prepare and 5 units of materials. Each anti-biotic cream requires 5 minutes to prepare and 6 units of materials. Since anti-biotic creams are used more often, there must be at least twice as many anti-biotic creams as medication patches. Due to storage reasons, the hospital can make at most 100 batches of medication patches and anti-biotic creams in total. The hospital has available 400 minutes of staff to spare and 530 units of materials. If each batch of medication patches can treat 3 people and each batch of anti-biotic cream can treat 2 people, how many batches of each should be made to maximize the number of people that can be treated?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_patches = LpVariable(\"NumPatches\", lowBound=0, cat='Integer') # number of medication patches\nnum_creams = LpVariable(\"NumCreams\", lowBound=0, cat='Integer') # number of anti-biotic creams\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"HospitalBatches\", LpMaximize)\n\n# Define the objective function\nobjective = 3 * num_patches + 2 * num_creams\nproblem += objective # maximize the number of people treated\n\n# Define the constraints\nproblem += 3 * num_patches + 5 * num_creams <= 400 # the time to prepare must be at most 400 minutes\nproblem += 5 * num_patches + 6 * num_creams <= 530 # the materials used must be at most 530 units\nproblem += num_creams >= 2 * num_patches # anti-biotic creams must be at least twice as many as medication patches\nproblem += num_patches + num_creams <= 100 # total number of batches can't exceed 100\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of medication patches:\", num_patches.value())\nprint(\"The number of anti-biotic creams:\", num_creams.value())\nprint(\"The number of people that can be treated:\", objective.value())",
        "results": {
            "The number of medication patches": "30.0",
            "The number of anti-biotic creams": "62.0",
            "The number of people that can be treated": "214.0"
        },
        "formulation": "maximize 3x+2y\nSubject to: \n3x+5y <= 400\n5x+6y <= 530\nx+y <= 100\ny >= 2x (end)",
        "type": "linear-notable",
        "index": 495,
        "length": 766,
        "var_num": 2
    },
    {
        "question": "A farmer has 500 acres of land to grow turnips and pumpkins. Turnips require 50 minutes of watering and $80 worth of pesticide per acre. Pumpkins require 90 minutes of watering and $50 worth of pesticide per acre. The farmer has 40000 minutes available for watering and $34000 available to spend on pesticide. If the revenue per acre of turnips is $300 and the revenue per acre of pumpkins is $450, how many acres of each should he grow to maximize his revenue.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nacres_turnips = LpVariable(\"AcresTurnips\", lowBound=0) # acres of turnips\nacres_pumpkins = LpVariable(\"AcresPumpkins\", lowBound=0) # acres of pumpkins\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeFarmRevenue\", LpMaximize)\n\n# Define the objective function\nobjective = 300 * acres_turnips + 450 * acres_pumpkins\nproblem += objective # maximize the revenue\n\n# Define the constraints\nproblem += 50 * acres_turnips + 90 * acres_pumpkins <= 40000 # time constraint\nproblem += 80 * acres_turnips + 50 * acres_pumpkins <= 34000 # money constraint\nproblem += acres_turnips + acres_pumpkins <= 500 # land constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Acres of Turnips to grow:\", acres_turnips.value())\nprint(\"Acres of Pumpkins to grow:\", acres_pumpkins.value())\nprint(\"The maximum revenue that can be generated:\", objective.value())",
        "results": {
            "Acres of Turnips to grow": "125.0",
            "Acres of Pumpkins to grow": "375.0",
            "The maximum revenue that can be generated": "206250.0"
        },
        "formulation": "maximize 300x+450y\nSubject to: \nx+y <= 500\n50x+90y <= 40000\n80x+50y <= 34000 (end)",
        "type": "linear-notable",
        "index": 496,
        "length": 461,
        "var_num": 2
    },
    {
        "question": "In a cold region, a train service offers heated seats and regular seats. The train has 100 seats available. The trains reserves at least 15 seats to be heated. However, at least 3 times as many people prefer regular seats to heated seats. If the profit per heated seat is $20 and the profit per regular seat is $15, how many of each seat type should be sold to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of heated seats sold\", \"name\": \"x\"}, {\"description\": \"number of regular seats sold\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total profit\", \"function\": \"20x + 15y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"total seats available\", \"function\": \"x + y <= 100\"}, {\"description\": \"minimum heated seats\", \"function\": \"x >= 15\"}, {\"description\": \"minimum regular seats relative to heated seats\", \"function\": \"y >= 3x\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_heated_seats = LpVariable(\"NumHeatedSeats\", lowBound=15, cat='Integer') # number of heated seats sold\nnum_regular_seats = LpVariable(\"NumRegularSeats\", lowBound=0, cat='Integer') # number of regular seats sold\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"TrainSeatProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 20 * num_heated_seats + 15 * num_regular_seats\nproblem += objective # maximize the total profit from seats sold\n\n# Define the constraints\nproblem += num_heated_seats + num_regular_seats <= 100 # total seats available\nproblem += num_regular_seats >= 3 * num_heated_seats # minimum regular seats relative to heated seats\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of heated seats sold:\", num_heated_seats.value())\nprint(\"The number of regular seats sold:\", num_regular_seats.value())\nprint(\"Total profit:\", objective.value())\n",
        "results": {
            "The number of heated seats sold": "25.0",
            "The number of regular seats sold": "75.0",
            "Total profit": "1625.0"
        },
        "type": "linear-notable",
        "index": 497,
        "length": 377,
        "var_num": 2
    },
    {
        "question": "A factory packages glass jars and plates. Glass jars take 15 minutes of worker time and 3 units of cardboard. Plates take 12 minutes of worker time and 4 units of cardboard. The factory has 620 minutes of worker time available and 120 units of cardboard available. If the profit per glass jar packaged is $2 and the profit per plate packaged is $2.50, how many of each should they package to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of glass jars packaged\", \"name\": \"x\"}, {\"description\": \"number of plates packaged\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit from packaging\", \"function\": \"2x + 2.5y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"time constraint\", \"function\": \"15x + 12y <= 620\"}, {\"description\": \"cardboard constraint\", \"function\": \"3x + 4y <= 120\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_glass_jars = LpVariable(\"NumGlassJars\", lowBound=0, cat='Integer') # number of glass jars packaged\nnum_plates = LpVariable(\"NumPlates\", lowBound=0, cat='Integer') # number of plates packaged\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"PackagingProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 2 * num_glass_jars + 2.5 * num_plates\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 15 * num_glass_jars + 12 * num_plates <= 620 # time constraint\nproblem += 3 * num_glass_jars + 4 * num_plates <= 120 # cardboard constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of glass jars to package:\", num_glass_jars.value())\nprint(\"The number of plates to package:\", num_plates.value())\nprint(\"The maximum profit:\", objective.value())\n",
        "results": {
            "The number of glass jars to package": "40.0",
            "The number of plates to package": "0.0",
            "The maximum profit": "80.0"
        },
        "type": "linear-notable",
        "index": 498,
        "length": 408,
        "var_num": 2
    },
    {
        "question": "You want to fence in a rectangular garden next to a house. Suppose you have 30 feet of fencing. You want the largest possible garden, so you decide to use one wall of the house as a border and use the fencing for the other three sides. What should the dimensions of the rectangle be?",
        "scenario": "## Define Variables:\nYou want to fence in a rectangular garden next to a house.\n// variables: {\"length of the rectangle\": \"L\", \"width of the rectangle\": \"W\"}, where L, W >= 0\n\n## Define Objective Function:\nYou want the largest possible garden, what should be the length and width of the rectangle?\n// The area of the rectangle is given by the product of the length and the width. Therefore, the objective function is: Maximize L * W\n\n## Generate Constraint-1:\nSuppose you have 30 feet of fencing. You decide to use one wall of the house as a border and use the fencing for the other three sides.\n// L + 2W <= 30",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nL = model.addVar(vtype=\"CONTINUOUS\", name=\"L\") # length of the rectangle\nW = model.addVar(vtype=\"CONTINUOUS\", name=\"W\") # width of the rectangle\n\n# Define objective function\nobj = model.addVar(vtype=\"CONTINUOUS\", name=\"obj\") # area of the rectangle\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == L * W)\n\n# Add constraints\nmodel.addCons(L + 2*W <= 30)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The length of the rectangle:\", model.getVal(L))\n    print(\"The width of the rectangle:\", model.getVal(W))\n    print(\"The area of the garden: \", model.getVal(L * W))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The length of the rectangle": "15.0000",
            "The width of the rectangle": "7.500000",
            "The area of the garden": "112.50000"
        },
        "type": "nonlinear-notable",
        "index": 499,
        "length": 283,
        "var_num": 2
    },
    {
        "question": "Dorian Auto has a $20,000 advertising budget. Dorian can purchase full-page ads in two magazines: Inside Jocks (IJ) and Family Square (FS). An exposure occurs when a person reads a Dorian Auto ad for the first time. The number of exposures generated by each ad in IJ is as follows: ads 1-6, 10,000 exposures; ads 7-10, 3,000 exposures; ads 11-15, 2,500 exposures; ads 16+, 0 exposures. For example, 8 ads in IJ would generate 6(10,000) + 2(3,000) = 66,000 exposures. The number of exposures generated by each ad in FS is as follows: ads 1-4, 8,000 exposures; ads 5-12, 6,000 exposures; ads 13-15, 2,000 exposures; ads 16+, 0 exposures. Thus, 13 ads in FS would generate 4(8,000) + 8(6,000) + 1(2,000) = 82,000 exposures. Each full-page ad in either magazine costs $1,000. Assume there is no overlap in the readership of the two magazines. Maximize the number of exposures that Dorian can obtain with limited advertising funds.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal number of ads to purchase in each magazine. Let's denote the number of ads yielding 10,000 exposures in IJ as IJ_10, the number of ads yielding 3,000 exposures in IJ as IJ_3, the number of ads yielding 2,500 exposures in IJ as IJ_2p5, the number of ads yielding 8,000 exposures in FS as FS_8, the number of ads yielding 6,000 exposures in FS as FS_6, and the number of ads yielding 2,000 exposures in FS as FS_2.\n```Variables\nIJ_10 //number of IJ ads yielding 10,000 exposures\nIJ_3 //number of IJ ads yielding 3,000 exposures\nIJ_2p5 //number of IJ ads yielding 2,500 exposures\nFS_8 //number of FS ads yielding 8,000 exposures\nFS_6 //number of FS ads yielding 6,000 exposures\nFS_2 //number of FS ads yielding 2,000 exposures\nIJ_10, IJ_3, IJ_2p5, FS_8, FS_6, FS_2 >= 0 and they are integers // non-negativive integer variables\n```\n\n# Objective Function:\nWe want to maximize the number of exposures that Dorian can obtain with limited advertising funds. The number of exposures generated by each ad in IJ and FS is given. The total number of exposures is the sum of the number of exposures generated by each type of ad multiplied by the number of ads purchased in that type. So the objective function is 10 * IJ_10 + 3 * IJ_3 + 2.5 * IJ_2p5 + 8 * FS_8 + 6 * FS_6 + 2 * FS_2.\n```Objective Function\nMaximize: 10 * IJ_10 + 3 * IJ_3 + 2.5 * IJ_2p5 + 8 * FS_8 + 6 * FS_6 + 2 * FS_2\n```\n\n# Constraints:\nWe have several constraints to consider:\n1. The maximum advertising budget is $20,000, so the total cost of the ads purchased in IJ and FS should not exceed this budget. The cost of each ad is $1,000. So the constraint is IJ_10 + IJ_3 + IJ_2p5 + FS_8 + FS_6 + FS_2 <= 20.\n2. There are limits on the number of ads that can be purchased in each category. The maximum number of ads yielding 10,000 exposures in IJ is 6, so the constraint is IJ_10 <= 6. The maximum number of ads yielding 3,000 exposures in IJ is 4, so the constraint is IJ_3 <= 4. The maximum number of ads yielding 2,500 exposures in IJ is 5, so the constraint is IJ_2p5 <= 5. The maximum number of ads yielding 8,000 exposures in FS is 4, so the constraint is FS_8 <= 4. The maximum number of ads yielding 6,000 exposures in FS is 8, so the constraint is FS_6 <= 8. The maximum number of ads yielding 2,000 exposures in FS is 3, so the constraint is FS_2 <= 3.\n```Constraints\nIJ_10 + IJ_3 + IJ_2p5 + FS_8 + FS_6 + FS_2 <= 20 //maximum advertising budget\nIJ_10 <= 6 //maximum number of IJ ads yielding 10,000 exposures\nIJ_3 <= 4 //maximum number of IJ ads yielding 3,000 exposures\nIJ_2p5 <= 5 //maximum number of IJ ads yielding 2,500 exposures\nFS_8 <= 4 //maximum number of FS ads yielding 8,000 exposures\nFS_6 <= 8 //maximum number of FS ads yielding 6,000 exposures\nFS_2 <= 3 //maximum number of FS ads yielding 2,000 exposures\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nIJ_10 = LpVariable(\"IJ_10\", lowBound=0, upBound=6, cat='Integer')\nIJ_3 = LpVariable(\"IJ_3\", lowBound=0, upBound=4, cat='Integer')\nIJ_2p5 = LpVariable(\"IJ_2p5\", lowBound=0, upBound=5, cat='Integer')\nFS_8 = LpVariable(\"FS_8\", lowBound=0, upBound=4, cat='Integer')\nFS_6 = LpVariable(\"FS_6\", lowBound=0, upBound=8, cat='Integer')\nFS_2 = LpVariable(\"FS_2\", lowBound=0, upBound=3, cat='Integer')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeExposures\", LpMaximize)\n\n# Define the objective function\nproblem += 10000 * IJ_10 + 3000 * IJ_3 + 2500 * IJ_2p5 + 8000 * FS_8 + 6000 * FS_6 + 2000 * FS_2\n\n# Define the constraints\nproblem += IJ_10 + IJ_3 + IJ_2p5 + FS_8 + FS_6 + FS_2 <= 20\nproblem += IJ_10 <= 6\nproblem += IJ_3 <= 4\nproblem += IJ_2p5 <= 5\nproblem += FS_8 <= 4\nproblem += FS_6 <= 8\nproblem += FS_2 <= 3\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of IJ ads yielding 10,000 exposures:\", IJ_10.value())\nprint(\"The number of IJ ads yielding 3,000 exposures:\", IJ_3.value())\nprint(\"The number of IJ ads yielding 2,500 exposures:\", IJ_2p5.value())\nprint(\"The number of FS ads yielding 8,000 exposures:\", FS_8.value())\nprint(\"The number of FS ads yielding 6,000 exposures:\", FS_6.value())\nprint(\"The number of FS ads yielding 2,000 exposures:\", FS_2.value())\nprint(\"The maximum number of exposures:\", value(problem.objective))\n",
        "results": {
            "The number of IJ ads yielding 10,000 exposures": "6.0",
            "The number of IJ ads yielding 3,000 exposures": "2.0",
            "The number of IJ ads yielding 2,500 exposures": "0.0",
            "The number of FS ads yielding 8,000 exposures": "4.0",
            "The number of FS ads yielding 6,000 exposures": "8.0",
            "The number of FS ads yielding 2,000 exposures": "0.0",
            "The maximum number of exposures": "146000.0"
        },
        "type": "linear-notable",
        "index": 500,
        "length": 926,
        "var_num": 6
    },
    {
        "question": "International Wool Company operates a large farm on which sheep are raised. The farm manager determined that for the sheep to grow in the desired fashion, they need at least minimum amounts of four nutrients (the nutrients are nontoxic so the sheep can consume more than the minimum without harm). The manager is considering three different grains to feed the sheep. The table below lists the number of units of each nutrient in each pound of grain, the minimum daily requirements of each nutrient for each sheep, and the cost of each grain. The manager believes that as long as a sheep receives the minimum daily amount of each nutrient, it will be healthy and produce a standard amount of wool. The manager wants to raise the sheep at minimum cost. The columns of table are nutrient name, nutrient unit in the three different grains, and Minimum Daily Requirement (unit). The rows = [Nutrient A, 20, 30, 70, 110], [Nutrient B, 10, 10, 0, 18], [Nutrient C, 50, 30, 0, 90], [Nutrient D, 6, 2.5, 10, 14]. The prices of \ngrain nutrient A, B and C are 41,36, 96, respectively.",
        "formulation": "# Variables:\nTo determine the optimal amounts of grain A, B, and C to feed the sheep, let's denote the number of pounds of grain A as A, the number of pounds of grain B as B, and the number of pounds of grain C as C.\n```Variables\nA // pounds of grain A\nB // pounds of grain B\nC // pounds of grain C\nA, B, C >= 0 // non-negative variables\n```\n\n# Objective Function:\nWe want to minimize the cost of raising the sheep, so the objective function is the sum of the cost of each grain multiplied by the respective amount of grain used. The cost of grain A is $41 per pound * A pounds, the cost of grain B is $36 per pound * B pounds, and the cost of grain C is $96 per pound * C pounds. Therefore, the objective function is 41A + 36B + 96C.\n```Objective Function\nMinimize: 41A + 36B + 96C\n```\n\n# Constraints:\nTo ensure that the sheep receive at least the minimum daily requirement of each nutrient, we need to set up the following constraints:\n- The minimum daily requirement of nutrient A is 110, which is satisfied if 20A + 30B + 70C is greater than or equal to 110.\n- The minimum daily requirement of nutrient B is 18, which is satisfied if 10A + 10B is greater than or equal to 18.\n- The minimum daily requirement of nutrient C is 90, which is satisfied if 50A + 30B is greater than or equal to 90.\n- The minimum daily requirement of nutrient D is 14, which is satisfied if 6A + 2.5B + 10C is greater than or equal to 14.\n```Constraints\n20A + 30B + 70C >= 110 // minimum daily requirement of nutrient A\n10A + 10B >= 18 // minimum daily requirement of nutrient B\n50A + 30B >= 90 // minimum daily requirement of nutrient C\n6A + 2.5B + 10C >= 14 // minimum daily requirement of nutrient D\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nA = LpVariable(\"GrainA\", lowBound=0, cat='Continuous') # pounds of grain A\nB = LpVariable(\"GrainB\", lowBound=0, cat='Continuous') # pounds of grain B\nC = LpVariable(\"GrainC\", lowBound=0, cat='Continuous') # pounds of grain C\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SheepDietMinimization\", LpMinimize)\n\n# Define the objective function\nobjective = 41 * A + 36 * B + 96 * C\nproblem += objective # minimize the cost of grains\n\n# Define the constraints\nproblem += 20 * A + 30 * B + 70 * C >= 110 # minimum daily requirement of nutrient A\nproblem += 10 * A + 10 * B >= 18 # minimum daily requirement of nutrient B\nproblem += 50 * A + 30 * B >= 90 # minimum daily requirement of nutrient C\nproblem += 6 * A + 2.5 * B + 10 * C >= 14 # minimum daily requirement of nutrient D\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The amount of grain A to feed the sheep:\", A.value())\nprint(\"The amount of grain B to feed the sheep:\", B.value())\nprint(\"The amount of grain C to feed the sheep:\", C.value())\nprint(\"The minimum cost:\", value(problem.objective))\n",
        "results": {
            "The amount of grain A to feed the sheep": "0.59533074",
            "The amount of grain B to feed the sheep": "2.0077821",
            "The amount of grain C to feed the sheep": "0.54085603",
            "The minimum cost": "148.61089482"
        },
        "type": "linear-table",
        "index": 501,
        "length": 1073,
        "var_num": 3
    },
    {
        "question": "A small bakery has 20000 grams of batter and 14000 grams of milk to make their crepe cakes, sponge cakes, and birthday cakes. A crepe cake needs 400 grams of batter and 200 grams of milk. A sponge cake requires 500 grams of batter and 300 grams of milk. A birthday cake requires 450 grams of batter and 350 grams of milk. If the profit per crepe cake is $12, the profit per sponge cake is $10, and the profit per birthday cake is $15, how many of each should the bakery make to maximize their profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_crepe_cakes = LpVariable(\"NumCrepeCakes\", lowBound=0, cat='Integer') # number of crepe cakes\nnum_sponge_cakes = LpVariable(\"NumSpongeCakes\", lowBound=0, cat='Integer') # number of sponge cakes\nnum_birthday_cakes = LpVariable(\"NumBirthdayCakes\", lowBound=0, cat='Integer') # number of birthday cakes\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CakeBakery\", LpMaximize)\n\n# Define the objective function\nobjective = 12 * num_crepe_cakes + 10 * num_sponge_cakes + 15 * num_birthday_cakes\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 400 * num_crepe_cakes + 500 * num_sponge_cakes + 450 * num_birthday_cakes <= 20000 # batter constraint\nproblem += 200 * num_crepe_cakes + 300 * num_sponge_cakes + 350 * num_birthday_cakes <= 14000 # milk constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of crepe cakes:\", num_crepe_cakes.value())\nprint(\"The number of sponge cakes:\", num_sponge_cakes.value())\nprint(\"The number of birthday cakes:\", num_birthday_cakes.value())\nprint(\"Total profit: $\", objective.value())",
        "results": {
            "The number of crepe cakes": "14.0",
            "The number of sponge cakes": "0.0",
            "The number of birthday cakes": "32.0",
            "Total profit": "648.0"
        },
        "formulation": "maximize 12x+10y+15z\nSubject to: \n200x+300y+350z <= 20000 (end)",
        "type": "linear-notable",
        "index": 502,
        "length": 500,
        "var_num": 3
    },
    {
        "scenario": "## Define Variables:\nA manufacturing company produces three types of electronic devices: DeviceA, DeviceB, and DeviceC. The company needs to decide the number of units to produce for each device to optimize its profit. Additionally, the company can invest in research and development (R&D) to improve the efficiency of production, which affects the cost and quality of the devices.\n// variables: {\\\"number of units of DeviceA\\\": \\\"UnitsA\\\", \\\"number of units of DeviceB\\\": \\\"UnitsB\\\", \\\"number of units of DeviceC\\\": \\\"UnitsC\\\", \\\"R&D investment\\\": \\\"R&D\\\"}, where UnitsA, UnitsB, UnitsC >= 0 & are integers, R&D >= 0 & is a real number\n\n## Define Objective Function:\nThe profit per unit of DeviceA is $100, but it decreases by $0.5 for every $1000 spent on R&D. The profit per unit of DeviceB is $150, but it increases by $0.2 for every $1000 spent on R&D. The profit per unit of DeviceC is $200, but it remains constant regardless of R&D investment. The company aims to maximize total profit.\n// Total profit for DeviceA: ProfitA = (100 - 0.5 * (R&D / 1000)) * UnitsA\n// Total profit for DeviceB: ProfitB = (150 + 0.2 * (R&D / 1000)) * UnitsB\n// Total profit for DeviceC: ProfitC = 200 * UnitsC\n// So, the objective function is: Maximize (ProfitA + ProfitB + ProfitC - R&D)\n\n## Generate Constraint-1:\nThe company has a production capacity limit of 1000 units in total for all devices.\n// UnitsA + UnitsB + UnitsC <= 1000\n\n## Generate Constraint-2:\nDue to market demand, the number of DeviceA units produced must be at least twice the number of DeviceB units.\n// UnitsA >= 2 * UnitsB\n\n## Generate Constraint-3:\nThe company has a budget of $50,000 for R&D investment.\n// R&D <= 50,000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nUnitsA = model.addVar(vtype=\"INTEGER\", name=\"UnitsA\") # number of units of DeviceA\nmodel.addCons(UnitsA >= 0)\nUnitsB = model.addVar(vtype=\"INTEGER\", name=\"UnitsB\") # number of units of DeviceB\nmodel.addCons(UnitsB >= 0)\nUnitsC = model.addVar(vtype=\"INTEGER\", name=\"UnitsC\") # number of units of DeviceC\nmodel.addCons(UnitsC >= 0)\nR_D = model.addVar(vtype=\"CONTINUOUS\", name=\"R&D\") # R&D investment\nmodel.addCons(R_D >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == (100 - 0.5 * (R_D / 1000)) * UnitsA + (150 + 0.2 * (R_D / 1000)) * UnitsB + 200 * UnitsC - R_D)\n\n# Add constraints\nmodel.addCons(UnitsA + UnitsB + UnitsC <= 1000)\nmodel.addCons(UnitsA >= 2 * UnitsB)\nmodel.addCons(R_D <= 50000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Units of DeviceA: \", model.getVal(UnitsA))\n    print(\"Number of Units of DeviceB: \", model.getVal(UnitsB))\n    print(\"Number of Units of DeviceC: \", model.getVal(UnitsC))\n    print(\"R&D Investment: \", model.getVal(R_D))\n    print(\"Total Profit: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Units of DeviceA": "0.0",
            "Number of Units of DeviceB": "0.0",
            "Number of Units of DeviceC": "1000.0",
            "R&D Investment": "0.0",
            "Total Profit": "200000.0"
        },
        "question": "A manufacturing company produces three types of electronic devices: DeviceA, DeviceB, and DeviceC. The company needs to decide the number of units to produce for each device and the amount to invest in research and development (R&D) to optimize its profit. The profit per unit of each device and its relationship with R&D investment are given in the following Table.\n\n| Device | Profit per Unit | Effect of R&D Investment |\n|--------|-----------------|---------------------------|\n| DeviceA | $100 | Decreases by $0.5 for every $1000 spent on R&D |\n| DeviceB | $150 | Increases by $0.2 for every $1000 spent on R&D |\n| DeviceC | $200 | No effect of R&D investment |\n\nThe company has a production capacity limit of 1000 units in total for all devices. Due to market demand, the number of DeviceA units produced must be at least twice the number of DeviceB units. The company has a budget of $50,000 for R&D investment. The company aims to maximize total profit, which is calculated as the sum of the profits from each device minus the R&D investment.\n",
        "type": "nonlinear-table",
        "index": 503,
        "length": 1049,
        "var_num": 4
    },
    {
        "scenario": "## Define Variables:\nA company is planning to launch five new products (Product A, Product B, Product C, Product D, and Product E) in the market. Each product requires a different level of investment and has varying potential profits and market risks.\n// variables: {\"number of units of Product A\": \"ProductA\", \"number of units of Product B\": \"ProductB\", \"number of units of Product C\": \"ProductC\", \"number of units of Product D\": \"ProductD\", \"number of units of Product E\": \"ProductE\"}, where ProductA, ProductB, ProductC, ProductD, ProductE >= 0 & ProductA, ProductB, ProductC, ProductD, ProductE are integers\n\n## Define Objective Function:\nFor Product A, the profit per unit is $50, the market risk is 3%, and the production cost per unit is $20. \nFor Product B, the profit per unit is $70, the market risk is 5%, and the production cost per unit is $30. \nFor Product C, the profit per unit is $60, the market risk is 4%, and the production cost per unit is $25. \nFor Product D, the profit per unit is $80, the market risk is 6%, and the production cost per unit is $40. \nFor Product E, the profit per unit is $90, the market risk is 7%, and the production cost per unit is $50. \nThe company wants to maximize the Profit-Risk ratio of the investment. (The Profit-Risk ratio is defined as the total profit divided by the total market risk of cost.)\n// total profit: Profit = 50 * ProductA + 70 * ProductB + 60 * ProductC + 80 * ProductD + 90 * ProductE\n// total market risk: Risk = 3% * 20 * ProductA + 5% * 30 * ProductB + 4% * 25 * ProductC + 6% * 40 * ProductD + 7% * 50 * ProductE\n// So, the objective function is: Maximize Profit / Risk\n\n## Generate Constraint-1:\nThe company has a budget of $50,000 for all product launches.\n// 20 * ProductA + 30 * ProductB + 25 * ProductC + 40 * ProductD + 50 * ProductE <= 50000\n\n## Generate Constraint-2:\nThe company must invest at least $20,000 in all products combined.\n// 20 * ProductA + 30 * ProductB + 25 * ProductC + 40 * ProductD + 50 * ProductE >= 20000\n\n## Generate Constraint-3:\nThe company wants to produce at least 500 units of Product A.\n// ProductA >= 500",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nProductA = model.addVar(vtype=\"INTEGER\", name=\"ProductA\") # number of units of Product A\nmodel.addCons(ProductA >= 0)\nProductB = model.addVar(vtype=\"INTEGER\", name=\"ProductB\") # number of units of Product B\nmodel.addCons(ProductB >= 0)\nProductC = model.addVar(vtype=\"INTEGER\", name=\"ProductC\") # number of units of Product C\nmodel.addCons(ProductC >= 0)\nProductD = model.addVar(vtype=\"INTEGER\", name=\"ProductD\") # number of units of Product D\nmodel.addCons(ProductD >= 0)\nProductE = model.addVar(vtype=\"INTEGER\", name=\"ProductE\") # number of units of Product E\nmodel.addCons(ProductE >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj * (0.03 * 20 * ProductA + 0.05 * 30 * ProductB + 0.04 * 25 * ProductC + 0.06 * 40 * ProductD + 0.07 * 50 * ProductE) == (50 * ProductA + 70 * ProductB + 60 * ProductC + 80 * ProductD + 90 * ProductE))\n\n# Add constraints\nmodel.addCons(20 * ProductA + 30 * ProductB + 25 * ProductC + 40 * ProductD + 50 * ProductE <= 50000)\nmodel.addCons(20 * ProductA + 30 * ProductB + 25 * ProductC + 40 * ProductD + 50 * ProductE >= 20000)\nmodel.addCons(ProductA >= 500)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Profit-Risk Ratio: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Profit-Risk Ratio": "83.33333333333337"
        },
        "question": "A company is planning to launch five new products (Product A, Product B, Product C, Product D, and Product E) in the market. Each product requires a different level of investment and has varying potential profits and market risks. For Product B, the profit per unit is $70, the market risk is 5%, and the production cost per unit is $30. For Product C, the profit per unit is $60, the market risk is 4%, and the production cost per unit is $25. For Product D, the profit per unit is $80, the market risk is 6%, and the production cost per unit is $40. For Product E, the profit per unit is $90, the market risk is 7%, and the production cost per unit is $50. The company wants to maximize the Profit-Risk ratio of the investment. (The Profit-Risk ratio is defined as the total profit divided by the total market risk of cost.) The company has a budget of $50,000 for all product launches. The company must invest at least $20,000 in all products combined. The company wants to produce at least 500 units of Product A. For Product A, the profit per unit is $50, the market risk is 3%, and the production cost per unit is $20.",
        "type": "nonlinear-notable",
        "index": 504,
        "length": 1124,
        "var_num": 5
    },
    {
        "scenario": "## Define Variables:\nA city is planning to install solar panels in various locations to optimize energy production and minimize environmental impact. The locations are categorized into five zones (Zone A, Zone B, Zone C, Zone D, Zone E).\n// variables: {\"number of solar panels in Zone A\": \"A\", \"number of solar panels in Zone B\": \"B\", \"number of solar panels in Zone C\": \"C\", \"number of solar panels in Zone D\": \"D\", \"number of solar panels in Zone E\": \"E\"}, where A, B, C, D, E >= 0 & A, B, C, D, E are integers\n\n## Define Objective Function:\nThe efficiency of solar panels varies by zone due to different levels of sunlight and environmental conditions. \nIn Zone A, each panel generates 100 kWh of energy per day with a maintenance cost of $2 per day, each panel covers an area of 1 square meter.\nIn Zone B, each panel generates 120 kWh of energy per day with a maintenance cost of $3 per day, each panel covers an area of 1.5 square meters.\nIn Zone C, each panel generates 150 kWh of energy per day with a maintenance cost of $4 per day, each panel covers an area of 2 square meters.\nIn Zone D, each panel generates 130 kWh of energy per day with a maintenance cost of $3.5 per day, each panel covers an area of 1.75 square meters.\nIn Zone E, each panel generates 110 kWh of energy per day with a maintenance cost of $2.5 per day, each panel covers an area of 1.25 square meters.\nThe energy market price is $0.10 per kWh.\nThe city aims to maximize the the profit per square meters of solar panels.\n// Energy revenue: Revenue = 0.10 * (100 * A + 120 * B + 150 * C + 130 * D + 110 * E)\n// Maintenance cost: Cost = 2 * A + 3 * B + 4 * C + 3.5 * D + 2.5 * E\n// Area covered: Area = A + 1.5 * B + 2 * C + 1.75 * D + 1.25 * E\n// Profit per square meter: Profit = (Revenue - Cost) / Area\n\n## Generate Constraint-1:\nThe city has a budget of $10,000 per day for maintenance.\n// 2 * A + 3 * B + 4 * C + 3.5 * D + 2.5 * E <= 10000\n\n## Generate Constraint-2:\nThe total area available for installation is 500 square meters.\n// A + B + C + D + E <= 500\n\n## Generate Constraint-3:\nThe minimum energy requirement for the city is 10,000 kWh per day.\n// 100 * A + 120 * B + 150 * C + 130 * D + 110 * E >= 10000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nA = model.addVar(vtype=\"INTEGER\", name=\"A\", lb=0, ub=500) # number of solar panels in Zone A\nmodel.addCons(A >= 0)\nB = model.addVar(vtype=\"INTEGER\", name=\"B\", lb=0, ub=500) # number of solar panels in Zone B\nmodel.addCons(B >= 0)\nC = model.addVar(vtype=\"INTEGER\", name=\"C\", lb=0, ub=500) # number of solar panels in Zone C\nmodel.addCons(C >= 0)\nD = model.addVar(vtype=\"INTEGER\", name=\"D\", lb=0, ub=500) # number of solar panels in Zone D\nmodel.addCons(D >= 0)\nE = model.addVar(vtype=\"INTEGER\", name=\"E\", lb=0, ub=500) # number of solar panels in Zone E\nmodel.addCons(E >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj * (A + 1.5 * B + 2 * C + 1.75 * D + 1.25 * E) == (0.10 * (100 * A + 120 * B + 150 * C + 130 * D + 110 * E) - (2 * A + 3 * B + 4 * C + 3.5 * D + 2.5 * E)))\n\n# Add constraints\nmodel.addCons(2 * A + 3 * B + 4 * C + 3.5 * D + 2.5 * E <= 10000)\nmodel.addCons(A + B + C + D + E <= 500)\nmodel.addCons(100 * A + 120 * B + 150 * C + 130 * D + 110 * E >= 10000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Profit per Square Meter: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Profit per Square Meter": "8.00000000000000"
        },
        "question": "A city is planning to install solar panels in various locations to optimize energy production and minimize environmental impact. The locations are categorized into five zones (Zone A, Zone B, Zone C, Zone D, Zone E). The efficiency of solar panels varies by zone due to different levels of sunlight and environmental conditions. The city aims to maximize the profit per square meter of solar panels. The details of each zone are given in the following Table.\n\n| Zone   | Energy Generation (kWh/day) | Maintenance Cost ($/day) | Area Covered (sq.m) |\n|--------|-----------------------------|--------------------------|---------------------|\n| A      | 100                         | 2                        | 1                   |\n| B      | 120                         | 3                        | 1.5                 |\n| C      | 150                         | 4                        | 2                   |\n| D      | 130                         | 3.5                      | 1.75                |\n| E      | 110                         | 2.5                      | 1.25                |\n\nThe energy market price is $0.10 per kWh. The city has a budget of $10,000 per day for maintenance. The total area available for installation is 500 square meters. The minimum energy requirement for the city is 10,000 kWh per day. The city needs to determine the number of solar panels to install in each zone to meet these constraints while maximizing the profit per square meter of solar panels.\n",
        "type": "nonlinear-table",
        "index": 505,
        "length": 1488,
        "var_num": 5
    },
    {
        "question": "Both subsoil and topsoil need to be added to a garden bed. One bag of subsoil requires 10 units of water to hydrate while one bag of topsoil requires 6 units of water to hydrate every day. The truck used to transport the dirt has limited capacity and therefore, the farmer has available 150 bags of topsoil and subsoil combined. In addition, at least 10 bags of topsoil must be used. Since the topsoil is more expensive, at most 30% of all bags of soil can be topsoil. How many bags of each should be bought to minimize the total amount of water required to hydrate the garden bed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_subsoil_bags = LpVariable(\"NumSubsoilBags\", lowBound=0, cat='Integer') # number of subsoil bags\nnum_topsoil_bags = LpVariable(\"NumTopsoilBags\", lowBound=0, cat='Integer') # number of topsoil bags\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimizeWaterForGardenBed\", LpMinimize)\n\n# Define the objective function\nobjective = 10 * num_subsoil_bags + 6 * num_topsoil_bags\nproblem += objective # minimize the total amount of water required\n\n# Define the constraints\nproblem += num_subsoil_bags + num_topsoil_bags <= 150 # the total number of bags cannot exceed 150\nproblem += num_topsoil_bags >= 10 # at least 10 bags of topsoil must be used\nproblem += num_topsoil_bags <= 0.3 * (num_subsoil_bags + num_topsoil_bags) # at most 30% of all bags can be topsoil\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of subsoil bags:\", num_subsoil_bags.value())\nprint(\"The number of topsoil bags:\", num_topsoil_bags.value())\nprint(\"The total amount of water required:\", objective.value())",
        "results": {
            "The number of subsoil bags": "24.0",
            "The number of topsoil bags": "10.0",
            "The total amount of water required": "300.0"
        },
        "formulation": "minimize 10x+6y\nSubject to: \nx+y <= 150\ny >= 10\ny <= 0.3(x+y) (end)",
        "type": "linear-notable",
        "index": 506,
        "length": 581,
        "var_num": 2
    },
    {
        "question": "A manufacturer can sell product 1 at a profit of $2/unit and product 2 at a profit of $5/unit. The amount of raw material required to manufacture each product and the setup costs for production are detailed in the following Table. A total of 120 units of raw material are available. Formulate an LP to maximize profits.\n\nTable (Raw material required for manufacturing and setup costs):\n| Product Type | Raw Material Required (units per product unit) | Setup Cost (if produced) |\n| ------------ | --------------------------------------------- | ------------------------ |\n| Product 1    | 3                                             | $10                      |\n| Product 2    | 6                                             | $20                      |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for product 1 and product 2 that adhere to the constraints given. Let's denote the number of units of product 1 as P1 and the number of units of product 2 as P2.\nWe also need to define boolean variables to represent whether each product is produced or not. Let's denote the boolean variable for product 1 as B1 and the boolean variable for product 2 as B2.\n```Variables\nP1 //number of units of product 1 to produce\nP2 //number of units of product 2 to produce\nP1, P2 >= 0 and they are integers //non-negative integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit from selling product 1 and product 2. The profit from selling product 1 is $2\nunit and the profit from selling product 2 is $5/unit, which can be written as: 2P1 + 5P2.\nWe also need to subtract the setup costs for each product. The setup cost for product 1 is $10 and the setup\ncost for product 2 is $20, which can be written as: -10B1 - 20B2.\n```Objective\nMaximize: 2P1 + 5P2 - 10 * min(P1, 1) - 20 * min(P2, 1)\n```\n\n# Constraints:\nWe need to make sure that we have enough raw material to produce the desired quantities of product 1 and\nproduct 2. We need 3 units of raw material to produce 1 unit of product 1 and 6 units of raw material to\nproduce 1 unit of product 2. We have a total of 120 units of raw material available, which can be written as:\n3P1 + 6P2 <= 120.\n```Constraints\n3P1 + 6P2 <= 120 //A total of 120 units of raw material are available\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nP1 = LpVariable(\"Product1\", lowBound=0, cat='Integer') # number of units of product 1 to produce\nP2 = LpVariable(\"Product2\", lowBound=0, cat='Integer') # number of units of product 2 to produce\nB1 = LpVariable(\"Boolean1\", cat='Binary') # boolean variable for product 1\nB2 = LpVariable(\"Boolean2\", cat='Binary') # boolean variable for product 2\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ManufacturerProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 2 * P1 + 5 * P2 - 10 * B1 - 20 * B2\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 3 * P1 + 6 * P2 <= 120 # raw material constraint\nproblem += P1 - 1000000 * B1 <= 0 # linking constraint for product 1\nproblem += P2 - 1000000 * B2 <= 0 # linking constraint for product 2\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of units of product 1 to produce:\", P1.value())\nprint(\"The number of units of product 2 to produce:\", P2.value())\nprint(\"The total profit:\", objective.value())\n",
        "results": {
            "The number of units of product 1 to produce": "0.0",
            "The number of units of product 2 to produce": "20.0",
            "The total profit": "80.0"
        },
        "type": "linear-table",
        "index": 507,
        "length": 754,
        "var_num": 3
    },
    {
        "question": "The Kalo Fertilizer Company produces two brands of lawn fertilizer\u2014Super Two and Green Grow\u2014at plants in Fresno, California, and Dearborn, Michigan. The Fresno plant has resources available to produce up to 5,000 pounds of fertilizer daily, while the Dearborn plant can produce up to 6,000 pounds daily. The cost per pound of producing each brand at each plant, the maximum daily demand for each product, and the selling price per pound are provided in the following Table. The company has a daily budget of $45,000 for both plants combined. Based on past sales, the maximum demand (converted to a daily basis) is 6,000 pounds for Super Two and 7,000 pounds for Green Grow. The company wants to know the number of pounds of each brand of fertilizer to produce at each plant in order to maximize profit.\n\nTable (Cost per pound of production, maximum daily demand, and selling price per item):\n| Product    | Plant     | Cost per Pound | Max Demand Available/day | Selling Price per Pound |\n|------------|-----------|----------------|--------------------------|------------------------|\n| Super Two  | Fresno    | $2             | 5,000 lbs/day            | $9/lb                  |\n| Super Two  | Dearborn  | $4             | 6,000 lbs/day            | $9/lb                  |\n| Green Grow | Fresno    | $2             | 5,000 lbs/day            | $7/lb                  |\n| Green Grow | Dearborn  | $3             | 6,000 lbs/day            | $7/lb                  |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for Super Two and Green Grow at each plant. Let's denote the number of pounds of Super Two produced at Fresno as SF, the number of pounds of Super Two produced at Dearborn as SD, the number of pounds of Green Grow produced at Fresno as GF, and the number of pounds of Green Grow produced at Dearborn as GD.\n```\nVariables:\nSF // number of pounds of Super Two produced at Fresno\nSD // number of pounds of Super Two produced at Dearborn\nGF // number of pounds of Green Grow produced at Fresno\nGD // number of pounds of Green Grow produced at Dearborn\nSF, SD, GF, GD >= 0\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function is given by subtracting the total cost from the total revenue. \nThe total revenue is the sum of the revenue from Super Two and Green Grow, which is 9(SF + SD) + 7(GF + GD).\nThe total cost is the sum of the cost of production for Super Two and Green Grow at each plant. The cost of producing Super Two at Fresno is $2 per pound * SF pounds. The cost of producing Super Two at Dearborn is $4 per pound * SD pounds. The cost of producing Green Grow at Fresno is $2 per pound * GF pounds. The cost of producing Green Grow at Dearborn is $3 per pound * GD pounds.\nSo the total cost is 2SF + 4SD + 2GF + 3GD.\nTherefore, the objective function is 9(SF + SD) + 7(GF + GD) - (2SF + 4SD + 2GF + 3GD) = 7SF + 5SD + 5GF + 4GD.\n```\nObjective Function:\nMaximize: 7SF + 5SD + 5GF + 4GD\n```\n\n# Constraints:\nThe total cost of production cannot exceed $45,000. The total cost of production is 2SF + 4SD + 2GF + 3GD. So the first constraint is 2SF + 4SD + 2GF + 3GD <= 45,000.\nThe maximum demand for Super Two is 6,000 pounds. The maximum demand for Green Grow is 7,000 pounds. So the second constraint is SF + SD <= 6,000 and the third constraint is GF + GD <= 7,000.\nThe plant at Fresno has resources available to produce 5,000 pounds of fertilizer daily; the plant at Dearborn has enough resources to produce 6,000 pounds daily. \nSo the fourth constraint is SF + GF <= 5,000 and the fifth constraint is SD + GD <= 6,000.\n```\nConstraints:\n2SF + 4SD + 2GF + 3GD <= 45000 // total cost constraint\nSF + SD <= 6000 // Demand constraint for Super Two\nGF + GD <= 7000 // Demand constraint for Green Grow\nSF + GF <= 5000 // Resources constraint at Fresno\nSD + GD <= 6000 // Resources constraint at Dearborn\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nSF = LpVariable(\"SuperTwo_Fresno\", lowBound=0, cat='Continuous') # Super Two at Fresno\nSD = LpVariable(\"SuperTwo_Dearborn\", lowBound=0, cat='Continuous') # Super Two at Dearborn\nGF = LpVariable(\"GreenGrow_Fresno\", lowBound=0, cat='Continuous') # Green Grow at Fresno\nGD = LpVariable(\"GreenGrow_Dearborn\", lowBound=0, cat='Continuous') # Green Grow at Dearborn\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FertilizerProduction\", LpMaximize)\n\n# Define the objective function\nobjective = 7*SF + 5*SD + 5*GF + 4*GD\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 2*SF + 4*SD + 2*GF + 3*GD <= 45000 # the cost must be at most $45000\nproblem += SF + SD <= 6000 # Demand constraint for Super Two\nproblem += GF + GD <= 7000 # Demand constraint for Green Grow\nproblem += SF + GF <= 5000 # Resources constraint at Fresno\nproblem += SD + GD <= 6000 # Resources constraint at Dearborn\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of pounds of Super Two produced at Fresno:\", SF.value())\nprint(\"The number of pounds of Super Two produced at Dearborn:\", SD.value())\nprint(\"The number of pounds of Green Grow produced at Fresno:\", GF.value())\nprint(\"The number of pounds of Green Grow produced at Dearborn:\", GD.value())\nprint(\"The maximum profit:\", value(problem.objective))\n",
        "results": {
            "The number of pounds of Super Two produced at Fresno": "5000.0",
            "The number of pounds of Super Two produced at Dearborn": "1000.0",
            "The number of pounds of Green Grow produced at Fresno": "0.0",
            "The number of pounds of Green Grow produced at Dearborn": "5000.0",
            "The maximum profit": "60000.0"
        },
        "type": "linear-table",
        "index": 508,
        "length": 1468,
        "var_num": 4
    },
    {
        "scenario": "## Define Variables:\nA city is planning to build five different types of public facilities: a library, a community center, a park, a sports complex, and a museum. The city council wants to optimize the allocation of resources to maximize the overall utility of these facilities.\n// variables: {\"number of libraries\": \"Libraries\", \"number of community centers\": \"CommunityCenters\", \"number of parks\": \"Parks\", \"number of sports complexes\": \"SportsComplexes\", \"number of museums\": \"Museums\"}, where Libraries, CommunityCenters, Parks, SportsComplexes, Museums >= 0 & Libraries, CommunityCenters, Parks, SportsComplexes, Museums are integers\n\n## Define Objective Function:\nThe utility of each facility is determined by a non-linear function based on the number of facilities built. The utility functions are as follows:\n- Library: U_lib = 100 * Libraries^0.5\n- Community Center: U_cc = 150 * CommunityCenters^0.6\n- Park: U_park = 200 * Parks^0.7\n- Sports Complex: U_sc = 250 * SportsComplexes^0.8\n- Museum: U_museum = 300 * Museums^0.9\nThe city council wants to maximize the total utility of all facilities.\n// So, the objective function is: Maximize TotalUtility = U_lib + U_cc + U_park + U_sc + U_museum\n// Maximize 100 * Libraries^0.5 + 150 * CommunityCenters^0.6 + 200 * Parks^0.7 + 250 * SportsComplexes^0.8 + 300 * Museums^0.9\n\n## Generate Constraint-1:\nThe city has a budget of $500,000 to spend on these facilities. The cost to build each type of facility is:\n- Library: $50,000\n- Community Center: $75,000\n- Park: $100,000\n- Sports Complex: $125,000\n- Museum: $150,000\n// 50000 * Libraries + 75000 * CommunityCenters + 100000 * Parks + 125000 * SportsComplexes + 150000 * Museums <= 500000\n\n## Generate Constraint-2:\nThe city has a land constraint that limits the total number of facilities that can be built. The maximum number of facilities allowed is 5.\n// Libraries + CommunityCenters + Parks + SportsComplexes + Museums <= 5\n\n## Generate Constraint-3:\nThe city council has a policy that at least one of each type of facility must be built.\n// Libraries >= 1; CommunityCenters >= 1; Parks >= 1; SportsComplexes >= 1; Museums >= 1",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nLibraries = model.addVar(vtype=\"INTEGER\", name=\"Libraries\") # number of libraries\nmodel.addCons(Libraries >= 0)\nCommunityCenters = model.addVar(vtype=\"INTEGER\", name=\"CommunityCenters\") # number of community centers\nmodel.addCons(CommunityCenters >= 0)\nParks = model.addVar(vtype=\"INTEGER\", name=\"Parks\") # number of parks\nmodel.addCons(Parks >= 0)\nSportsComplexes = model.addVar(vtype=\"INTEGER\", name=\"SportsComplexes\") # number of sports complexes\nmodel.addCons(SportsComplexes >= 0)\nMuseums = model.addVar(vtype=\"INTEGER\", name=\"Museums\") # number of museums\nmodel.addCons(Museums >= 0)\n\n# Define objective function\n## Non-linear objective function, need to linearize\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == 100 * Libraries**0.5 + 150 * CommunityCenters**0.6 + 200 * Parks**0.7 + 250 * SportsComplexes**0.8 + 300 * Museums**0.9)\n\n# Add constraints\nmodel.addCons(50000 * Libraries + 75000 * CommunityCenters + 100000 * Parks + 125000 * SportsComplexes + 150000 * Museums <= 500000)\nmodel.addCons(Libraries + CommunityCenters + Parks + SportsComplexes + Museums <= 5)\nmodel.addCons(Libraries >= 1)\nmodel.addCons(CommunityCenters >= 1)\nmodel.addCons(Parks >= 1)\nmodel.addCons(SportsComplexes >= 1)\nmodel.addCons(Museums >= 1)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Libraries: \", model.getVal(Libraries))\n    print(\"Number of Community Centers: \", model.getVal(CommunityCenters))\n    print(\"Number of Parks: \", model.getVal(Parks))\n    print(\"Number of Sports Complexes: \", model.getVal(SportsComplexes))\n    print(\"Number of Museums: \", model.getVal(Museums))\n    print(\"Total Utility: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Libraries": "1.0",
            "Number of Community Centers": "1.0",
            "Number of Parks": "1.0",
            "Number of Sports Complexes": "1.0",
            "Number of Museums": "1.0",
            "Total Utility": "1000.00000000"
        },
        "question": "A city is planning to build five different types of public facilities: a library, a community center, a park, a sports complex, and a museum. The city council wants to optimize the allocation of resources to maximize the overall utility of these facilities. - Library: U_lib = 100 * Libraries^0.5 - Community Center: U_cc = 150 * CommunityCenters^0.6 - Park: U_park = 200 * Parks^0.7 - Sports Complex: U_sc = 250 * SportsComplexes^0.8 - Museum: U_museum = 300 * Museums^0.9 The city council wants to maximize the total utility of all facilities. The city has a budget of $500,000 to spend on these facilities. The cost to build each type of facility is: - Library: $50,000 - Community Center: $75,000 - Park: $100,000 - Sports Complex: $125,000 - Museum: $150,000 The city has a land constraint that limits the total number of facilities that can be built. The maximum number of facilities allowed is 5. The city council has a policy that at least one of each type of facility must be built. The utility of each facility is determined by a non-linear function based on the number of facilities built. The utility functions are as follows:",
        "type": "nonlinear-notable",
        "index": 509,
        "length": 1138,
        "var_num": 5
    },
    {
        "question": "A store sells two salad bowls. The individual salad contains 5 units of lettuce, 2 units of tomatoes, and 2 units of sauce. The family-sized salad contains 18 units of lettuce, 6 units of tomatoes, and 5 units of sauce. The store has available 220 units of lettuce, 150 units of tomatoes, and 140 units of sauce. If the profit per individual salad is $4 and the profit per family-sized salad is $7, how many of each should they sell to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of individual salads\", \"name\": \"x\"}, {\"description\": \"number of family-sized salads\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit\", \"function\": \"4x + 7y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"lettuce constraint\", \"function\": \"5x + 18y <= 220\"}, {\"description\": \"tomatoes constraint\", \"function\": \"2x + 6y <= 150\"}, {\"description\": \"sauce constraint\", \"function\": \"2x + 5y <= 140\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_individual_salads = LpVariable(\"NumIndividualSalads\", lowBound=0, cat='Integer') # number of individual salads\nnum_family_salads = LpVariable(\"NumFamilySalads\", lowBound=0, cat='Integer') # number of family-sized salads\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SaladProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 4 * num_individual_salads + 7 * num_family_salads\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 5 * num_individual_salads + 18 * num_family_salads <= 220 # lettuce constraint\nproblem += 2 * num_individual_salads + 6 * num_family_salads <= 150 # tomatoes constraint\nproblem += 2 * num_individual_salads + 5 * num_family_salads <= 140 # sauce constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of individual salads to sell:\", num_individual_salads.value())\nprint(\"The number of family-sized salads to sell:\", num_family_salads.value())\nprint(\"The maximum profit:\", objective.value())\n",
        "results": {
            "The number of individual salads to sell": "44.0",
            "The number of family-sized salads to sell": "0.0",
            "The maximum profit": "176.0"
        },
        "type": "linear-notable",
        "index": 510,
        "length": 452,
        "var_num": 2
    },
    {
        "question": "A car manufacturer makes two versions of the same car, a regular model and a premium model. They make x1 regular models per day and x2 premium models per day. The profit per regular model is $5000 and the profit per premium model is $8500 (x1 and x2 are unknown values both greater than or equal to 0). The daily demand for these cars is limited to and most 8 regular models and 6 premium models. In addition, the manufacturer can make a maximum of 12 cars of either type per day. How many cars of each model should the manufacturer make in order to maximize profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_regular = LpVariable(\"NumRegular\", lowBound=0, cat='Integer') # number of regular models per day\nnum_premium = LpVariable(\"NumPremium\", lowBound=0, cat='Integer') # number of premium models per day\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CarManufacturer\", LpMaximize)\n\n# Define the objective function\nobjective = 5000 * num_regular + 8500 * num_premium\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += num_regular <= 8 # daily demand for regular models\nproblem += num_premium <= 6 # daily demand for premium models\nproblem += num_regular + num_premium <= 12 # maximum production capacity\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of regular models:\", num_regular.value())\nprint(\"The number of premium models:\", num_premium.value())\nprint(\"The total profit:\", objective.value())",
        "results": {
            "The number of regular models": "6.0",
            "The number of premium models": "6.0",
            "The total profit": "81000.0"
        },
        "formulation": "maximize 8500y+5000x\nSubject to: \nx <= 8\ny <= 6\nx+y <= 12 (end)",
        "type": "linear-notable",
        "index": 511,
        "length": 566,
        "var_num": 2
    },
    {
        "question": "We want to build a box whose base length is 6 times the base width and the box will enclose 20 in3. The cost of the material of the sides is $3/in2 and the cost of the top and bottom is $15/in2. Determine the dimensions of the box that will minimize the cost.",
        "scenario": "## Define Variables:\nWe want to build a box.\n// variables: {\"width of the box\": \"w\", \"length of the box\": \"l\", \"height of the box\": \"h\"}, where w, l, h >= 0\n\n## Define Objective Function:\nThe cost of the material of the sides is $3 per square inch, and the cost of the top and bottom is $15 per square inch. Determine the dimensions of the box that will minimize the cost.\n// The area of the sides is 2(w + l) * h, and the area of the top and bottom is 2*w*l.\n// So, the cost of the box is 3 * 2(w + l) * h + 15 * 2 * w * l = 6wh + 6lh + 30wl.\n// So, the objective function is: Minimize 6wh + 6lh + 30wl\n\n## Generate Constraint-1:\nThe base length of the box should be 6 times the base width.\n// l = 6w\n\n## Generate Constraint-2:\nThe volume of the box should be at least 20 cubic inches.\n// w * l * h >= 20",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nw = model.addVar(vtype=\"CONTINUOUS\", name=\"w\", lb=0, ub=100) # width of the box\nl = model.addVar(vtype=\"CONTINUOUS\", name=\"l\", lb=0, ub=100) # length of the box\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\", lb=0, ub=100) # height of the box\n\n# Define objective function\nobj = model.addVar(vtype=\"CONTINUOUS\", name=\"obj\")\nmodel.addCons(obj == 6*w*h + 6*l*h + 30*w*l)\nmodel.setObjective(obj, \"minimize\")\n\n# Add constraints\nmodel.addCons(l == 6*w) # Constraint-1: l = 6w\nmodel.addCons(w*l*h >= 20) # Constraint-2: w * l * h >= 20\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The width of the box:\", model.getVal(w))\n    print(\"The length of the box:\", model.getVal(l))\n    print(\"The height of the box:\", model.getVal(h))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The width of the box": "0.7298570641141041",
            "The length of the box": "4.3791423846846245",
            "The height of the box": "6.257532217155436",
            "The minimum surface area of the box:": "287.7028115678059"
        },
        "type": "nonlinear-notable",
        "index": 512,
        "length": 259,
        "var_num": 3
    },
    {
        "scenario": "## Define Variables:\nA logistics company is managing the distribution of three types of goods: GoodsX, GoodsY, and GoodsZ. The company needs to decide how many trucks to allocate for each type of good to optimize delivery efficiency and minimize costs. Additionally, the company can invest in route optimization software to reduce travel time and fuel consumption, which affects the cost and efficiency of each delivery.\n// variables: {\"number of trucks for GoodsX\": \"TrucksX\", \"number of trucks for GoodsY\": \"TrucksY\", \"number of trucks for GoodsZ\": \"TrucksZ\", \"investment in route optimization for GoodsX\": \"OptimizationX\", \"investment in route optimization for GoodsY\": \"OptimizationY\", \"investment in route optimization for GoodsZ\": \"OptimizationZ\"}, where TrucksX, TrucksY, TrucksZ >= 0 & TrucksX, TrucksY, TrucksZ are integers, and OptimizationX, OptimizationY, OptimizationZ are continuous.\n\n## Define Objective Function:\nThe reduction in delivery costs is linearly proportional to the amount of investment in route optimization software for each type of good.\nThe initial cost per truck for GoodsX is $1,000, but with optimization, the cost decreases by $10 for every $100 invested in optimization. \nThe initial cost per truck for GoodsY is $1,200, and with optimization, the cost decreases by $12 for every $100 invested in optimization. \nThe initial cost per truck for GoodsZ is $1,500, and with optimization, the cost decreases by $15 for every $100 invested in optimization. \nThe company aims to minimize the total delivery cost for all goods.\n// Total cost for GoodsX: CostX = (1000 - 0.1 * OptimizationX) * TrucksX\n// Total cost for GoodsY: CostY = (1200 - 0.12 * OptimizationY) * TrucksY\n// Total cost for GoodsZ: CostZ = (1500 - 0.15 * OptimizationZ) * TrucksZ\n// So, the objective function is: Minimize (CostX + CostY + CostZ)\n\n## Generate Constraint-1:\nThe company has a total of 50 trucks available for allocation.\n// TrucksX + TrucksY + TrucksZ <= 50\n\n## Generate Constraint-2:\nThe budget for route optimization software is $10,000.\n// OptimizationX + OptimizationY + OptimizationZ <= 10000\n\n## Generate Constraint-3:\nDue to contractual obligations, the company must allocate at least 10 trucks for GoodsX and 15 trucks for GoodsY.\n// TrucksX >= 10; TrucksY >= 15",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nTrucksX = model.addVar(vtype=\"INTEGER\", name=\"TrucksX\") # number of trucks for GoodsX\nmodel.addCons(TrucksX >= 0)\nTrucksY = model.addVar(vtype=\"INTEGER\", name=\"TrucksY\") # number of trucks for GoodsY\nmodel.addCons(TrucksY >= 0)\nTrucksZ = model.addVar(vtype=\"INTEGER\", name=\"TrucksZ\") # number of trucks for GoodsZ\nmodel.addCons(TrucksZ >= 0)\nOptimizationX = model.addVar(vtype=\"CONTINUOUS\", name=\"OptimizationX\") # investment in route optimization for GoodsX\nmodel.addCons(OptimizationX >= 0)\nOptimizationY = model.addVar(vtype=\"CONTINUOUS\", name=\"OptimizationY\") # investment in route optimization for GoodsY\nmodel.addCons(OptimizationY >= 0)\nOptimizationZ = model.addVar(vtype=\"CONTINUOUS\", name=\"OptimizationZ\") # investment in route optimization for GoodsZ\nmodel.addCons(OptimizationZ >= 0)\n\n# Define objective function\nCostX = (1000 - 0.1 * OptimizationX) * TrucksX\nCostY = (1200 - 0.12 * OptimizationY) * TrucksY\nCostZ = (1500 - 0.15 * OptimizationZ) * TrucksZ\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nmodel.addCons(obj == CostX + CostY + CostZ)\n\n# Add constraints\nmodel.addCons(TrucksX + TrucksY + TrucksZ <= 50)\nmodel.addCons(OptimizationX + OptimizationY + OptimizationZ <= 10000)\nmodel.addCons(TrucksX >= 10)\nmodel.addCons(TrucksY >= 15)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Trucks for GoodsX: \", model.getVal(TrucksX))\n    print(\"Number of Trucks for GoodsY: \", model.getVal(TrucksY))\n    print(\"Number of Trucks for GoodsZ: \", model.getVal(TrucksZ))\n    print(\"Investment in Optimization for GoodsX: \", model.getVal(OptimizationX))\n    print(\"Investment in Optimization for GoodsY: \", model.getVal(OptimizationY))\n    print(\"Investment in Optimization for GoodsZ: \", model.getVal(OptimizationZ))\n    print(\"Total Cost: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Trucks for GoodsX": "10.0",
            "Number of Trucks for GoodsY": "40.0",
            "Number of Trucks for GoodsZ": "0.0",
            "Investment in Optimization for GoodsX": "0",
            "Investment in Optimization for GoodsY": "10000.0",
            "Investment in Optimization for GoodsZ": "0",
            "Total Cost": "10000"
        },
        "question": "A logistics company is managing the distribution of three types of goods: GoodsX, GoodsY, and GoodsZ. The company needs to decide how many trucks to allocate for each type of good and how much to invest in route optimization software to optimize delivery efficiency and minimize costs. The relationship between investment in route optimization and the cost per truck for each type of good is given in the following Table.\n\n| Goods | Initial Cost per Truck | Reduction per $100 Investment |\n|-------|------------------------|-------------------------------|\n| GoodsX | $1,000                | $10                          |\n| GoodsY | $1,200                | $12                          |\n| GoodsZ | $1,500                | $15                          |\n\nThe company has a total of 50 trucks available for allocation. The budget for route optimization software is $10,000. Due to contractual obligations, the company must allocate at least 10 trucks for GoodsX and 15 trucks for GoodsY. The company aims to minimize the total delivery cost for all goods.\n",
        "type": "nonlinear-table",
        "index": 513,
        "length": 1055,
        "var_num": 6
    },
    {
        "question": "A gardener has 50 acres available for growing lavender and tulips. The gardener must grow at least 5 acres of lavender and at least 8 acres of tulips. Even though lavenders sell better, the gardener can grow at most twice the amount of lavender as tulips. If the profit per acre of lavender is $250 and the profit per acre of tulips is $200, how many acres of each should be grown to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of acres of lavender grown\", \"name\": \"x\"}, {\"description\": \"number of acres of tulips grown\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit from growing lavender and tulips\", \"function\": \"250x + 200y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"total amount of land available\", \"function\": \"x + y <= 50\"}, {\"description\": \"minimum amount of lavender grown\", \"function\": \"x >= 5\"}, {\"description\": \"minimum amount of tulips grown\", \"function\": \"y >= 8\"}, {\"description\": \"maximum ratio of lavender to tulips\", \"function\": \"x <= 2y\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"acres_of_lavender\", lowBound=5, cat='Continuous') # number of acres of lavender grown\ny = LpVariable(\"acres_of_tulips\", lowBound=8, cat='Continuous') # number of acres of tulips grown\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"GardenerProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 250 * x + 200 * y\nproblem += objective # maximize the total profit from growing lavender and tulips\n\n# Define the constraints\nproblem += x + y <= 50 # total amount of land available\nproblem += x <= 2 * y # maximum ratio of lavender to tulips\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of acres of lavender grown:\", x.value())\nprint(\"The number of acres of tulips grown:\", y.value())\nprint(\"Total profit:\", objective.value())\n",
        "results": {
            "The number of acres of lavender grown": "33.333333",
            "The number of acres of tulips grown": "16.666667",
            "Total profit": "11666.666650000001"
        },
        "type": "linear-notable",
        "index": 514,
        "length": 400,
        "var_num": 2
    },
    {
        "question": "A rain gutter is to be constructed from sheet metal with a wide of 50 cm. The gutter is formed by bending the metal sheet at two points, each 10 cm from the ends. Find the angle of those bends that will result in the maximum water-carrying capacity.",
        "scenario": "## Define Variables:\nA rain gutter is to be constructed from sheet metal with a wide of 50 cm. The gutter is formed by bending the metal sheet at two points, each 10 cm from the ends.\n// variables: {\"angle of the bends\": \"\u03b8\"}, where 0 <= \u03b8 <= \u03c0/2\n\n## Define Objective Function:\nFind the angle of those bends that will result in the maximum water-carrying capacity.\n// The cross-sectional area of the gutter is a trapezoid. Trapezoidal area formula is S = (upper base + lower base) * height / 2.\n// The upper base is 50 - 20 = 30cm\n// The lower base is 30 + 10 * cos(\u03b8) * 2 = 30 + 20 * cos(\u03b8) cm\n// The height is 10 * sin(\u03b8)\n// So, the cross-sectional area of the gutter is S = (30 + 30 + 20 * cos(\u03b8)) * 10 * sin(\u03b8) / 2\n// So, the objective function is: Maximize S = (30 + 30 + 20 * cos(\u03b8)) * 10 * sin(\u03b8) / 2",
        "code": "from pyscipopt import Model\nimport math\nimport pyscipopt\n\n# Create a new model\nmodel = Model()\n\n# Define variables\ntheta = model.addVar(vtype=\"CONTINUOUS\", name=\"theta\", lb=0, ub=math.pi/2)  # angle of the bends\n\n# Define objective function\nS = model.addVar('S')\nmodel.setObjective(S, \"maximize\")\nmodel.addCons(S == ((30 + 30 + 20 * pyscipopt.cos(theta)) * 10 * pyscipopt.sin(theta)) / 2)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The angle of the bends that will result in the maximum water-carrying capacity: \", model.getVal(theta))\n    print(\"The maximum water-carrying capacity: \", model.getVal(S))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The angle of the bends that will result in the maximum water-carrying capacity": "1.2861866290894781",
            "The maximum water-carrying capacity": "314.8801297874825"
        },
        "type": "nonlinear-notable",
        "index": 515,
        "length": 249,
        "var_num": 1
    },
    {
        "question": "A company seeks to deliver an ad with a limited budget, The  Exposure (people/ad or  commercial), Cost for Television Commercial are 20,000 $15,000. For Radio Commercial are 2,000  6,000. Newspaper Ad are 9,000 4,000. The Budget limit $100,000, television time for four commercials, Radio time for 10 commercials, Newspaper space for 7 ads. Resources for no more than 15 commercials and/or ads. How to maximize the exposure people with the budget?",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal number of television commercials, radio commercials, and newspaper ads to maximize the exposure. Let's denote the number of television commercials as TV, the number of radio commercials as RC, and the number of newspaper ads as NA.\n```Variables\nTV //number of television commercials\nRC //number of radio commercials\nNA //number of newspaper ads\nTV, RC, NA >= 0, and they are integers\n```\n\n# Objective Function:\nWe want to maximize the exposure, so the objective function is given by the sum of the exposure from television commercials, radio commercials, and newspaper ads. The exposure from television commercials is 20,000 * TV, the exposure from radio commercials is 2,000 * RC, and the exposure from newspaper ads is 9,000 * NA. Therefore, the objective function is 20,000 * TV + 2,000 * RC + 9,000 * NA.\n```Objective Function\nMaximize: 20000 * TV + 2000 * RC + 9000 * NA\n```\n\n# Constraints:\nWe need to consider the following constraints:\n- Budget constraint: The total cost of television commercials, radio commercials, and newspaper ads should not exceed the budget limit of $100,000. This can be represented as 15,000 * TV + 6,000 * RC + 4,000 * NA <= 100,000.\n- Television commercials constraint: The number of television commercials should not exceed 4. This can be represented as TV <= 4.\n- Radio commercials constraint: The number of radio commercials should not exceed 10. This can be represented as RC <= 10.\n- Newspaper ads constraint: The number of newspaper ads should not exceed 7. This can be represented as NA <= 7.\n- Total commercials and ads constraint: The total number of commercials and ads should not exceed 15. This can be represented as TV + RC + NA <= 15.\n```Constraints\n15000 * TV + 6000 * RC + 4000 * NA <= 100000 //Budget constraint\nTV <= 4 //Television commercials constraint\nRC <= 10 //Radio commercials constraint\nNA <= 7 //Newspaper ads constraint\nTV + RC + NA <= 15 //Total commercials and ads constraint\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nTV = LpVariable(\"Television_Commercials\", 0, 4, cat='Integer')\nRC = LpVariable(\"Radio_Commercials\", 0, 10, cat='Integer')\nNA = LpVariable(\"Newspaper_Ads\", 0, 7, cat='Integer')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"Maximize_Exposure\", LpMaximize)\n\n# Define the objective function\nproblem += 20000 * TV + 2000 * RC + 9000 * NA\n\n# Define the constraints\nproblem += 15000 * TV + 6000 * RC + 4000 * NA <= 100000\nproblem += TV <= 4\nproblem += RC <= 10\nproblem += NA <= 7\nproblem += TV + RC + NA <= 15\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of television commercials:\", TV.value())\nprint(\"The number of radio commercials:\", RC.value())\nprint(\"The number of newspaper ads:\", NA.value())\nprint(\"The maximum exposure:\", value(problem.objective))\n",
        "results": {
            "The number of television commercials": "4.0",
            "The number of radio commercials": "2.0",
            "The number of newspaper ads": "7.0",
            "The maximum exposure": "147000.0"
        },
        "type": "linear-notable",
        "index": 516,
        "length": 447,
        "var_num": 3
    },
    {
        "question": "A farm has to transport their chickens. They can either be transported by train or by truck. Each train trip can take 500 chicken while each truck trip can take 300 chicken. The cost per train trip is $100 and the cost per truck trip is $80. The farm has a budget of $2000 and the number of train trips cannot exceed the number of truck trips. How many of each trip should be taken to maximize the number of chickens that can be transported?",
        "formulation": "{\"variable\": [{\"description\": \"number of train trips\", \"name\": \"x\"}, {\"description\": \"number of truck trips\", \"name\": \"y\"}], \"objective\": [{\"description\": \"number of chickens transported\", \"function\": \"500x + 300y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"budget constraint\", \"function\": \"100x + 80y <= 2000\"}, {\"description\": \"number of train trips must be less than or equal to number of truck trips\", \"function\": \"x <= y\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_train_trips = LpVariable(\"NumTrainTrips\", lowBound=0, cat='Integer') # number of train trips\nnum_truck_trips = LpVariable(\"NumTruckTrips\", lowBound=0, cat='Integer') # number of truck trips\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FarmTransport\", LpMaximize)\n\n# Define the objective function\nobjective = 500 * num_train_trips + 300 * num_truck_trips\nproblem += objective # maximize the total number of chickens transported\n\n# Define the constraints\nproblem += 100 * num_train_trips + 80 * num_truck_trips <= 2000 # budget constraint\nproblem += num_train_trips <= num_truck_trips # number of train trips must be less than or equal to number of truck trips\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of train trips:\", num_train_trips.value())\nprint(\"The number of truck trips:\", num_truck_trips.value())\nprint(\"The number of chickens transported:\", objective.value())\n",
        "results": {
            "The number of train trips": "11.0",
            "The number of truck trips": "11.0",
            "The number of chickens transported": "8800.0"
        },
        "type": "linear-notable",
        "index": 517,
        "length": 441,
        "var_num": 2
    },
    {
        "question": "You need to design a n open-topped glass aquarium with a square base. The aquarium should hold more than 62.5 cubic feet of water. What is the minimum possible exterior surface area of the aquarium?",
        "scenario": "## Define Variables:\nYou need to design a n open-topped glass aquarium with a square base.\n// variables: {\"length of the side of the square base\": \"x\", \"height of the aquarium\": \"h\"}, where x, h >= 0\n\n## Define Objective Function:\nWhat is the minimum possible exterior surface area of the aquarium?\n// The exterior surface area of the aquarium is the sum of the area of the base and the area of the four sides. The area of the base is x^2, and the area of the four sides is 4*x*h.\n// So, the objective function is: Minimize x^2 + 4*x*h\n\n## Generate Constraint-1:\nhe aquarium should hold more than 62.5 cubic feet of water.\n// x^2*h >= 62.5",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"CONTINUOUS\", name=\"x\") # length of the side of the square base\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the aquarium\n\n# Define objective function\nobj = model.addVar(vtype=\"CONTINUOUS\", name=\"obj\")\nmodel.addCons(obj == x**2 + 4*x*h)\nmodel.setObjective(obj, \"minimize\")\n\n# Add constraints\nmodel.addCons(x**2*h >= 62.5)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The length of the side of the square base:\", model.getVal(x))\n    print(\"The height of the aquarium:\", model.getVal(h))\n    print(\"The minimum possible exterior surface area of the aquarium: \", model.getVal(x**2 + 4*x*h))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The length of the side of the square base": "5.0",
            "The height of the aquarium": "2.5",
            "The minimum possible exterior surface area of the aquarium": "75.0"
        },
        "type": "nonlinear-notable",
        "index": 518,
        "length": 198,
        "var_num": 2
    },
    {
        "question": "A patient with weak bones has been told to drink milk and eat cheese in order to meet his calcium and vitamin D requirements. In one serving of milk, there are 10 grams of calcium and 5 grams of Vitamin D. In one serving of cheese, there are 8 grams of calcium and 6 grams of vitamin D. The patient must get at least 100 grams of calcium and 80 grams of Vitamin D per day. If a serving of milk costs $2 and a serving of cheese costs $4, how many servings of each should the patient eat to minimize cost?",
        "formulation": "{\"variable\": [{\"description\": \"number of servings of milk\", \"name\": \"x\"}, {\"description\": \"number of servings of cheese\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total cost of servings\", \"function\": \"2x + 4y\", \"sense\": \"Minimize\"}], \"constraint\": [{\"description\": \"calcium requirement\", \"function\": \"10x + 8y >= 100\"}, {\"description\": \"Vitamin D requirement\", \"function\": \"5x + 6y >= 80\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"ServingsOfMilk\", lowBound=0, cat='Continuous') # number of servings of milk\ny = LpVariable(\"ServingsOfCheese\", lowBound=0, cat='Continuous') # number of servings of cheese\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DietaryPlan\", LpMinimize)\n\n# Define the objective function\nproblem += 2 * x + 4 * y # minimize the total cost of servings\n\n# Define the constraints\nproblem += 10 * x + 8 * y >= 100 # calcium requirement\nproblem += 5 * x + 6 * y >= 80 # Vitamin D requirement\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of servings of milk:\", x.value())\nprint(\"The number of servings of cheese:\", y.value())\nprint(\"Total cost:\", value(problem.objective))\n",
        "results": {
            "The number of servings of milk": "16.0",
            "The number of servings of cheese": "0.0",
            "Total cost": "32.0"
        },
        "type": "linear-notable",
        "index": 519,
        "length": 503,
        "var_num": 2
    },
    {
        "question": "Grain is transported from a farm to local grocery stores in either large bags or tiny bags. Large bags can hold 25 kg of grain and requires 4 units of energy to transport. Tiny bags can hold 6 kg of grain and requires 1.5 units of energy to transport. The distribution process has access to 110 units of energy. Because of popularity of buying in bulk, there must be twice as many large bags as tiny bags of rice. Additionally, there must be at least 20 tiny bags of rice. How many of each size of rice bags should be used to maximize the total amount of grain in weight?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_large_bags = LpVariable(\"NumLargeBags\", lowBound=0, cat='Integer') # number of large bags\nnum_tiny_bags = LpVariable(\"NumTinyBags\", lowBound=20, cat='Integer') # number of tiny bags\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"GrainTransport\", LpMaximize)\n\n# Define the objective function\nobjective = 25 * num_large_bags + 6 * num_tiny_bags\nproblem += objective # maximize the total weight of grain transported\n\n# Define the constraints\nproblem += 4 * num_large_bags + 1.5 * num_tiny_bags <= 110 # the total energy usage must be less than or equal to 110\nproblem += num_large_bags == 2 * num_tiny_bags # there must be twice as many large bags as tiny bags\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of large bags:\", num_large_bags.value())\nprint(\"The number of tiny bags:\", num_tiny_bags.value())\nprint(\"The total weight of grain transported:\", objective.value())",
        "results": {
            "The number of large bags": "20.0",
            "The number of tiny bags": "20.0",
            "The total weight of grain transported": "620.0"
        },
        "formulation": "maximize 25x+6y\nSubject to: \n4x+1.5y <= 110\nx >= 2y\ny >= 20 (end)",
        "type": "linear-notable",
        "index": 520,
        "length": 571,
        "var_num": 2
    },
    {
        "question": "A grandmother knits blankets and sweaters for her community. A blanket requires 30 units of yarn and 5 hours of knitting. A sweater requires 20 units of yarn and 4 hours of knitting. The grandmother has 200 units of yarn available and 40 hours of knitting available. If the profit per blanket is $5.50 and the profit per sweater is $5, how many of each should she knit to maximize her profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of blankets\", \"name\": \"x\"}, {\"description\": \"number of sweaters\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit\", \"function\": \"5.5x + 5y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"yarn constraint\", \"function\": \"30x + 20y <= 200\"}, {\"description\": \"time constraint\", \"function\": \"5x + 4y <= 40\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_blankets = LpVariable(\"NumBlankets\", lowBound=0, cat='Integer') # number of blankets\nnum_sweaters = LpVariable(\"NumSweaters\", lowBound=0, cat='Integer') # number of sweaters\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"GrandmotherKnitting\", LpMaximize)\n\n# Define the objective function\nobjective = 5.5 * num_blankets + 5 * num_sweaters\nproblem += objective # maximize the profit\n\n# Define the constraints\nproblem += 30 * num_blankets + 20 * num_sweaters <= 200 # yarn constraint\nproblem += 5 * num_blankets + 4 * num_sweaters <= 40 # time constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of blankets to knit:\", num_blankets.value())\nprint(\"The number of sweaters to knit:\", num_sweaters.value())\nprint(\"The maximum profit:\", objective.value())\n",
        "results": {
            "The number of blankets to knit": "0.0",
            "The number of sweaters to knit": "10.0",
            "The maximum profit": "50.0"
        },
        "type": "linear-notable",
        "index": 521,
        "length": 392,
        "var_num": 2
    },
    {
        "question": "An oil and gas company has two types of pipes, a high-volume and a low-volume one. Every day, the high-volume pipe allows 10000 US gallons and it is recommended that 12 technicians closely monitor the pipes to ensure that it is functioning properly. Each day, the low-volume pipe allows 5000 US gallons and 5 technicians should closely monitor for safety reasons. Every day, the oil and gas company needs to meet the demands of at least 150000 US gallons of gas and they have 160 technicians that are on their staff. Since the high-volume pipe has a higher risk of environmental damage, at most 35 percent of the pipes can be high-volume ones. Additionally, there must be a minimum of 8 low-volume pipes. How many of each pipe types should be used to reduce the total number of pipes required?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_high_volume_pipes = LpVariable(\"NumHighVolumePipes\", lowBound=0, cat='Integer') # number of high-volume pipes\nnum_low_volume_pipes = LpVariable(\"NumLowVolumePipes\", lowBound=8, cat='Integer') # number of low-volume pipes\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimizeNumberOfPipes\", LpMinimize)\n\n# Define the objective function\nobjective = num_high_volume_pipes + num_low_volume_pipes\nproblem += objective # minimize the total number of pipes\n\n# Define the constraints\nproblem += 10000 * num_high_volume_pipes + 5000 * num_low_volume_pipes >= 150000 # meet the demand of at least 150,000 gallons\nproblem += 12 * num_high_volume_pipes + 5 * num_low_volume_pipes <= 160 # do not exceed the number of available technicians\nproblem += num_high_volume_pipes <= 0.35 * (num_high_volume_pipes + num_low_volume_pipes) # at most 35% high-volume pipes\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of high-volume pipes:\", num_high_volume_pipes.value())\nprint(\"The number of low-volume pipes:\", num_low_volume_pipes.value())\nprint(\"Total number of pipes:\", objective.value())",
        "results": {
            "The number of high-volume pipes": "5.0",
            "The number of low-volume pipes": "20.0",
            "Total number of pipes": "25.0"
        },
        "formulation": "minimize x+y\nSubject to: \n10000x+5000y >= 150000\n5y+12x <= 160\nx <= 35percent(x+y)\ny >= 8 (end)",
        "type": "linear-notable",
        "index": 522,
        "length": 793,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA bakery produces three types of pastries: Classic, Gourmet, and Vegan. The bakery needs to determine the quantities of each pastry to produce daily. Additionally, the bakery has a choice to either use regular ingredients or premium ingredients for each type of pastry.\n// variables: {\"quantity of Classic pastries\": \"Classic\", \"quantity of Gourmet pastries\": \"Gourmet\", \"quantity of Vegan pastries\": \"Vegan\", \"whether use regular ingredients for Classic\": \"RegularClassic\", \"whether use regular ingredients for Gourmet\": \"RegularGourmet\", \"whether use regular ingredients for Vegan\": \"RegularVegan\"}, where Classic, Gourmet, Vegan >= 0 and Classic, Gourmet, Vegan are integers, RegularClassic, RegularGourmet, RegularVegan are binary (0 or 1).\n\n## Define Objective Function:\nFor Classic pastries, the profit per unit with regular ingredients is $2, and with premium ingredients is $3.\nFor Gourmet pastries, the profit per unit with regular ingredients is $4, and with premium ingredients is $5.\nFor Vegan pastries, the profit per unit with regular ingredients is $3, and with premium ingredients is $4.\nThe bakery wants to maximize the total daily profit from selling the pastries.\n// Profit_Classic = (RegularClassic * 2 + (1 - RegularClassic) * 3) * Classic\n// Profit_Gourmet = (RegularGourmet * 4 + (1 - RegularGourmet) * 5) * Gourmet\n// Profit_Vegan = (RegularVegan * 3 + (1 - RegularVegan) * 4) * Vegan\n// So, the objective function is: Maximize (Profit_Classic + Profit_Gourmet + Profit_Vegan)\n\n## Generate Constraint-1:\nThe bakery has a daily supply of 100 kg of regular ingredients and 50 kg of premium ingredients. Per unit of each pastry, the regular ingredients required are 0.5 kg for Classic, 0.8 kg for Gourmet, and 0.6 kg for Vegan. The premium ingredients required are 0.8 kg for Classic, 1.2 kg for Gourmet, and 1 kg for Vegan.\n// 0.5 * Classic * RegularClassic + 0.8 * Gourmet * RegularGourmet + 0.6 * Vegan * RegularVegan <= 100\n// 0.8 * Classic * (1 - RegularClassic) + 1.2 * Gourmet * (1 - RegularGourmet) + 1 * Vegan * (1 - RegularVegan) <= 50\n\n## Generate Constraint-2:\nThe bakery has a daily production capacity of 200 pastries.\n// Classic + Gourmet + Vegan <= 200\n\n## Generate Constraint-3:\nThe market has a demand limit for each pastry. For Classic, the demand limit is 150 pastries. For Gourmet, the demand limit is 100 pastries. For Vegan, the demand limit is 80 pastries.\n// Classic <= 150; Gourmet <= 100; Vegan <= 80",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nClassic = model.addVar(vtype=\"INTEGER\", name=\"Classic\") # quantity of Classic pastries\nmodel.addCons(Classic >= 0)\nGourmet = model.addVar(vtype=\"INTEGER\", name=\"Gourmet\") # quantity of Gourmet pastries\nmodel.addCons(Gourmet >= 0)\nVegan = model.addVar(vtype=\"INTEGER\", name=\"Vegan\") # quantity of Vegan pastries\nmodel.addCons(Vegan >= 0)\nRegularClassic = model.addVar(vtype=\"BINARY\", name=\"RegularClassic\") # whether use regular ingredients for Classic\nRegularGourmet = model.addVar(vtype=\"BINARY\", name=\"RegularGourmet\") # whether use regular ingredients for Gourmet\nRegularVegan = model.addVar(vtype=\"BINARY\", name=\"RegularVegan\") # whether use regular ingredients for Vegan\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == (RegularClassic * 2 + (1 - RegularClassic) * 3) * Classic + (RegularGourmet * 4 + (1 - RegularGourmet) * 5) * Gourmet + (RegularVegan * 3 + (1 - RegularVegan) * 4) * Vegan)\n\n# Add constraints\nmodel.addCons(0.5 * Classic * RegularClassic + 0.8 * Gourmet * RegularGourmet + 0.6 * Vegan * RegularVegan <= 100)\nmodel.addCons(0.8 * Classic * (1 - RegularClassic) + 1.2 * Gourmet * (1 - RegularGourmet) + 1 * Vegan * (1 - RegularVegan) <= 50)\nmodel.addCons(Classic + Gourmet + Vegan <= 200)\nmodel.addCons(Classic <= 150)\nmodel.addCons(Gourmet <= 100)\nmodel.addCons(Vegan <= 80)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Total Profit: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Total Profit": "686.0"
        },
        "question": "A bakery produces three types of pastries: Classic, Gourmet, and Vegan. The bakery needs to determine the quantities of each pastry to produce daily. Additionally, the bakery has a choice to either use regular ingredients or premium ingredients for each type of pastry. For Gourmet pastries, the profit per unit with regular ingredients is $4, and with premium ingredients is $5. For Vegan pastries, the profit per unit with regular ingredients is $3, and with premium ingredients is $4. The bakery wants to maximize the total daily profit from selling the pastries. The bakery has a daily supply of 100 kg of regular ingredients and 50 kg of premium ingredients. Per unit of each pastry, the regular ingredients required are 0.5 kg for Classic, 0.8 kg for Gourmet, and 0.6 kg for Vegan. The premium ingredients required are 0.8 kg for Classic, 1.2 kg for Gourmet, and 1 kg for Vegan. The bakery has a daily production capacity of 200 pastries. The market has a demand limit for each pastry. For Classic, the demand limit is 150 pastries. For Gourmet, the demand limit is 100 pastries. For Vegan, the demand limit is 80 pastries. For Classic pastries, the profit per unit with regular ingredients is $2, and with premium ingredients is $3.",
        "type": "nonlinear-notable",
        "index": 523,
        "length": 1239,
        "var_num": 6
    },
    {
        "scenario": "## Define Variables:\nA company has four different production facilities and needs to allocate resources (labor and machinery) to each facility to maximize production efficiency.\n// variables: {\"labor at facility 1\": \"L1\", \"labor at facility 2\": \"L2\", \"labor at facility 3\": \"L3\", \"labor at facility 4\": \"L4\", \"machinery at facility 1\": \"M1\", \"machinery at facility 2\": \"M2\", \"machinery at facility 3\": \"M3\", \"machinery at facility 4\": \"M4\"}, where L1, L2, L3, L4, M1, M2, M3, M4 >= 0 & L1, L2, L3, L4, M1, M2, M3, M4 are integers\n\n## Define Objective Function:\nThe company propose the production efficiency score. The production efficiency score of each facility is determined by a non-linear function that depends on the number of laborers and machinery. The efficiency score function is given by: Efficiency = (L^2 * M) / (L + M), where L is the number of laborers and M is the number of machinery units. The company aims to maximize the total efficiency score across all facilities.\n// The efficiency score at facility 1: E1 = (L1^2 * M1) / (L1 + M1)\n// The efficiency score at facility 2: E2 = (L2^2 * M2) / (L2 + M2)\n// The efficiency score at facility 3: E3 = (L3^2 * M3) / (L3 + M3)\n// The efficiency score at facility 4: E4 = (L4^2 * M4) / (L4 + M4)\n// So, the objective function is: Maximize E1 + E2 + E3 + E4\n// Maximize (L1^2 * M1) / (L1 + M1) + (L2^2 * M2) / (L2 + M2) + (L3^2 * M3) / (L3 + M3) + (L4^2 * M4) / (L4 + M4)\n\n## Generate Constraint-1:\nThe total number of laborers available across all facilities is 100.\n// L1 + L2 + L3 + L4 <= 100\n\n## Generate Constraint-2:\nThe total number of machinery units available across all facilities is 50.\n// M1 + M2 + M3 + M4 <= 50\n\n## Generate Constraint-3:\nEach facility can have a maximum of 30 laborers.\n// L1 <= 30; L2 <= 30; L3 <= 30; L4 <= 30\n\n## Generate Constraint-4:\nEach facility can have a maximum of 20 machinery units.\n// M1 <= 20; M2 <= 20; M3 <= 20; M4 <= 20\n\n## Generate Constraint-5:\nEach facility must have at least 5 laborers and 3 machinery units.\n// L1 >= 5; L2 >= 5; L3 >= 5; L4 >= 5\n// M1 >= 3; M2 >= 3; M3 >= 3; M4 >= 3",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nL1 = model.addVar(vtype=\"INTEGER\", name=\"L1\") # labor at facility 1\nmodel.addCons(L1 >= 0)\nL2 = model.addVar(vtype=\"INTEGER\", name=\"L2\") # labor at facility 2\nmodel.addCons(L2 >= 0)\nL3 = model.addVar(vtype=\"INTEGER\", name=\"L3\") # labor at facility 3\nmodel.addCons(L3 >= 0)\nL4 = model.addVar(vtype=\"INTEGER\", name=\"L4\") # labor at facility 4\nmodel.addCons(L4 >= 0)\nM1 = model.addVar(vtype=\"INTEGER\", name=\"M1\") # machinery at facility 1\nmodel.addCons(M1 >= 0)\nM2 = model.addVar(vtype=\"INTEGER\", name=\"M2\") # machinery at facility 2\nmodel.addCons(M2 >= 0)\nM3 = model.addVar(vtype=\"INTEGER\", name=\"M3\") # machinery at facility 3\nmodel.addCons(M3 >= 0)\nM4 = model.addVar(vtype=\"INTEGER\", name=\"M4\") # machinery at facility 4\nmodel.addCons(M4 >= 0)\n\n# Define objective function\n## Non-linear objective function, need to linearize\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == (L1**2 * M1) / (L1 + M1) + (L2**2 * M2) / (L2 + M2) + (L3**2 * M3) / (L3 + M3) + (L4**2 * M4) / (L4 + M4))\n\n# Add constraints\nmodel.addCons(L1 + L2 + L3 + L4 <= 100)\nmodel.addCons(M1 + M2 + M3 + M4 <= 50)\nmodel.addCons(L1 <= 30)\nmodel.addCons(L2 <= 30)\nmodel.addCons(L3 <= 30)\nmodel.addCons(L4 <= 30)\nmodel.addCons(M1 <= 20)\nmodel.addCons(M2 <= 20)\nmodel.addCons(M3 <= 20)\nmodel.addCons(M4 <= 20)\nmodel.addCons(L1 >= 5)\nmodel.addCons(L2 >= 5)\nmodel.addCons(L3 >= 5)\nmodel.addCons(L4 >= 5)\nmodel.addCons(M1 >= 3)\nmodel.addCons(M2 >= 3)\nmodel.addCons(M3 >= 3)\nmodel.addCons(M4 >= 3)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Total Efficiency Score: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Total Efficiency Score": "949.163898708422"
        },
        "question": "A company has four different production facilities and needs to allocate resources (labor and machinery) to each facility to maximize production efficiency. The production efficiency score of each facility is determined by a non-linear function that depends on the number of laborers and machinery. The efficiency score function is given by: Efficiency = (L^2 * M) / (L + M), where L is the number of laborers and M is the number of machinery units. The company aims to maximize the total efficiency score across all facilities.\n\nThe company has a total of 100 laborers and 50 machinery units available across all facilities. Each facility can have a maximum of 30 laborers and 20 machinery units. Each facility must also have at least 5 laborers and 3 machinery units.\n\nThe objective function to maximize is the sum of the efficiency scores at each facility:\nMaximize (L1^2 * M1) / (L1 + M1) + (L2^2 * M2) / (L2 + M2) + (L3^2 * M3) / (L3 + M3) + (L4^2 * M4) / (L4 + M4),\nwhere L1, L2, L3, L4 are the number of laborers at facilities 1, 2, 3, 4 respectively, and M1, M2, M3, M4 are the number of machinery units at facilities 1, 2, 3, 4 respectively.\n\nConstraints are as follows:\n1. L1 + L2 + L3 + L4 <= 100 (total number of laborers across all facilities)\n2. M1 + M2 + M3 + M4 <= 50 (total number of machinery units across all facilities)\n3. L1 <= 30; L2 <= 30; L3 <= 30; L4 <= 30 (maximum laborers per facility)\n4. M1 <= 20; M2 <= 20; M3 <= 20; M4 <= 20 (maximum machinery units per facility)\n5. L1 >= 5; L2 >= 5; L3 >= 5; L4 >= 5 (minimum laborers per facility)\n6. M1 >= 3; M2 >= 3; M3 >= 3; M4 >= 3 (minimum machinery units per facility)\n",
        "type": "nonlinear-table",
        "index": 524,
        "length": 1641,
        "var_num": 8
    },
    {
        "question": "You need to find the largest volume of a circular cylinder inside asphere. The radius of the sphere is 1. Please provide the volume, and the shape of the cylinder that will give the largest volume.",
        "scenario": "## Define Variables:\nYou need to find the largest volume of a circular cylinder inside a sphere.\n// variables: {\"radius of the cylinder\": \"r\", \"height of the cylinder\": \"h\"}, where r, h >= 0\n\n## Define Objective Function:\nPlease provide the volume, and the shape of the cylinder that will give the largest volume.\n// The volume of the cylinder is given by the formula V = \u03c0r^2h.\n// Therefore, the objective function is: Maximize V = \u03c0r^2h\n\n## Generate Constraint-1:\nThe radius of the sphere is 1.\n// The cylinder must fit inside the sphere, so the sum of the square of the radius and the square of half the height of the cylinder must be less than or equal to the square of the radius of the sphere. This can be represented as r^2 + (h/2)^2 <= 1^2.\n// r^2 + (h/2)^2 <= 1",
        "code": "from pyscipopt import Model\nimport math\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nr = model.addVar(vtype=\"CONTINUOUS\", name=\"r\") # radius of the cylinder\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the cylinder\n\n# Define objective function\nV = model.addVar('V')\nmodel.setObjective(V, \"maximize\")\nmodel.addCons(V == math.pi * r**2 * h)\n\n# Add constraints\nmodel.addCons(r**2 + (h/2)**2 <= 1)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The radius of the cylinder: \", model.getVal(r))\n    print(\"The height of the cylinder: \", model.getVal(h))\n    print(\"The maximum volume of the cylinder: \", model.getVal(V))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The radius of the cylinder": "0.8164061581550033",
            "The height of the cylinder": "1.1549566998694762",
            "The maximum volume of the cylinder": "2.418400326515517"
        },
        "type": "nonlinear-notable",
        "index": 525,
        "length": 197,
        "var_num": 2
    },
    {
        "question": "A cruise company can either have two types of trips, a large cruise ship or a small cruise ship. A large cruise ship trip can carry 2000 customers and produces 20 units of pollution. A small cruise ship trip can carry 800 customers and produces 15 units of pollution. There can be at most 7 large cruise ship trips and at least 40% of the total trips must be made by small cruise ships. If the cruise company aims to transport at least 20000 customers, how many of each size of cruise ships should the company use to minimize the total amount of pollution produced?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_large_cruise_trips = LpVariable(\"NumLargeCruiseTrips\", lowBound=0, upBound=7, cat='Integer') # number of large cruise trips\nnum_small_cruise_trips = LpVariable(\"NumSmallCruiseTrips\", lowBound=0, cat='Integer') # number of small cruise trips\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CruiseTransport\", LpMinimize)\n\n# Define the objective function\nobjective = 20 * num_large_cruise_trips + 15 * num_small_cruise_trips\nproblem += objective # minimize the total amount of pollution produced\n\n# Define the constraints\nproblem += 2000 * num_large_cruise_trips + 800 * num_small_cruise_trips >= 20000 # At least 20000 customers need to be transported\nproblem += num_small_cruise_trips >= (num_small_cruise_trips + num_large_cruise_trips) * 0.4 # At least 40% of the trips must be made by small cruise ships\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of large cruise ship trips:\", num_large_cruise_trips.value())\nprint(\"The number of small cruise ship trips:\", num_small_cruise_trips.value())\nprint(\"Total amount of pollution produced:\", objective.value())",
        "results": {
            "The number of large cruise ship trips": "7.0",
            "The number of small cruise ship trips": "8.0",
            "Total amount of pollution produced": "260.0"
        },
        "formulation": "minimize 20x+15y\nSubject to: \n2000x+800y >= 20000\nx <= 7\ny >= 0.4(x+y) (end)",
        "type": "linear-notable",
        "index": 526,
        "length": 565,
        "var_num": 2
    },
    {
        "question": "A baker melts milk and dark chocolate together to create a new mixture. The mixture must contain at least 120 units of cacao and 80 units of sugar. Each milk chocolate piece contains 3 units of cacao and 2 units of sugar. Each dark chocolate piece contains 4 units of cacao and 1 unit of sugar. If the cost per milk chocolate piece is $0.50 and the cost per dark chocolate piece is $0.75, how many of each should the baker buy to minimize costs?",
        "formulation": "{\"variable\": [{\"description\": \"number of milk chocolate pieces\", \"name\": \"x\"}, {\"description\": \"number of dark chocolate pieces\", \"name\": \"y\"}], \"objective\": [{\"description\": \"cost of chocolate pieces\", \"function\": \"0.5x + 0.75y\", \"sense\": \"Minimize\"}], \"constraint\": [{\"description\": \"cacao content constraint\", \"function\": \"3x + 4y >= 120\"}, {\"description\": \"sugar content constraint\", \"function\": \"2x + y >= 80\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_milk_chocolate_pieces = LpVariable(\"NumMilkChocolatePieces\", lowBound=0, cat='Continuous')\nnum_dark_chocolate_pieces = LpVariable(\"NumDarkChocolatePieces\", lowBound=0, cat='Continuous')\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ChocolateMixture\", LpMinimize)\n\n# Define the objective function\nobjective = 0.5 * num_milk_chocolate_pieces + 0.75 * num_dark_chocolate_pieces\nproblem += objective  # minimize the cost\n\n# Define the constraints\nproblem += 3 * num_milk_chocolate_pieces + 4 * num_dark_chocolate_pieces >= 120  # cacao content constraint\nproblem += 2 * num_milk_chocolate_pieces + num_dark_chocolate_pieces >= 80  # sugar content constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of milk chocolate pieces:\", num_milk_chocolate_pieces.value())\nprint(\"The number of dark chocolate pieces:\", num_dark_chocolate_pieces.value())\nprint(\"The total cost:\", objective.value())\n",
        "results": {
            "The number of milk chocolate pieces": "40.0",
            "The number of dark chocolate pieces": "0.0",
            "The total cost": "20.0"
        },
        "type": "linear-notable",
        "index": 527,
        "length": 445,
        "var_num": 2
    },
    {
        "question": "A chocolate company can transport their boxes of chocolate either using their own vans or by renting trucks. Their vans can transport 50 boxes per trip while a truck can transport 80 boxes per trip. Since they own their vans, the cost per van trip is $30 while the cost per truck trip is $50. The company needs to transport at least 1500 boxes of chocolate and they have a budget of $1000. Since the vans also provide advertising, the number of trips by van must be larger than the number of trips by trucks. How many of trip by each should be done to minimize the total number of trips?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_van_trips = LpVariable(\"NumVanTrips\", lowBound=0, cat='Integer') # number of van trips\nnum_truck_trips = LpVariable(\"NumTruckTrips\", lowBound=0, cat='Integer') # number of truck trips\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ChocolateTransport\", LpMinimize)\n\n# Define the objective function\nobjective = num_van_trips + num_truck_trips\nproblem += objective # minimize the total number of trips\n\n# Define the constraints\nproblem += 30 * num_van_trips + 50 * num_truck_trips <= 1000 # the cost must be at most $1000\nproblem += 50 * num_van_trips + 80 * num_truck_trips >= 1500 # at least 1500 boxes need to be transported\nproblem += num_van_trips >= num_truck_trips + 1 # van trips must be more than the number of truck trips\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of van trips:\", num_van_trips.value())\nprint(\"The number of truck trips:\", num_truck_trips.value())\nprint(\"The total number of trips:\", objective.value())",
        "results": {
            "The number of van trips": "14.0",
            "The number of truck trips": "10.0",
            "The total number of trips": "24.0"
        },
        "formulation": "minimize x+y\nSubject to: \n50x+80y >= 1500\n30x+50y <= 1000\nx >= y (end)",
        "type": "linear-notable",
        "index": 528,
        "length": 587,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA company plans to operate three types of transportation services, each serving a different type of cargo (Electronics, Textiles, and Food). The company needs to determine the number of vehicles to allocate for each cargo type, and the number of trips in each type of service per vehicle. For ease of management, the company decided to have the same number of trips per vehicle for the same type of service.\n// variables: {\"number of vehicles for Electronics\": \"ElectronicsVehicles\", \"number of vehicles for Textiles\": \"TextilesVehicles\", \"number of vehicles for Food\": \"FoodVehicles\", \"number of trips per vehicle for Electronics\": \"ElectronicsTripsPerVehicle\", \"number of trips per vehicle for Textiles\": \"TextilesTripsPerVehicle\", \"number of trips per vehicle for Food\": \"FoodTripsPerVehicle\"}, where ElectronicsVehicles, TextilesVehicles, FoodVehicles, ElectronicsTripsPerVehicle, TextilesTripsPerVehicle, FoodTripsPerVehicle >= 0 and ElectronicsVehicles, TextilesVehicles, FoodVehicles, ElectronicsTripsPerVehicle, TextilesTripsPerVehicle, FoodTripsPerVehicle are integers.\n\n## Define Objective Function:\nFor Electronics, the transportation cost per trip is $100, and the revenue per trip is $200.\nFor Textiles, the transportation cost per trip is $80, and the revenue per trip is $160.\nFor Food, the transportation cost per trip is $120, and the revenue per trip is $240.\nThe company wants to maximize the total profit per day.\n// Profit_Electronics = ElectronicsVehicles * ElectronicsTripsPerVehicle * (200 - 100)\n// Profit_Textiles = TextilesVehicles * TextilesTripsPerVehicle * (160 - 80)\n// Profit_Food = FoodVehicles * FoodTripsPerVehicle * (240 - 120)\n// So, the objective function is: Maximize (Profit_Electronics + Profit_Textiles + Profit_Food)\n\n## Generate Constraint-1:\nThe company has a total of 20 vehicles available.\n// ElectronicsVehicles + TextilesVehicles + FoodVehicles <= 20\n\n## Generate Constraint-2:\nThe company has a budget of $1500 for transportation costs per day.\n// 100 * ElectronicsVehicles * ElectronicsTripsPerVehicle + 80 * TextilesVehicles * TextilesTripsPerVehicle + 120 * FoodVehicles * FoodTripsPerVehicle <= 1500\n\n## Generate Constraint-3:\nThe company has a daily operational capacity of 100 trips in terms of the number of trips it can handle per day.\n// 5 * ElectronicsVehicles * ElectronicsTripsPerVehicle + 6 * TextilesVehicles * TextilesTripsPerVehicle + 4 * FoodVehicles * FoodTripsPerVehicle <= 100\n\n## Generate Constraint-4:\nFor Electronics, each vehicle can make at most 5 trips per day. For Textiles, each vehicle can make at most 6 trips per day. For Food, each vehicle can make at most 4 trips per day.\n// ElectronicsTripsPerVehicle <= 5; TextilesTripsPerVehicle <= 6; FoodTripsPerVehicle <= 4",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nElectronicsVehicles = model.addVar(vtype=\"INTEGER\", name=\"ElectronicsVehicles\") # number of vehicles for Electronics\nmodel.addCons(ElectronicsVehicles >= 0)\nTextilesVehicles = model.addVar(vtype=\"INTEGER\", name=\"TextilesVehicles\") # number of vehicles for Textiles\nmodel.addCons(TextilesVehicles >= 0)\nFoodVehicles = model.addVar(vtype=\"INTEGER\", name=\"FoodVehicles\") # number of vehicles for Food\nmodel.addCons(FoodVehicles >= 0)\nElectronicsTripsPerVehicle = model.addVar(vtype=\"INTEGER\", name=\"ElectronicsTripsPerVehicle\") # number of trips per vehicle for Electronics\nmodel.addCons(ElectronicsTripsPerVehicle >= 0)\nTextilesTripsPerVehicle = model.addVar(vtype=\"INTEGER\", name=\"TextilesTripsPerVehicle\") # number of trips per vehicle for Textiles\nmodel.addCons(TextilesTripsPerVehicle >= 0)\nFoodTripsPerVehicle = model.addVar(vtype=\"INTEGER\", name=\"FoodTripsPerVehicle\") # number of trips per vehicle for Food\nmodel.addCons(FoodTripsPerVehicle >= 0)\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == ElectronicsVehicles * ElectronicsTripsPerVehicle * (200 - 100) + TextilesVehicles * TextilesTripsPerVehicle * (160 - 80) + FoodVehicles * FoodTripsPerVehicle * (240 - 120))\n\n# Add constraints\nmodel.addCons(ElectronicsVehicles + TextilesVehicles + FoodVehicles <= 20)\nmodel.addCons(100 * ElectronicsVehicles * ElectronicsTripsPerVehicle + 80 * TextilesVehicles * TextilesTripsPerVehicle + 120 * FoodVehicles * FoodTripsPerVehicle <= 1500)\nmodel.addCons(5 * ElectronicsVehicles * ElectronicsTripsPerVehicle + 6 * TextilesVehicles * TextilesTripsPerVehicle + 4 * FoodVehicles * FoodTripsPerVehicle <= 100)\nmodel.addCons(ElectronicsTripsPerVehicle <= 5)\nmodel.addCons(TextilesTripsPerVehicle <= 6)\nmodel.addCons(FoodTripsPerVehicle <= 4)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Total Profit per day: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Total Profit per day": "1500.0"
        },
        "question": "A company plans to operate three types of transportation services, each serving a different type of cargo (Electronics, Textiles, and Food). The company needs to determine the number of vehicles to allocate for each cargo type, and the number of trips in each type of service per vehicle. For ease of management, the company decided to have the same number of trips per vehicle for the same type of service. For Textiles, the transportation cost per trip is $80, and the revenue per trip is $160. For Food, the transportation cost per trip is $120, and the revenue per trip is $240. The company wants to maximize the total profit per day. The company has a total of 20 vehicles available. The company has a budget of $1500 for transportation costs per day. The company has a daily operational capacity of 100 trips in terms of the number of trips it can handle per day. For Electronics, each vehicle can make at most 5 trips per day. For Textiles, each vehicle can make at most 6 trips per day. For Food, each vehicle can make at most 4 trips per day. For Electronics, the transportation cost per trip is $100, and the revenue per trip is $200.",
        "type": "nonlinear-notable",
        "index": 529,
        "length": 1144,
        "var_num": 6
    },
    {
        "question": "A breakfast joint makes two different sandwiches: a regular and a special. Both need eggs and bacon. Each regular sandwich requires 2 eggs and 3 slices of bacon. Each special sandwich requires 3 eggs and 5 slices of bacon. The joint has a total of 40 eggs and 70 slices of bacon. It makes a profit of $3 per regular sandwich and a profit of $4 per special sandwich. How many of each sandwich should be made to maximize profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_regular_sandwiches = LpVariable(\"NumRegularSandwiches\", lowBound=0, cat='Integer') # number of regular sandwiches\nnum_special_sandwiches = LpVariable(\"NumSpecialSandwiches\", lowBound=0, cat='Integer') # number of special sandwiches\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SandwichProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 3 * num_regular_sandwiches + 4 * num_special_sandwiches\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 2 * num_regular_sandwiches + 3 * num_special_sandwiches <= 40 # total number of eggs constraint\nproblem += 3 * num_regular_sandwiches + 5 * num_special_sandwiches <= 70 # total number of bacon slices constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of regular sandwiches:\", num_regular_sandwiches.value())\nprint(\"The number of special sandwiches:\", num_special_sandwiches.value())\nprint(\"Total profit:\", objective.value())",
        "results": {
            "The number of regular sandwiches": "20.0",
            "The number of special sandwiches": "0.0",
            "Total profit": "60.0"
        },
        "formulation": "maximize 3x+4y\nSubject to: \n2x+3y <= 40\n3x+5y <= 70 (end)",
        "type": "linear-notable",
        "index": 530,
        "length": 426,
        "var_num": 2
    },
    {
        "question": "An electronics store wants to optimize how many phones and laptops are enough to keep in inventory. A phone will earn the store $120 in profits, and a laptop will earn $40. A phone requires 1 sq ft of floor space, whereas a laptop requires 4 sq ft. In total, 400 sq ft of floor space is available. The store stocks only phones and laptops. Corporate has required that at least 80% of all appliances in stock be laptops. Finally, a phone costs $400 for the store, and a laptop, $100. The store wants to spend at most $6000. Formulate an LP that can be used to maximize the store's profit.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_phones = LpVariable(\"NumPhones\", lowBound=0, cat='Integer') # number of phones\nnum_laptops = LpVariable(\"NumLaptops\", lowBound=0, cat='Integer') # number of laptops\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"InventoryOptimization\", LpMaximize)\n\n# Define the objective function\nobjective = 120 * num_phones + 40 * num_laptops\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += num_phones * 1 + num_laptops * 4 <= 400 # total floor space is limited to 400 sq ft\nproblem += num_laptops >= (num_phones + num_laptops) * 0.8 # at least 80% of all appliances in stock be laptops\nproblem += num_phones * 400 + num_laptops * 100 <= 6000 # store wants to spend at most $6000\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of phones:\", num_phones.value())\nprint(\"The number of laptops:\", num_laptops.value())\nprint(\"Total profit:\", objective.value())",
        "results": {
            "The number of phones": "0.0",
            "The number of laptops": "60.0",
            "Total profit": "2400.0"
        },
        "formulation": "maximize 120x+40y\nSubject to: \n1x+4y <= 400\ny >= 0.8(x+y)\n400x+100y <= 6000 (end)",
        "type": "linear-notable",
        "index": 531,
        "length": 587,
        "var_num": 2
    },
    {
        "question": "A hospital purchases two pills available for the patients to take one at a time. One pill is taken as a prevention and another is taken for treatment. The prevention pill takes 15 dollars to make while the treatment pill takes 25 dollars to make. Since the prevention pill is in higher demand, the hospital must purchase at least two times as many prevention pills as treatment pills. In addition, the hospital must purchase at least 50 treatment pills. If the clinic only has a budget of 10000 dollars, maximize the number of patients that can be treated.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_prevention_pills = LpVariable(\"NumPreventionPills\", lowBound=0, cat='Integer') # number of prevention pills\nnum_treatment_pills = LpVariable(\"NumTreatmentPills\", lowBound=50, cat='Integer') # number of treatment pills\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"HospitalBudget\", LpMaximize)\n\n# Define the objective function\nobjective = num_prevention_pills + num_treatment_pills\nproblem += objective # maximize the total number of pills (patients that can be treated)\n\n# Define the constraints\nproblem += 15 * num_prevention_pills + 25 * num_treatment_pills <= 10000 # the cost must be at most $10000\nproblem += num_prevention_pills >= 2 * num_treatment_pills # prevention pills must be at least two times as many as treatment pills\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of prevention pills:\", num_prevention_pills.value())\nprint(\"The number of treatment pills:\", num_treatment_pills.value())\nprint(\"The total number of patients that can be treated:\", objective.value())",
        "results": {
            "The number of prevention pills": "583.0",
            "The number of treatment pills": "50.0",
            "The total number of patients that can be treated": "633.0"
        },
        "formulation": "maximize x+y\nSubject to: \n15x+25y <= 10000\nx >= 2y\ny >= 50 (end)",
        "type": "linear-notable",
        "index": 532,
        "length": 556,
        "var_num": 2
    },
    {
        "question": "A food truck makes apple and orange smoothies. It takes 6 minutes on the cutting machine and 3 minutes on the blending machine to make an apple smoothie. It takes 5 minutes on the cutting machine and 2 minutes on the blending machine to make an orange smoothie. The profit per apple smoothie is $3.5 and the profit per orange smoothie is $4.5. If both the cutting machine and blending machine are available for at most 500 minutes per day, how many of each smoothie should be made to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of apple smoothies\", \"name\": \"x\"}, {\"description\": \"number of orange smoothies\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit\", \"function\": \"3.5x + 4.5y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"cutting machine time constraint\", \"function\": \"6x + 5y <= 500\"}, {\"description\": \"blending machine time constraint\", \"function\": \"3x + 2y <= 500\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_apple_smoothies = LpVariable(\"NumAppleSmoothies\", lowBound=0, cat='Integer') # number of apple smoothies\nnum_orange_smoothies = LpVariable(\"NumOrangeSmoothies\", lowBound=0, cat='Integer') # number of orange smoothies\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FoodTruckProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 3.5 * num_apple_smoothies + 4.5 * num_orange_smoothies\nproblem += objective # maximize the profit\n\n# Define the constraints\nproblem += 6 * num_apple_smoothies + 5 * num_orange_smoothies <= 500 # cutting machine time constraint\nproblem += 3 * num_apple_smoothies + 2 * num_orange_smoothies <= 500 # blending machine time constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of apple smoothies:\", num_apple_smoothies.value())\nprint(\"The number of orange smoothies:\", num_orange_smoothies.value())\nprint(\"Total profit:\", objective.value())\n",
        "results": {
            "The number of apple smoothies": "0.0",
            "The number of orange smoothies": "100.0",
            "Total profit": "450.0"
        },
        "type": "linear-notable",
        "index": 533,
        "length": 500,
        "var_num": 2
    },
    {
        "question": "A snow removal company removes snow from neighborhoods using small trucks and large trucks. A small truck requires 2 people to shovel the snow and can carry 30 units of snow. A large truck require 4 people to shovel the snow and car carry 50 units of snow. The company has available 60 people. In addition, because some neighbourhood don\u2019t allow big trucks, at least 10 trucks must be small. There must be at least 3 large trucks as well and the number of small trucks must be twice as much as the number of large trucks. How many of each truck should be used to maximize the total amount of snow that can be transported?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_small_trucks = LpVariable(\"NumSmallTrucks\", lowBound=0, cat='Integer') # number of small trucks\nnum_large_trucks = LpVariable(\"NumLargeTrucks\", lowBound=0, cat='Integer') # number of large trucks\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SnowRemoval\", LpMaximize)\n\n# Define the objective function\nobjective = 30 * num_small_trucks + 50 * num_large_trucks\nproblem += objective # maximize the total amount of snow transported\n\n# Define the constraints\nproblem += 2 * num_small_trucks + 4 * num_large_trucks <= 60 # the number of people shoveling the snow cannot exceed 60\nproblem += num_small_trucks >= 10 # there must be at least 10 small trucks\nproblem += num_large_trucks >= 3 # there must be at least 3 large trucks\nproblem += num_small_trucks == 2 * num_large_trucks # the number of small trucks must be twice as much as the number of large trucks\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of small trucks:\", num_small_trucks.value())\nprint(\"The number of large trucks:\", num_large_trucks.value())\nprint(\"The amount of snow transported:\", objective.value())",
        "results": {
            "The number of small trucks": "14",
            "The number of large trucks": "7",
            "The amount of snow transported": "770"
        },
        "formulation": "maximize 30x+50y\nSubject to: \n2x+4y <= 30\nx >= 10\ny >= 3\nx >= 2y (end)",
        "type": "linear-notable",
        "index": 534,
        "length": 621,
        "var_num": 2
    },
    {
        "question": "A fruit store wants to liquidate its stock of 30 lemons, 40 mangos, and 50 pears. Given past experience, the store knows that they can propose a mango-lovers package with 4 lemons and 8 mangos and that this package will bring a profit of 5 euros. Similarly, they can prepare a regular package with 3 lemons, 5 mangos, and 10 pears, yielding a profit of 6.5 euros. They know they can sell any quantity of these two packages within the availability of its stock. What quantity of each package, mango-lovers packages and regular packages, should the store prepare to maximize net profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of mango-lovers packages\", \"name\": \"x\"}, {\"description\": \"number of regular packages\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit from selling packages\", \"function\": \"5x + 6.5y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"lemons constraint\", \"function\": \"4x + 3y <= 30\"}, {\"description\": \"mangos constraint\", \"function\": \"8x + 5y <= 40\"}, {\"description\": \"pears constraint\", \"function\": \"10y <= 50\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_mango_lovers_packages = LpVariable(\"NumMangoLoversPackages\", lowBound=0, cat='Integer') # number of mango-lovers packages\nnum_regular_packages = LpVariable(\"NumRegularPackages\", lowBound=0, cat='Integer') # number of regular packages\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FruitStoreProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 5 * num_mango_lovers_packages + 6.5 * num_regular_packages\nproblem += objective # maximize the total profit from selling packages\n\n# Define the constraints\nproblem += 4 * num_mango_lovers_packages + 3 * num_regular_packages <= 30 # lemons constraint\nproblem += 8 * num_mango_lovers_packages + 5 * num_regular_packages <= 40 # mangos constraint\nproblem += 10 * num_regular_packages <= 50 # pears constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of mango-lovers packages:\", num_mango_lovers_packages.value())\nprint(\"The number of regular packages:\", num_regular_packages.value())\nprint(\"Net profit:\", objective.value())\n",
        "results": {
            "The number of mango-lovers packages": "1.0",
            "The number of regular packages": "5.0",
            "Net profit": "37.5"
        },
        "type": "linear-notable",
        "index": 535,
        "length": 584,
        "var_num": 2
    },
    {
        "question": "You have 400 ft of fencing to construct a rectangular pen for cattle. What are the dimensions of the pen that maximize the area?",
        "scenario": "## Define Variables:\nYou need to construct a rectangular pen for cattle.\n// variables: {\"length of the pen\": \"L\", \"width of the pen\": \"W\"}, where L, W >= 0\n\n## Define Objective Function:\nWhat are the dimensions of the pen that maximize the area?\n// The area of the pen is given by the product of the length and the width. Therefore, the objective function is: Maximize L * W\n\n## Generate Constraint-1:\nYou have 400 ft of fencing.\n// The perimeter of the pen is given by 2L + 2W, and it is given that you have 400 ft of fencing. Therefore, the constraint is 2L + 2W <= 400",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nL = model.addVar(vtype=\"CONTINUOUS\", name=\"L\") # length of the pen\nW = model.addVar(vtype=\"CONTINUOUS\", name=\"W\") # width of the pen\n\n# Define objective function\nobj = model.addVar(vtype=\"C\", name=\"obj\")\nmodel.addCons(obj == L * W)\nmodel.setObjective(obj, \"maximize\")\n\n# Add constraints\nmodel.addCons(2 * L + 2 * W <= 400)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The length of the pen:\", model.getVal(L))\n    print(\"The width of the pen:\", model.getVal(W))\n    print(\"The maximum area of the pen: \", model.getVal(L * W))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The length of the pen": "100.00",
            "The width of the pen": "100.00",
            "The maximum area of the pen": "10000.00"
        },
        "type": "nonlinear-notable",
        "index": 536,
        "length": 128,
        "var_num": 2
    },
    {
        "question": "Luke has 200 hectares available to grow carrots and pumpkins. He prefers to plant more carrots than pumpkins, but the soil and weather conditions allow him to grow at most twice the amount of carrots to that of pumpkins. In addition, he must grow at least 25 hectares of carrots and at least 20 hectares of pumpkins to meet community demands. If the profit per hectare of carrots is $300 and the profit per hectare of pumpkins is $500, how many hectares of each item should he plant to maximize profit? What is this profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of hectares of carrots planted\", \"name\": \"x\"}, {\"description\": \"number of hectares of pumpkins planted\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total profit\", \"function\": \"300x + 500y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"total land constraint\", \"function\": \"x + y <= 200\"}, {\"description\": \"carrot to pumpkin ratio constraint\", \"function\": \"x <= 2y\"}, {\"description\": \"minimum carrot planting constraint\", \"function\": \"x >= 25\"}, {\"description\": \"minimum pumpkin planting constraint\", \"function\": \"y >= 20\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"hectares_of_carrots\", lowBound=25, cat='Continuous') # number of hectares of carrots planted\ny = LpVariable(\"hectares_of_pumpkins\", lowBound=20, cat='Continuous') # number of hectares of pumpkins planted\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 300 * x + 500 * y\nproblem += objective, \"Total Profit\"# Define the constraints\nproblem += x + y <= 200, \"Total Land Constraint\"problem += x - 2 * y <= 0, \"Carrot to Pumpkin Ratio Constraint\"# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of hectares of carrots planted:\", x.value())\nprint(\"The number of hectares of pumpkins planted:\", y.value())\nprint(\"Total Profit:\", objective.value())\n",
        "results": {
            "The number of hectares of carrots planted": "25.0",
            "The number of hectares of pumpkins planted": "175.0",
            "Total Profit": "95000.0"
        },
        "type": "linear-notable",
        "index": 537,
        "length": 523,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA bakery produces four types of pastries: Croissant, Danish, Muffin, and Tart. The bakery needs to decide how many units of each pastry to produce for the upcoming holiday season.\n// variables: {\"number of Croissants\": \"C\", \"number of Danishes\": \"D\", \"number of Muffins\": \"M\", \"number of Tarts\": \"T\"}, where C, D, M, T >= 0 and C, D, M, T are integers.\n\n## Define Objective Function:\nFor Croissant, the selling price is $3, the cost of ingredients is $1, and the production time is 15 minutes. \nFor Danish, the selling price is $4, the cost of ingredients is $2, and the production time is 20 minutes. \nFor Muffin, the selling price is $2.5, the cost of ingredients is $0.8, and the production time is 10 minutes.\nFor Tart, the selling price is $5, the cost of ingredients is $3, and the production time is 25 minutes.\nThe bakery has a limited production capacity and aims to maximize the total profit per hour of production.\n// Profit_C = (3 - 1) * C\n// Profit_D = (4 - 2) * D\n// Profit_M = (2.5 - 0.8) * M\n// Profit_T = (5 - 3) * T\n// So, the objective function is: Maximize (Profit_C + Profit_D + Profit_M + Profit_T) / (15 * C + 20 * D + 10 * M + 25 * T) * 60\n\n## Generate Constraint-1:\nThe bakery has a budget of $500 for ingredients.\n// C + 2 * D + 0.8 * M + 3 * T <= 500\n\n## Generate Constraint-2:\nThe bakery wants to produce at least 50 units of each pastry.\n// C >= 50; D >= 50; M >= 50; T >= 50\n\n## Generate Constraint-3:\nThe bakery has a total production time limit of 80 hours.\n// 15 * C + 20 * D + 10 * M + 25 * T <= 80 * 60",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nC = model.addVar(vtype=\"INTEGER\", name=\"C\") # number of Croissants\nmodel.addCons(C >= 0)\nD = model.addVar(vtype=\"INTEGER\", name=\"D\") # number of Danishes\nmodel.addCons(D >= 0)\nM = model.addVar(vtype=\"INTEGER\", name=\"M\") # number of Muffins\nmodel.addCons(M >= 0)\nT = model.addVar(vtype=\"INTEGER\", name=\"T\") # number of Tarts\nmodel.addCons(T >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj * (15 * C + 20 * D + 10 * M + 25 * T) == (2 * C + 2 * D + 1.7 * M + 2 * T) * 60)\n\n# Add constraints\nmodel.addCons(C + 2 * D + 0.8 * M + 3 * T <= 500)\nmodel.addCons(C >= 50)\nmodel.addCons(D >= 50)\nmodel.addCons(M >= 50)\nmodel.addCons(T >= 50)\nmodel.addCons(15 * C + 20 * D + 10 * M + 25 * T <= 80 * 60)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Croissants: \", model.getVal(C))\n    print(\"Number of Danishes: \", model.getVal(D))\n    print(\"Number of Muffins: \", model.getVal(M))\n    print(\"Number of Tarts: \", model.getVal(T))\n    print(\"Total Profit per Hour: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Croissants": "50.0",
            "Number of Danishes": "50.0",
            "Number of Muffins": "180.0",
            "Number of Tarts": "50.0",
            "Total Profit per Hour": "7.574999999999999"
        },
        "question": "A bakery produces four types of pastries: Croissant, Danish, Muffin, and Tart. The bakery needs to decide how many units of each pastry to produce for the upcoming holiday season. The selling price, cost of ingredients, and production time for each pastry are given in the following Table.\n\n| Pastry  | Selling Price | Cost of Ingredients | Production Time |\n|---------|---------------|---------------------|-----------------|\n| Croissant | $3           | $1                  | 15 minutes      |\n| Danish   | $4           | $2                  | 20 minutes      |\n| Muffin   | $2.5         | $0.8                | 10 minutes      |\n| Tart     | $5           | $3                  | 25 minutes      |\n\nThe bakery has a budget of $500 for ingredients. The bakery wants to produce at least 50 units of each pastry. The bakery has a total production time limit of 80 hours. The bakery has a limited production capacity and aims to maximize the total profit per hour of production.\n",
        "type": "nonlinear-table",
        "index": 538,
        "length": 976,
        "var_num": 4
    },
    {
        "question": "A researcher must perform two types of experiments, in-vivo and ex-vivo. In-vivo experiments requires 30 minutes to prepare and 60 minutes to execute. Ex-vivo experiments require 45 minutes to prepare and 30 minutes to execute. In addition, in-vivo experiments gives the researcher 2 units of radiation while ex-vivo experiments give the researcher 3 unites of radiation. At most 400 minutes can be used for preparation and 500 minutes for execution of the experiment. How many of each experiment should be scheduled by the researcher to minimize the total radiation received by the researcher?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_in_vivo = LpVariable(\"NumInVivo\", lowBound=0, cat='Integer') # number of in-vivo experiments\nnum_ex_vivo = LpVariable(\"NumExVivo\", lowBound=0, cat='Integer') # number of ex-vivo experiments\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ExperimentScheduling\", LpMinimize)\n\n# Define the objective function\nobjective = 2 * num_in_vivo + 3 * num_ex_vivo\nproblem += objective # minimize the total radiation\n\n# Define the constraints\nproblem += 30 * num_in_vivo + 45 * num_ex_vivo <= 400 # preparation time must be at most 400 minutes\nproblem += 60 * num_in_vivo + 30 * num_ex_vivo <= 500 # execution time must be at most 500 minutes\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of in-vivo experiments:\", num_in_vivo.value())\nprint(\"The number of ex-vivo experiments:\", num_ex_vivo.value())\nprint(\"Total radiation received:\", objective.value())",
        "results": {
            "The number of in-vivo experiments": "0.0",
            "The number of ex-vivo experiments": "0.0",
            "Total radiation received": "0.0"
        },
        "formulation": "minimize 2x+3y\nSubject to: \n30x+45y <= 400\n60x+30y <= 500 (end)",
        "type": "linear-notable",
        "index": 539,
        "length": 594,
        "var_num": 2
    },
    {
        "question": "A brewery can ferment their product into either wine or kombucha. Each unit of wine requires 3 units of fruit and 8 units of water. Each unit of kombucha requires 5 units of fruit and 7 units of tea. The company has available 7000 units of water and 9000 units of tea. Wine sells for more, therefore the number of wine must be larger than the number of kombucha. Additionally, at least 20% of their products made must be kombucha. How many of each should the brewery make to minimize the total units of fruit required?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_wine = LpVariable(\"NumWine\", lowBound=0, cat='Continuous') # number of wine units\nnum_kombucha = LpVariable(\"NumKombucha\", lowBound=0, cat='Continuous') # number of kombucha units\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BreweryProduction\", LpMinimize)\n\n# Define the objective function\nobjective = 3 * num_wine + 5 * num_kombucha\nproblem += objective # minimize the total units of fruit required\n\n# Define the constraints\nproblem += 8 * num_wine <= 7000 # water constraint for wine\nproblem += 7 * num_kombucha <= 9000 # tea constraint for kombucha\nproblem += num_wine >= num_kombucha # wine units must be greater than kombucha units\nproblem += num_kombucha >= 0.2 * (num_wine + num_kombucha) # at least 20% of products must be kombucha\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of wine units:\", num_wine.value())\nprint(\"The number of kombucha units:\", num_kombucha.value())\nprint(\"The total units of fruit required:\", objective.value())",
        "results": {
            "The number of wine units": "0.0",
            "The number of kombucha units": "0.0",
            "The total units of fruit required": "0.0"
        },
        "formulation": "minimize 3x+5y\nSubject to: \n8x <= 7000\n7y <= 9000\nx >= y\ny >= 0.2(x+y) (end)",
        "type": "linear-notable",
        "index": 540,
        "length": 518,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA bakery produces four types of pastries: Croissant, Danish, Baguette, and Tart. They need to determine the quantities of each pastry to produce to maximize their profit while considering the cost of ingredients and the demand from customers.\n// variables: {\"quantity of Croissant\": \"Croissant\", \"quantity of Danish\": \"Danish\", \"quantity of Baguette\": \"Baguette\", \"quantity of Tart\": \"Tart\"}, where Croissant, Danish, Baguette, Tart >= 0 and Croissant, Danish, Baguette, Tart are integers.\n\n## Define Objective Function:\nThe profit per unit for Croissant is $3, for Danish is $4, for Baguette is $5, and for Tart is $6. Due to economies of scale, the profit per unit increases by $0.02 for each pastry type if the production exceeds 100 units. The bakery aims to maximize the total profit from selling the pastries.\n// Profit_Croissant = max(3 + 0.02 * (Croissant - 100), 3) * Croissant\n// Profit_Danish = max(4 + 0.02 * (Danish - 100), 4) * Danish\n// Profit_Baguette = max(5 + 0.02 * (Baguette - 100), 5) * Baguette\n// Profit_Tart = max(6 + 0.02 * (Tart - 100), 6) * Tart\n// So, the objective function is: Maximize Profit_Croissant + Profit_Danish + Profit_Baguette + Profit_Tart\n\n## Generate Constraint-1:\nThe bakery has a limited supply of flour, which is a key ingredient in all pastries. Each Croissant requires 50 g of flour, each Danish requires 70 g, each Baguette requires 60 g, and each Tart requires 80 g. The total available flour is 50000 g.\n// 50 * Croissant + 70 * Danish + 60 * Baguette + 80 * Tart <= 50000\n\n## Generate Constraint-2:\nThe bakery faces a demand limit for each type of pastry. The demand limit for Croissant is 300 units, for Danish is 250 units, for Baguette is 200 units, and for Tart is 150 units.\n// Croissant <= 300; Danish <= 250; Baguette <= 200; Tart <= 150\n\n## Generate Constraint-3:\nThe bakery has a production capacity of 700 units in terms of the total number of pastries it can produce.\n// Croissant + Danish + Baguette + Tart <= 700",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\n\"\"\"\nProfit_Croissant = max(3 + 0.02 * (Croissant - 100), 3) * Croissant\nProfit_Danish = max(4 + 0.02 * (Danish - 100), 4) * Danish\nProfit_Baguette = max(5 + 0.02 * (Baguette - 100), 5) * Baguette\nProfit_Tart = max(6 + 0.02 * (Tart - 100), 6) * Tart\n\"\"\"\n\nCroissant1 = model.addVar(vtype=\"INTEGER\", name=\"Croissant1\", lb=0, ub=100)\nCroissant2 = model.addVar(vtype=\"INTEGER\", name=\"Croissant2\", lb=100, ub=300)\nCroissant_b1 = model.addVar(vtype=\"B\", name=\"Croissant_b1\")\nCroissant_b2 = model.addVar(vtype=\"B\", name=\"Croissant_b2\")\nmodel.addCons(Croissant_b1 + Croissant_b2 == 1)\nCroissant = Croissant1*Croissant_b1 + Croissant2*Croissant_b2\nProft_Croissant = 3 * Croissant1 * Croissant_b1 + (3 + 0.02 * (Croissant2 - 100)) * Croissant2 * Croissant_b2\n\nDanish1 = model.addVar(vtype=\"INTEGER\", name=\"Danish1\", lb=0, ub=100)\nDanish2 = model.addVar(vtype=\"INTEGER\", name=\"Danish2\", lb=100, ub=250)\nDanish_b1 = model.addVar(vtype=\"B\", name=\"Danish_b1\")\nDanish_b2 = model.addVar(vtype=\"B\", name=\"Danish_b2\")\nmodel.addCons(Danish_b1 + Danish_b2 == 1)\nDanish = Danish1*Danish_b1 + Danish2*Danish_b2\nProfit_Danish = 4 * Danish1 * Danish_b1 + (4 + 0.02 * (Danish2 - 100)) * Danish2 * Danish_b2\n\nBaguette1 = model.addVar(vtype=\"INTEGER\", name=\"Baguette1\", lb=0, ub=100)\nBaguette2 = model.addVar(vtype=\"INTEGER\", name=\"Baguette2\", lb=100, ub=200)\nBaguette_b1 = model.addVar(vtype=\"B\", name=\"Baguette_b1\")\nBaguette_b2 = model.addVar(vtype=\"B\", name=\"Baguette_b2\")\nmodel.addCons(Baguette_b1 + Baguette_b2 == 1)\nBaguette = Baguette1*Baguette_b1 + Baguette2*Baguette_b2\nProfit_Baguette = 5 * Baguette1 * Baguette_b1 + (5 + 0.02 * (Baguette2 - 100)) * Baguette2 * Baguette_b2\n\nTart1 = model.addVar(vtype=\"INTEGER\", name=\"Tart1\", lb=0, ub=100)\nTart2 = model.addVar(vtype=\"INTEGER\", name=\"Tart2\", lb=100, ub=150)\nTart_b1 = model.addVar(vtype=\"B\", name=\"Tart_b1\")\nTart_b2 = model.addVar(vtype=\"B\", name=\"Tart_b2\")\nmodel.addCons(Tart_b1 + Tart_b2 == 1)\nTart = Tart1*Tart_b1 + Tart2*Tart_b2\nProfit_Tart = 6 * Tart1 * Tart_b1 + (6 + 0.02 * (Tart2 - 100)) * Tart2 * Tart_b2\n\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == Proft_Croissant + Profit_Danish + Profit_Baguette + Profit_Tart)\n\n# Add constraints\nmodel.addCons(50 * Croissant + 70 * Danish + 60 * Baguette + 80 * Tart <= 50000)\nmodel.addCons(Croissant + Danish + Baguette + Tart <= 700)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution\nif model.getStatus() == \"optimal\":\n    print(\"Number of Croissant:\", model.getVal(Croissant1)*model.getVal(Croissant_b1) + model.getVal(Croissant2)*model.getVal(Croissant_b2))\n    print(\"Number of Danish:\", model.getVal(Danish1)*model.getVal(Danish_b1) + model.getVal(Danish2)*model.getVal(Danish_b2))\n    print(\"Number of Baguette:\", model.getVal(Baguette1)*model.getVal(Baguette_b1) + model.getVal(Baguette2)*model.getVal(Baguette_b2))\n    print(\"Number of Tart:\", model.getVal(Tart1)*model.getVal(Tart_b1) + model.getVal(Tart2)*model.getVal(Tart_b2))\n    print(\"Total Profit:\", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Croissant": "300.0",
            "Number of Danish": "250.0",
            "Number of Baguette": "0.0",
            "Number of Tart": "150.0",
            "Total Profit": "4900.0"
        },
        "question": "A bakery produces four types of pastries: Croissant, Danish, Baguette, and Tart. They need to determine the quantities of each pastry to produce to maximize their profit while considering the cost of ingredients and the demand from customers. The bakery has a limited supply of flour, which is a key ingredient in all pastries. Each Croissant requires 50 g of flour, each Danish requires 70 g, each Baguette requires 60 g, and each Tart requires 80 g. The total available flour is 50000 g. The bakery faces a demand limit for each type of pastry. The demand limit for Croissant is 300 units, for Danish is 250 units, for Baguette is 200 units, and for Tart is 150 units. The bakery has a production capacity of 700 units in terms of the total number of pastries it can produce. The profit per unit for Croissant is $3, for Danish is $4, for Baguette is $5, and for Tart is $6. Due to economies of scale, the profit per unit increases by $0.02 for each pastry type if the production exceeds 100 units. The bakery aims to maximize the total profit from selling the pastries.",
        "type": "nonlinear-notable",
        "index": 541,
        "length": 1072,
        "var_num": 4
    },
    {
        "question": "An aquarium does shows using otters and dolphins. An otter will do 3 tricks at a time and requires 3 treats to do so. A dolphin will do 1 trick at a time and requires 5 treats to do so. Since dolphins are more popular, at least 10 dolphins must be used and at most 30% of the performers can be otters. If the aquarium only has 200 treats available, maximize the total number of tricks that can be preformed.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_otters = LpVariable(\"NumOtters\", lowBound=0, cat='Integer') # number of otters\nnum_dolphins = LpVariable(\"NumDolphins\", lowBound=10, cat='Integer') # number of dolphins\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"AquariumShow\", LpMaximize)\n\n# Define the objective function\nobjective = 3 * num_otters + 1 * num_dolphins\nproblem += objective # maximize the total number of tricks performed\n\n# Define the constraints\nproblem += 3 * num_otters + 5 * num_dolphins <= 200 # the treats required must not exceed 200\nproblem += num_otters <= 0.3 * (num_otters + num_dolphins) # otters can be at most 30% of the performers\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of otters:\", num_otters.value())\nprint(\"The number of dolphins:\", num_dolphins.value())\nprint(\"The number of tricks performed:\", objective.value())",
        "results": {
            "The number of otters": "13.0",
            "The number of dolphins": "32.0",
            "The number of tricks performed": "71.0"
        },
        "formulation": "maximize 3x+1y\nSubject to: \ny >= 10\nx <= 0.3(x+y)\n3x+5y <= 200 (end)",
        "type": "linear-notable",
        "index": 542,
        "length": 407,
        "var_num": 2
    },
    {
        "question": "Deutchlander Machine Company (DMC) makes two types of printing presses: a four-color litho and a two-color litho. Demand for both products is booming and exceeds DMC's ability to satisfy it. Most raw materials are plentiful, but production is limited by three factors: a shortage of steel rollers, gear cutting capacity, and roller polishing capacity. Each four-color press requires 16 rollers, and each two-color press requires 8 rollers. The four-color presses require 30 hours of gear cutting and 8 hours of polishing time, and the two-color presses require 12 hours of gear cutting and 3 hours of polishing time. DMC is able to buy 100 rollers per week, and it has 160 hours of gear cutting time and 40 hours of polishing time available per week. To avoid harming long-term sales, DMC does not want to raise prices. At current prices DMC will earn a profit of DM24,000 on each four-color press made and DM10,000 on each two-color press made. So as not to abandon either product market, DMC also wants to produce at least two units of each press each week. Maximize its profit.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for the four-color litho and the two-color litho that adhere to the constraints given. Let's denote the number of four-color litho as F and the number of two-color litho as T.\n```Variables\nF //number of four-color litho to produce\nT //number of two-color litho to produce\nF, T >= 0 and they are integers //non-negative and integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit of the company. The profit of the company is the sum of the profit of the four-color litho and the profit of the two-color litho. The profit of the four-color litho is 24000 and the profit of the two-color litho is 10000. Therefore, the objective function is:\n```Objective Function\nMaximize: 24000F + 10000T\n```\n\n# Constraints:\n```Constraints\n16F + 8T <= 100 //DMC can buy 100 rollers per week\n30F + 12T <= 160 //DMC has 160 hours of gear cutting time available per week\n8F + 3T <= 40 //DMC has 40 hours of polishing time available per week\nF >= 2 //DMC wants to produce at least two units of the four-color litho each week\nT >= 2 //DMC wants to produce at least two units of the two-color litho each week\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nF = LpVariable(\"FourColorLitho\", lowBound=2, cat='Integer') # number of four-color litho to produce\nT = LpVariable(\"TwoColorLitho\", lowBound=2, cat='Integer') # number of two-color litho to produce\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DMC_Profit_Maximization\", LpMaximize)\n\n# Define the objective function\nobjective = 24000 * F + 10000 * T\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 16 * F + 8 * T <= 100 # DMC can buy 100 rollers per week\nproblem += 30 * F + 12 * T <= 160 # DMC has 160 hours of gear cutting time available per week\nproblem += 8 * F + 3 * T <= 40 # DMC has 40 hours of polishing time available per week\nproblem += F >= 2 # DMC wants to produce at least two units of the four-color litho each week\nproblem += T >= 2 # DMC wants to produce at least two units of the two-color litho each week\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of four-color litho to produce:\", F.value())\nprint(\"The number of two-color litho to produce:\", T.value())\nprint(\"The maximum profit:\", objective.value())\n",
        "results": {
            "The number of four-color litho to produce": "2.0",
            "The number of two-color litho to produce": "8.0",
            "The maximum profit": "128000.0"
        },
        "type": "linear-notable",
        "index": 543,
        "length": 1080,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA city is planning to install solar panels in various locations to optimize energy production and minimize environmental impact. The locations are categorized into five zones (Zone A, Zone B, Zone C, Zone D, Zone E).\n// variables: {\"number of solar panels in Zone A\": \"A\", \"number of solar panels in Zone B\": \"B\", \"number of solar panels in Zone C\": \"C\", \"number of solar panels in Zone D\": \"D\", \"number of solar panels in Zone E\": \"E\"}, where A, B, C, D, E >= 0 & A, B, C, D, E are integers\n\n## Define Objective Function:\nThe efficiency of solar panels varies by zone due to different levels of sunlight and environmental conditions. \nIn Zone A, each panel generates 100 kWh of energy per day with a maintenance cost of $2 per day, each panel covers an area of 1 square meter.\nIn Zone B, each panel generates 120 kWh of energy per day with a maintenance cost of $3 per day, each panel covers an area of 1.5 square meters.\nIn Zone C, each panel generates 150 kWh of energy per day with a maintenance cost of $4 per day, each panel covers an area of 2 square meters.\nIn Zone D, each panel generates 130 kWh of energy per day with a maintenance cost of $3.5 per day, each panel covers an area of 1.75 square meters.\nIn Zone E, each panel generates 110 kWh of energy per day with a maintenance cost of $2.5 per day, each panel covers an area of 1.25 square meters.\nThe energy market price is $0.10 per kWh.\nThe city aims to maximize the the profit per square meters of solar panels.\n// Energy revenue: Revenue = 0.10 * (100 * A + 120 * B + 150 * C + 130 * D + 110 * E)\n// Maintenance cost: Cost = 2 * A + 3 * B + 4 * C + 3.5 * D + 2.5 * E\n// Area covered: Area = A + 1.5 * B + 2 * C + 1.75 * D + 1.25 * E\n// Profit per square meter: Profit = (Revenue - Cost) / Area\n\n## Generate Constraint-1:\nThe city has a budget of $10,000 per day for maintenance.\n// 2 * A + 3 * B + 4 * C + 3.5 * D + 2.5 * E <= 10000\n\n## Generate Constraint-2:\nThe total area available for installation is 500 square meters.\n// A + B + C + D + E <= 500\n\n## Generate Constraint-3:\nThe minimum energy requirement for the city is 10,000 kWh per day.\n// 100 * A + 120 * B + 150 * C + 130 * D + 110 * E >= 10000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nA = model.addVar(vtype=\"INTEGER\", name=\"A\", lb=0, ub=500) # number of solar panels in Zone A\nmodel.addCons(A >= 0)\nB = model.addVar(vtype=\"INTEGER\", name=\"B\", lb=0, ub=500) # number of solar panels in Zone B\nmodel.addCons(B >= 0)\nC = model.addVar(vtype=\"INTEGER\", name=\"C\", lb=0, ub=500) # number of solar panels in Zone C\nmodel.addCons(C >= 0)\nD = model.addVar(vtype=\"INTEGER\", name=\"D\", lb=0, ub=500) # number of solar panels in Zone D\nmodel.addCons(D >= 0)\nE = model.addVar(vtype=\"INTEGER\", name=\"E\", lb=0, ub=500) # number of solar panels in Zone E\nmodel.addCons(E >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj * (A + 1.5 * B + 2 * C + 1.75 * D + 1.25 * E) == (0.10 * (100 * A + 120 * B + 150 * C + 130 * D + 110 * E) - (2 * A + 3 * B + 4 * C + 3.5 * D + 2.5 * E)))\n\n# Add constraints\nmodel.addCons(2 * A + 3 * B + 4 * C + 3.5 * D + 2.5 * E <= 10000)\nmodel.addCons(A + B + C + D + E <= 500)\nmodel.addCons(100 * A + 120 * B + 150 * C + 130 * D + 110 * E >= 10000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Profit per Square Meter: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Profit per Square Meter": "8.00000000000000"
        },
        "question": "A city is planning to install solar panels in various locations to optimize energy production and minimize environmental impact. The locations are categorized into five zones (Zone A, Zone B, Zone C, Zone D, Zone E). In Zone A, each panel generates 100 kWh of energy per day with a maintenance cost of $2 per day, each panel covers an area of 1 square meter. In Zone B, each panel generates 120 kWh of energy per day with a maintenance cost of $3 per day, each panel covers an area of 1.5 square meters. In Zone C, each panel generates 150 kWh of energy per day with a maintenance cost of $4 per day, each panel covers an area of 2 square meters. In Zone D, each panel generates 130 kWh of energy per day with a maintenance cost of $3.5 per day, each panel covers an area of 1.75 square meters. In Zone E, each panel generates 110 kWh of energy per day with a maintenance cost of $2.5 per day, each panel covers an area of 1.25 square meters. The energy market price is $0.10 per kWh. The city aims to maximize the the profit per square meters of solar panels. The city has a budget of $10,000 per day for maintenance. The total area available for installation is 500 square meters. The minimum energy requirement for the city is 10,000 kWh per day. The efficiency of solar panels varies by zone due to different levels of sunlight and environmental conditions.",
        "type": "nonlinear-notable",
        "index": 544,
        "length": 1361,
        "var_num": 5
    },
    {
        "question": "A hospital hires ultrasound technicians and graduate researchers to image patients. An ultrasound technician works 8 hours per shift while a graduate researcher works 5 hours per shift. Ultrasound technicians are paid $300 per shift while graduate researchers are paid $100 per shift. However, due to regulations, there must be twice as many ultrasound technician shifts than graduate researcher shifts. Currently, the hospital needs 100 hours of ultrasound services to meet needs. If the hospital has a budget of $14000, how many of each worker certified to use the ultrasound should be scheduled to reduce the total number of workers?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_techs = LpVariable(\"NumTechs\", lowBound=0, cat='Integer') # number of ultrasound technicians\nnum_researchers = LpVariable(\"NumResearchers\", lowBound=0, cat='Integer') # number of graduate researchers\n\n# Define the question as a minimum problem\nproblem = LpProblem(\"HospitalScheduling\", LpMinimize)\n\n# Define the objective function\nobjective = num_techs + num_researchers\nproblem += objective # minimize the total number of workers\n\n# Define the constraints\nproblem += 300 * num_techs + 100 * num_researchers <= 14000 # the cost must be within the budget\nproblem += 8 * num_techs + 5 * num_researchers >= 100 # total hours of service must meet needs\nproblem += num_techs >= 2*num_researchers # there must be twice as many ultrasound technician shifts than graduate researcher shifts\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of ultrasound technicians:\", num_techs.value())\nprint(\"The number of graduate researchers:\", num_researchers.value())# Define the question as a maximum or minimum problem",
        "results": {
            "The number of ultrasound technicians": "13",
            "The number of graduate researchers": "0"
        },
        "formulation": "minimize x+y\nSubject to: \nx >= 2y\n300x+100y <= 14000\n8x+5y >= 500 (end)",
        "type": "linear-notable",
        "index": 545,
        "length": 636,
        "var_num": 1
    },
    {
        "scenario": "## Define Variables:\nA company is planning to optimize its production of five different products (Product A, Product B, Product C, Product D, and Product E) to maximize profit while considering the environmental impact of production.\n// variables: {\"number of units of Product A\": \"ProductA\", \"number of units of Product B\": \"ProductB\", \"number of units of Product C\": \"ProductC\", \"number of units of Product D\": \"ProductD\", \"number of units of Product E\": \"ProductE\"}, where ProductA, ProductB, ProductC, ProductD, ProductE >= 0 & ProductA, ProductB, ProductC, ProductD, ProductE are integers\n\n## Define Objective Function:\nThe profit per unit for Product A is $50, for Product B is $70, for Product C is $60, for Product D is $80, and for Product E is $90. The environmental impact per unit for Product A is 10 units, for Product B is 15 units, for Product C is 12 units, for Product D is 20 units, and for Product E is 18 units. The company wants to maximize the Profit-Impact ratio, where the Profit-Impact ratio is defined as the total profit divided by the total environmental impact.\n// total profit: Profit = 50 * ProductA + 70 * ProductB + 60 * ProductC + 80 * ProductD + 90 * ProductE\n// total environmental impact: Impact = 10 * ProductA + 15 * ProductB + 12 * ProductC + 20 * ProductD + 18 * ProductE\n// So, the objective function is: Maximize Profit / Impact\n\n## Generate Constraint-1:\nThe company has a total production capacity of 1500 units across all products.\n// ProductA + ProductB + ProductC + ProductD + ProductE <= 1500\n\n## Generate Constraint-2:\nThe company must produce at least 200 units of Product A and 300 units of Product B to fulfill contractual obligations.\n// ProductA >= 200\n// ProductB >= 300\n\n## Generate Constraint-3:\nThe total environmental impact should not exceed 20,000 units.\n// 10 * ProductA + 15 * ProductB + 12 * ProductC + 20 * ProductD + 18 * ProductE <= 20000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nProductA = model.addVar(vtype=\"INTEGER\", name=\"ProductA\", lb=0, ub=1500) # number of units of Product A\nProductB = model.addVar(vtype=\"INTEGER\", name=\"ProductB\", lb=0, ub=1500) # number of units of Product B\nProductC = model.addVar(vtype=\"INTEGER\", name=\"ProductC\", lb=0, ub=1500) # number of units of Product C\nProductD = model.addVar(vtype=\"INTEGER\", name=\"ProductD\", lb=0, ub=1500) # number of units of Product D\nProductE = model.addVar(vtype=\"INTEGER\", name=\"ProductE\", lb=0, ub=1500) # number of units of Product E\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\n\nRatio = model.addVar(name=\"Ratio\")\nmodel.setObjective(Ratio, \"maximize\")\nProfit = 50 * ProductA + 70 * ProductB + 60 * ProductC + 80 * ProductD + 90 * ProductE\nImpact = 10 * ProductA + 15 * ProductB + 12 * ProductC + 20 * ProductD + 18 * ProductE\nmodel.addCons(Ratio * Impact == Profit)\n\n# Add constraints\nmodel.addCons(ProductA + ProductB + ProductC + ProductD + ProductE <= 1500)\nmodel.addCons(ProductA >= 200)\nmodel.addCons(ProductB >= 300)\nmodel.addCons(10 * ProductA + 15 * ProductB + 12 * ProductC + 20 * ProductD + 18 * ProductE <= 20000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Profit-Impact Ratio: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Profit-Impact Ratio": "4.925000000000026"
        },
        "question": "A company is planning to optimize its production of five different products (Product A, Product B, Product C, Product D, and Product E) to maximize profit while considering the environmental impact of production. The profit per unit and the environmental impact per unit for each product are given in the following Table.\n\n| Product | Profit per Unit | Environmental Impact per Unit |\n|---------|-----------------|-------------------------------|\n| A       | $50             | 10 units                      |\n| B       | $70             | 15 units                      |\n| C       | $60             | 12 units                      |\n| D       | $80             | 20 units                      |\n| E       | $90             | 18 units                      |\n\nThe company has a total production capacity of 1500 units across all products. The company must produce at least 200 units of Product A and 300 units of Product B to fulfill contractual obligations. The total environmental impact should not exceed 20,000 units. The company wants to maximize the Profit-Impact ratio, where the Profit-Impact ratio is defined as the total profit divided by the total environmental impact.\n",
        "type": "nonlinear-table",
        "index": 546,
        "length": 1178,
        "var_num": 5
    },
    {
        "question": "Deutchlander Machine Company (DMC) manufactures two types of printing presses: a four-color litho and a two-color litho. Demand for both products is high and exceeds DMC's production capacity. The production is constrained by the availability of steel rollers, gear cutting capacity, and roller polishing capacity. The following Table details the requirements for each type of press. DMC can acquire 100 steel rollers per week, has 160 hours available for gear cutting, and 40 hours for roller polishing each week. To maintain market presence without increasing prices, DMC aims to produce at least two units of each press weekly. The profit for each four-color press is DM24,000 and for each two-color press is DM10,000. Formulate a linear program to maximize DMC's profit.\n\nTable (Resource requirements for each type of printing press):\n| Printing Press Type | Steel Rollers Required | Gear Cutting Time (hours) | Polishing Time (hours) | Profit per Unit (DM) |\n| ------------------- | ---------------------- | ------------------------- | ---------------------- | -------------------- |\n| Four-color litho    | 16                     | 30                        | 8                      | 24,000               |\n| Two-color litho     | 8                      | 12                        | 3                      | 10,000               |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for the four-color litho and the two-color litho that adhere to the constraints given. Let's denote the number of four-color litho as F and the number of two-color litho as T.\n```Variables\nF //number of four-color litho to produce\nT //number of two-color litho to produce\nF, T >= 0 and they are integers //non-negative and integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit of the company. The profit of the company is the sum of the profit of the four-color litho and the profit of the two-color litho. The profit of the four-color litho is 24000 and the profit of the two-color litho is 10000. Therefore, the objective function is:\n```Objective Function\nMaximize: 24000F + 10000T\n```\n\n# Constraints:\n```Constraints\n16F + 8T <= 100 //DMC can buy 100 rollers per week\n30F + 12T <= 160 //DMC has 160 hours of gear cutting time available per week\n8F + 3T <= 40 //DMC has 40 hours of polishing time available per week\nF >= 2 //DMC wants to produce at least two units of the four-color litho each week\nT >= 2 //DMC wants to produce at least two units of the two-color litho each week\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nF = LpVariable(\"FourColorLitho\", lowBound=2, cat='Integer') # number of four-color litho to produce\nT = LpVariable(\"TwoColorLitho\", lowBound=2, cat='Integer') # number of two-color litho to produce\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DMC_Profit_Maximization\", LpMaximize)\n\n# Define the objective function\nobjective = 24000 * F + 10000 * T\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 16 * F + 8 * T <= 100 # DMC can buy 100 rollers per week\nproblem += 30 * F + 12 * T <= 160 # DMC has 160 hours of gear cutting time available per week\nproblem += 8 * F + 3 * T <= 40 # DMC has 40 hours of polishing time available per week\nproblem += F >= 2 # DMC wants to produce at least two units of the four-color litho each week\nproblem += T >= 2 # DMC wants to produce at least two units of the two-color litho each week\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of four-color litho to produce:\", F.value())\nprint(\"The number of two-color litho to produce:\", T.value())\nprint(\"The maximum profit:\", objective.value())\n",
        "results": {
            "The number of four-color litho to produce": "2.0",
            "The number of two-color litho to produce": "8.0",
            "The maximum profit": "128000.0"
        },
        "type": "linear-table",
        "index": 547,
        "length": 1338,
        "var_num": 2
    },
    {
        "question": "Suppose a company manufactures two products, A and B, using three inputs: labor, material R, and material S. The demands for the products are such that the company can sell as much of each product as it can produce and earn a profit of $3 per unit of A and $4 per unit of B. However, only 900 pounds of R, 675 pounds of S, and 1200 person-hours of labor are available to the company each day. Formulate the company's problem as a linear program to maximize profit.\n\nTable (The amount of each input required to make one unit of product):\n| Input       | Product A | Product B |\n| ----------- | --------- | --------- |\n| Material R  | 6 pounds  | 12 pounds |\n| Material S  | 7.5 pounds| 4.5 pounds|\n| Labor       | 9 hours   | 6 hours   |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for products A and B that adhere to the constraints given. Let's denote the number of units of product A as A and the number of units of product B as B.\n```Variables\nA //number of units of product A to produce \nB //number of units of product B to produce\nA, B >= 0 and they are integers //non-negative integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit of the company, which is given by the following equation:\n```Objective Function\nMaximize: 3A + 4B\n```\n\n# Constraints:\nWe need to make sure that the company does not exceed the available pounds of R, S, and person-hours of labor. We also need to make sure that the company does not produce a negative number of units of product A or B. The constraints are given by the following equations:\n```Constraints\n6A + 12B <= 900 //available pounds of R\n7.5A + 4.5B <= 675 //available pounds of S\n9A + 6B <= 1200 //available person-hours of labor\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nA = LpVariable(\"A\", lowBound=0, cat='Integer') # number of units of product A to produce\nB = LpVariable(\"B\", lowBound=0, cat='Integer') # number of units of product B to produce\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 3 * A + 4 * B\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 6 * A + 12 * B <= 900 # available pounds of R\nproblem += 7.5 * A + 4.5 * B <= 675 # available pounds of S\nproblem += 9 * A + 6 * B <= 1200 # available person-hours of labor\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of units of product A to produce:\", A.value())\nprint(\"The number of units of product B to produce:\", B.value())\nprint(\"The maximum profit:\", objective.value())\n",
        "results": {
            "The number of units of product A to produce": "64.0",
            "The number of units of product B to produce": "43.0",
            "The maximum profit": "364.0"
        },
        "type": "linear-table",
        "index": 548,
        "length": 736,
        "var_num": 2
    },
    {
        "question": "Let us suppose that we want to put four items in a knapsack that can hold up to 12 kg. The weight and the value associated with each of the items are listed in the following Table. We need to decide which items to put in so as to maximize the total value of the knapsack.\n\nTable (The weight and value of each item):\n| Item | Weight (kg) | Value |\n| ---- | ----------- | ----- |\n| 1    | 3           | 15    |\n| 2    | 6           | 25    |\n| 3    | 5           | 12    |\n| 4    | 5           | 10    |",
        "formulation": "# Define Variables:\nFirst, we need to determine whether each item is put into the knapsack. Let's denote the decision variables as follows:\n```\nVariables\nx1 //whether item 1 is put into the knapsack\nx2 //whether item 2 is put into the knapsack\nx3 //whether item 3 is put into the knapsack\nx4 //whether item 4 is put into the knapsack\nx1, x2, x3, x4 = 0 or 1 // binary variables\n```\n\n# Objective Function:\nWe want to maximize the total value of the knapsack, so the objective function is given by the sum of the values of the items that are put into the knapsack. The total value is 15x1 + 25x2 + 12x3 + 10x4.\n```\nObjective Function\nMaximize: 15x1 + 25x2 + 12x3 + 10x4\n```\n\n# Constraints:\nThe maximum weight the knapsack can hold is 12 kg, so the total weight of the items put into the knapsack should not exceed 12 kg. The weight constraint is given by 3x1 + 6x2 + 5x3 + 5x4 <= 12.\n```\nConstraints\n3x1 + 6x2 + 5x3 + 5x4 <= 12\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx1 = LpVariable(\"x1\", cat='Binary') # whether item 1 is put into the knapsack\nx2 = LpVariable(\"x2\", cat='Binary') # whether item 2 is put into the knapsack\nx3 = LpVariable(\"x3\", cat='Binary') # whether item 3 is put into the knapsack\nx4 = LpVariable(\"x4\", cat='Binary') # whether item 4 is put into the knapsack\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"KnapsackProblem\", LpMaximize)\n\n# Define the objective function\nobjective = 15*x1 + 25*x2 + 12*x3 + 10*x4\nproblem += objective # maximize the total value of the knapsack\n\n# Define the constraints\nproblem += 3*x1 + 6*x2 + 5*x3 + 5*x4 <= 12 # the total weight should not exceed 12 kg\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The decision to put item 1 in the knapsack:\", x1.value())\nprint(\"The decision to put item 2 in the knapsack:\", x2.value())\nprint(\"The decision to put item 3 in the knapsack:\", x3.value())\nprint(\"The decision to put item 4 in the knapsack:\", x4.value())\nprint(\"The maximum total value of the knapsack:\", objective.value())\n",
        "results": {
            "The decision to put item 1 in the knapsack": "1.0",
            "The decision to put item 2 in the knapsack": "1.0",
            "The decision to put item 3 in the knapsack": "0.0",
            "The decision to put item 4 in the knapsack": "0.0",
            "The maximum total value of the knapsack": "40.0"
        },
        "type": "linear-table",
        "index": 549,
        "length": 501,
        "var_num": 4
    },
    {
        "question": "A cleaning company located in Edmonton wants to get the best exposure possible for promoting their new dishwashing detergent without exceeding their $900000 advertising budget. To do so, the company decides to spend their money on two forms of advertising: (1) radio ads and (2) social media ads. Each radio ad costs $5,000; each social media ad costs $9,150. The expected exposure, based on industry ratings, is 60,500 viewers for each radio ad. Additionally, the expected exposure for each social media ad is 50,000 viewers. The company decides that at least 15 but no more than 40 radio ads should be ordered, and that at least 35 social media ads should be contracted. How many ads of each type should be run to obtain maximum exposure while staying within the budget?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_radio_ads = LpVariable(\"NumRadioAds\", lowBound=15, upBound=40, cat='Integer') # number of radio ads\nnum_social_ads = LpVariable(\"NumSocialAds\", lowBound=35, cat='Integer') # number of social media ads\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"AdvertisingExposure\", LpMaximize)\n\n# Define the objective function\nobjective = 60500 * num_radio_ads + 50000 * num_social_ads\nproblem += objective # maximize the total viewers\n\n# Define the constraints\nproblem += 5000 * num_radio_ads + 9150 * num_social_ads <= 900000 # the cost must not exceed the budget\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of radio ads:\", num_radio_ads.value())\nprint(\"The number of social media ads:\", num_social_ads.value())\nprint(\"The total viewers reached:\", objective.value())",
        "results": {
            "The number of radio ads": "40",
            "The number of social media ads": "76.0",
            "The total viewers reached": "6220000.0"
        },
        "formulation": "maximize 60,500x+50,000y\nSubject to: \n5000x+9150y <= 250000\nx >= 15\nx <= 40\ny >= 35 (end)",
        "type": "linear-notable",
        "index": 550,
        "length": 772,
        "var_num": 2
    },
    {
        "question": "A hobbyist makes model trains and planes using wood and paint. A model train requires 3 units of wood and 3 units of paint. A model plane requires 4 units of wood and 2 units of paint. The hobbyist has available 120 units of wood and 90 units of paint. If the profit per model train is $8 and the profit per model plane is $10, how many of each should be made to maximize his profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_trains = LpVariable(\"NumTrains\", lowBound=0, cat='Integer') # number of trains\nnum_planes = LpVariable(\"NumPlanes\", lowBound=0, cat='Integer') # number of planes\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"HobbyistProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 8 * num_trains + 10 * num_planes\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 3 * num_trains + 4 * num_planes <= 120 # the wood usage must be at most 120 units\nproblem += 3 * num_trains + 2 * num_planes <= 90 # the paint usage must be at most 90 units\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of trains:\", num_trains.value())\nprint(\"The number of planes:\", num_planes.value())\nprint(\"The total profit:\", objective.value())",
        "results": {
            "The number of trains": "20.0",
            "The number of planes": "15.0",
            "The total profit": "310.0"
        },
        "formulation": "maximize 8x+10y\nSubject to: \n3x+4y <= 120\n3x+2y <= 90 (end)",
        "type": "linear-notable",
        "index": 551,
        "length": 383,
        "var_num": 2
    },
    {
        "question": "A lighting company makes desk-lamps and night-lamps. There is an expected demand of at least 30 desk-lamps and 50 night-lamps each day. However, due to the size of their factory, they can make at most 150 desk-lamps and 180 night-lamps per day. To satisfy a contract, a minimum of 100 lamps must be made each day. If the profit per desk-lamp sold is $5 and the profit per night-lamp sold is $8, how many lamps of each type should be made to maximize profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_desk_lamps = LpVariable(\"NumDeskLamps\", lowBound=0, cat='Integer') # number of desk lamps\nnum_night_lamps = LpVariable(\"NumNightLamps\", lowBound=0, cat='Integer') # number of night lamps\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"LampProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 5 * num_desk_lamps + 8 * num_night_lamps\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += num_desk_lamps >= 30 # at least 30 desk-lamps each day\nproblem += num_night_lamps >= 50 # at least 50 night-lamps each day\nproblem += num_desk_lamps <= 150 # at most 150 desk-lamps per day\nproblem += num_night_lamps <= 180 # at most 180 night-lamps per day\nproblem += num_desk_lamps + num_night_lamps >= 100 # minimum of 100 lamps must be made each day\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of desk lamps:\", num_desk_lamps.value())\nprint(\"The number of night lamps:\", num_night_lamps.value())\nprint(\"The total profit:\", objective.value())",
        "results": {
            "The number of desk lamps": "150.0",
            "The number of night lamps": "180.0",
            "The total profit": "2190.0"
        },
        "formulation": "maximize 8y+5x\nSubject to: \nx >= 30\ny >= 50\nx <= 150\ny <= 180\nx+y >= 100 (end)",
        "type": "linear-notable",
        "index": 552,
        "length": 457,
        "var_num": 2
    },
    {
        "question": "You need to construct a box with with square base. The bottom and top consist of two layers of cardboard, and the sides consist of one layer of cardboard. The box should hold a volume of at least 200 cubic inches. Find the dimensions of the box that requires the least material.",
        "scenario": "## Define Variables:\nYou need to construct a box with a square base.\n// variables: {\"side length of the square base\": \"x\", \"height of the box\": \"h\"}, where x, h >= 0\n\n## Define Objective Function:\nFind the dimensions of the box that requires the least material.\n// The surface area of the box is the sum of the area of the square base and the area of the four sides. The area of the square bottom and top is 2*x^2, and the area of the four sides is 4*x*h.\n// Therefore, the objective function is: Minimize 2*x^2 + 4*x*h\n\n## Generate Constraint-1:\nThe volume of the box is at least 200 cubic inches.\n// The volume of the box is given by the formula x^2h, and it is given that the volume is at least 200.\n// Therefore, the constraint is x^2h >= 200",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"CONTINUOUS\", name=\"x\") # side length of the square base\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the box\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nmodel.addCons(obj == 2*x**2 + 4*x*h)\n\n# Add constraints\nmodel.addCons(x**2*h >= 200)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The side length of the square base:\", model.getVal(x))\n    print(\"The height of the box:\", model.getVal(h))\n    print(\"The minimum surface area of the box: \", model.getVal(obj))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The side length of the square base": "5.848062994441619",
            "The height of the box": "5.847980431368237",
            "The minimum surface area of the box": "205.19711284322852"
        },
        "type": "nonlinear-notable",
        "index": 553,
        "length": 278,
        "var_num": 2
    },
    {
        "question": "A doctor recommends her patient eat more fish and chicken to increase her protein and iron intake. Each fish meal contains 10 units of protein and 12 units of iron. Each chicken meal contains 15 units of protein and 8 units of iron. The patient needs to consume at least 130 units of protein and 120 units of iron. Since the chicken meal is less expensive, the patient prefers to consume at least twice as many chicken meals as fish meals. If each fish meal contains 7 units of fat and each chicken meal contains 10 units of fat, how many meals of each should she eat to minimize her fat intake?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_fish_meals = LpVariable(\"NumFishMeals\", lowBound=0, cat='Integer') # number of fish meals\nnum_chicken_meals = LpVariable(\"NumChickenMeals\", lowBound=0, cat='Integer') # number of chicken meals\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DietOptimization\", LpMinimize)\n\n# Define the objective function\nobjective = 7 * num_fish_meals + 10 * num_chicken_meals\nproblem += objective # minimize the total fat intake\n\n# Define the constraints\nproblem += 10 * num_fish_meals + 15 * num_chicken_meals >= 130 # at least 130 units of protein\nproblem += 12 * num_fish_meals + 8 * num_chicken_meals >= 120 # at least 120 units of iron\nproblem += num_chicken_meals >= 2 * num_fish_meals # at least twice as many chicken meals as fish meals\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of fish meals:\", num_fish_meals.value())\nprint(\"The number of chicken meals:\", num_chicken_meals.value())\nprint(\"The total fat intake:\", objective.value())",
        "results": {
            "The number of fish meals": "4.0",
            "The number of chicken meals": "9.0",
            "The total fat intake": "118.0"
        },
        "formulation": "minimize 7x+10y\nSubject to: \n10x+15y >= 130\n12x+8y >= 120\ny >= 2x (end)",
        "type": "linear-notable",
        "index": 554,
        "length": 595,
        "var_num": 2
    },
    {
        "question": "You need to create a rectangular box with a square base and an open top. The volume of the box must be at least 1000 cubic centimeters. The material for the base costs $2 per square centimeter, and the material for the sides costs $1 per square centimeter. Find the dimensions that will minimize the cost of the box.",
        "scenario": "## Define Variables:\nYou need to create a rectangular box with a square base and an open top.\n// variables: {\"side length of the square base\": \"x\", \"height of the box\": \"h\"}, where x, h >= 0\n\n## Define Objective Function:\nThe material for the base costs $2 per square centimeter, and the material for the sides costs $1 per square centimeter. Find the dimensions that will minimize the cost of the box.\n// The surface area of the box is the sum of the area of the square base and the area of the four sides. The area of the square base is x^2, and the area of the four sides is 4*x*h.\n// So, the surface area of the box is x^2 + 4*x*h, and the cost of the box is 2*x^2 + 4*x*h.\n// So, the objective function is: Minimize 2*x^2 + 4*x*h\n\n## Generate Constraint-1:\nThe volume of the box must be at least 1000 cubic centimeters.\n// x^2*h >= 1000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"CONTINUOUS\", name=\"x\") # side length of the square base\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the box\n\n# Define objective function\nobj = model.addVar(vtype=\"CONTINUOUS\", name=\"obj\")\nmodel.addCons(obj == 2*x**2 + 4*x*h)\nmodel.setObjective(obj, \"minimize\")\n\n# Add constraints\nmodel.addCons(x**2*h >= 1000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The side length of the square base:\", model.getVal(x))\n    print(\"The height of the box:\", model.getVal(h))\n    print(\"The minimum cost of the box: \", model.getVal(2*x**2 + 4*x*h))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The side length of the square base": "10.0",
            "The height of the box": "10.0",
            "The minimum cost of the box": "600.0"
        },
        "type": "nonlinear-notable",
        "index": 555,
        "length": 316,
        "var_num": 2
    },
    {
        "question": "You have a garden row of 20 watermelon plants that produce an average of 30 watermelons apiece. For any additional watermelon plants planted, the output per watermelon plant drops by one watermelon. How many extra watermelon plants should you plant?",
        "scenario": "## Define Variables:\nYou have a garden row of 20 watermelon plants that produce an average of 30 watermelons apiece.\n// variables: {\"number of extra watermelon plants\": \"X\"}, where X >= 0 and X is an integer\n\n## Define Objective Function:\nFor any additional watermelon plants planted, the output per watermelon plant drops by one watermelon. How many extra watermelon plants should you plant?\n// If X extra watermelon plants are planted, the output per watermelon plant drops by X watermelon, which is 30 - X.\n// Therefore, the total output of watermelons is (20 + X) * (30 - X)\n// So, the objective function is: Maximize (20 + X) * (30 - X)",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nX = model.addVar(vtype=\"INTEGER\", name=\"X\") # number of extra watermelon plants\n\n# Define objective function\nobj = model.addVar(vtype=\"C\", name=\"obj\")\nmodel.addCons(obj == (20 + X) * (30 - X))\nmodel.setObjective(obj, \"maximize\")\n\n# Add constraints\nmodel.addCons(X >= 0)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The number of extra watermelon plants to be planted:\", model.getVal(X))\n    print(\"The maximum total output of watermelons: \", model.getObjVal())\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The number of extra watermelon plants to be planted": "5.0",
            "The maximum total output of watermelons": "625.000000"
        },
        "type": "nonlinear-notable",
        "index": 556,
        "length": 249,
        "var_num": 1
    },
    {
        "question": "You are designing an office space with two types of desks: long desks and short desks. You can spend at most $2000. Long desks cost $300, take up 10 square feet of space, and seat 6 employees. Short desks cost $100, take up 4 square feet of space, and seat 2 employees. The office can have at most 200 square feet of desks. How many of each desk should you buy in order to maximize the seating availability?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_long_desks = LpVariable(\"NumLongDesks\", lowBound=0, cat='Integer') # number of long desks\nnum_short_desks = LpVariable(\"NumShortDesks\", lowBound=0, cat='Integer') # number of short desks\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"OfficeSpaceDesign\", LpMaximize)\n\n# Define the objective function\nobjective = 6 * num_long_desks + 2 * num_short_desks\nproblem += objective # maximize the seating availability\n\n# Define the constraints\nproblem += 300 * num_long_desks + 100 * num_short_desks <= 2000 # the cost must be at most $2000\nproblem += 10 * num_long_desks + 4 * num_short_desks <= 200 # the desk space must be at most 200 square feet\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of long desks:\", num_long_desks.value())\nprint(\"The number of short desks:\", num_short_desks.value())\nprint(\"The seating availability:\", objective.value())",
        "results": {
            "The number of long desks": "0.0",
            "The number of short desks": "20.0",
            "The seating availability": "40.0"
        },
        "formulation": "maximize 6x+2y\nSubject to: \n300x+100y <= 2000\n10x+4y <= 200 (end)",
        "type": "linear-notable",
        "index": 557,
        "length": 407,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA company plans to construct three types of production lines, each producing a certain type of product (Sugar, Flour, and Oil). For ease of management, the company decided to have the same number of workers on each production line. The company needs to determine the number of production lines to construct for each product, and the number of workers to assign to each type of production line.\n// variables: {\"number of production lines for Sugar\": \"SugarLines\", \"number of production lines for Flour\": \"FlourLines\", \"number of production lines for Oil\": \"OilLines\", \"number of workers per production line\": \"WorkersPerLine\"}, where SugarLines, FlourLines, OilLines, WorkersPerLine >= 0 and SugarLines, FlourLines, OilLines, WorkersPerLine are integers.\n\n## Define Objective Function:\nFor Sugar, the material cost per unit is $5, and the selling price per unit is $10, and production number per worker per day is 100 units.\nFor Flour, the material cost per unit is $7, and the selling price per unit is $15, and production number per worker per day is 80 units.\nFor Oil, the material cost per unit is $9, and the selling price per unit is $20, and production number per worker per day is 60 units.\nThe company wants to maximize the total profit per day.\n// Profit_Sugar = 100 * SugarLines * WorkersPerLine * (10 - 5)\n// Profit_Flour = 80 * FlourLines * WorkersPerLine * (15 - 7)\n// Profit_Oil = 60 * OilLines * WorkersPerLine * (20 - 9)\n// So, the objective function is: Maximize (Profit_Sugar + Profit_Flour + Profit_Oil)\n\n## Generate Constraint-1:\nThe company has a total of 100 workers available.\n// SugarLines * WorkersPerLine + FlourLines * WorkersPerLine + OilLines * WorkersPerLine <= 100\n\n## Generate Constraint-2:\nThe company has a budget of $5000 for material costs per day.\n// 5 * SugarLines * WorkersPerLine + 7 * FlourLines * WorkersPerLine + 9 * OilLines * WorkersPerLine <= 5000\n\n## Generate Constraint-3:\nThe company has a production capacity of 1000 units in terms of the number of units it can produce per day.\n// 100 * SugarLines * WorkersPerLine + 80 * FlourLines * WorkersPerLine + 60 * OilLines * WorkersPerLine <= 1000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nSugarLines = model.addVar(vtype=\"INTEGER\", name=\"SugarLines\") # number of production lines for Sugar\nmodel.addCons(SugarLines >= 0)\nFlourLines = model.addVar(vtype=\"INTEGER\", name=\"FlourLines\") # number of production lines for Flour\nmodel.addCons(FlourLines >= 0)\nOilLines = model.addVar(vtype=\"INTEGER\", name=\"OilLines\") # number of production lines for Oil\nmodel.addCons(OilLines >= 0)\nWorkersPerLine = model.addVar(vtype=\"INTEGER\", name=\"WorkersPerLine\") # number of workers per production line\nmodel.addCons(WorkersPerLine >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == 100 * SugarLines * WorkersPerLine * (10 - 5) + 80 * FlourLines * WorkersPerLine * (15 - 7) + 60 * OilLines * WorkersPerLine * (20 - 9))\n\n# Add constraints\nmodel.addCons(SugarLines * WorkersPerLine + FlourLines * WorkersPerLine + OilLines * WorkersPerLine <= 100)\nmodel.addCons(5 * SugarLines * WorkersPerLine + 7 * FlourLines * WorkersPerLine + 9 * OilLines * WorkersPerLine <= 5000)\nmodel.addCons(100 * SugarLines * WorkersPerLine + 80 * FlourLines * WorkersPerLine + 60 * OilLines * WorkersPerLine <= 1000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Total Profit per day: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Total Profit per day": "10560.0"
        },
        "question": "A company plans to construct three types of production lines, each producing a certain type of product (Sugar, Flour, and Oil). For ease of management, the company decided to have the same number of workers on each production line. The company needs to determine the number of production lines to construct for each product, and the number of workers to assign to each type of production line. For Flour, the material cost per unit is $7, and the selling price per unit is $15, and production number per worker per day is 80 units. For Oil, the material cost per unit is $9, and the selling price per unit is $20, and production number per worker per day is 60 units. The company wants to maximize the total profit per day. The company has a total of 100 workers available. The company has a budget of $5000 for material costs per day. The company has a production capacity of 1000 units in terms of the number of units it can produce per day. For Sugar, the material cost per unit is $5, and the selling price per unit is $10, and production number per worker per day is 100 units.",
        "type": "nonlinear-notable",
        "index": 558,
        "length": 1082,
        "var_num": 4
    },
    {
        "question": "Bob Fashion produces two types of lipsticks: cream lipsticks and matte lipsticks. The profit per cream lipstick is $70 and the profit per matte lipstick is $100. It takes 3.5 hours to produce the raw materials for one cream lipstick, 5 hours to mix and 2 hours in packing. It takes 5 hours to produce the raw materials for one matte lipstick, 3 hours to mix and 1.5 hours in packing. Per month, 300 hours are available for preparing the raw materials, 400 hours for mixing and 200 hours for packing the lipsticks.  How many of each type of lipstick should be produced in order to maximize the total monthly profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of cream lipsticks produced\", \"name\": \"x\"}, {\"description\": \"number of matte lipsticks produced\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total monthly profit\", \"function\": \"70x + 100y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"time for preparing raw materials\", \"function\": \"3.5x + 5y <= 300\"}, {\"description\": \"time for mixing\", \"function\": \"5x + 3y <= 400\"}, {\"description\": \"time for packing\", \"function\": \"2x + 1.5y <= 200\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_cream_lipsticks = LpVariable(\"NumCreamLipsticks\", lowBound=0, cat='Continuous') # number of cream lipsticks produced\nnum_matte_lipsticks = LpVariable(\"NumMatteLipsticks\", lowBound=0, cat='Continuous') # number of matte lipsticks produced\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"LipstickProduction\", LpMaximize)\n\n# Define the objective function\nobjective = 70 * num_cream_lipsticks + 100 * num_matte_lipsticks\nproblem += objective # maximize the total monthly profit\n\n# Define the constraints\nproblem += 3.5 * num_cream_lipsticks + 5 * num_matte_lipsticks <= 300 # time for preparing raw materials\nproblem += 5 * num_cream_lipsticks + 3 * num_matte_lipsticks <= 400 # time for mixing\nproblem += 2 * num_cream_lipsticks + 1.5 * num_matte_lipsticks <= 200 # time for packing\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of cream lipsticks to be produced:\", num_cream_lipsticks.value())\nprint(\"The number of matte lipsticks to be produced:\", num_matte_lipsticks.value())\nprint(\"The total monthly profit:\", objective.value())\n",
        "results": {
            "The number of cream lipsticks to be produced": "0.0",
            "The number of matte lipsticks to be produced": "60.0",
            "The total monthly profit": "6000.0"
        },
        "type": "linear-notable",
        "index": 559,
        "length": 614,
        "var_num": 2
    },
    {
        "question": "A flooring company produces engineered laminate planks and carpets. The chief marketer reports an expected demand of at least 15,000 square feet of laminate planks and 5,000 square feet of carpets each week. The shipping contract requires a total of at least 50,000 square feet of products each week. However, due to a shortage of raw materials, no more than 40,000 square feet of laminate planks and 20,000 square feet of carpets can be produced weekly. If a square foot of laminate planks produces a $2.1 profit and a square foot of carpets yields a $3.3 profit, how many of each type of product should be made weekly to maximize the company's profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nlaminate_planks = LpVariable(\"LaminatePlanks\", lowBound=0, cat='Continuous') # square feet of laminate planks\ncarpets = LpVariable(\"Carpets\", lowBound=0, cat='Continuous') # square feet of carpets\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FlooringCompanyProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 2.1 * laminate_planks + 3.3 * carpets\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += laminate_planks >= 15000 # demand for laminate planks\nproblem += carpets >= 5000 # demand for carpets\nproblem += laminate_planks + carpets >= 50000 # shipping contract requirement\nproblem += laminate_planks <= 40000 # maximum production of laminate planks due to shortage of raw materials\nproblem += carpets <= 20000 # maximum production of carpets due to shortage of raw materials\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The amount of laminate planks to be made weekly (in square feet):\", laminate_planks.value())\nprint(\"The amount of carpets to be made weekly (in square feet):\", carpets.value())\nprint(\"The total profit:\", objective.value())",
        "results": {
            "The amount of laminate planks to be made weekly (in square feet)": "40000.0",
            "The amount of carpets to be made weekly (in square feet)": "20000.0",
            "The total profit": "150000.0"
        },
        "formulation": "maximize 2.1x+3.3y\nSubject to: \nx >= 15000\ny >= 5000\nx+y >= 50000\nx <= 40000\ny <= 20000 (end)",
        "type": "linear-notable",
        "index": 560,
        "length": 653,
        "var_num": 2
    },
    {
        "question": "Suppose a company manufactures two products, A and B, using three inputs, labor, material R, and materials S. To make one unit of product A requires 6 pounds of R, 7.5 pounds of S, and 9 person-hours of labor; to make one unit of product B requires 12 pounds of R, 4.5 pounds of S, and 6 person-hours of labor. The demands for the products are such that the company can sell as much of each product as it can produce and earn a profit of $3 per unit of A and $4 per unit of B. However, only 900 pounds of R, 675 pounds of S, and 1200 person-hours of labor are available to the company each day. Maximize profit.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for products A and B that adhere to the constraints given. Let's denote the number of units of product A as A and the number of units of product B as B.\n```Variables\nA //number of units of product A to produce \nB //number of units of product B to produce\nA, B >= 0 and they are integers //non-negative integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit of the company, which is given by the following equation:\n```Objective Function\nMaximize: 3A + 4B\n```\n\n# Constraints:\nWe need to make sure that the company does not exceed the available pounds of R, S, and person-hours of labor. We also need to make sure that the company does not produce a negative number of units of product A or B. The constraints are given by the following equations:\n```Constraints\n6A + 12B <= 900 //available pounds of R\n7.5A + 4.5B <= 675 //available pounds of S\n9A + 6B <= 1200 //available person-hours of labor\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nA = LpVariable(\"A\", lowBound=0, cat='Integer') # number of units of product A to produce\nB = LpVariable(\"B\", lowBound=0, cat='Integer') # number of units of product B to produce\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 3 * A + 4 * B\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 6 * A + 12 * B <= 900 # available pounds of R\nproblem += 7.5 * A + 4.5 * B <= 675 # available pounds of S\nproblem += 9 * A + 6 * B <= 1200 # available person-hours of labor\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of units of product A to produce:\", A.value())\nprint(\"The number of units of product B to produce:\", B.value())\nprint(\"The maximum profit:\", objective.value())\n",
        "results": {
            "The number of units of product A to produce": "64.0",
            "The number of units of product B to produce": "43.0",
            "The maximum profit": "364.0"
        },
        "type": "linear-notable",
        "index": 561,
        "length": 611,
        "var_num": 2
    },
    {
        "question": "You need to construct a cylinder. The surface area of the cylinder is at most 50 square units, including the top and the bottom. Find the shape of the cylinder that maximizes the volume.",
        "scenario": "## Define Variables:\nYou need to construct a cylinder.\n// variables: {\"radius of the cylinder\": \"r\", \"height of the cylinder\": \"h\"}, where r, h >= 0\n\n## Define Objective Function:\nFind the shape of the cylinder that maximizes the volume.\n// The volume of the cylinder is given by the formula V = \u03c0r^2h.\n// Therefore, the objective function is: Maximize V = \u03c0r^2h\n\n## Generate Constraint-1:\nThe surface area of the cylinder is at most 50 square units, including the top and the bottom.\n// The surface area of the cylinder is given by the formula 2\u03c0r^2 + 2\u03c0rh, and it is given that the surface area is at most 50. Therefore, the constraint is 2\u03c0r^2 + 2\u03c0rh <= 50",
        "code": "from pyscipopt import Model\nimport math\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nr = model.addVar(vtype=\"CONTINUOUS\", name=\"r\", lb=0, ub=100) # radius of the cylinder\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\", lb=0, ub=100) # height of the cylinder\n\n# Define objective function\nV = model.addVar('V', lb=0)\nmodel.setObjective(V, \"maximize\")\nmodel.addCons(V == math.pi * r**2 * h)\n\n# Add constraints\nmodel.addCons(2 * math.pi * r**2 + 2 * math.pi * r * h <= 50)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The radius of the best cylinder:\", model.getVal(r))\n    print(\"The height of the best cylinder:\", model.getVal(h))\n    print(\"The maximum volume of the cylinder: \", model.getVal(V))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The radius of the best cylinder": "1.6287969834860323",
            "The height of the best cylinder": "3.256862413133507",
            "The maximum volume of the cylinder": "27.14458472592633"
        },
        "type": "nonlinear-notable",
        "index": 562,
        "length": 186,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA logistics company operates three types of vehicles: TruckX, TruckY, and TruckZ. The company needs to decide how many trips each type of vehicle should make in the next month to optimize its operations. Additionally, the company can invest in upgrading the vehicles to improve their fuel efficiency and capacity, which affects the operational cost and revenue per trip.\n// variables: {\"number of trips for TruckX\": \"TripsX\", \"number of trips for TruckY\": \"TripsY\", \"number of trips for TruckZ\": \"TripsZ\", \"investment in upgrading TruckX\": \"UpgradeX\", \"investment in upgrading TruckY\": \"UpgradeY\", \"investment in upgrading TruckZ\": \"UpgradeZ\"}, where TripsX, TripsY, TripsZ >= 0 & TripsX, TripsY, TripsZ are integers, and UpgradeX, UpgradeY, UpgradeZ are continuous.\n\n## Define Objective Function:\nThe revenue per trip increases with the amount of upgrade investment for each vehicle type.\nThe initial revenue per trip for TruckX is $1,000, but with upgrades, the revenue increases by $100 per trip for every $500 invested in upgrades. \nThe initial revenue per trip for TruckY is $1,500, and with upgrades, the revenue increases by $150 per trip for every $500 invested in upgrades. \nThe initial revenue per trip for TruckZ is $2,000, and with upgrades, the revenue increases by $200 per trip for every $500 invested in upgrades. \nThe company aims to maximize the total revenue from all vehicle trips.\n// Total revenue for TruckX: RevenueX = (1000 + 0.2 * UpgradeX) * TripsX\n// Total revenue for TruckY: RevenueY = (1500 + 0.3 * UpgradeY) * TripsY\n// Total revenue for TruckZ: RevenueZ = (2000 + 0.4 * UpgradeZ) * TripsZ\n// So, the objective function is: Maximize (RevenueX + RevenueY + RevenueZ)\n\n## Generate Constraint-1:\nThe operational cost for each trip of TruckX is $500, for TruckY is $750, and for TruckZ is $1,000. The company has a total budget of $100,000 for operational costs and vehicle upgrades.\n// 500 * TripsX + 750 * TripsY + 1000 * TripsZ + UpgradeX + UpgradeY + UpgradeZ <= 100000\n\n## Generate Constraint-2:\nThe total number of trips that can be made in the next month is limited to 200.\n// TripsX + TripsY + TripsZ <= 200\n\n## Generate Constraint-3:\nDue to maintenance schedules, TruckX can make no more than 50 trips, and TruckY can make no more than 70 trips.\n// TripsX <= 50; TripsY <= 70",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nTripsX = model.addVar(vtype=\"INTEGER\", name=\"TripsX\") # number of trips for TruckX\nmodel.addCons(TripsX >= 0)\nTripsY = model.addVar(vtype=\"INTEGER\", name=\"TripsY\") # number of trips for TruckY\nmodel.addCons(TripsY >= 0)\nTripsZ = model.addVar(vtype=\"INTEGER\", name=\"TripsZ\") # number of trips for TruckZ\nmodel.addCons(TripsZ >= 0)\nUpgradeX = model.addVar(vtype=\"CONTINUOUS\", name=\"UpgradeX\") # investment in upgrading TruckX\nmodel.addCons(UpgradeX >= 0)\nUpgradeY = model.addVar(vtype=\"CONTINUOUS\", name=\"UpgradeY\") # investment in upgrading TruckY\nmodel.addCons(UpgradeY >= 0)\nUpgradeZ = model.addVar(vtype=\"CONTINUOUS\", name=\"UpgradeZ\") # investment in upgrading TruckZ\nmodel.addCons(UpgradeZ >= 0)\n\n# Define objective function\nRevenueX = model.addVar(name=\"RevenueX\")\nRevenueY = model.addVar(name=\"RevenueY\")\nRevenueZ = model.addVar(name=\"RevenueZ\")\nmodel.setObjective(RevenueX + RevenueY + RevenueZ, \"maximize\")\nmodel.addCons(RevenueX == (1000 + 0.2 * UpgradeX) * TripsX)\nmodel.addCons(RevenueY == (1500 + 0.3 * UpgradeY) * TripsY)\nmodel.addCons(RevenueZ == (2000 + 0.4 * UpgradeZ) * TripsZ)\n\n# Add constraints\nmodel.addCons(500 * TripsX + 750 * TripsY + 1000 * TripsZ + UpgradeX + UpgradeY + UpgradeZ <= 100000)\nmodel.addCons(TripsX + TripsY + TripsZ <= 200)\nmodel.addCons(TripsX <= 50)\nmodel.addCons(TripsY <= 70)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Number of Trips for TruckX: \", model.getVal(TripsX))\n    print(\"Number of Trips for TruckY: \", model.getVal(TripsY))\n    print(\"Number of Trips for TruckZ: \", model.getVal(TripsZ))\n    print(\"Investment in Upgrading TruckX: \", model.getVal(UpgradeX))\n    print(\"Investment in Upgrading TruckY: \", model.getVal(UpgradeY))\n    print(\"Investment in Upgrading TruckZ: \", model.getVal(UpgradeZ))\n    print(\"Total Revenue: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Number of Trips for TruckX": "0.0",
            "Number of Trips for TruckY": "70.0",
            "Number of Trips for TruckZ": "0.0",
            "Investment in Upgrading TruckX": "0.0",
            "Investment in Upgrading TruckY": "47500.0",
            "Investment in Upgrading TruckZ": "0.0",
            "Total Revenue": "1102500.0"
        },
        "question": "A logistics company operates three types of vehicles: TruckX, TruckY, and TruckZ. The company needs to decide how many trips each type of vehicle should make in the next month to optimize its operations. Additionally, the company can invest in upgrading the vehicles to improve their fuel efficiency and capacity, which affects the operational cost and revenue per trip. The revenue per trip increases with the amount of upgrade investment for each vehicle type. The initial revenue per trip and the increase in revenue per trip with upgrades for each vehicle type are given in the following Table.\n\n| Vehicle | Initial Revenue per Trip | Increase in Revenue per Trip with Upgrades |\n|---------|--------------------------|-------------------------------------------|\n| TruckX  | $1,000                   | $100 per $500 invested                     |\n| TruckY  | $1,500                   | $150 per $500 invested                     |\n| TruckZ  | $2,000                   | $200 per $500 invested                     |\n\nThe operational cost for each trip of TruckX is $500, for TruckY is $750, and for TruckZ is $1,000. The company has a total budget of $100,000 for operational costs and vehicle upgrades. The total number of trips that can be made in the next month is limited to 200. Due to maintenance schedules, TruckX can make no more than 50 trips, and TruckY can make no more than 70 trips. The company aims to maximize the total revenue from all vehicle trips.\n",
        "type": "nonlinear-table",
        "index": 563,
        "length": 1469,
        "var_num": 6
    },
    {
        "scenario": "## Define Variables:\nA company is planning to optimize its energy consumption by investing in three types of renewable energy sources: Solar, Wind, and Hydro. The company aims to balance cost efficiency with environmental impact.\n// variables: {\"amount of energy produced by solar\": \"Solar\", \"amount of energy produced by wind\": \"Wind\", \"amount of energy produced by hydro\": \"Hydro\"}, where Solar, Wind, Hydro >= 0 & Solar, Wind, Hydro are integers\n\n## Define Objective Function:\nThe cost of producing one unit of solar energy is $500, wind energy is $300, and hydro energy is $400. The environmental impact score for producing one unit of solar energy is 3, wind energy is 2, and hydro energy is 4. The company wants to minimize the Cost-Impact ratio of the investment. (The Cost-Impact ratio is defined as the total cost of energy production divided by the total environmental impact score.)\n// total cost of energy production: Cost = 500 * Solar + 300 * Wind + 400 * Hydro\n// total environmental impact score: Impact = 3 * Solar + 2 * Wind + 4 * Hydro\n// So, the objective function is: Minimize Cost / Impact\n\n## Generate Constraint-1:\nThe company has a budget of $150,000 for energy investments.\n// 500 * Solar + 300 * Wind + 400 * Hydro <= 150000\n\n## Generate Constraint-2:\nThe company aims to produce at least 360 units of energy in total.\n// Solar + Wind + Hydro >= 360\n\n## Generate Constraint-3:\nThe company wants to ensure that at least 100 units of energy come from each source.\n// Solar >= 100\n// Wind >= 100\n// Hydro >= 100",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nSolar = model.addVar(vtype=\"INTEGER\", name=\"Solar\")  # amount of energy produced by solar\nmodel.addCons(Solar >= 0)\nWind = model.addVar(vtype=\"INTEGER\", name=\"Wind\")  # amount of energy produced by wind\nmodel.addCons(Wind >= 0)\nHydro = model.addVar(vtype=\"INTEGER\", name=\"Hydro\")  # amount of energy produced by hydro\nmodel.addCons(Hydro >= 0)\n\n# Define objective function\n# Since the objective is not linear (division), we introduce a new variable and a constraint\nCost = 500 * Solar + 300 * Wind + 400 * Hydro\nImpact = 3 * Solar + 2 * Wind + 4 * Hydro\nRatio = model.addVar(name=\"Ratio\")\nmodel.setObjective(Ratio, \"minimize\")\nmodel.addCons(Ratio == Cost / Impact)\n\n# Add constraints\nmodel.addCons(500 * Solar + 300 * Wind + 400 * Hydro <= 150000)\nmodel.addCons(Solar + Wind + Hydro >= 360)\nmodel.addCons(Solar >= 100)\nmodel.addCons(Wind >= 100)\nmodel.addCons(Hydro >= 100)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Amount of Solar Energy: \", model.getVal(Solar))\n    print(\"Amount of Wind Energy: \", model.getVal(Wind))\n    print(\"Amount of Hydro Energy: \", model.getVal(Hydro))\n    print(\"Cost-Impact Ratio: \", model.getVal(Ratio))\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Amount of Solar Energy": "100.0",
            "Amount of Wind Energy": "100.0",
            "Amount of Hydro Energy": "175.0",
            "Cost-Impact Ratio": "125.0"
        },
        "question": "A company is planning to optimize its energy consumption by investing in three types of renewable energy sources: Solar, Wind, and Hydro. The company aims to balance cost efficiency with environmental impact. The company has a budget of $150,000 for energy investments. The company aims to produce at least 360 units of energy in total. The company wants to ensure that at least 100 units of energy come from each source. The cost of producing one unit of solar energy is $500, wind energy is $300, and hydro energy is $400. The environmental impact score for producing one unit of solar energy is 3, wind energy is 2, and hydro energy is 4. The company wants to minimize the Cost-Impact ratio of the investment. (The Cost-Impact ratio is defined as the total cost of energy production divided by the total environmental impact score.)",
        "type": "nonlinear-notable",
        "index": 564,
        "length": 835,
        "var_num": 3
    },
    {
        "question": "The Office of Nutrition Inspection of the EU recently found out that dishes served at the dining and beverage facility \"Bullneck's\" such  as herring, hot dogs, and house-style hamburgers do not comport with the new nutritional regulations, and its report mentioned explicitly the lack of vitamins A and C and dietary fiber. The owner and operator of the facility is attempting to rectify these shortcomings by augmenting the menu with vegetable side dishes, which he intends to create from white cabbage, carrots, and a stockpile of pickled cucumbers discovered in the cellar. The following table summarizes the numerical data: the prescribed amount of the vitamins and fiber per dish, their content in the foods, and the unit prices of the foods. For example, Carrot Raw contains 35 mg/kg Vitamin A, 60 mg/kg Vitamin C, and Dietary Fiber 30 g/kg as the praise is 0.75 and it's required per dish 0.5mg. For White Cabbage, Raw contains 0.5 mg/kg vitamin A, 300 mg/kg vitamin C, and Dietary Fiber 20 g/kg as the praise is 0.5 and it's required per dish 15mg. For Cucumber, Pickled contains 0.5 mg/kg vitamin A, 10 mg/kg vitamin C, and Dietary Fiber 10 g/kg as the praise is 0.15 and it's required per dish 4g. The objective function expresses the price of the combination. At what minimum additional price per dish can the requirements of the Office of Nutrition Inspection be satisfied?",
        "formulation": "# Define Variables:\nFirst, we need to determine the amounts of carrot, white cabbage, and cucumber to be added to each dish. Let's denote the amount of carrot as x, the amount of white cabbage as y, and the amount of cucumber as z.\n```Variables\nx // amount of carrot to be added to each dish\ny // amount of white cabbage to be added to each dish\nz // amount of cucumber to be added to each dish\nx, y, z >= 0 and they are integers // non-negative integer variables\n```\n\n# Objective Function:\nWe want to minimize the additional price per dish, so the objective function (price of combination) is given by the sum of the prices of carrot, white cabbage, and cucumber. The price of carrot is 0.75x, the price of white cabbage is 0.5y, and the price of cucumber is 0.15z. Therefore, the objective function is 0.75x + 0.5y + 0.15z.\n```Objective Function\nMinimize: 0.75x + 0.5y + 0.15z\n```\n\n# Constraints:\nWe need to ensure that the requirements of the Office of Nutrition Inspection are satisfied. The minimum requirement of Vitamin A is 0.5 mg, which can be obtained from 35x mg of carrot, 0.5y mg of white cabbage, and 0.5z mg of cucumber. The minimum requirement of Vitamin C is 15 mg, which can be obtained from 60x mg of carrot, 300y mg of white cabbage, and 10z mg of cucumber. The minimum requirement of Dietary Fiber is 4 g, which can be obtained from 30x g of carrot, 20y g of white cabbage, and 10z g of cucumber. Therefore, the constraints are as follows:\n```Constraints\n35x + 0.5y + 0.5z >= 0.5 // minimum requirement of Vitamin A\n60x + 300y + 10z >= 15 // minimum requirement of Vitamin C\n30x + 20y + 10z >= 4 // minimum requirement of Dietary Fiber\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"Carrot\", lowBound=0, cat='Continuous') # amount of carrot to be added to each dish\ny = LpVariable(\"WhiteCabbage\", lowBound=0, cat='Continuous') # amount of white cabbage to be added to each dish\nz = LpVariable(\"Cucumber\", lowBound=0, cat='Continuous') # amount of cucumber to be added to each dish\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"NutritionOptimization\", LpMinimize)\n\n# Define the objective function\nobjective = 0.75 * x + 0.5 * y + 0.15 * z\nproblem += objective # minimize the additional price per dish\n\n# Define the constraints\nproblem += 35 * x + 0.5 * y + 0.5 * z >= 0.5 # minimum requirement of Vitamin A\nproblem += 60 * x + 300 * y + 10 * z >= 15 # minimum requirement of Vitamin C\nproblem += 30 * x + 20 * y + 10 * z >= 4 # minimum requirement of Dietary Fiber\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The amount of carrot to be added to each dish:\", x.value())\nprint(\"The amount of white cabbage to be added to each dish:\", y.value())\nprint(\"The amount of cucumber to be added to each dish:\", z.value())\nprint(\"The minimum additional price per dish:\", objective.value())\n",
        "results": {
            "The amount of carrot (kg) to be added to each dish": "0.0095263438",
            "The amount of white cabbage (kg) to be added to each dish": "0.038265035",
            "The amount of cucumber (kg) to be added to each dish": "0.2948909",
            "The minimum additional price per dish": "0.07051091035"
        },
        "type": "linear-table",
        "index": 565,
        "length": 1385,
        "var_num": 3
    },
    {
        "question": "The Office of Nutrition Inspection of the EU recently found that dishes served at \"Bullneck's\" dining and beverage facility, such as herring, hot dogs, and house-style hamburgers, do not meet the new nutritional regulations due to insufficient levels of vitamins A and C and dietary fiber. To address this, the owner is considering adding vegetable side dishes made from white cabbage, carrots, and a stockpile of pickled cucumbers. The table below provides the required amounts of vitamins and fiber per dish, their content in the foods, and the unit prices of the foods. The goal is to determine the minimum additional price per dish to meet the nutritional standards set by the Office of Nutrition Inspection.\n\nTable (Nutritional content and prices of food items):\n| Food Item        | Vitamin A (mg/kg) | Vitamin C (mg/kg) | Dietary Fiber (g/kg) | Price ($/kg) | Required Amount Per Dish |\n| ---------------- | ----------------- | ----------------- | -------------------- | ------------ | ------------------------ |\n| Carrot, Raw      | 35                | 60                | 30                   | 0.75         | Vitamin A: 0.5mg         |\n| White Cabbage, Raw | 0.5              | 300               | 20                   | 0.5          | Vitamin C: 15mg          |\n| Cucumber, Pickled | 0.5              | 10                | 10                   | 0.15         | Dietary Fiber: 4g        |\n\nThe objective function will express the price of the combination. What is the minimum additional price per dish to satisfy the nutritional requirements?",
        "formulation": "# Define Variables:\nFirst, we need to determine the amounts of carrot, white cabbage, and cucumber to be added to each dish. Let's denote the amount of carrot as x, the amount of white cabbage as y, and the amount of cucumber as z.\n```Variables\nx // amount of carrot to be added to each dish\ny // amount of white cabbage to be added to each dish\nz // amount of cucumber to be added to each dish\nx, y, z >= 0 and they are integers // non-negative integer variables\n```\n\n# Objective Function:\nWe want to minimize the additional price per dish, so the objective function (price of combination) is given by the sum of the prices of carrot, white cabbage, and cucumber. The price of carrot is 0.75x, the price of white cabbage is 0.5y, and the price of cucumber is 0.15z. Therefore, the objective function is 0.75x + 0.5y + 0.15z.\n```Objective Function\nMinimize: 0.75x + 0.5y + 0.15z\n```\n\n# Constraints:\nWe need to ensure that the requirements of the Office of Nutrition Inspection are satisfied. The minimum requirement of Vitamin A is 0.5 mg, which can be obtained from 35x mg of carrot, 0.5y mg of white cabbage, and 0.5z mg of cucumber. The minimum requirement of Vitamin C is 15 mg, which can be obtained from 60x mg of carrot, 300y mg of white cabbage, and 10z mg of cucumber. The minimum requirement of Dietary Fiber is 4 g, which can be obtained from 30x g of carrot, 20y g of white cabbage, and 10z g of cucumber. Therefore, the constraints are as follows:\n```Constraints\n35x + 0.5y + 0.5z >= 0.5 // minimum requirement of Vitamin A\n60x + 300y + 10z >= 15 // minimum requirement of Vitamin C\n30x + 20y + 10z >= 4 // minimum requirement of Dietary Fiber\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"Carrot\", lowBound=0, cat='Continuous') # amount of carrot to be added to each dish\ny = LpVariable(\"WhiteCabbage\", lowBound=0, cat='Continuous') # amount of white cabbage to be added to each dish\nz = LpVariable(\"Cucumber\", lowBound=0, cat='Continuous') # amount of cucumber to be added to each dish\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"NutritionOptimization\", LpMinimize)\n\n# Define the objective function\nobjective = 0.75 * x + 0.5 * y + 0.15 * z\nproblem += objective # minimize the additional price per dish\n\n# Define the constraints\nproblem += 35 * x + 0.5 * y + 0.5 * z >= 0.5 # minimum requirement of Vitamin A\nproblem += 60 * x + 300 * y + 10 * z >= 15 # minimum requirement of Vitamin C\nproblem += 30 * x + 20 * y + 10 * z >= 4 # minimum requirement of Dietary Fiber\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The amount of carrot to be added to each dish:\", x.value())\nprint(\"The amount of white cabbage to be added to each dish:\", y.value())\nprint(\"The amount of cucumber to be added to each dish:\", z.value())\nprint(\"The minimum additional price per dish:\", objective.value())\n",
        "results": {
            "The amount of carrot (kg) to be added to each dish": "0.0095263438",
            "The amount of white cabbage (kg) to be added to each dish": "0.038265035",
            "The amount of cucumber (kg) to be added to each dish": "0.2948909",
            "The minimum additional price per dish": "0.07051091035"
        },
        "type": "linear-table",
        "index": 566,
        "length": 1552,
        "var_num": 3
    },
    {
        "question": "A lighting company has access to two types of lights to provide their customers, an LED fixture, and a fluorescence lamp. The LED light uses 5 units of electricity per hour and needs to be changed 3 times a decade. Conversely, the fluorescence lamp uses 8 units of electricity per hour and needs to be changed 4 times a decade. Due to previous installations, at least 30% implemented lights must be fluorescence lamps. If the customer requires at least 300 light fixtures and can use at most 2000 units of electricity, how many of each light should be installed to reduce the total number of light changes?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_LED = LpVariable(\"NumLED\", lowBound=0, cat='Integer') # number of LED lights\nnum_fluorescence = LpVariable(\"NumFluorescence\", lowBound=0, cat='Integer') # number of fluorescence lamps\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"LightingCompany\", LpMinimize)\n\n# Define the objective function\nobjective = 3 * num_LED + 4 * num_fluorescence\nproblem += objective # minimize the total number of light changes\n\n# Define the constraints\nproblem += 5 * num_LED + 8 * num_fluorescence <= 2000 # use at most 2000 units of electricity\nproblem += num_LED + num_fluorescence >= 300 # require at least 300 light fixtures\nproblem += num_fluorescence >= 0.3 * (num_LED + num_fluorescence) # at least 30% must be fluorescence lamps\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of LED lights:\", num_LED.value())\nprint(\"The number of fluorescence lamps:\", num_fluorescence.value())\nprint(\"The total number of light changes:\", objective.value())",
        "results": {
            "The number of LED lights": "210.0",
            "The number of fluorescence lamps": "90.0",
            "The total number of light changes": "990.0"
        },
        "formulation": "minimize 3x+4y\nSubject to: \ny >= 0.3(x+y)\nx+y >= 300\n5x+8y <= 2000 (end)",
        "type": "linear-notable",
        "index": 567,
        "length": 606,
        "var_num": 2
    },
    {
        "question": "A company sells custom scooters and bikes for customers. The profit per scooter is $200 and the profit per bike is $300. Each product requires time with the design team and engineering team. Each scooter needs 2 hours with the design team and 3 hours with the engineering team. Each bike needs 4 hours with the design team and 5 hours with the engineering team. Per month, there are 5000 hours available on the design team and 6000 hours available on the engineering team. How many of each should the company make per month to maximize profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_scooters = LpVariable(\"NumScooters\", lowBound=0, cat='Integer') # number of scooters\nnum_bikes = LpVariable(\"NumBikes\", lowBound=0, cat='Integer') # number of bikes\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ScooterAndBikeProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 200 * num_scooters + 300 * num_bikes\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 2 * num_scooters + 4 * num_bikes <= 5000 # Design team's hours cannot exceed 5000\nproblem += 3 * num_scooters + 5 * num_bikes <= 6000 # Engineering team's hours cannot exceed 6000\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of scooters:\", num_scooters.value())\nprint(\"The number of bikes:\", num_bikes.value())\nprint(\"Total profit:\", objective.value())",
        "results": {
            "The number of scooters": "2000.0",
            "The number of bikes": "0.0",
            "Total profit": "400000.0"
        },
        "formulation": "maximize 200x+300y\nSubject to: \n2x+4y <= 5000\n3x+5y <= 6000 (end)",
        "type": "linear-notable",
        "index": 568,
        "length": 543,
        "var_num": 2
    },
    {
        "question": "A young boy is trying to gain weight and put muscle. He can eat both tuna salad sandwiches and chicken salad sandwiches. He wants to get a minimum of 100 units of protein and 150 units of fat per day. A tuna salad sandwich costs $5 and contains 20 units of protein and 25 units of fat. A chicken salad sandwich costs $7 and contains 25 units of protein and 15 units of fat. How many of each should he eat to minimize his cost?",
        "formulation": "{\"variable\": [{\"description\": \"number of tuna salad sandwiches\", \"name\": \"x\"}, {\"description\": \"number of chicken salad sandwiches\", \"name\": \"y\"}], \"objective\": [{\"description\": \"cost of sandwiches\", \"function\": \"5x + 7y\", \"sense\": \"Minimize\"}], \"constraint\": [{\"description\": \"protein intake constraint\", \"function\": \"20x + 25y >= 100\"}, {\"description\": \"fat intake constraint\", \"function\": \"25x + 15y >= 150\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_tuna_sandwiches = LpVariable(\"NumTunaSandwiches\", lowBound=0, cat='Continuous') # number of tuna salad sandwiches\nnum_chicken_sandwiches = LpVariable(\"NumChickenSandwiches\", lowBound=0, cat='Continuous') # number of chicken salad sandwiches\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MuscleGainDiet\", LpMinimize)\n\n# Define the objective function\nobjective = 5 * num_tuna_sandwiches + 7 * num_chicken_sandwiches\nproblem += objective # minimize the cost of sandwiches\n\n# Define the constraints\nproblem += 20 * num_tuna_sandwiches + 25 * num_chicken_sandwiches >= 100 # protein intake constraint\nproblem += 25 * num_tuna_sandwiches + 15 * num_chicken_sandwiches >= 150 # fat intake constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of tuna salad sandwiches:\", num_tuna_sandwiches.value())\nprint(\"The number of chicken salad sandwiches:\", num_chicken_sandwiches.value())\nprint(\"The total cost:\", objective.value())\n",
        "results": {
            "The number of tuna salad sandwiches": "6.0",
            "The number of chicken salad sandwiches": "0.0",
            "The total cost": "30.0"
        },
        "type": "linear-notable",
        "index": 569,
        "length": 426,
        "var_num": 2
    },
    {
        "question": "A clothing company can sell their product in two types of stores, a retail store and a factory outlet. A retail store brings in 200 customers every day and requires 6 employees to operate. A factory outlet brings in 80 customers every day and due to the lower traffic and being in more remote areas, requires 4 employees to run. Company executives decided that there must be at least 1200 customers every day, and can make available 50 employees. How should the company distribute their product to the two types of store to reduce the number of stores that must be open?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_retail_stores = LpVariable(\"NumRetailStores\", lowBound=0, cat='Integer') # number of retail stores\nnum_factory_outlets = LpVariable(\"NumFactoryOutlets\", lowBound=0, cat='Integer') # number of factory outlets\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"StoreDistribution\", LpMinimize)\n\n# Define the objective function\nobjective = num_retail_stores + num_factory_outlets\nproblem += objective # minimize the total number of stores\n\n# Define the constraints\nproblem += 200 * num_retail_stores + 80 * num_factory_outlets >= 1200 # there must be at least 1200 customers every day\nproblem += 6 * num_retail_stores + 4 * num_factory_outlets <= 50 # available employees \n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of retail stores:\", num_retail_stores.value())\nprint(\"The number of factory outlets:\", num_factory_outlets.value())\nprint(\"The total number of stores:\", objective.value())",
        "results": {
            "The number of retail stores": "6.0",
            "The number of factory outlets": "0.0",
            "The total number of stores": "6.0"
        },
        "formulation": "minimize x+y\nSubject to: \n80y+200x >= 1200\n4y+6x <= 50 (end)",
        "type": "linear-notable",
        "index": 570,
        "length": 570,
        "var_num": 2
    },
    {
        "question": "A cosmetics company makes low, medium, and high quality face wash. A low quality face wash contains 1 unit of rare ingredients and 4 units of water. A medium quality face wash contains 3 units of rare ingredients and 2 units of water. A high quality face wash contains 4 units of rare ingredients and 1 unit of water. The company has available 100 units of rare ingredients and 200 units of water. If the profit per low quality face wash is $3, the profit per medium quality face wash is $7, and the profit per high quality face wash is $9, how many of each should be made to maximize profits?",
        "formulation": "{\"variable\": [{\"description\": \"number of low quality face wash\", \"name\": \"x\"}, {\"description\": \"number of medium quality face wash\", \"name\": \"y\"}, {\"description\": \"number of high quality face wash\", \"name\": \"z\"}], \"objective\": [{\"description\": \"profit\", \"function\": \"3x + 7y + 9z\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"rare ingredients constraint\", \"function\": \"x + 3y + 4z <= 100\"}, {\"description\": \"water constraint\", \"function\": \"4x + 2y + z <= 200\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y, z >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"LowQualityFaceWash\", lowBound=0, cat='Integer') # number of low quality face wash\ny = LpVariable(\"MediumQualityFaceWash\", lowBound=0, cat='Integer') # number of medium quality face wash\nz = LpVariable(\"HighQualityFaceWash\", lowBound=0, cat='Integer') # number of high quality face wash\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CosmeticsCompanyProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 3 * x + 7 * y + 9 * z\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += x + 3 * y + 4 * z <= 100 # rare ingredients constraint\nproblem += 4 * x + 2 * y + z <= 200 # water constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of low quality face wash:\", x.value())\nprint(\"The number of medium quality face wash:\", y.value())\nprint(\"The number of high quality face wash:\", z.value())\nprint(\"The total profit:\", objective.value())\n",
        "results": {
            "The number of low quality face wash": "46.0",
            "The number of medium quality face wash": "2.0",
            "The number of high quality face wash": "12.0",
            "The total profit": "260.0"
        },
        "type": "linear-notable",
        "index": 571,
        "length": 593,
        "var_num": 3
    },
    {
        "scenario": "## Define Variables:\nA bakery produces three types of pastries: Classic, Gourmet, and Vegan. The bakery needs to determine the quantities of each pastry to produce daily. Additionally, the bakery has a choice to either use regular ingredients or premium ingredients for each type of pastry.\n// variables: {\"quantity of Classic pastries\": \"Classic\", \"quantity of Gourmet pastries\": \"Gourmet\", \"quantity of Vegan pastries\": \"Vegan\", \"whether use regular ingredients for Classic\": \"RegularClassic\", \"whether use regular ingredients for Gourmet\": \"RegularGourmet\", \"whether use regular ingredients for Vegan\": \"RegularVegan\"}, where Classic, Gourmet, Vegan >= 0 and Classic, Gourmet, Vegan are integers, RegularClassic, RegularGourmet, RegularVegan are binary (0 or 1).\n\n## Define Objective Function:\nFor Classic pastries, the profit per unit with regular ingredients is $2, and with premium ingredients is $3.\nFor Gourmet pastries, the profit per unit with regular ingredients is $4, and with premium ingredients is $5.\nFor Vegan pastries, the profit per unit with regular ingredients is $3, and with premium ingredients is $4.\nThe bakery wants to maximize the total daily profit from selling the pastries.\n// Profit_Classic = (RegularClassic * 2 + (1 - RegularClassic) * 3) * Classic\n// Profit_Gourmet = (RegularGourmet * 4 + (1 - RegularGourmet) * 5) * Gourmet\n// Profit_Vegan = (RegularVegan * 3 + (1 - RegularVegan) * 4) * Vegan\n// So, the objective function is: Maximize (Profit_Classic + Profit_Gourmet + Profit_Vegan)\n\n## Generate Constraint-1:\nThe bakery has a daily supply of 100 kg of regular ingredients and 50 kg of premium ingredients. Per unit of each pastry, the regular ingredients required are 0.5 kg for Classic, 0.8 kg for Gourmet, and 0.6 kg for Vegan. The premium ingredients required are 0.8 kg for Classic, 1.2 kg for Gourmet, and 1 kg for Vegan.\n// 0.5 * Classic * RegularClassic + 0.8 * Gourmet * RegularGourmet + 0.6 * Vegan * RegularVegan <= 100\n// 0.8 * Classic * (1 - RegularClassic) + 1.2 * Gourmet * (1 - RegularGourmet) + 1 * Vegan * (1 - RegularVegan) <= 50\n\n## Generate Constraint-2:\nThe bakery has a daily production capacity of 200 pastries.\n// Classic + Gourmet + Vegan <= 200\n\n## Generate Constraint-3:\nThe market has a demand limit for each pastry. For Classic, the demand limit is 150 pastries. For Gourmet, the demand limit is 100 pastries. For Vegan, the demand limit is 80 pastries.\n// Classic <= 150; Gourmet <= 100; Vegan <= 80",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nClassic = model.addVar(vtype=\"INTEGER\", name=\"Classic\") # quantity of Classic pastries\nmodel.addCons(Classic >= 0)\nGourmet = model.addVar(vtype=\"INTEGER\", name=\"Gourmet\") # quantity of Gourmet pastries\nmodel.addCons(Gourmet >= 0)\nVegan = model.addVar(vtype=\"INTEGER\", name=\"Vegan\") # quantity of Vegan pastries\nmodel.addCons(Vegan >= 0)\nRegularClassic = model.addVar(vtype=\"BINARY\", name=\"RegularClassic\") # whether use regular ingredients for Classic\nRegularGourmet = model.addVar(vtype=\"BINARY\", name=\"RegularGourmet\") # whether use regular ingredients for Gourmet\nRegularVegan = model.addVar(vtype=\"BINARY\", name=\"RegularVegan\") # whether use regular ingredients for Vegan\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == (RegularClassic * 2 + (1 - RegularClassic) * 3) * Classic + (RegularGourmet * 4 + (1 - RegularGourmet) * 5) * Gourmet + (RegularVegan * 3 + (1 - RegularVegan) * 4) * Vegan)\n\n# Add constraints\nmodel.addCons(0.5 * Classic * RegularClassic + 0.8 * Gourmet * RegularGourmet + 0.6 * Vegan * RegularVegan <= 100)\nmodel.addCons(0.8 * Classic * (1 - RegularClassic) + 1.2 * Gourmet * (1 - RegularGourmet) + 1 * Vegan * (1 - RegularVegan) <= 50)\nmodel.addCons(Classic + Gourmet + Vegan <= 200)\nmodel.addCons(Classic <= 150)\nmodel.addCons(Gourmet <= 100)\nmodel.addCons(Vegan <= 80)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Total Profit: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Total Profit": "686.0"
        },
        "question": "A bakery produces three types of pastries: Classic, Gourmet, and Vegan. The bakery needs to determine the quantities of each pastry to produce daily, and whether to use regular or premium ingredients for each type of pastry. The profit per unit for each type of pastry with regular and premium ingredients is given in the following Table.\n\n| Pastry     | Profit per Unit (Regular Ingredients) | Profit per Unit (Premium Ingredients) |\n|------------|--------------------------------------|--------------------------------------|\n| Classic    | 2$                                   | 3$                                   |\n| Gourmet    | 4$                                   | 5$                                   |\n| Vegan      | 3$                                   | 4$                                   |\n\nThe bakery has a daily supply of 100 kg of regular ingredients and 50 kg of premium ingredients. The regular ingredients required per unit are 0.5 kg for Classic, 0.8 kg for Gourmet, and 0.6 kg for Vegan. The premium ingredients required per unit are 0.8 kg for Classic, 1.2 kg for Gourmet, and 1 kg for Vegan. The bakery has a daily production capacity of 200 pastries. The market has a demand limit for each pastry: 150 pastries for Classic, 100 pastries for Gourmet, and 80 pastries for Vegan. The bakery wants to maximize the total daily profit from selling the pastries.\n",
        "type": "nonlinear-table",
        "index": 572,
        "length": 1383,
        "var_num": 6
    },
    {
        "question": "A clothing company makes flight jackets and denim jackets in their factory. A different team produces each kind of jacket and each team has a different maximum production rate: 10 flight jackets per day and 25 denim jackets per day respectively. Both teams require the use of a sewing machine and this machine can process at most 30 jackets per day of either type. While the flight jackets generate a profit of $70 per jacket, the denim jackets generate a profit of $100 per jacket. Assuming the company can sell all the jackets they make, how many of each type of jacket should they make to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of flight jackets produced per day\", \"name\": \"x\"}, {\"description\": \"number of denim jackets produced per day\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit generated from selling jackets\", \"function\": \"70x + 100y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"maximum production rate of flight jackets team\", \"function\": \"x <= 10\"}, {\"description\": \"maximum production rate of denim jackets team\", \"function\": \"y <= 25\"}, {\"description\": \"maximum processing capacity of sewing machine\", \"function\": \"x + y <= 30\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"FlightJackets\", lowBound=0, cat='Integer') # number of flight jackets produced per day\ny = LpVariable(\"DenimJackets\", lowBound=0, cat='Integer') # number of denim jackets produced per day\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"JacketProduction\", LpMaximize)\n\n# Define the objective function\nobjective = 70 * x + 100 * y\nproblem += objective # maximize the profit from selling jackets\n\n# Define the constraints\nproblem += x <= 10 # maximum production rate of flight jackets team\nproblem += y <= 25 # maximum production rate of denim jackets team\nproblem += x + y <= 30 # maximum processing capacity of sewing machine\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of flight jackets to produce:\", x.value())\nprint(\"The number of denim jackets to produce:\", y.value())\nprint(\"The maximum profit:\", objective.value())\n",
        "results": {
            "The number of flight jackets to produce": "5.0",
            "The number of denim jackets to produce": "25.0",
            "The maximum profit": "2850.0"
        },
        "type": "linear-notable",
        "index": 573,
        "length": 608,
        "var_num": 2
    },
    {
        "question": "A candy company wants to make a special mix using sour cherry candies and sour peach candies. Each sour cherry candy has 2 units of citric acid and 3 units of sugar. Each sour peach candy has 1 units of citric acid and 4 units of sugar.  The special mix must contain at least 50 units of citric acid and 60 units of sugar. In addition, there can be at most 10 sour cherry candies in the mixture. If the cost per sour cherry candy is $0.10 and the cost per sour peach candy is $0.12, how many of each should be in the mixture to minimize costs?",
        "formulation": "{\"variable\": [{\"description\": \"number of sour cherry candies\", \"name\": \"x\"}, {\"description\": \"number of sour peach candies\", \"name\": \"y\"}], \"objective\": [{\"description\": \"cost of candies\", \"function\": \"0.10x + 0.12y\", \"sense\": \"Minimize\"}], \"constraint\": [{\"description\": \"citric acid requirement\", \"function\": \"2x + y >= 50\"}, {\"description\": \"sugar requirement\", \"function\": \"3x + 4y >= 60\"}, {\"description\": \"maximum number of sour cherry candies\", \"function\": \"x <= 10\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"SourCherryCandies\", lowBound=0, cat='Integer') # number of sour cherry candies\ny = LpVariable(\"SourPeachCandies\", lowBound=0, cat='Integer') # number of sour peach candies\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"CandyMixOptimization\", LpMinimize)\n\n# Define the objective function\nobjective = 0.10 * x + 0.12 * y\nproblem += objective # minimize the cost of candies\n\n# Define the constraints\nproblem += 2 * x + 1 * y >= 50 # citric acid requirement\nproblem += 3 * x + 4 * y >= 60 # sugar requirement\nproblem += x <= 10 # maximum number of sour cherry candies\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of sour cherry candies:\", x.value())\nprint(\"The number of sour peach candies:\", y.value())\nprint(\"The total cost of the candies:\", objective.value())\n",
        "results": {
            "The number of sour cherry candies": "10.0",
            "The number of sour peach candies": "30.0",
            "The total cost of the candies": "4.6"
        },
        "type": "linear-notable",
        "index": 574,
        "length": 543,
        "var_num": 2
    },
    {
        "question": "A box with square base and no top is to hold a volume 100. Find the dimensions of the box that requires the least material for the five sides. Also find the ratio of height to side of the base.",
        "scenario": "## Define Variables:\nYou need to construct a box with a square base and no top.\n// variables: {\"side length of the square base\": \"x\", \"height of the box\": \"h\"}, where x, h >= 0\n\n## Define Objective Function:\nFind the dimensions of the box that requires the least material for the five sides.\n// The surface area of the box is the sum of the area of the square base and the area of the four sides. The area of the square base is x^2, and the area of the four sides is 4*x*h.\n// Therefore, the objective function is: Minimize x^2 + 4*x*h\n\n## Generate Constraint-1:\nThe volume of the box is 100 cubic inches.\n// The volume of the box is given by the formula x^2h, and it is given that the volume is 100. Therefore, the constraint is x^2h = 100",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"CONTINUOUS\", name=\"x\") # side length of the square base\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the box\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"minimize\")\nmodel.addCons(obj == x**2 + 4*x*h)\n\n# Add constraints\nmodel.addCons(x**2*h == 100)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The side length of the square base:\", model.getVal(x))\n    print(\"The height of the box:\", model.getVal(h))\n    print(\"The minimum surface area of the box: \", model.getVal(obj))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The side length of the square base": "5.848206145096713",
            "The height of the box": "2.9238470606094826",
            "The minimum surface area of the box": "102.59855554521748"
        },
        "type": "nonlinear-notable",
        "index": 575,
        "length": 193,
        "var_num": 2
    },
    {
        "question": "A drop-in clinic is performing a test either through the ear or blood. A blood test takes 30 minutes to perform while an ear test takes 5 minutes to perform. Since the blood test is more accurate, at least three times as many blood tests should be performed as ear tests. However, at least 12 ear tests must be administered. If the drop-in clinic operates for 7525 minutes, maximize the number of tests that can be performed.",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_blood_tests = LpVariable(\"NumBloodTests\", lowBound=0, cat='Integer') # number of blood tests\nnum_ear_tests = LpVariable(\"NumEarTests\", lowBound=12, cat='Integer') # number of ear tests\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ClinicOperation\", LpMaximize)\n\n# Define the objective function\nobjective = num_blood_tests + num_ear_tests\nproblem += objective # maximize the total number of tests performed\n\n# Define the constraints\nproblem += 30 * num_blood_tests + 5 * num_ear_tests <= 7525 # total time should not exceed 7525 minutes\nproblem += num_blood_tests >= 3 * num_ear_tests # blood tests should be at least three times as many as ear tests\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of blood tests:\", num_blood_tests.value())\nprint(\"The number of ear tests:\", num_ear_tests.value())\nprint(\"The total number of tests performed:\", objective.value())",
        "results": {
            "The number of blood tests": "237.0",
            "The number of ear tests": "79.0",
            "The total number of tests performed": "316.0"
        },
        "formulation": "maximize x+y\nSubject to: \ny >= 3x\nx >= 12 (end)",
        "type": "linear-notable",
        "index": 576,
        "length": 425,
        "var_num": 2
    },
    {
        "question": "A dessert shop is popular for their only two desserts - matcha ice cream and orange sorbet. Two units of flavouring and four units of ice cream is required to make one order of matcha ice cream. Four units of flavouring and three units of water is required to make an order of orange sorbet. The dessert shop has recently been getting more orders online for orange sorbet and therefore, there should be more orange sorbet made than matcha ice cream. However, at least fifteen percent of desserts made must be matcha ice cream. The dessert shop has available 600 units of ice cream and 550 units of water. How many of each dessert should the shop make to minimize the total amount of flavouring needed?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_matcha = LpVariable(\"NumMatcha\", lowBound=0, cat='Integer') # number of matcha ice cream\nnum_orange = LpVariable(\"NumOrange\", lowBound=0, cat='Integer') # number of orange sorbet\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"DessertShop\", LpMinimize)\n\n# Define the objective function\nobjective = 2 * num_matcha + 4 * num_orange\nproblem += objective # minimize the total amount of flavoring\n\n# Define the constraints\nproblem += 4 * num_matcha <= 600 # constraint for the units of ice cream\nproblem += 3 * num_orange <= 550 # constraint for the units of water\nproblem += num_orange >= num_matcha + 1 # more orange sorbet than matcha ice cream\nproblem += num_matcha >= 0.15 * (num_matcha + num_orange) # at least 15% matcha\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of matcha ice cream:\", num_matcha.value())\nprint(\"The number of orange sorbet:\", num_orange.value())\nprint(\"The total amount of flavoring needed:\", objective.value())",
        "results": {
            "The number of matcha ice cream": "1.0",
            "The number of orange sorbet": "2.0",
            "The total amount of flavoring needed": "10.0"
        },
        "formulation": "minimize Twox+Foury\nSubject to: \ny >= x\nx >= fifteenpercent(x+y)\n4x <= 600\n3y <= 550 (end)",
        "type": "linear-notable",
        "index": 577,
        "length": 701,
        "var_num": 2
    },
    {
        "question": "You want to sell a kind of item in order to maximize your profit. The price must be a multiple of 10 cents. Market research tells you that if you set the price at $1.50, you will be able to sell 5000 items, and for every 10 cents you lower the price below $1.50 you will be able to sell another 1000 items. Suppose that your fixed costs (''start-up costs'') total $2000, and the per item cost of production (''marginal cost'') is $0.50. Find the price to set per item and the number of items sold in order to maximize profit, and also determine the maximum profit you can get.",
        "scenario": "## Define Variables:\nYou want to sell a kind of item in order to maximize your profit. \n// variables: {\"price per item\": \"P\", \"number of items sold\": \"N\"}, where P >= 0, N >= 0, and N is an integer\n\n## Define Objective Function:\nMarket research tells you that if you set the price at $1.50, you will be able to sell 5000 items, and for every 10 cents you lower the price below $1.50 you will be able to sell another 1000 items. Suppose that your fixed costs (''start-up costs'') total $2000, and the per item cost of production (''marginal cost'') is $0.50. Find the price to set per item and the number of items sold in order to maximize profit, and also determine the maximum profit you can get.\n// N = 5000 + 1000 * (1.50 - P) / 0.10\n// The revenue is the product of the price per item and the number of items sold. So, the revenue is P * N, which is P * (5000 + 1000 * (1.50 - P) / 0.10)\n// The cost is the sum of the fixed costs and the product of the marginal cost and the number of items sold. So, the cost is 2000 + 0.50 * N, which is 2000 + 0.50 * (5000 + 1000 * (1.50 - P) / 0.10)\n// Therefore, Objective Function is: Maximize P * (5000 + 1000 * (1.50 - P) / 0.10) - 2000 - 0.50 * (5000 + 1000 * (1.50 - P) / 0.10)\n\n\n## Generate Constraint-1:\nThe price must be a multiple of 10 cents.\n// P = 1.50 - 0.10 * x, where x is an integer and x >= 0",
        "code": "from pyscipopt import Model, quicksum\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nP = model.addVar(vtype=\"CONTINUOUS\", name=\"P\")  # price per item\nN = model.addVar(vtype=\"INTEGER\", name=\"N\")  # number of items sold\nx = model.addVar(vtype=\"INTEGER\", name=\"x\")  # auxiliary variable for price constraint\n\n# Define objective function\nobj = model.addVar(vtype=\"CONTINUOUS\", name=\"obj\")\nrevenue = P * N\ncost = 2000 + 0.50 * N\nprofit = revenue - cost\nmodel.addCons(obj == profit)\nmodel.setObjective(obj, \"maximize\")\n\n# Add constraints\nmodel.addCons(N == 5000 + 1000 * (1.50 - P) / 0.10)\nmodel.addCons(P == 1.50 - 0.10 * x)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The price per item to maximize profit:\", model.getVal(P))\n    print(\"The number of items sold to maximize profit:\", model.getVal(N))\n    print(\"The maximum profit you can get: \", model.getVal(profit))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The price per item to maximize profit": "1.3",
            "The number of items sold to maximize profit": "7000.0",
            "The maximum profit you can get": "3600.0"
        },
        "type": "nonlinear-notable",
        "index": 578,
        "length": 576,
        "var_num": 3
    },
    {
        "question": "Many companies or institutions, especially those operating 24 hours daily, usually divide the daily schedule into discrete time windows. Examples include hospitals, restaurants, call centers, and police departments. The number of staff required typically varies among these time windows. Staff members are scheduled to work different shifts, each covering a certain number of consecutive time windows. Staff members assigned to different shifts may be paid differently, depending on which shift they work. For example, those working overnight are usually paid at a higher rate. The scheduling problem is to determine the number of workers to be assigned to each shift so that the company meets the demand in each time window. Consider a 24-hour fast food restaurant that operates in eight consecutive time windows, each of 3 hours duration. A shift covers three consecutive time windows (9 hours in total). The following table shows the number of workers required for each time window and the wage rate per 9-hour shift.\n\nTable (Number of workers required and wage rate per shift for a 24-hour fast food restaurant):\n| Time Window     | Shift 1 | Shift 2 | Shift 3 | Shift 4 | Workers Required |\n| --------------- | ------- | ------- | ------- | ------- | ---------------- |\n| 6 a.m. - 9 a.m. | X       |         |         | X       | 55               |\n| 9 a.m. - 12 p.m.| X       |         |         |         | 46               |\n| 12 p.m. - 3 p.m.| X       | X       |         |         | 59               |\n| 3 p.m. - 6 p.m. |         | X       |         |         | 23               |\n| 6 p.m. - 9 p.m. |         | X       | X       |         | 60               |\n| 9 p.m. - 12 a.m.|         |         | X       |         | 38               |\n| 12 a.m. - 3 a.m.|         |         | X       | X       | 20               |\n| 3 a.m. - 6 a.m. |         |         |         | X       | 30               |\n| Wage Rate       | $135    | $140    | $190    | $188    |                  |\n\nNote: \"X\" indicates the shifts that cover each time window. The goal is to determine the number of workers to assign to each shift to meet the demand in each time window while minimizing labor costs.",
        "formulation": "# Define Variables:\nFirst, we need to determine the number of workers needed for each shift. Let's denote the number of workers needed for shift 1 as W1, for shift 2 as W2, and for shift 3 as W3.\n```Variables\nW1 //number of workers needed for shift 1\nW2 //number of workers needed for shift 2\nW3 //number of workers needed for shift 3\nW1, W2, W3 >= 0 and they are integers\n```\n\n# Objective Function:\nWe want to minimize the total wage cost, so the objective function is given by the sum of the wage cost for each shift. The wage cost for shift 1 is $135 per 9 hours * W1 workers. The wage cost for shift 2 is $140 per 9 hours * W2 workers. The wage cost for shift 3 is $190 per 9 hours * W3 workers.\nSo the objective function is 135W1 + 140W2 + 190W3.\n```Objective Function\nMinimize: 135W1 + 140W2 + 190W3\n```\n\n# Constraints:\nWe need to ensure that the demand for each time window is met. The demand constraint for each time window is given by the sum of the workers needed for the shifts that cover that time window.\n```Constraints\nW1 + W3 >= 55 //demand constraint for time window 1\nW1 >= 46 //demand constraint for time window 2\nW1 + W2 >= 59 //demand constraint for time window 3\nW2 >= 23 //demand constraint for time window 4\nW2 + W3 >= 60 //demand constraint for time window 5\nW3 >= 38 //demand constraint for time window 6\nW3 + W1 >= 20 //demand constraint for time window 7\nW1 >= 30 //demand constraint for time window 8\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nW1 = LpVariable(\"W1\", lowBound=0, cat='Integer') # number of workers needed for shift 1\nW2 = LpVariable(\"W2\", lowBound=0, cat='Integer') # number of workers needed for shift 2\nW3 = LpVariable(\"W3\", lowBound=0, cat='Integer') # number of workers needed for shift 3\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"StaffScheduling\", LpMinimize)\n\n# Define the objective function\nobjective = 135 * W1 + 140 * W2 + 190 * W3\nproblem += objective # minimize the total wage cost\n\n# Define the constraints\nproblem += W1 + W3 >= 55 # demand constraint for time window 1\nproblem += W1 >= 46 # demand constraint for time window 2\nproblem += W1 + W2 >= 59 # demand constraint for time window 3\nproblem += W2 >= 23 # demand constraint for time window 4\nproblem += W2 + W3 >= 60 # demand constraint for time window 5\nproblem += W3 >= 38 # demand constraint for time window 6\nproblem += W3 + W1 >= 20 # demand constraint for time window 7\nproblem += W1 >= 30 # demand constraint for time window 8\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of workers for shift 1:\", W1.value())\nprint(\"The number of workers for shift 2:\", W2.value())\nprint(\"The number of workers for shift 3:\", W3.value())\nprint(\"The total wage cost:\", objective.value())\n",
        "results": {
            "The number of workers for shift 1": "46.0",
            "The number of workers for shift 2": "23.0",
            "The number of workers for shift 3": "38.0",
            "The total wage cost": "16650.0"
        },
        "type": "linear-table",
        "index": 579,
        "length": 2186,
        "var_num": 3
    },
    {
        "question": "A city employs seasonal and permanent snow removers. A seasonal snow remover works 6 hours per shift and gets paid $120. A permanent snow remover works 10 hours per shift and gets paid $250. Currently the city needs 300 hours of snow remover labor after a heavy snowfall. If the city has a budget of $6500, how many of each type of worker should be hired to minimize the total number of snow removers?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_seasonal_removers = LpVariable(\"NumSeasonalRemovers\", lowBound=0, cat='Integer') # number of seasonal removers\nnum_permanent_removers = LpVariable(\"NumPermanentRemovers\", lowBound=0, cat='Integer') # number of permanent removers\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SnowRemovers\", LpMinimize)\n\n# Define the objective function\nobjective = num_seasonal_removers + num_permanent_removers\nproblem += objective # minimize the total number of snow removers\n\n# Define the constraints\nproblem += 6 * num_seasonal_removers + 10 * num_permanent_removers >= 300 # the city needs at least 300 hours of labor\nproblem += 120 * num_seasonal_removers + 250 * num_permanent_removers <= 6500 # the cost must be within the budget\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of seasonal removers:\", num_seasonal_removers.value())\nprint(\"The number of permanent removers:\", num_permanent_removers.value())\nprint(\"The total number of snow removers:\", objective.value())",
        "results": {
            "The number of seasonal removers": "35.0",
            "The number of permanent removers": "9.0",
            "The total number of snow removers": "44.0"
        },
        "formulation": "minimize x+y\nSubject to: \n6x+10y >= 300\n120x+250y <= 6500 (end)",
        "type": "linear-notable",
        "index": 580,
        "length": 401,
        "var_num": 2
    },
    {
        "question": "A cone is made from a circular sheet with a radius of 2m, by cutting out a sector and gluing the cut edges of the remaining piece together. What is the maximum attainable volume for the cone?",
        "scenario": "## Define Variables:\nA cone is made from a circular sheet with a radius of 1m, by cutting out a sector and gluing the cut edges of the remaining piece together.\n// variables: {\"angle of the cutted sector\": \"\u03b8\"}, where \u03b8 >= 0, \u03b8 <= 2\u03c0\n\n## Define Objective Function:\nWhat is the maximum attainable volume for the cone?\n// The formula for the volume of the cone is V = (1/3)\u03c0r^2h, where r is the radius of the base of the cone and h is the height of the cone. We need to find the r and h\n// The circumference of the base of the cone is equal to the length of the arc of the sector cut out from the circular sheet. This can be represented as 2\u03c0r = R\u03b8, R=2m, where \u03b8 is the angle of the sector in radians. So r = \u03b8 / \u03c0\n// The slant height of the cone is equal to the radius of the circular sheet. This can be represented as \u221a(r^2 + h^2) = R. Squaring both sides, we get r^2 + h^2 = R^2. So h = \u221a(4 - r^2)\n// So, the volume of the cone is V = (1/3)\u03c0r^2h = (1/3)\u03c0 * (\u03b8 / \u03c0)^2 * \u221a(4 - (\u03b8 / \u03c0)^2)\n// The objective function is: Maximize V = (1/3)\u03c0 * (\u03b8 / \u03c0)^2 * \u221a(4 - (\u03b8 / \u03c0)^2)",
        "code": "from pyscipopt import Model\nimport math\n\n# Create a new model\nmodel = Model()\n\n# Define variables\ntheta = model.addVar(lb=0, ub=2*math.pi, vtype=\"CONTINUOUS\", name=\"theta\")  # angle of the cutted sector\n\n# Define objective function\nV = model.addVar('V')\nmodel.setObjective(V, \"maximize\")\nmodel.addCons(V == (1/3) * math.pi * (theta / math.pi)**2 * (4 - (theta / math.pi)**2)**0.5)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The angle of the cutted sector for the maximum volume:\", model.getVal(theta))\n    print(\"The maximum volume of the cone: \", model.getVal(V))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The angle of the cutted sector for the maximum volume": "5.130271220877978",
            "The maximum volume of the cone": "3.224532575115765"
        },
        "type": "nonlinear-notable",
        "index": 581,
        "length": 191,
        "var_num": 1
    },
    {
        "question": "A woman on a diet needs to eat two types of meal preps, a smoothie and a protein bar. Each smoothie contains 2 units of protein and 300 calories. Each protein bar contains 7 units of protein and 250 calories. The woman must eat 2 times more protein bars than smoothies. If the woman can consume at most 2000 calories, how many of each should she eat or drink to maximize her protein intake?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_smoothies = LpVariable(\"NumSmoothies\", lowBound=0, cat='Integer') # number of smoothies\nnum_protein_bars = LpVariable(\"NumProteinBars\", lowBound=0, cat='Integer') # number of protein bars\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MealPrepDiet\", LpMaximize)\n\n# Define the objective function\nobjective = 2 * num_smoothies + 7 * num_protein_bars\nproblem += objective # maximize the total protein intake\n\n# Define the constraints\nproblem += 300 * num_smoothies + 250 * num_protein_bars <= 2000 # the calories must be at most 2000\nproblem += num_protein_bars == 2 * num_smoothies # protein bars must be twice as many as smoothies\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of smoothies:\", num_smoothies.value())\nprint(\"The number of protein bars:\", num_protein_bars.value())\nprint(\"The amount of protein consumed:\", objective.value())",
        "results": {
            "The number of smoothies": "2.0",
            "The number of protein bars": "4.0",
            "The amount of protein consumed": "32.0"
        },
        "formulation": "maximize 2x+7y\nSubject to: \n300x+250y <= 2000\ny >= 2x (end)",
        "type": "linear-notable",
        "index": 582,
        "length": 390,
        "var_num": 2
    },
    {
        "question": "Chip Green is the head groundskeeper at Birdie Valley Golf Club. For the mix of grass for the golf course, Chip has decided that the best fertilizer would be a 10-8-12 mixture. Chip can buy a 10-8-12 mix of fertilizer for $21.75 per 100 pounds, but there are other fertilizers on the market at a variety of prices. The chemical content and prices of the fertilizers are given in the following Table. Chip would like to determine whether or not he could buy several fertilizers and mix them together to obtain a 10-8-12 mixture at a lower cost than $21.75 per 100 pounds. Recognizing that it might be impossible to obtain an exact 10-8-12 mix from the fertilizers, Chip is willing to accept chemical percentages of at least the target amounts, but no more than 0.5% above them (so the nitrogen level should be between 10% and 10.5%; the phosphorus level should be between 8% and 8.5%; the potash level should be between 12% and 12.5%). Please determine the proportion of each fertilizers in the compost. \n\nTable (Chemical content and price per 100 pounds of each fertilizer):\n| Fertilizer | Nitrogen (a) | Phosphorus (b) | Potash (c) | Price ($/100 lbs) |\n|------------|--------------|----------------|------------|-------------------|\n| Fertilizer 1 | 10           | 8              | 12         | 21.75             |\n| Fertilizer 2 | 8            | 11             | 15         | 23.75             |\n| Fertilizer 3 | 12           | 7              | 12         | 22.00             |\n| Fertilizer 4 | 10           | 10             | 10         | 19.50             |\n| Fertilizer 5 | 15           | 10             | 6          | 18.50             |",
        "formulation": "# Variables:\nTo determine the optimal quantities of each fertilizer to buy, let's denote the number of bags of Fertilizer 1 as F1, the number of bags of Fertilizer 2 as F2, the number of bags of Fertilizer 3 as F3, the number of bags of Fertilizer 4 as F4, and the number of bags of Fertilizer 5 as F5.\n```Variables\nF1 // number of bags of Fertilizer 1\nF2 // number of bags of Fertilizer 2\nF3 // number of bags of Fertilizer 3\nF4 // number of bags of Fertilizer 4\nF5 // number of bags of Fertilizer 5\nF1, F2, F3, F4, F5 >= 0 and they are integers // non-negative and integer variables\n```\n\n# Objective Function:\nWe want to minimize the cost of the fertilizers per 100 pounds, so the objective function is the sum of the cost of each fertilizer multiplied by the respective quantity. The cost of Fertilizer 1 is $21.75 per 100 pounds * F1 bags, the cost of Fertilizer 2 is $23.75 per 100 pounds * F2 bags, the cost of Fertilizer 3 is $22.00 per 100 pounds * F3 bags, the cost of Fertilizer 4 is $19.50 per 100 pounds * F4 bags, and the cost of Fertilizer 5 is $18.50 per 100 pounds * F5 bags.\nSo the objective function is 21.75F1 + 23.75F2 + 22.00F3 + 19.50F4 + 18.50F5.\n```Objective Function\nMinimize: 21.75F1 + 23.75F2 + 22.00F3 + 19.50F4 + 18.50F5\n```\n\n# Constraints:\n- The maximum cost of the fertilizers per 100 pounds should be less than or equal to $21.75. This can be represented as 21.75F1 + 23.75F2 + 22.00F3 + 19.50F4 + 18.50F5 <= 21.75.\n- The minimum and maximum percentages of nitrogen, phosphorus, and potash should be within the specified ranges. The minimum percentage of nitrogen is 10%, so the sum of the nitrogen content of each fertilizer multiplied by their respective quantities should be greater than or equal to 10. Similarly, the maximum percentage of nitrogen is 10.5%, so the sum of the nitrogen content of each fertilizer multiplied by their respective quantities should be less than or equal to 10.5. The same logic applies to phosphorus and potash.\n- The sum of the quantities of each fertilizer should be equal to 1, as we want to obtain a mixture.\n```Constraints\n21.75F1 + 23.75F2 + 22.00F3 + 19.50F4 + 18.50F5 <= 21.75\n10F1 + 8F2 + 12F3 + 10F4 + 15F5 >= 10\n10F1 + 8F2 + 12F3 + 10F4 + 15F5 <= 10.5\n8F1 + 11F2 + 7F3 + 10F4 + 10F5 >= 8\n8F1 + 11F2 + 7F3 + 10F4 + 10F5 <= 8.5\n12F1 + 15F2 + 12F3 + 10F4 + 6F5 >= 12\n12F1 + 15F2 + 12F3 + 10F4 + 6F5 <= 12.5\nF1 + F2 + F3 + F4 + F5 = 1\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nF1 = LpVariable(\"F1\", lowBound=0, upBound=1, cat='Continuous') # The proportion of Fertilizer 1 in the compost\nF2 = LpVariable(\"F2\", lowBound=0, upBound=1, cat='Continuous') # The proportion of Fertilizer 2 in the compost\nF3 = LpVariable(\"F3\", lowBound=0, upBound=1, cat='Continuous') # The proportion of Fertilizer 3 in the compost\nF4 = LpVariable(\"F4\", lowBound=0, upBound=1, cat='Continuous') # The proportion of Fertilizer 4 in the compost\nF5 = LpVariable(\"F5\", lowBound=0, upBound=1, cat='Continuous') # The proportion of Fertilizer 5 in the compost\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"FertilizerMix\", LpMinimize)\n\n# Define the objective function\nobjective = 21.75 * F1 + 23.75 * F2 + 22.00 * F3 + 19.50 * F4 + 18.50 * F5\nproblem += objective # minimize the total cost of fertilizers\n\n# Define the constraints\nproblem += 21.75 * F1 + 23.75 * F2 + 22.00 * F3 + 19.50 * F4 + 18.50 * F5 <= 21.75\nproblem += 10 * F1 + 8 * F2 + 12 * F3 + 10 * F4 + 15 * F5 >= 10\nproblem += 10 * F1 + 8 * F2 + 12 * F3 + 10 * F4 + 15 * F5 <= 10.5\nproblem += 8 * F1 + 11 * F2 + 7 * F3 + 10 * F4 + 10 * F5 >= 8\nproblem += 8 * F1 + 11 * F2 + 7 * F3 + 10 * F4 + 10 * F5 <= 8.5\nproblem += 12 * F1 + 15 * F2 + 12 * F3 + 10 * F4 + 6 * F5 >= 12\nproblem += 12 * F1 + 15 * F2 + 12 * F3 + 10 * F4 + 6 * F5 <= 12.5\nproblem += F1 + F2 + F3 + F4 + F5 == 1\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The quantity of Fertilizer 1:\", F1.value())\nprint(\"The quantity of Fertilizer 2:\", F2.value())\nprint(\"The quantity of Fertilizer 3:\", F3.value())\nprint(\"The quantity of Fertilizer 4:\", F4.value())\nprint(\"The quantity of Fertilizer 5:\", F5.value())\nprint(\"The minimum cost per 100 pounds:\", objective.value())\n",
        "results": {
            "The quantity of Fertilizer 1": "0.65",
            "The quantity of Fertilizer 2": "0.1",
            "The quantity of Fertilizer 3": "0.1",
            "The quantity of Fertilizer 4": "0.15",
            "The quantity of Fertilizer 5": "0.0"
        },
        "type": "linear-table",
        "index": 583,
        "length": 1644,
        "var_num": 5
    },
    {
        "question": "Wilson Creek Farm has 200 acres of land available for planting. The owner is considering planting three crops: corn, soybeans, and wheat. The owner expects to have only 35,000 gallons of water available per week to use for the crops, and during the growing season he will only have 8000 person-hours of labor available. The expected profit per bushel of each crop is $1.00 for corn, $1.60 for soybeans, and $3.00 for wheat. The owner can use any mix of crops (i.e., he can plant the same crop on all 200 acres or he can plant all three crops in different proportions). Formulate the problem as a linear program to find the profit-maximizing planting strategy. The production yield, water requirements, and labor requirements for a salable crop are given in the following Table.\n\nTable (Crop data including bushels produced per acre, water required per acre per week, and person-hours of labor required per acre):\n| Crop      | Bushels/Acre Produced | Water Required (gal/acre/week) | Person-Hours Labor Required/Acre |\n| --------- | --------------------- | ------------------------------ | -------------------------------- |\n| Corn      | 300                   | 200                            | 35                               |\n| Soybeans  | 200                   | 150                            | 40                               |\n| Wheat     | 80                    | 125                            | 30                               |",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal planting strategy for corn, soybeans, and wheat. Let's denote the number of acres planting corn as C, the number of acres planting soybeans as S, and the number of acres planting wheat as W.\n```Variables\nC // acres planting corn\nS // acres planting soybeans\nW // acres planting wheat\nC, S, W >= 0 // non-negative variables\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function (profit of planting strategy) is given by the sum of the profit from each crop. The profit from planting corn is $1.00 per bushel * 300 bushels/acre * C acres. The profit from planting soybeans is $1.60 per bushel * 200 bushels/acre * S acres. The profit from planting wheat is $3.00 per bushel * 80 bushels/acre * W acres. Therefore, the objective function is 1.00 * 300 * C + 1.60 * 200 * S + 3.00 * 80 * W = 300C + 320S + 240W.\n```Objective Function\nMaximize: 300C + 320S + 240W\n```\n\n# Constraints:\nWe have several constraints that need to be considered:\n1. Available acres: The total number of acres planting corn, soybeans, and wheat cannot exceed the available 200 acres.\n2. Available gallons of water: The total water required for planting corn, soybeans, and wheat cannot exceed the available 35,000 gallons per week. The water required for planting corn is 200 gallons/acre/week * C acres, the water required for planting soybeans is 150 gallons/acre/week * S acres, and the water required for planting wheat is 125 gallons/acre/week * W acres.\n3. Available person-hours of labor: The total labor required for planting corn, soybeans, and wheat cannot exceed the available 8,000 person-hours. The labor required for planting corn is 35 person-hours/acre * C acres, the labor required for planting soybeans is 40 person-hours/acre * S acres, and the labor required for planting wheat is 30 person-hours/acre * W acres.\n```Constraints\nC + S + W <= 200 // Available acres\n200C + 150S + 125W <= 35000 // Available gallons of water\n35C + 40S + 30W <= 8000 // Available person-hours of labor\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nC = LpVariable(\"Corn\", lowBound=0, cat='Continuous') # acres planting corn\nS = LpVariable(\"Soybeans\", lowBound=0, cat='Continuous') # acres planting soybeans\nW = LpVariable(\"Wheat\", lowBound=0, cat='Continuous') # acres planting wheat\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 300 * C + 320 * S + 240 * W\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += C + S + W <= 200 # Available acres\nproblem += 200 * C + 150 * S + 125 * W <= 35000 # Available gallons of water\nproblem += 35 * C + 40 * S + 30 * W <= 8000 # Available person-hours of labor\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Acres of Corn to plant:\", C.value())\nprint(\"Acres of Soybeans to plant:\", S.value())\nprint(\"Acres of Wheat to plant:\", W.value())\nprint(\"Maximum Profit:\", value(problem.objective))\n",
        "results": {
            "Acres of Corn to plant": "0",
            "Acres of Soybeans to plant": "200.0",
            "Acres of Wheat to plant": "0.0",
            "Maximum Profit": "64000.0"
        },
        "type": "linear-table",
        "index": 584,
        "length": 1442,
        "var_num": 3
    },
    {
        "question": "A battery store sells AA and D batteries. The store has a budget of $1000 and each AA battery costs $1 and each D battery costs $3. The monthly demand for both batteries will not exceed 1000. If the profit per AA battery is $0.50 and the profit per D battery is $1, how many of each should the store stock in order to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of AA batteries\", \"name\": \"x\"}, {\"description\": \"number of D batteries\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit from batteries\", \"function\": \"0.5x + y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"budget constraint\", \"function\": \"x + 3y <= 1000\"}, {\"description\": \"demand constraint\", \"function\": \"x + y <= 1000\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_aa_batteries = LpVariable(\"NumAABatteries\", lowBound=0, cat='Integer') # number of AA batteries\nnum_d_batteries = LpVariable(\"NumDBatteries\", lowBound=0, cat='Integer') # number of D batteries\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BatteryStoreProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 0.5 * num_aa_batteries + 1 * num_d_batteries\nproblem += objective # maximize the total profit from batteries\n\n# Define the constraints\nproblem += num_aa_batteries + 3 * num_d_batteries <= 1000 # budget constraint\nproblem += num_aa_batteries + num_d_batteries <= 1000 # demand constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of AA batteries to stock:\", num_aa_batteries.value())\nprint(\"The number of D batteries to stock:\", num_d_batteries.value())\nprint(\"Total profit:\", objective.value())\n",
        "results": {
            "The number of AA batteries to stock": "1000.0",
            "The number of D batteries to stock": "0.0",
            "Total profit": "500.0"
        },
        "type": "linear-notable",
        "index": 585,
        "length": 334,
        "var_num": 2
    },
    {
        "question": "Wilson Creek Farm has 200 acres of land available for planting. The owner is considering planting three crops: corn, soybeans, and wheat. The production yield, water requirements, and labor requirements for a salable crop are given here. The owner expects to have only 35,000 gallons of water available per week to use for the crops, and during the growing season he will only have 8000 person-hours of labor available. The expected profit per bushel of each crop is $1.00 for corn, $1.60 for soybeans, and $3.00 for wheat. The owner can use any mix of crops (i.e., he can plant the same crop on all 200 acres or he can plant all three crops in different proportions). Formulate the problem as a linear program to find the profit-maximizing planting strategy. \nHere is the data for the problem:\nCrop: Corn, Soybeans, Wheat \nBushels/Acre Produced: 300 200 80 \nWater Required (gal/acre/week): 200 150 125 \nPerson-Hours Labor Required/Acre: 35 40 30",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal planting strategy for corn, soybeans, and wheat. Let's denote the number of acres planting corn as C, the number of acres planting soybeans as S, and the number of acres planting wheat as W.\n```Variables\nC // acres planting corn\nS // acres planting soybeans\nW // acres planting wheat\nC, S, W >= 0 // non-negative variables\n```\n\n# Objective Function:\nWe want to maximize the profit, so the objective function (profit of planting strategy) is given by the sum of the profit from each crop. The profit from planting corn is $1.00 per bushel * 300 bushels/acre * C acres. The profit from planting soybeans is $1.60 per bushel * 200 bushels/acre * S acres. The profit from planting wheat is $3.00 per bushel * 80 bushels/acre * W acres. Therefore, the objective function is 1.00 * 300 * C + 1.60 * 200 * S + 3.00 * 80 * W = 300C + 320S + 240W.\n```Objective Function\nMaximize: 300C + 320S + 240W\n```\n\n# Constraints:\nWe have several constraints that need to be considered:\n1. Available acres: The total number of acres planting corn, soybeans, and wheat cannot exceed the available 200 acres.\n2. Available gallons of water: The total water required for planting corn, soybeans, and wheat cannot exceed the available 35,000 gallons per week. The water required for planting corn is 200 gallons/acre/week * C acres, the water required for planting soybeans is 150 gallons/acre/week * S acres, and the water required for planting wheat is 125 gallons/acre/week * W acres.\n3. Available person-hours of labor: The total labor required for planting corn, soybeans, and wheat cannot exceed the available 8,000 person-hours. The labor required for planting corn is 35 person-hours/acre * C acres, the labor required for planting soybeans is 40 person-hours/acre * S acres, and the labor required for planting wheat is 30 person-hours/acre * W acres.\n```Constraints\nC + S + W <= 200 // Available acres\n200C + 150S + 125W <= 35000 // Available gallons of water\n35C + 40S + 30W <= 8000 // Available person-hours of labor\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nC = LpVariable(\"Corn\", lowBound=0, cat='Continuous') # acres planting corn\nS = LpVariable(\"Soybeans\", lowBound=0, cat='Continuous') # acres planting soybeans\nW = LpVariable(\"Wheat\", lowBound=0, cat='Continuous') # acres planting wheat\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 300 * C + 320 * S + 240 * W\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += C + S + W <= 200 # Available acres\nproblem += 200 * C + 150 * S + 125 * W <= 35000 # Available gallons of water\nproblem += 35 * C + 40 * S + 30 * W <= 8000 # Available person-hours of labor\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"Acres of Corn to plant:\", C.value())\nprint(\"Acres of Soybeans to plant:\", S.value())\nprint(\"Acres of Wheat to plant:\", W.value())\nprint(\"Maximum Profit:\", value(problem.objective))\n",
        "results": {
            "Acres of Corn to plant": "0",
            "Acres of Soybeans to plant": "200.0",
            "Acres of Wheat to plant": "0.0",
            "Maximum Profit": "64000.0"
        },
        "type": "linear-notable",
        "index": 586,
        "length": 946,
        "var_num": 3
    },
    {
        "question": "Glueco produces three types of glue on two different production lines. Each line can be utilized by up to seven workers at a time. Workers are paid $500 per week on production line 1, and $900 per week on production line 2. A week of production costs $1,000 to set up production line 1 and $2,000 to set up production line 2. During a week on a production line, each worker produces the number of units of glue shown in Table: Glue Production Line 1, 2; the glue 1, 2, 3: (20, 30, 40), (50, 35, 45). Each week, at least 120 units of glue 1, at least 150 units of glue 2, and at least 200 units of glue 3 must be produced. Formulate an LP to minimize the total cost of meeting weekly demands.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal number of workers working on each production line. Let's denote the number of workers working on production line 1 as x and the number of workers working on production line 2 as y.\n```Variables\nx // number of workers working on production line 1\ny // number of workers working on production line 2\nx, y >= 0 and they are integers // non-negativity integer variables\n```\n\n# Objective Function:\nWe want to minimize the total cost of meeting weekly demands. The total cost consists of the cost of workers' salaries and the setup cost for each production line. The cost of workers' salaries is $500 per week for production line 1 and $900 per week for production line 2. The setup cost for production line 1 is $1,000 and the setup cost for production line 2 is $2,000. Therefore, the objective function is given by the sum of these costs: 500x + 900y + 1000 + 2000.\n```Objective Function\nMinimize: 500x + 900y + 3000\n```\n\n# Constraints:\nWe have several constraints that need to be satisfied:\n- The minimum number of units of glue 1, glue 2, and glue 3 that must be produced each week: 20x + 50y >= 120, 30x + 35y >= 150, and 40x + 45y >= 200.\n- The number of workers working on each production line cannot exceed 7: x <= 7 and y <= 7.\n- Non-negativity constraint: x, y >= 0.\n```Constraints\n20x + 50y >= 120 // minimum number of glue 1\n30x + 35y >= 150 // minimum number of glue 2\n40x + 45y >= 200 // minimum number of glue 3\nx <= 7 // maximum number of workers on production line 1\ny <= 7 // maximum number of workers on production line 2\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"WorkersOnLine1\", lowBound=0, upBound=7, cat='Integer') # number of workers on production line 1\ny = LpVariable(\"WorkersOnLine2\", lowBound=0, upBound=7, cat='Integer') # number of workers on production line 2\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MinimizeProductionCost\", LpMinimize)\n\n# Define the objective function\nobjective = 500 * x + 900 * y + 3000\nproblem += objective # minimize the total cost\n\n# Define the constraints\nproblem += 20 * x + 50 * y >= 120 # minimum number of glue 1\nproblem += 30 * x + 35 * y >= 150 # minimum number of glue 2\nproblem += 40 * x + 45 * y >= 200 # minimum number of glue 3\nproblem += x <= 7 # maximum number of workers on production line 1\nproblem += y <= 7 # maximum number of workers on production line 2\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of workers on production line 1:\", x.value())\nprint(\"The number of workers on production line 2:\", y.value())\nprint(\"The total cost:\", objective.value())\n",
        "results": {
            "The number of workers on production line 1": "4.0",
            "The number of workers on production line 2": "1.0",
            "The total cost": "5900.0"
        },
        "type": "linear-table",
        "index": 587,
        "length": 691,
        "var_num": 2
    },
    {
        "question": "A burger chain is buying both gas and electric grills to make burger patties. A gas grill can cook 20 patties per minute while an electric grill can cook 30 patties per minute. The gas grill requires 20 units of cooking oil per minute while the electric grill requires 25 units of cooking oil per minute. Since the gas grill patties taste better, the number of electric grills must be less than the number of gas grills. Further, the burger chain wants to be able to make at least 150 patties per minute and use at most 140 units of cooking oil per minute. How many of each grill should be bought to minimize the total number of grills in the store?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_gas_grills = LpVariable(\"NumGasGrills\", lowBound=0, cat='Integer') # number of gas grills\nnum_electric_grills = LpVariable(\"NumElectricGrills\", lowBound=0, cat='Integer') # number of electric grills\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"BurgerChain\", LpMinimize)\n\n# Define the objective function\nobjective = num_gas_grills + num_electric_grills\nproblem += objective # minimize the total number of grills\n\n# Define the constraints\nproblem += 20 * num_gas_grills + 30 * num_electric_grills >= 150 # patties per minute should be at least 150\nproblem += 20 * num_gas_grills + 25 * num_electric_grills <= 140 # oil usage per minute must be at most 140\nproblem += num_electric_grills <= num_gas_grills - 1 # the number of electric grills must be less than the number of gas grills\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of gas grills:\", num_gas_grills.value())\nprint(\"The number of electric grills:\", num_electric_grills.value())\nprint(\"Total number of grills in the store:\", objective.value())",
        "results": {
            "The number of gas grills": "3.6",
            "The number of electric grills": "2.6",
            "Total number of grills in the store": "6.2"
        },
        "formulation": "minimize x+y\nSubject to: \ny <= x\n20x+30y >= 150\n20x+25y <= 140 (end)",
        "type": "linear-notable",
        "index": 588,
        "length": 649,
        "var_num": 2
    },
    {
        "question": "A toy store sells plush toys and dolls. Each plush toy costs the store $3 and each doll costs the store $2. The store owner can spend at most $700 on inventory. Each plush toy is then sold for a profit of $4 while each doll is sold for a profit of $2. The owner estimates that at least 90 plush toys but at most 190 plush toys are sold each month. He also estimates that the number of dolls sold is at most twice the amount of plush toys sold. How many of each should be bought and sold to maximize profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_plush_toys = LpVariable(\"NumPlushToys\", lowBound=90, upBound=190, cat='Integer') # number of plush toys\nnum_dolls = LpVariable(\"NumDolls\", lowBound=0, cat='Integer') # number of dolls\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ToyStoreProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 4 * num_plush_toys + 2 * num_dolls\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 3 * num_plush_toys + 2 * num_dolls <= 700 # the cost must be at most $700\nproblem += num_dolls <= 2 * num_plush_toys # dolls sold is at most twice the amount of plush toys sold\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of plush toys:\", num_plush_toys.value())\nprint(\"The number of dolls:\", num_dolls.value())\nprint(\"The profit made:\", objective.value())",
        "results": {
            "The number of plush toys": "190.0",
            "The number of dolls": "65.0",
            "The profit made": "890.0"
        },
        "formulation": "maximize 4x+2y\nSubject to: \n3x+2y <= 700\nx >= 90\nx <= 190\ny <= 2x (end)",
        "type": "linear-notable",
        "index": 589,
        "length": 506,
        "var_num": 2
    },
    {
        "question": "A restaurant has two combos available to their customers, an original and an experimental meal. The original meal typically generates 20 units of food waste and 45 units of wrapping waste and takes 10 minutes to cook. In comparison, the experimental meal generates 25 units of food waste and 35 units of wrapping waste and takes 15 minutes to cook. The restaurant can have at most 900 units of wrapping waste and can have at most 800 units of food waste as regulated by the government. How many of each combo should be pushed for by the waiting staff to minimize the cooking time?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_original_meal = LpVariable(\"NumOriginalMeal\", lowBound=0, cat='Integer')  # number of original meals\nnum_experimental_meal = LpVariable(\"NumExperimentalMeal\", lowBound=0, cat='Integer')  # number of experimental meals\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"RestaurantMealCombos\", LpMinimize)\n\n# Define the objective function\nobjective = 10 * num_original_meal + 15 * num_experimental_meal\nproblem += objective  # minimize the total cooking time\n\n# Define the constraints\nproblem += 45 * num_original_meal + 35 * num_experimental_meal <= 900  # wrapping waste constraint\nproblem += 20 * num_original_meal + 25 * num_experimental_meal <= 800  # food waste constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of original meals:\", num_original_meal.value())\nprint(\"The number of experimental meals:\", num_experimental_meal.value())\nprint(\"The total cooking time:\", objective.value())",
        "results": {
            "The number of original meals": "0.0",
            "The number of experimental meals": "0.0",
            "The total cooking time": "0.0"
        },
        "formulation": "minimize 15y+10x\nSubject to: \n35y+45x <= 900\n20x+25y <= 800 (end)",
        "type": "linear-notable",
        "index": 590,
        "length": 580,
        "var_num": 2
    },
    {
        "question": "Find the area of the largest rectangle that fits inside a semicircle. one side of the rectangle is along the diameter of the semicircle. The radius of the semicircle is 10. Please provide the area and the shape of the rectangle that maximizes the area.",
        "scenario": "## Define Variables:\nFind the area of the largest rectangle that fits inside a semicircle.\n// variables: {\"width of the rectangle\": \"w\", \"height of the rectangle\": \"h\"}, where w, h >= 0\n\n## Define Objective Function:\nPlease provide the area and the shape of the rectangle that maximizes the area.\n// The area of the rectangle is given by the product of the width and the height.\n// Therefore, the objective function is: Maximize w * h\n\n## Generate Constraint-1:\nOne side of the rectangle is along the diameter of the semicircle. The radius of the semicircle is 10.\n// the height of the rectangle cannot exceed the radius, and the width of the rectangle cannot exceed the diameter. Therefore, the constraints are w <= 10 and h <= 20.\n// The center of the semicircle should lie on the center of the height of the rectangle. Therefore, (h/2)^2 + w^2 <= 10^2\n// So the constraints are: w <= 10, h <= 20, (h/2)^2 + w^2 <= 10^2",
        "code": "from pyscipopt import Model\nimport math\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nw = model.addVar(vtype=\"CONTINUOUS\", name=\"w\") # width of the rectangle\nh = model.addVar(vtype=\"CONTINUOUS\", name=\"h\") # height of the rectangle\n\n# Define objective function\nobj = model.addVar(vtype=\"CONTINUOUS\", name=\"obj\")\nmodel.addCons(obj == w * h)\nmodel.setObjective(obj, \"maximize\")\n\n# Add constraints\nmodel.addCons(w <= 10)\nmodel.addCons(h <= 20)\nmodel.addCons((h/2)**2 + w**2 <= 10**2)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The width of the rectangle: \", model.getVal(w))\n    print(\"The height of the rectangle: \", model.getVal(h))\n    print(\"The maximum area of the rectangle: \", model.getVal(w * h))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The width of the rectangle": "7.07106783679653",
            "The height of the rectangle": "14.142135701147744",
            "The maximum area of the rectangle": "100.00000"
        },
        "type": "nonlinear-notable",
        "index": 591,
        "length": 252,
        "var_num": 2
    },
    {
        "question": "A manufacturer can sell product 1 at a profit of $2/unit and product 2 at a profit of $5/unit. Three units of raw material are needed to manufacture 1 unit of product 1, and 6 units of raw material are needed to manufacture 1 unit of product 2. A total of 120 units of raw material are available. If any of product 1 is produced, a setup cost of $10 is incurred, and if any of product 2 is produced, a setup cost of $20 is incurred. Maximize profits.",
        "formulation": "# Define Variables:\nFirst, we need to determine the optimal production quantities for product 1 and product 2 that adhere to the constraints given. Let's denote the number of units of product 1 as P1 and the number of units of product 2 as P2.\nWe also need to define boolean variables to represent whether each product is produced or not. Let's denote the boolean variable for product 1 as B1 and the boolean variable for product 2 as B2.\n```Variables\nP1 //number of units of product 1 to produce\nP2 //number of units of product 2 to produce\nP1, P2 >= 0 and they are integers //non-negative integer variables\n```\n\n# Objective Function:\nWe want to maximize the profit from selling product 1 and product 2. The profit from selling product 1 is $2\nunit and the profit from selling product 2 is $5/unit, which can be written as: 2P1 + 5P2.\nWe also need to subtract the setup costs for each product. The setup cost for product 1 is $10 and the setup\ncost for product 2 is $20, which can be written as: -10B1 - 20B2.\n```Objective\nMaximize: 2P1 + 5P2 - 10 * min(P1, 1) - 20 * min(P2, 1)\n```\n\n# Constraints:\nWe need to make sure that we have enough raw material to produce the desired quantities of product 1 and\nproduct 2. We need 3 units of raw material to produce 1 unit of product 1 and 6 units of raw material to\nproduce 1 unit of product 2. We have a total of 120 units of raw material available, which can be written as:\n3P1 + 6P2 <= 120.\n```Constraints\n3P1 + 6P2 <= 120 //A total of 120 units of raw material are available\n```",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nP1 = LpVariable(\"Product1\", lowBound=0, cat='Integer') # number of units of product 1 to produce\nP2 = LpVariable(\"Product2\", lowBound=0, cat='Integer') # number of units of product 2 to produce\nB1 = LpVariable(\"Boolean1\", cat='Binary') # boolean variable for product 1\nB2 = LpVariable(\"Boolean2\", cat='Binary') # boolean variable for product 2\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"ManufacturerProfitMaximization\", LpMaximize)\n\n# Define the objective function\nobjective = 2 * P1 + 5 * P2 - 10 * B1 - 20 * B2\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 3 * P1 + 6 * P2 <= 120 # raw material constraint\nproblem += P1 - 1000000 * B1 <= 0 # linking constraint for product 1\nproblem += P2 - 1000000 * B2 <= 0 # linking constraint for product 2\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of units of product 1 to produce:\", P1.value())\nprint(\"The number of units of product 2 to produce:\", P2.value())\nprint(\"The total profit:\", objective.value())\n",
        "results": {
            "The number of units of product 1 to produce": "0.0",
            "The number of units of product 2 to produce": "20.0",
            "The total profit": "80.0"
        },
        "type": "linear-notable",
        "index": 592,
        "length": 450,
        "var_num": 3
    },
    {
        "question": "A flight has 150 tickets. A profit of $150 is made on each first-class ticket and a profit of $350 is made on each economy-class ticket. The flight reserves at least 20 tickets to be first-class but because the journey is short, at least 3 times as many people prefer to save money and travel by economy-class than first-class. How many of each ticket type should be sold to passengers to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of first-class tickets\", \"name\": \"x\"}, {\"description\": \"number of economy-class tickets\", \"name\": \"y\"}], \"objective\": [{\"description\": \"profit from selling tickets\", \"function\": \"150x + 350y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"total number of tickets constraint\", \"function\": \"x + y <= 150\"}, {\"description\": \"minimum number of first-class tickets constraint\", \"function\": \"x >= 20\"}, {\"description\": \"minimum number of economy-class tickets constraint\", \"function\": \"y >= 3x\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_first_class = LpVariable(\"NumFirstClass\", lowBound=20, cat='Integer')  # number of first-class tickets\nnum_economy_class = LpVariable(\"NumEconomyClass\", lowBound=0, cat='Integer')  # number of economy-class tickets\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeFlightProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 150 * num_first_class + 350 * num_economy_class\nproblem += objective  # maximize the total profit from selling tickets\n\n# Define the constraints\nproblem += num_first_class + num_economy_class <= 150  # total number of tickets constraint\nproblem += num_economy_class >= 3 * num_first_class  # at least 3 times as many economy-class tickets as first-class\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of first-class tickets:\", num_first_class.value())\nprint(\"The number of economy-class tickets:\", num_economy_class.value())\nprint(\"The maximum profit:\", objective.value())\n",
        "results": {
            "The number of first-class tickets": "20.0",
            "The number of economy-class tickets": "130.0",
            "The maximum profit": "48500.0"
        },
        "type": "linear-notable",
        "index": 593,
        "length": 405,
        "var_num": 2
    },
    {
        "question": "A souvenir shop makes wooden elephants and tigers with plastic ornaments. Each elephant requires 50 grams of wood and 20 grams of plastic. Each tiger requires 40 grams of wood and 30 grams of plastic. In a week, 5000 grams of wood and 4000 grams of plastic are available. The profit per elephant sold is $5 and the profit per tiger sold is $4. How many of each should be made in order to maximize profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_elephants = LpVariable(\"NumElephants\", lowBound=0, cat='Integer') # number of elephants\nnum_tigers = LpVariable(\"NumTigers\", lowBound=0, cat='Integer') # number of tigers\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"SouvenirProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 5 * num_elephants + 4 * num_tigers\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += 50 * num_elephants + 40 * num_tigers <= 5000 # the wood consumption must not exceed 5000 grams\nproblem += 20 * num_elephants + 30 * num_tigers <= 4000 # the plastic consumption must not exceed 4000 grams\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of elephants made:\", num_elephants.value())\nprint(\"The number of tigers made:\", num_tigers.value())\nprint(\"The total profit:\", objective.value())",
        "results": {
            "The number of elephants made": "0.0",
            "The number of tigers made": "125.0",
            "The total profit": "500.0"
        },
        "formulation": "maximize 5x+4y\nSubject to: \n50x+40y <= 5000\n20x+30y <= 4000 (end)",
        "type": "linear-notable",
        "index": 594,
        "length": 404,
        "var_num": 2
    },
    {
        "question": "A butcher shop is buying meat slicers for their shop, a manual and automatic slicer. The manual slicer can cut 5 slices per minute while the automatic slicer can cut 8 slices per minute. In addition, to make sure all the parts operate smoothly, the manual slicer requires 3 units of grease per minute while the automatic slicer requires 6 units of grease per minute. Since the automatic slicer does not need someone to operate it, the number of manual slicers must be less than the number of automatic slicers. In addition, the butcher shop needs to be able to cut at least 50 slices per minute but can use at most 40 units of grease per minute. How many of each slicer should the butcher shop buy to minimize the total number of slicers in the shop?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_manual_slicers = LpVariable(\"NumManualSlicers\", lowBound=0, cat='Integer') # number of manual slicers\nnum_automatic_slicers = LpVariable(\"NumAutomaticSlicers\", lowBound=0, cat='Integer') # number of automatic slicers\n\n# Define the question as a minimum problem\nproblem = LpProblem(\"ButcherShopSlicers\", LpMinimize)\n\n# Define the objective function\nobjective = num_manual_slicers + num_automatic_slicers\nproblem += objective # minimize the total number of slicers\n\n# Define the constraints\nproblem += 5 * num_manual_slicers + 8 * num_automatic_slicers >= 50 # at least 50 slices per minute\nproblem += 3 * num_manual_slicers + 6 * num_automatic_slicers <= 40 # at most 40 units of grease per minute\nproblem += num_manual_slicers <= num_automatic_slicers - 1 # manual slicers must be less than automatic slicers\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of manual slicers:\", num_manual_slicers.value())\nprint(\"The number of automatic slicers:\", num_automatic_slicers.value())\nprint(\"The minimum total number of slicers:\", objective.value())",
        "results": {
            "The number of manual slicers": "1.0",
            "The number of automatic slicers": "6.0",
            "The minimum total number of slicers": "7.0"
        },
        "formulation": "minimize x+y\nSubject to: \nx <= y\n5x+8y >= 50\n3x+6y <= 35 (end)",
        "type": "linear-notable",
        "index": 595,
        "length": 750,
        "var_num": 2
    },
    {
        "question": "A electronics store sells premium desktops with more power as well as regular desktops for everyday use. Each premium desktop costs the store $2000 to make and yields a profit of $500. Each regular desktop costs the store $1000 to make and yields a profit of $300. The store sells at most 200 desktops each month and wants to spend at most $300000 on making the desktops. How many of each should be made and sold to maximize profit?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_premium_desktops = LpVariable(\"NumPremiumDesktops\", lowBound=0, cat='Integer') # number of premium desktops\nnum_regular_desktops = LpVariable(\"NumRegularDesktops\", lowBound=0, cat='Integer') # number of regular desktops\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeProfit\", LpMaximize)\n\n# Define the objective function\nobjective = 500 * num_premium_desktops + 300 * num_regular_desktops\nproblem += objective # maximize the total profit\n\n# Define the constraints\nproblem += num_premium_desktops + num_regular_desktops <= 200 # at most 200 desktops each month\nproblem += 2000 * num_premium_desktops + 1000 * num_regular_desktops <= 300000 # cost on making desktops\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of premium desktops:\", num_premium_desktops.value())\nprint(\"The number of regular desktops:\", num_regular_desktops.value())\nprint(\"The total profit:\", objective.value())",
        "results": {
            "The number of premium desktops": "100.0",
            "The number of regular desktops": "100.0",
            "The total profit": "80000.0"
        },
        "formulation": "maximize 500x+300y\nSubject to: \nx+y <= 200\n2000x+1000y <= 300000 (end)",
        "type": "linear-notable",
        "index": 596,
        "length": 432,
        "var_num": 2
    },
    {
        "question": "A paint store mixes two brands of paint, Ruby and Sapphire, to create a new mixture of paint. A can of Ruby paint costs $12 and a can of Sapphire paint costs $15. A can of Ruby paint contains 2 units of dye, 4 units of thinner, and 5 units of water. A can of Sapphire paint contains 4 units of dye, 6 units of thinner, and 2 units of water. The minimum requirements of dye, thinner, and water for the new mixture are 15 units, 20 units, and 18 units respectively. How many cans of each paint brand should be mixed to achieve the new mixture at a minimum cost?",
        "formulation": "{\"variable\": [{\"description\": \"number of cans of Ruby paint\", \"name\": \"x\"}, {\"description\": \"number of cans of Sapphire paint\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total cost of paint\", \"function\": \"12x + 15y\", \"sense\": \"Minimize\"}], \"constraint\": [{\"description\": \"minimum dye requirement\", \"function\": \"2x + 4y >= 15\"}, {\"description\": \"minimum thinner requirement\", \"function\": \"4x + 6y >= 20\"}, {\"description\": \"minimum water requirement\", \"function\": \"5x + 2y >= 18\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"CansOfRubyPaint\", lowBound=0, cat='Integer')  # number of cans of Ruby paint\ny = LpVariable(\"CansOfSapphirePaint\", lowBound=0, cat='Integer')  # number of cans of Sapphire paint\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"PaintMixing\", LpMinimize)\n\n# Define the objective function\nobjective = 12 * x + 15 * y\nproblem += objective  # minimize the total cost of paint\n\n# Define the constraints\nproblem += 2 * x + 4 * y >= 15  # minimum dye requirement\nproblem += 4 * x + 6 * y >= 20  # minimum thinner requirement\nproblem += 5 * x + 2 * y >= 18  # minimum water requirement\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of cans of Ruby paint:\", x.value())\nprint(\"The number of cans of Sapphire paint:\", y.value())\nprint(\"The minimum cost of the mixture:\", objective.value())\n",
        "results": {
            "The number of cans of Ruby paint": "4",
            "The number of cans of Sapphire paint": "2",
            "The minimum cost of the mixture": "78"
        },
        "type": "linear-notable",
        "index": 597,
        "length": 559,
        "var_num": 2
    },
    {
        "question": "A student group makes chocolate chip and oatmeal cookies. To make a batch of chocolate chip cookies, it take 10 minutes to gather the ingredients, 20 minutes to mix them, and 50 minutes for baking. To make a batch of oatmeal cookies, it takes 8 minutes to gather the ingredients, 15 minutes to mix them, and 30 minutes for baking.  Per week, the group has 1000 minutes to gather ingredients, 1200 minutes for mixing, and 3000 minutes for baking. If the profit per batch of chocolate chip cookies is $12 and the profit per batch of oatmeal cookies is $15, how many batches of each should be made to maximize profit?",
        "formulation": "{\"variable\": [{\"description\": \"number of batches of chocolate chip cookies\", \"name\": \"x\"}, {\"description\": \"number of batches of oatmeal cookies\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total profit\", \"function\": \"12x + 15y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"time constraint for gathering ingredients\", \"function\": \"10x + 8y <= 1000\"}, {\"description\": \"time constraint for mixing\", \"function\": \"20x + 15y <= 1200\"}, {\"description\": \"time constraint for baking\", \"function\": \"50x + 30y <= 3000\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"ChocolateChipBatches\", lowBound=0, cat='Integer') # number of batches of chocolate chip cookies\ny = LpVariable(\"OatmealBatches\", lowBound=0, cat='Integer') # number of batches of oatmeal cookies\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"MaximizeCookieProfit\", LpMaximize)\n\n# Define the objective function\nproblem += 12 * x + 15 * y  # maximize the total profit\n\n# Define the constraints\nproblem += 10 * x + 8 * y <= 1000 # time constraint for gathering ingredients\nproblem += 20 * x + 15 * y <= 1200 # time constraint for mixing\nproblem += 50 * x + 30 * y <= 3000 # time constraint for baking\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of batches of chocolate chip cookies:\", x.value())\nprint(\"The number of batches of oatmeal cookies:\", y.value())\nprint(\"Total profit:\", value(problem.objective))\n",
        "results": {
            "The number of batches of chocolate chip cookies": "0.0",
            "The number of batches of oatmeal cookies": "80.0",
            "Total profit": "1200.0"
        },
        "type": "linear-notable",
        "index": 598,
        "length": 614,
        "var_num": 2
    },
    {
        "question": "An office is buying printers for their headquarters, a premium model and regular model. The premium model can print 30 pages per minute while the regular model can print 20 pages per minute. In addition, the premium model requires 4 units of ink per minute while the regular model requires 3 units of ink per minute. The office wants to make sure that at least 200 pages can be printed per minute and that at most 35 units of ink are used per minute.  Since the premium model is more user friendly, the number regular printers must be less than the number of premium printers. How many of each printer should be bought to minimize the total number of printers in the office?",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nnum_premium_printers = LpVariable(\"NumPremiumPrinters\", lowBound=0, cat='Integer') # number of premium printers\nnum_regular_printers = LpVariable(\"NumRegularPrinters\", lowBound=0, cat='Integer') # number of regular printers\n\n# Define the question as a minimum problem\nproblem = LpProblem(\"PrinterPurchase\", LpMinimize)\n\n# Define the objective function\nobjective = num_premium_printers + num_regular_printers\nproblem += objective # minimize the total number of printers\n\n# Define the constraints\nproblem += 30 * num_premium_printers + 20 * num_regular_printers >= 200 # at least 200 pages per minute\nproblem += 4 * num_premium_printers + 3 * num_regular_printers <= 35 # at most 35 units of ink per minute\nproblem += num_regular_printers <= num_premium_printers - 1 # regular printers must be less than premium printers\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of premium printers:\", num_premium_printers.value())\nprint(\"The number of regular printers:\", num_regular_printers.value())\nprint(\"The total number of printers:\", objective.value())",
        "results": {
            "The number of premium printers": "7.0",
            "The number of regular printers": "0.0",
            "The total number of printers": "7.0"
        },
        "formulation": "minimize x+y\nSubject to: \n30x+20y >= 200\n4x+3y <= 35\ny <= x (end)",
        "type": "linear-notable",
        "index": 599,
        "length": 674,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA city is planning to install three types of renewable energy facilities: solar, wind, and hydro. The city needs to decide the number of each type of facility to build and the amount of land required for each facility. The goal is to maximize the total energy output while considering the available land and budget constraints.\n// variables: {\"number of solar facilities\": \"SolarFacilities\", \"number of wind facilities\": \"WindFacilities\", \"number of hydro facilities\": \"HydroFacilities\", \"land required per solar facility\": \"SolarLand\", \"land required per wind facility\": \"WindLand\", \"land required per hydro facility\": \"HydroLand\"}, where SolarFacilities, WindFacilities, HydroFacilities, SolarLand, WindLand, HydroLand >= 0 and SolarFacilities, WindFacilities, HydroFacilities, SolarLand, WindLand, HydroLand are integers.\n\n## Define Objective Function:\nThe energy output per solar facility is 500 kWh, per wind facility is 700 kWh, and per hydro facility is 1000 kWh. The city aims to maximize the total daily energy output from all facilities.\n// Energy_Solar = 500 * SolarFacilities\n// Energy_Wind = 700 * WindFacilities\n// Energy_Hydro = 1000 * HydroFacilities\n// So, the objective function is: Maximize (Energy_Solar + Energy_Wind + Energy_Hydro)\n\n## Generate Constraint-1:\nThe city has a total of 100 acres of land available for the installation of these facilities.\n// SolarFacilities * SolarLand + WindFacilities * WindLand + HydroFacilities * HydroLand <= 100\n\n## Generate Constraint-2:\nThe city has a budget of $1000,000 for the construction of these facilities. The cost per solar facility is $10,000, per wind facility is $15,000, and per hydro facility is $20,000.\n// 10000 * SolarFacilities + 15000 * WindFacilities + 20000 * HydroFacilities <= 1000000\n\n## Generate Constraint-3:\nThe city aims to have at least 10,000 kWh of energy output per day.\n// Energy_Solar + Energy_Wind + Energy_Hydro >= 10000\n\n## Generate Constraint-4:\nThe city wants to ensure that at least 100 facility is installed.\n// SolarFacilities + WindFacilities + HydroFacilities >= 100",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nSolarFacilities = model.addVar(vtype=\"INTEGER\", name=\"SolarFacilities\") # number of solar facilities\nmodel.addCons(SolarFacilities >= 0)\nWindFacilities = model.addVar(vtype=\"INTEGER\", name=\"WindFacilities\") # number of wind facilities\nmodel.addCons(WindFacilities >= 0)\nHydroFacilities = model.addVar(vtype=\"INTEGER\", name=\"HydroFacilities\") # number of hydro facilities\nmodel.addCons(HydroFacilities >= 0)\nSolarLand = model.addVar(vtype=\"INTEGER\", name=\"SolarLand\") # land required per solar facility\nmodel.addCons(SolarLand >= 0)\nWindLand = model.addVar(vtype=\"INTEGER\", name=\"WindLand\") # land required per wind facility\nmodel.addCons(WindLand >= 0)\nHydroLand = model.addVar(vtype=\"INTEGER\", name=\"HydroLand\") # land required per hydro facility\nmodel.addCons(HydroLand >= 0)\n\n# Define objective function\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == 500 * SolarFacilities + 700 * WindFacilities + 1000 * HydroFacilities)\n\n# Add constraints\nmodel.addCons(SolarFacilities * SolarLand + WindFacilities * WindLand + HydroFacilities * HydroLand <= 100)\nmodel.addCons(10000 * SolarFacilities + 15000 * WindFacilities + 20000 * HydroFacilities <= 1000000)\nmodel.addCons(500 * SolarFacilities + 700 * WindFacilities + 1000 * HydroFacilities >= 10000)\nmodel.addCons(SolarFacilities + WindFacilities + HydroFacilities >= 100)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Total daily Energy Output: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Total daily Energy Output": "50000.0"
        },
        "question": "A city is planning to install three types of renewable energy facilities: solar, wind, and hydro. The city needs to decide the number of each type of facility to build and the amount of land required for each facility. The goal is to maximize the total energy output while considering the available land and budget constraints. The city has a total of 100 acres of land available for the installation of these facilities. The city has a budget of $1000,000 for the construction of these facilities. The cost per solar facility is $10,000, per wind facility is $15,000, and per hydro facility is $20,000. The city aims to have at least 10,000 kWh of energy output per day. The city wants to ensure that at least 100 facility is installed. The energy output per solar facility is 500 kWh, per wind facility is 700 kWh, and per hydro facility is 1000 kWh. The city aims to maximize the total daily energy output from all facilities.",
        "type": "nonlinear-notable",
        "index": 600,
        "length": 929,
        "var_num": 6
    },
    {
        "question": "An open-top box is to be made from a  24 inch by  36 inch  piece of cardboard by removing a square from each corner of the box and folding up the flaps on each side. What size square should be cut out of each corner to get a box with the maximum volume?",
        "scenario": "## Define Variables:\nAn open-top box is to be made from a rectangular piece of cardboard by removing a square from each corner of the box and folding up the flaps on each side. The cardboard is 24 inches by 36 inches.\n// variables: {\"side length of the square to be cut out\": \"x\"}, where x >= 0\n// The side length of the square to be cut out should not exceed half of the shorter side of the cardboard, so x <= 12\n\n## Define Objective Function:\nDetermine the length of the side of the square that should be cut out to maximize the volume of the box.\n// We want to maximize the volume of the box, which is given by the product of its length, width, and height. After cutting out the squares, the length of the box is 36 - 2x, the width is 24 - 2x, and the height is x. Therefore, the volume V is (36 - 2x)(24 - 2x)x\n// So, the objective function is: Maximize V = (36 - 2x)(24 - 2x)x",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nx = model.addVar(vtype=\"CONTINUOUS\", name=\"x\") # side length of the square to be cut out\n\n# Define objective function\nV = model.addVar('V')\nmodel.setObjective(V, \"maximize\")\nmodel.addCons(V == (36 - 2*x)*(24 - 2*x)*x)\n\n# Add constraints\nmodel.addCons(x >= 0)\nmodel.addCons(x <= 12)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"The side length of the square to be cut out: \", model.getVal(x))\n    print(\"The maximum volume of the box: \", model.getVal(V))\nelse:\n    print(\"No solution found.\")\n",
        "results": {
            "The side length of the square to be cut out": "4.708460647429426",
            "The maximum volume of the box": "1825.2965881577802"
        },
        "type": "nonlinear-notable",
        "index": 601,
        "length": 253,
        "var_num": 1
    },
    {
        "question": "A gardener has a field of 100 square feet in which he plants sunflowers and roses. The seed for sunflowers costs $67 per square foot. The seed for roses costs $52 per square foot. The gardener has available a budget of $6500 to spend on seeds. The profit per square foot of sunflowers is $450 and the profit per square foot of roses is $100. Find the optimal solution for the gardener in order to maximize profit.",
        "formulation": "{\"variable\": [{\"description\": \"number of square feet planted with sunflowers\", \"name\": \"x\"}, {\"description\": \"number of square feet planted with roses\", \"name\": \"y\"}], \"objective\": [{\"description\": \"total profit\", \"function\": \"450x + 100y\", \"sense\": \"Maximize\"}], \"constraint\": [{\"description\": \"budget constraint\", \"function\": \"67x + 52y <= 6500\"}, {\"description\": \"area constraint\", \"function\": \"x + y <= 100\"}, {\"description\": \"non-negativity constraint\", \"function\": \"x, y >= 0\"}]}",
        "code": "# Import PuLP library\nfrom pulp import *\n\n# Define the decision variables\nx = LpVariable(\"Sunflowers\", lowBound=0, cat='Continuous') # number of square feet planted with sunflowers\ny = LpVariable(\"Roses\", lowBound=0, cat='Continuous') # number of square feet planted with roses\n\n# Define the question as a maximum or minimum problem\nproblem = LpProblem(\"GardenerProfitMaximization\", LpMaximize)\n\n# Define the objective function\nproblem += 450 * x + 100 * y # maximize the total profit\n\n# Define the constraints\nproblem += 67 * x + 52 * y <= 6500 # budget constraint\nproblem += x + y <= 100 # area constraint\n\n# Solve the problem\nstatus = problem.solve()\n\n# Output the answer\nprint(\"The number of square feet planted with sunflowers:\", x.value())\nprint(\"The number of square feet planted with roses:\", y.value())\nprint(\"The total profit:\", value(problem.objective))\n",
        "results": {
            "The number of square feet planted with sunflowers": "97.014925",
            "The number of square feet planted with roses": "0.0",
            "The total profit": "43656.716250000005"
        },
        "type": "linear-notable",
        "index": 602,
        "length": 413,
        "var_num": 2
    },
    {
        "scenario": "## Define Variables:\nA company produces four types of gadgets: G1, G2, G3, and G4, and a new type of gadget G5. They need to determine the quantities of each gadget to produce.\n// variables: {\"quantity of G1\": \"G1\", \"quantity of G2\": \"G2\", \"quantity of G3\": \"G3\", \"quantity of G4\": \"G4\", \"quantity of G5\": \"G5\"}, where G1, G2, G3, G4, G5 >= 0 and G1, G2, G3, G4, G5 are integers.\n\n## Define Objective Function:\nFor G1, the revenue per unit is $50, the production time per unit is 2 hours, and the material cost per unit is $20. \nFor G2, the revenue per unit is $60, the production time per unit is 3 hours, and the material cost per unit is $25. \nFor G3, the revenue per unit is $70, the production time per unit is 4 hours, and the material cost per unit is $30.\nFor G4, the revenue per unit is $80, the production time per unit is 5 hours, and the material cost per unit is $35.\nFor G5, the revenue per unit is $90, the production time per unit is 6 hours, and the material cost per unit is $40.\nThe company only has one production line and can only produce one gadget at a time. The company wants to maximize the profit efficiency (profit per hour of production time).\n// Profit_G1 = 50 * G1 - 20 * G1\n// Profit_G2 = 60 * G2 - 25 * G2\n// Profit_G3 = 70 * G3 - 30 * G3\n// Profit_G4 = 80 * G4 - 35 * G4\n// Profit_G5 = 90 * G5 - 40 * G5\n// So, the objective function is: Maximize (Profit_G1 + Profit_G2 + Profit_G3 + Profit_G4 + Profit_G5) / (2 * G1 + 3 * G2 + 4 * G3 + 5 * G4 + 6 * G5)\n\n## Generate Constraint-1:\nThe company has a limited production time of 100 hours.\n// 2 * G1 + 3 * G2 + 4 * G3 + 5 * G4 + 6 * G5 <= 100\n\n## Generate Constraint-2:\nThe company has a budget of $5000 for material costs.\n// 20 * G1 + 25 * G2 + 30 * G3 + 35 * G4 + 40 * G5 <= 5000\n\n## Generate Constraint-3:\nTo meet market demand, the company needs to produce at least 40 gadgets in total.\n// G1 + G2 + G3 + G4 + G5 >= 40",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define variables\nG1 = model.addVar(vtype=\"INTEGER\", name=\"G1\") # quantity of G1\nmodel.addCons(G1 >= 0)\nG2 = model.addVar(vtype=\"INTEGER\", name=\"G2\") # quantity of G2\nmodel.addCons(G2 >= 0)\nG3 = model.addVar(vtype=\"INTEGER\", name=\"G3\") # quantity of G3\nmodel.addCons(G3 >= 0)\nG4 = model.addVar(vtype=\"INTEGER\", name=\"G4\") # quantity of G4\nmodel.addCons(G4 >= 0)\nG5 = model.addVar(vtype=\"INTEGER\", name=\"G5\") # quantity of G5\nmodel.addCons(G5 >= 0)\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\nobj = model.addVar('obj')\nprofit = 50 * G1 - 20 * G1 + 60 * G2 - 25 * G2 + 70 * G3 - 30 * G3 + 80 * G4 - 35 * G4 + 90 * G5 - 40 * G5\ntime = 2 * G1 + 3 * G2 + 4 * G3 + 5 * G4 + 6 * G5\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj * time == profit)\n\n# Add constraints\nmodel.addCons(2 * G1 + 3 * G2 + 4 * G3 + 5 * G4 + 6 * G5 <= 100)\nmodel.addCons(20 * G1 + 25 * G2 + 30 * G3 + 35 * G4 + 40 * G5 <= 5000)\nmodel.addCons(G1 + G2 + G3 + G4 + G5 >= 40)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Quantity of G1: \", model.getVal(G1))\n    print(\"Quantity of G2: \", model.getVal(G2))\n    print(\"Quantity of G3: \", model.getVal(G3))\n    print(\"Quantity of G4: \", model.getVal(G4))\n    print(\"Quantity of G5: \", model.getVal(G5))\n    print(\"Profit Efficiency: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Quantity of G1": "40.0",
            "Quantity of G2": "0.0",
            "Quantity of G3": "0.0",
            "Quantity of G4": "0.0",
            "Quantity of G5": "0.0",
            "Profit Efficiency": "15.00000"
        },
        "question": "A company produces four types of gadgets: G1, G2, G3, and G4, and a new type of gadget G5. They need to determine the quantities of each gadget to produce. For G2, the revenue per unit is $60, the production time per unit is 3 hours, and the material cost per unit is $25. For G3, the revenue per unit is $70, the production time per unit is 4 hours, and the material cost per unit is $30. For G4, the revenue per unit is $80, the production time per unit is 5 hours, and the material cost per unit is $35. For G5, the revenue per unit is $90, the production time per unit is 6 hours, and the material cost per unit is $40. The company only has one production line and can only produce one gadget at a time. The company wants to maximize the profit efficiency (profit per hour of production time). The company has a limited production time of 100 hours. The company has a budget of $5000 for material costs. To meet market demand, the company needs to produce at least 40 gadgets in total. For G1, the revenue per unit is $50, the production time per unit is 2 hours, and the material cost per unit is $20.",
        "type": "nonlinear-notable",
        "index": 603,
        "length": 1106,
        "var_num": 5
    },
    {
        "scenario": "## Define Variables:\nA manufacturing company produces three types of electronic devices: Smartphones, Tablets, and Laptops. The company needs to decide the production quantities for each device to optimize its resources and profits.\n// variables: {\"quantity of Smartphones\": \"S\", \"quantity of Tablets\": \"T\", \"quantity of Laptops\": \"L\"}, where S, T, L >= 0 and S, T, L are integers.\n\n## Define Objective Function:\nThe profit per unit for Smartphones is $100, for Tablets is $150, and for Laptops is $200. Due to economies of scale, the profit per unit increases by $0.5 for each unit produced above 100 for each type of device. The company aims to maximize its total profit from the sales of these devices.\n// Profit_S = max(100 + 0.5 * (S - 100), 100) * S\n// Profit_T = max(150 + 0.5 * (T - 100), 150) * T\n// Profit_L = max(200 + 0.5 * (L - 100), 200) * L\n// So, the objective function is: Maximize Profit_S + Profit_T + Profit_L\n\n## Generate Constraint-1:\nThe company has a limited supply of a critical component used in all devices, which is 1500 units. Each Smartphone requires 1 unit, each Tablet requires 2 units, and each Laptop requires 3 units of this component.\n// S + 2T + 3L <= 1500\n\n## Generate Constraint-2:\nThere is a market demand constraint for each device. The maximum demand for Smartphones is 500 units, for Tablets is 400 units, and for Laptops is 300 units.\n// S <= 500; T <= 400; L <= 300\n\n## Generate Constraint-3:\nThe company has a total production capacity constraint of 1000 units across all devices.\n// S + T + L <= 1000",
        "code": "from pyscipopt import Model\n\n# Create a new model\nmodel = Model()\n\n# Define objective function\n## if the objective is not linear, we can convert it to linear by adding a new variable and a constraint\n\"\"\"\nProfit_S = max(100 + 0.5 * (S - 100), 100) * S\nProfit_T = max(150 + 0.5 * (T - 100), 150) * T\nProfit_L = max(200 + 0.5 * (L - 100), 200) * L\n\"\"\"\n\nS1 = model.addVar(vtype=\"INTEGER\", name=\"S1\", lb=0, ub=100)\nS2 = model.addVar(vtype=\"INTEGER\", name=\"S2\", lb=100, ub=500)\nS_b1 = model.addVar(vtype=\"B\", name=\"S_b1\")\nS_b2 = model.addVar(vtype=\"B\", name=\"S_b2\")\nmodel.addCons(S_b1 + S_b2 == 1)\nS = S1*S_b1 + S2*S_b2\nProfit_S = 100 * S1 * S_b1 + (100 + 0.5 * (S2 - 100)) * S2 * S_b2\n\nT1 = model.addVar(vtype=\"INTEGER\", name=\"T1\", lb=0, ub=100)\nT2 = model.addVar(vtype=\"INTEGER\", name=\"T2\", lb=100, ub=400)\nT_b1 = model.addVar(vtype=\"B\", name=\"T_b1\")\nT_b2 = model.addVar(vtype=\"B\", name=\"T_b2\")\nmodel.addCons(T_b1 + T_b2 == 1)\nT = T1*T_b1 + T2*T_b2\nProfit_T = 150 * T1 * T_b1 + (150 + 0.5 * (T2 - 100)) * T2 * T_b2\n\nL1 = model.addVar(vtype=\"INTEGER\", name=\"L1\", lb=0, ub=100)\nL2 = model.addVar(vtype=\"INTEGER\", name=\"L2\", lb=100, ub=300)\nL_b1 = model.addVar(vtype=\"B\", name=\"L_b1\")\nL_b2 = model.addVar(vtype=\"B\", name=\"L_b2\")\nmodel.addCons(L_b1 + L_b2 == 1)\nL = L1*L_b1 + L2*L_b2\nProfit_L = 200 * L1 * L_b1 + (200 + 0.5 * (L2 - 100)) * L2 * L_b2\n\nobj = model.addVar('obj')\nmodel.setObjective(obj, \"maximize\")\nmodel.addCons(obj == Profit_S + Profit_T + Profit_L)\n\n# Add constraints\nmodel.addCons(S + 2 * T + 3 * L <= 1500)\nmodel.addCons(S + T + L <= 1000)\n\n# Solve the problem\nmodel.optimize()\n\n# Print the solution (variables' values and objective value)\nprint('-'*10)\nif model.getStatus() == \"optimal\":\n    print(\"Quantity of Smartphone: \", model.getVal(S1)*model.getVal(S_b1) + model.getVal(S2)*model.getVal(S_b2))\n    print(\"Quantity of Tablet: \", model.getVal(T1)*model.getVal(T_b1) + model.getVal(T2)*model.getVal(T_b2))\n    print(\"Quantity of Laptop: \", model.getVal(L1)*model.getVal(L_b1) + model.getVal(L2)*model.getVal(L_b2))\n    print(\"Total Profit: \", model.getObjVal())\nelse:\n    print(\"The problem could not be solved to optimality.\")",
        "results": {
            "Quantity of Smartphone": "500.0",
            "Quantity of Tablet": "400.0",
            "Quantity of Laptop": "66.0",
            "Total Profit": "283200.00000000"
        },
        "question": "A manufacturing company produces three types of electronic devices: Smartphones, Tablets, and Laptops. The company needs to decide the production quantities for each device to optimize its resources and profits. The company has a limited supply of a critical component used in all devices, which is 1500 units. Each Smartphone requires 1 unit, each Tablet requires 2 units, and each Laptop requires 3 units of this component. There is a market demand constraint for each device. The maximum demand for Smartphones is 500 units, for Tablets is 400 units, and for Laptops is 300 units. The company has a total production capacity constraint of 1000 units across all devices. The profit per unit for Smartphones is $100, for Tablets is $150, and for Laptops is $200. Due to economies of scale, the profit per unit increases by $0.5 for each unit produced above 100 for each type of device. The company aims to maximize its total profit from the sales of these devices.",
        "type": "nonlinear-notable",
        "index": 604,
        "length": 965,
        "var_num": 3
    }
]